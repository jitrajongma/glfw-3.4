#line 1 "win32_monitor.c"
#line 1 "<built-in>"
#line 1 "<built-in>"
#line 146 "<built-in>"
#line 1 "<command line>"
#line 1 "<built-in>"
#line 1 "win32_monitor.c"
#line 28 "win32_monitor.c"
#line 1 "./internal.h"
#line 49 "./internal.h"
#line 1 "./../include/GLFW/glfw3.h"
#line 103 "./../include/GLFW/glfw3.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\stddef.h"
#line 24 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\stddef.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\_stddef.h"
#line 21 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\_stddef.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\_defs.h"
#line 21 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\_stddef.h"




#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\_null.h"
#line 25 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\_stddef.h"
#line 45 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\_stddef.h"
typedef int ssize_t;
#line 70 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\_stddef.h"
   typedef unsigned int size_t;
#line 85 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\_stddef.h"
typedef size_t rsize_t;




typedef int errno_t;
#line 106 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\_stddef.h"
typedef int ptrdiff_t;
#line 120 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\_stddef.h"
typedef unsigned short wchar_t;
#line 130 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\_stddef.h"
typedef wchar_t wint_t;
#line 139 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\_stddef.h"
typedef wchar_t wctype_t;




typedef double max_align_t;
#line 155 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\_stddef.h"
extern unsigned long __cdecl __threadid(void);
#line 24 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\stddef.h"
#line 104 "./../include/GLFW/glfw3.h"




#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\stdint.h"
#line 24 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\stdint.h"
typedef __int8 int8_t;
typedef __int16 int16_t;
typedef __int32 int32_t;
typedef __int64 int64_t;

typedef unsigned __int8 uint8_t;
typedef unsigned __int16 uint16_t;
typedef unsigned __int32 uint32_t;
typedef unsigned __int64 uint64_t;





typedef __int8 int_least8_t;
typedef __int16 int_least16_t;
typedef __int32 int_least32_t;
typedef __int64 int_least64_t;

typedef unsigned __int8 uint_least8_t;
typedef unsigned __int16 uint_least16_t;
typedef unsigned __int32 uint_least32_t;
typedef unsigned __int64 uint_least64_t;





typedef __int8 int_fast8_t;
typedef __int16 int_fast16_t;
typedef __int32 int_fast32_t;
typedef __int64 int_fast64_t;

typedef unsigned __int8 uint_fast8_t;
typedef unsigned __int16 uint_fast16_t;
typedef unsigned __int32 uint_fast32_t;
typedef unsigned __int64 uint_fast64_t;
#line 70 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\stdint.h"
typedef int32_t intptr_t;
typedef uint32_t uintptr_t;





typedef int64_t intmax_t;
typedef uint64_t uintmax_t;
#line 109 "./../include/GLFW/glfw3.h"
#line 1365 "./../include/GLFW/glfw3.h"
typedef void (*GLFWglproc)(void);
#line 1379 "./../include/GLFW/glfw3.h"
typedef void (*GLFWvkproc)(void);
#line 1391 "./../include/GLFW/glfw3.h"
typedef struct GLFWmonitor GLFWmonitor;
#line 1403 "./../include/GLFW/glfw3.h"
typedef struct GLFWwindow GLFWwindow;
#line 1415 "./../include/GLFW/glfw3.h"
typedef struct GLFWcursor GLFWcursor;
#line 1468 "./../include/GLFW/glfw3.h"
typedef void* (* GLFWallocatefun)(size_t size, void* user);
#line 1524 "./../include/GLFW/glfw3.h"
typedef void* (* GLFWreallocatefun)(void* block, size_t size, void* user);
#line 1566 "./../include/GLFW/glfw3.h"
typedef void (* GLFWdeallocatefun)(void* block, void* user);
#line 1590 "./../include/GLFW/glfw3.h"
typedef void (* GLFWerrorfun)(int error_code, const char* description);
#line 1613 "./../include/GLFW/glfw3.h"
typedef void (* GLFWwindowposfun)(GLFWwindow* window, int xpos, int ypos);
#line 1635 "./../include/GLFW/glfw3.h"
typedef void (* GLFWwindowsizefun)(GLFWwindow* window, int width, int height);
#line 1655 "./../include/GLFW/glfw3.h"
typedef void (* GLFWwindowclosefun)(GLFWwindow* window);
#line 1675 "./../include/GLFW/glfw3.h"
typedef void (* GLFWwindowrefreshfun)(GLFWwindow* window);
#line 1696 "./../include/GLFW/glfw3.h"
typedef void (* GLFWwindowfocusfun)(GLFWwindow* window, int focused);
#line 1717 "./../include/GLFW/glfw3.h"
typedef void (* GLFWwindowiconifyfun)(GLFWwindow* window, int iconified);
#line 1738 "./../include/GLFW/glfw3.h"
typedef void (* GLFWwindowmaximizefun)(GLFWwindow* window, int maximized);
#line 1759 "./../include/GLFW/glfw3.h"
typedef void (* GLFWframebuffersizefun)(GLFWwindow* window, int width, int height);
#line 1780 "./../include/GLFW/glfw3.h"
typedef void (* GLFWwindowcontentscalefun)(GLFWwindow* window, float xscale, float yscale);
#line 1806 "./../include/GLFW/glfw3.h"
typedef void (* GLFWmousebuttonfun)(GLFWwindow* window, int button, int action, int mods);
#line 1829 "./../include/GLFW/glfw3.h"
typedef void (* GLFWcursorposfun)(GLFWwindow* window, double xpos, double ypos);
#line 1850 "./../include/GLFW/glfw3.h"
typedef void (* GLFWcursorenterfun)(GLFWwindow* window, int entered);
#line 1871 "./../include/GLFW/glfw3.h"
typedef void (* GLFWscrollfun)(GLFWwindow* window, double xoffset, double yoffset);
#line 1897 "./../include/GLFW/glfw3.h"
typedef void (* GLFWkeyfun)(GLFWwindow* window, int key, int scancode, int action, int mods);
#line 1918 "./../include/GLFW/glfw3.h"
typedef void (* GLFWcharfun)(GLFWwindow* window, unsigned int codepoint);
#line 1945 "./../include/GLFW/glfw3.h"
typedef void (* GLFWcharmodsfun)(GLFWwindow* window, unsigned int codepoint, int mods);
#line 1969 "./../include/GLFW/glfw3.h"
typedef void (* GLFWdropfun)(GLFWwindow* window, int path_count, const char* paths[]);
#line 1990 "./../include/GLFW/glfw3.h"
typedef void (* GLFWmonitorfun)(GLFWmonitor* monitor, int event);
#line 2011 "./../include/GLFW/glfw3.h"
typedef void (* GLFWjoystickfun)(int jid, int event);
#line 2026 "./../include/GLFW/glfw3.h"
typedef struct GLFWvidmode
{


    int width;


    int height;


    int redBits;


    int greenBits;


    int blueBits;


    int refreshRate;
} GLFWvidmode;
#line 2060 "./../include/GLFW/glfw3.h"
typedef struct GLFWgammaramp
{


    unsigned short* red;


    unsigned short* green;


    unsigned short* blue;


    unsigned int size;
} GLFWgammaramp;
#line 2089 "./../include/GLFW/glfw3.h"
typedef struct GLFWimage
{


    int width;


    int height;


    unsigned char* pixels;
} GLFWimage;
#line 2113 "./../include/GLFW/glfw3.h"
typedef struct GLFWgamepadstate
{



    unsigned char buttons[15];



    float axes[6];
} GLFWgamepadstate;
#line 2137 "./../include/GLFW/glfw3.h"
typedef struct GLFWallocator
{



    GLFWallocatefun allocate;



    GLFWreallocatefun reallocate;



    GLFWdeallocatefun deallocate;



    void* user;
} GLFWallocator;
#line 2220 "./../include/GLFW/glfw3.h"
        int glfwInit(void);
#line 2254 "./../include/GLFW/glfw3.h"
        void glfwTerminate(void);
#line 2286 "./../include/GLFW/glfw3.h"
        void glfwInitHint(int hint, int value);
#line 2317 "./../include/GLFW/glfw3.h"
        void glfwInitAllocator(const GLFWallocator* allocator);
#line 2392 "./../include/GLFW/glfw3.h"
        void glfwGetVersion(int* major, int* minor, int* rev);
#line 2426 "./../include/GLFW/glfw3.h"
        const char* glfwGetVersionString(void);
#line 2457 "./../include/GLFW/glfw3.h"
        int glfwGetError(const char** description);
#line 2503 "./../include/GLFW/glfw3.h"
        GLFWerrorfun glfwSetErrorCallback(GLFWerrorfun callback);
#line 2524 "./../include/GLFW/glfw3.h"
        int glfwGetPlatform(void);
#line 2548 "./../include/GLFW/glfw3.h"
        int glfwPlatformSupported(int platform);
#line 2577 "./../include/GLFW/glfw3.h"
        GLFWmonitor** glfwGetMonitors(int* count);
#line 2601 "./../include/GLFW/glfw3.h"
        GLFWmonitor* glfwGetPrimaryMonitor(void);
#line 2626 "./../include/GLFW/glfw3.h"
        void glfwGetMonitorPos(GLFWmonitor* monitor, int* xpos, int* ypos);
#line 2657 "./../include/GLFW/glfw3.h"
        void glfwGetMonitorWorkarea(GLFWmonitor* monitor, int* xpos, int* ypos, int* width, int* height);
#line 2692 "./../include/GLFW/glfw3.h"
        void glfwGetMonitorPhysicalSize(GLFWmonitor* monitor, int* widthMM, int* heightMM);
#line 2727 "./../include/GLFW/glfw3.h"
        void glfwGetMonitorContentScale(GLFWmonitor* monitor, float* xscale, float* yscale);
#line 2753 "./../include/GLFW/glfw3.h"
        const char* glfwGetMonitorName(GLFWmonitor* monitor);
#line 2779 "./../include/GLFW/glfw3.h"
        void glfwSetMonitorUserPointer(GLFWmonitor* monitor, void* pointer);
#line 2803 "./../include/GLFW/glfw3.h"
        void* glfwGetMonitorUserPointer(GLFWmonitor* monitor);
#line 2833 "./../include/GLFW/glfw3.h"
        GLFWmonitorfun glfwSetMonitorCallback(GLFWmonitorfun callback);
#line 2867 "./../include/GLFW/glfw3.h"
        const GLFWvidmode* glfwGetVideoModes(GLFWmonitor* monitor, int* count);
#line 2895 "./../include/GLFW/glfw3.h"
        const GLFWvidmode* glfwGetVideoMode(GLFWmonitor* monitor);
#line 2928 "./../include/GLFW/glfw3.h"
        void glfwSetGamma(GLFWmonitor* monitor, float gamma);
#line 2958 "./../include/GLFW/glfw3.h"
        const GLFWgammaramp* glfwGetGammaRamp(GLFWmonitor* monitor);
#line 2999 "./../include/GLFW/glfw3.h"
        void glfwSetGammaRamp(GLFWmonitor* monitor, const GLFWgammaramp* ramp);
#line 3018 "./../include/GLFW/glfw3.h"
        void glfwDefaultWindowHints(void);
#line 3053 "./../include/GLFW/glfw3.h"
        void glfwWindowHint(int hint, int value);
#line 3091 "./../include/GLFW/glfw3.h"
        void glfwWindowHintString(int hint, const char* value);
#line 3235 "./../include/GLFW/glfw3.h"
        GLFWwindow* glfwCreateWindow(int width, int height, const char* title, GLFWmonitor* monitor, GLFWwindow* share);
#line 3264 "./../include/GLFW/glfw3.h"
        void glfwDestroyWindow(GLFWwindow* window);
#line 3284 "./../include/GLFW/glfw3.h"
        int glfwWindowShouldClose(GLFWwindow* window);
#line 3306 "./../include/GLFW/glfw3.h"
        void glfwSetWindowShouldClose(GLFWwindow* window, int value);
#line 3338 "./../include/GLFW/glfw3.h"
        const char* glfwGetWindowTitle(GLFWwindow* window);
#line 3364 "./../include/GLFW/glfw3.h"
        void glfwSetWindowTitle(GLFWwindow* window, const char* title);
#line 3413 "./../include/GLFW/glfw3.h"
        void glfwSetWindowIcon(GLFWwindow* window, int count, const GLFWimage* images);
#line 3445 "./../include/GLFW/glfw3.h"
        void glfwGetWindowPos(GLFWwindow* window, int* xpos, int* ypos);
#line 3480 "./../include/GLFW/glfw3.h"
        void glfwSetWindowPos(GLFWwindow* window, int xpos, int ypos);
#line 3510 "./../include/GLFW/glfw3.h"
        void glfwGetWindowSize(GLFWwindow* window, int* width, int* height);
#line 3553 "./../include/GLFW/glfw3.h"
        void glfwSetWindowSizeLimits(GLFWwindow* window, int minwidth, int minheight, int maxwidth, int maxheight);
#line 3596 "./../include/GLFW/glfw3.h"
        void glfwSetWindowAspectRatio(GLFWwindow* window, int numer, int denom);
#line 3634 "./../include/GLFW/glfw3.h"
        void glfwSetWindowSize(GLFWwindow* window, int width, int height);
#line 3663 "./../include/GLFW/glfw3.h"
        void glfwGetFramebufferSize(GLFWwindow* window, int* width, int* height);
#line 3700 "./../include/GLFW/glfw3.h"
        void glfwGetWindowFrameSize(GLFWwindow* window, int* left, int* top, int* right, int* bottom);
#line 3733 "./../include/GLFW/glfw3.h"
        void glfwGetWindowContentScale(GLFWwindow* window, float* xscale, float* yscale);
#line 3760 "./../include/GLFW/glfw3.h"
        float glfwGetWindowOpacity(GLFWwindow* window);
#line 3792 "./../include/GLFW/glfw3.h"
        void glfwSetWindowOpacity(GLFWwindow* window, float opacity);
#line 3824 "./../include/GLFW/glfw3.h"
        void glfwIconifyWindow(GLFWwindow* window);
#line 3851 "./../include/GLFW/glfw3.h"
        void glfwRestoreWindow(GLFWwindow* window);
#line 3876 "./../include/GLFW/glfw3.h"
        void glfwMaximizeWindow(GLFWwindow* window);
#line 3908 "./../include/GLFW/glfw3.h"
        void glfwShowWindow(GLFWwindow* window);
#line 3930 "./../include/GLFW/glfw3.h"
        void glfwHideWindow(GLFWwindow* window);
#line 3969 "./../include/GLFW/glfw3.h"
        void glfwFocusWindow(GLFWwindow* window);
#line 3996 "./../include/GLFW/glfw3.h"
        void glfwRequestWindowAttention(GLFWwindow* window);
#line 4018 "./../include/GLFW/glfw3.h"
        GLFWmonitor* glfwGetWindowMonitor(GLFWwindow* window);
#line 4074 "./../include/GLFW/glfw3.h"
        void glfwSetWindowMonitor(GLFWwindow* window, GLFWmonitor* monitor, int xpos, int ypos, int width, int height, int refreshRate);
#line 4111 "./../include/GLFW/glfw3.h"
        int glfwGetWindowAttrib(GLFWwindow* window, int attrib);
#line 4153 "./../include/GLFW/glfw3.h"
        void glfwSetWindowAttrib(GLFWwindow* window, int attrib, int value);
#line 4176 "./../include/GLFW/glfw3.h"
        void glfwSetWindowUserPointer(GLFWwindow* window, void* pointer);
#line 4197 "./../include/GLFW/glfw3.h"
        void* glfwGetWindowUserPointer(GLFWwindow* window);
#line 4232 "./../include/GLFW/glfw3.h"
        GLFWwindowposfun glfwSetWindowPosCallback(GLFWwindow* window, GLFWwindowposfun callback);
#line 4264 "./../include/GLFW/glfw3.h"
        GLFWwindowsizefun glfwSetWindowSizeCallback(GLFWwindow* window, GLFWwindowsizefun callback);
#line 4304 "./../include/GLFW/glfw3.h"
        GLFWwindowclosefun glfwSetWindowCloseCallback(GLFWwindow* window, GLFWwindowclosefun callback);
#line 4340 "./../include/GLFW/glfw3.h"
        GLFWwindowrefreshfun glfwSetWindowRefreshCallback(GLFWwindow* window, GLFWwindowrefreshfun callback);
#line 4375 "./../include/GLFW/glfw3.h"
        GLFWwindowfocusfun glfwSetWindowFocusCallback(GLFWwindow* window, GLFWwindowfocusfun callback);
#line 4405 "./../include/GLFW/glfw3.h"
        GLFWwindowiconifyfun glfwSetWindowIconifyCallback(GLFWwindow* window, GLFWwindowiconifyfun callback);
#line 4435 "./../include/GLFW/glfw3.h"
        GLFWwindowmaximizefun glfwSetWindowMaximizeCallback(GLFWwindow* window, GLFWwindowmaximizefun callback);
#line 4465 "./../include/GLFW/glfw3.h"
        GLFWframebuffersizefun glfwSetFramebufferSizeCallback(GLFWwindow* window, GLFWframebuffersizefun callback);
#line 4496 "./../include/GLFW/glfw3.h"
        GLFWwindowcontentscalefun glfwSetWindowContentScaleCallback(GLFWwindow* window, GLFWwindowcontentscalefun callback);
#line 4534 "./../include/GLFW/glfw3.h"
        void glfwPollEvents(void);
#line 4579 "./../include/GLFW/glfw3.h"
        void glfwWaitEvents(void);
#line 4628 "./../include/GLFW/glfw3.h"
        void glfwWaitEventsTimeout(double timeout);
#line 4648 "./../include/GLFW/glfw3.h"
        void glfwPostEmptyEvent(void);
#line 4673 "./../include/GLFW/glfw3.h"
        int glfwGetInputMode(GLFWwindow* window, int mode);
#line 4738 "./../include/GLFW/glfw3.h"
        void glfwSetInputMode(GLFWwindow* window, int mode, int value);
#line 4767 "./../include/GLFW/glfw3.h"
        int glfwRawMouseMotionSupported(void);
#line 4835 "./../include/GLFW/glfw3.h"
        const char* glfwGetKeyName(int key, int scancode);
#line 4862 "./../include/GLFW/glfw3.h"
        int glfwGetKeyScancode(int key);
#line 4901 "./../include/GLFW/glfw3.h"
        int glfwGetKey(GLFWwindow* window, int key);
#line 4930 "./../include/GLFW/glfw3.h"
        int glfwGetMouseButton(GLFWwindow* window, int button);
#line 4968 "./../include/GLFW/glfw3.h"
        void glfwGetCursorPos(GLFWwindow* window, double* xpos, double* ypos);
#line 5008 "./../include/GLFW/glfw3.h"
        void glfwSetCursorPos(GLFWwindow* window, double xpos, double ypos);
#line 5046 "./../include/GLFW/glfw3.h"
        GLFWcursor* glfwCreateCursor(const GLFWimage* image, int xhot, int yhot);
#line 5094 "./../include/GLFW/glfw3.h"
        GLFWcursor* glfwCreateStandardCursor(int shape);
#line 5121 "./../include/GLFW/glfw3.h"
        void glfwDestroyCursor(GLFWcursor* cursor);
#line 5148 "./../include/GLFW/glfw3.h"
        void glfwSetCursor(GLFWwindow* window, GLFWcursor* cursor);
#line 5198 "./../include/GLFW/glfw3.h"
        GLFWkeyfun glfwSetKeyCallback(GLFWwindow* window, GLFWkeyfun callback);
#line 5241 "./../include/GLFW/glfw3.h"
        GLFWcharfun glfwSetCharCallback(GLFWwindow* window, GLFWcharfun callback);
#line 5283 "./../include/GLFW/glfw3.h"
        GLFWcharmodsfun glfwSetCharModsCallback(GLFWwindow* window, GLFWcharmodsfun callback);
#line 5320 "./../include/GLFW/glfw3.h"
        GLFWmousebuttonfun glfwSetMouseButtonCallback(GLFWwindow* window, GLFWmousebuttonfun callback);
#line 5352 "./../include/GLFW/glfw3.h"
        GLFWcursorposfun glfwSetCursorPosCallback(GLFWwindow* window, GLFWcursorposfun callback);
#line 5383 "./../include/GLFW/glfw3.h"
        GLFWcursorenterfun glfwSetCursorEnterCallback(GLFWwindow* window, GLFWcursorenterfun callback);
#line 5417 "./../include/GLFW/glfw3.h"
        GLFWscrollfun glfwSetScrollCallback(GLFWwindow* window, GLFWscrollfun callback);
#line 5452 "./../include/GLFW/glfw3.h"
        GLFWdropfun glfwSetDropCallback(GLFWwindow* window, GLFWdropfun callback);
#line 5476 "./../include/GLFW/glfw3.h"
        int glfwJoystickPresent(int jid);
#line 5509 "./../include/GLFW/glfw3.h"
        const float* glfwGetJoystickAxes(int jid, int* count);
#line 5550 "./../include/GLFW/glfw3.h"
        const unsigned char* glfwGetJoystickButtons(int jid, int* count);
#line 5607 "./../include/GLFW/glfw3.h"
        const unsigned char* glfwGetJoystickHats(int jid, int* count);
#line 5638 "./../include/GLFW/glfw3.h"
        const char* glfwGetJoystickName(int jid);
#line 5679 "./../include/GLFW/glfw3.h"
        const char* glfwGetJoystickGUID(int jid);
#line 5705 "./../include/GLFW/glfw3.h"
        void glfwSetJoystickUserPointer(int jid, void* pointer);
#line 5729 "./../include/GLFW/glfw3.h"
        void* glfwGetJoystickUserPointer(int jid);
#line 5757 "./../include/GLFW/glfw3.h"
        int glfwJoystickIsGamepad(int jid);
#line 5793 "./../include/GLFW/glfw3.h"
        GLFWjoystickfun glfwSetJoystickCallback(GLFWjoystickfun callback);
#line 5827 "./../include/GLFW/glfw3.h"
        int glfwUpdateGamepadMappings(const char* string);
#line 5859 "./../include/GLFW/glfw3.h"
        const char* glfwGetGamepadName(int jid);
#line 5897 "./../include/GLFW/glfw3.h"
        int glfwGetGamepadState(int jid, GLFWgamepadstate* state);
#line 5927 "./../include/GLFW/glfw3.h"
        void glfwSetClipboardString(GLFWwindow* window, const char* string);
#line 5962 "./../include/GLFW/glfw3.h"
        const char* glfwGetClipboardString(GLFWwindow* window);
#line 5992 "./../include/GLFW/glfw3.h"
        double glfwGetTime(void);
#line 6022 "./../include/GLFW/glfw3.h"
        void glfwSetTime(double time);
#line 6044 "./../include/GLFW/glfw3.h"
        uint64_t glfwGetTimerValue(void);
#line 6064 "./../include/GLFW/glfw3.h"
        uint64_t glfwGetTimerFrequency(void);
#line 6109 "./../include/GLFW/glfw3.h"
        void glfwMakeContextCurrent(GLFWwindow* window);
#line 6130 "./../include/GLFW/glfw3.h"
        GLFWwindow* glfwGetCurrentContext(void);
#line 6164 "./../include/GLFW/glfw3.h"
        void glfwSwapBuffers(GLFWwindow* window);
#line 6210 "./../include/GLFW/glfw3.h"
        void glfwSwapInterval(int interval);
#line 6248 "./../include/GLFW/glfw3.h"
        int glfwExtensionSupported(const char* extension);
#line 6290 "./../include/GLFW/glfw3.h"
        GLFWglproc glfwGetProcAddress(const char* procname);
#line 6316 "./../include/GLFW/glfw3.h"
        int glfwVulkanSupported(void);
#line 6360 "./../include/GLFW/glfw3.h"
        const char** glfwGetRequiredInstanceExtensions(uint32_t* count);
#line 50 "./internal.h"
#line 61 "./internal.h"
typedef int GLFWbool;
typedef void (*GLFWproc)(void);

typedef struct _GLFWerror _GLFWerror;
typedef struct _GLFWinitconfig _GLFWinitconfig;
typedef struct _GLFWwndconfig _GLFWwndconfig;
typedef struct _GLFWctxconfig _GLFWctxconfig;
typedef struct _GLFWfbconfig _GLFWfbconfig;
typedef struct _GLFWcontext _GLFWcontext;
typedef struct _GLFWwindow _GLFWwindow;
typedef struct _GLFWplatform _GLFWplatform;
typedef struct _GLFWlibrary _GLFWlibrary;
typedef struct _GLFWmonitor _GLFWmonitor;
typedef struct _GLFWcursor _GLFWcursor;
typedef struct _GLFWmapelement _GLFWmapelement;
typedef struct _GLFWmapping _GLFWmapping;
typedef struct _GLFWjoystick _GLFWjoystick;
typedef struct _GLFWtls _GLFWtls;
typedef struct _GLFWmutex _GLFWmutex;
#line 100 "./internal.h"
typedef int GLint;
typedef unsigned int GLuint;
typedef unsigned int GLenum;
typedef unsigned int GLbitfield;
typedef unsigned char GLubyte;

typedef void (__stdcall * PFNGLCLEARPROC)(GLbitfield);
typedef const GLubyte* (__stdcall * PFNGLGETSTRINGPROC)(GLenum);
typedef void (__stdcall * PFNGLGETINTEGERVPROC)(GLenum,GLint*);
typedef const GLubyte* (__stdcall * PFNGLGETSTRINGIPROC)(GLenum,GLuint);
#line 185 "./internal.h"
typedef int EGLint;
typedef unsigned int EGLBoolean;
typedef unsigned int EGLenum;
typedef void* EGLConfig;
typedef void* EGLContext;
typedef void* EGLDisplay;
typedef void* EGLSurface;

typedef void* EGLNativeDisplayType;
typedef void* EGLNativeWindowType;


typedef EGLBoolean (__stdcall * PFN_eglGetConfigAttrib)(EGLDisplay,EGLConfig,EGLint,EGLint*);
typedef EGLBoolean (__stdcall * PFN_eglGetConfigs)(EGLDisplay,EGLConfig*,EGLint,EGLint*);
typedef EGLDisplay (__stdcall * PFN_eglGetDisplay)(EGLNativeDisplayType);
typedef EGLint (__stdcall * PFN_eglGetError)(void);
typedef EGLBoolean (__stdcall * PFN_eglInitialize)(EGLDisplay,EGLint*,EGLint*);
typedef EGLBoolean (__stdcall * PFN_eglTerminate)(EGLDisplay);
typedef EGLBoolean (__stdcall * PFN_eglBindAPI)(EGLenum);
typedef EGLContext (__stdcall * PFN_eglCreateContext)(EGLDisplay,EGLConfig,EGLContext,const EGLint*);
typedef EGLBoolean (__stdcall * PFN_eglDestroySurface)(EGLDisplay,EGLSurface);
typedef EGLBoolean (__stdcall * PFN_eglDestroyContext)(EGLDisplay,EGLContext);
typedef EGLSurface (__stdcall * PFN_eglCreateWindowSurface)(EGLDisplay,EGLConfig,EGLNativeWindowType,const EGLint*);
typedef EGLBoolean (__stdcall * PFN_eglMakeCurrent)(EGLDisplay,EGLSurface,EGLSurface,EGLContext);
typedef EGLBoolean (__stdcall * PFN_eglSwapBuffers)(EGLDisplay,EGLSurface);
typedef EGLBoolean (__stdcall * PFN_eglSwapInterval)(EGLDisplay,EGLint);
typedef const char* (__stdcall * PFN_eglQueryString)(EGLDisplay,EGLint);
typedef GLFWglproc (__stdcall * PFN_eglGetProcAddress)(const char*);
#line 230 "./internal.h"
typedef EGLDisplay (__stdcall * PFNEGLGETPLATFORMDISPLAYEXTPROC)(EGLenum,void*,const EGLint*);
typedef EGLSurface (__stdcall * PFNEGLCREATEPLATFORMWINDOWSURFACEEXTPROC)(EGLDisplay,EGLConfig,void*,const EGLint*);
#line 246 "./internal.h"
typedef void* OSMesaContext;
typedef void (*OSMESAproc)(void);

typedef OSMesaContext (__stdcall * PFN_OSMesaCreateContextExt)(GLenum,GLint,GLint,GLint,OSMesaContext);
typedef OSMesaContext (__stdcall * PFN_OSMesaCreateContextAttribs)(const int*,OSMesaContext);
typedef void (__stdcall * PFN_OSMesaDestroyContext)(OSMesaContext);
typedef int (__stdcall * PFN_OSMesaMakeCurrent)(OSMesaContext,void*,int,int,int);
typedef int (__stdcall * PFN_OSMesaGetColorBuffer)(OSMesaContext,int*,int*,int*,void**);
typedef int (__stdcall * PFN_OSMesaGetDepthBuffer)(OSMesaContext,int*,int*,int*,void**);
typedef GLFWglproc (__stdcall * PFN_OSMesaGetProcAddress)(const char*);
#line 266 "./internal.h"
typedef void* VkInstance;
typedef void* VkPhysicalDevice;
typedef uint64_t VkSurfaceKHR;
typedef uint32_t VkFlags;
typedef uint32_t VkBool32;

typedef enum VkStructureType
{
    VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR = 1000004000,
    VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR = 1000005000,
    VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR = 1000006000,
    VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR = 1000009000,
    VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK = 1000123000,
    VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT = 1000217000,
    VK_STRUCTURE_TYPE_MAX_ENUM = 0x7FFFFFFF
} VkStructureType;

typedef enum VkResult
{
    VK_SUCCESS = 0,
    VK_NOT_READY = 1,
    VK_TIMEOUT = 2,
    VK_EVENT_SET = 3,
    VK_EVENT_RESET = 4,
    VK_INCOMPLETE = 5,
    VK_ERROR_OUT_OF_HOST_MEMORY = -1,
    VK_ERROR_OUT_OF_DEVICE_MEMORY = -2,
    VK_ERROR_INITIALIZATION_FAILED = -3,
    VK_ERROR_DEVICE_LOST = -4,
    VK_ERROR_MEMORY_MAP_FAILED = -5,
    VK_ERROR_LAYER_NOT_PRESENT = -6,
    VK_ERROR_EXTENSION_NOT_PRESENT = -7,
    VK_ERROR_FEATURE_NOT_PRESENT = -8,
    VK_ERROR_INCOMPATIBLE_DRIVER = -9,
    VK_ERROR_TOO_MANY_OBJECTS = -10,
    VK_ERROR_FORMAT_NOT_SUPPORTED = -11,
    VK_ERROR_SURFACE_LOST_KHR = -1000000000,
    VK_SUBOPTIMAL_KHR = 1000001003,
    VK_ERROR_OUT_OF_DATE_KHR = -1000001004,
    VK_ERROR_INCOMPATIBLE_DISPLAY_KHR = -1000003001,
    VK_ERROR_NATIVE_WINDOW_IN_USE_KHR = -1000000001,
    VK_ERROR_VALIDATION_FAILED_EXT = -1000011001,
    VK_RESULT_MAX_ENUM = 0x7FFFFFFF
} VkResult;

typedef struct VkAllocationCallbacks VkAllocationCallbacks;

typedef struct VkExtensionProperties
{
    char extensionName[256];
    uint32_t specVersion;
} VkExtensionProperties;

typedef void (__stdcall * PFN_vkVoidFunction)(void);

typedef PFN_vkVoidFunction (__stdcall * PFN_vkGetInstanceProcAddr)(VkInstance,const char*);
typedef VkResult (__stdcall * PFN_vkEnumerateInstanceExtensionProperties)(const char*,uint32_t*,VkExtensionProperties*);



#line 1 "./platform.h"
#line 40 "./platform.h"
#line 1 "./null_platform.h"
#line 161 "./null_platform.h"
typedef struct _GLFWwindowNull
{
    int xpos;
    int ypos;
    int width;
    int height;
    GLFWbool visible;
    GLFWbool iconified;
    GLFWbool maximized;
    GLFWbool resizable;
    GLFWbool decorated;
    GLFWbool floating;
    GLFWbool transparent;
    float opacity;
} _GLFWwindowNull;



typedef struct _GLFWmonitorNull
{
    GLFWgammaramp ramp;
} _GLFWmonitorNull;



typedef struct _GLFWlibraryNull
{
    int xcursor;
    int ycursor;
    char* clipboardString;
    _GLFWwindow* focusedWindow;
    uint16_t keycodes[120 + 1];
    uint8_t scancodes[348 + 1];
} _GLFWlibraryNull;

void _glfwPollMonitorsNull(void);

GLFWbool _glfwConnectNull(int platformID, _GLFWplatform* platform);
int _glfwInitNull(void);
void _glfwTerminateNull(void);

void _glfwFreeMonitorNull(_GLFWmonitor* monitor);
void _glfwGetMonitorPosNull(_GLFWmonitor* monitor, int* xpos, int* ypos);
void _glfwGetMonitorContentScaleNull(_GLFWmonitor* monitor, float* xscale, float* yscale);
void _glfwGetMonitorWorkareaNull(_GLFWmonitor* monitor, int* xpos, int* ypos, int* width, int* height);
GLFWvidmode* _glfwGetVideoModesNull(_GLFWmonitor* monitor, int* found);
GLFWbool _glfwGetVideoModeNull(_GLFWmonitor* monitor, GLFWvidmode* mode);
GLFWbool _glfwGetGammaRampNull(_GLFWmonitor* monitor, GLFWgammaramp* ramp);
void _glfwSetGammaRampNull(_GLFWmonitor* monitor, const GLFWgammaramp* ramp);

GLFWbool _glfwCreateWindowNull(_GLFWwindow* window, const _GLFWwndconfig* wndconfig, const _GLFWctxconfig* ctxconfig, const _GLFWfbconfig* fbconfig);
void _glfwDestroyWindowNull(_GLFWwindow* window);
void _glfwSetWindowTitleNull(_GLFWwindow* window, const char* title);
void _glfwSetWindowIconNull(_GLFWwindow* window, int count, const GLFWimage* images);
void _glfwSetWindowMonitorNull(_GLFWwindow* window, _GLFWmonitor* monitor, int xpos, int ypos, int width, int height, int refreshRate);
void _glfwGetWindowPosNull(_GLFWwindow* window, int* xpos, int* ypos);
void _glfwSetWindowPosNull(_GLFWwindow* window, int xpos, int ypos);
void _glfwGetWindowSizeNull(_GLFWwindow* window, int* width, int* height);
void _glfwSetWindowSizeNull(_GLFWwindow* window, int width, int height);
void _glfwSetWindowSizeLimitsNull(_GLFWwindow* window, int minwidth, int minheight, int maxwidth, int maxheight);
void _glfwSetWindowAspectRatioNull(_GLFWwindow* window, int n, int d);
void _glfwGetFramebufferSizeNull(_GLFWwindow* window, int* width, int* height);
void _glfwGetWindowFrameSizeNull(_GLFWwindow* window, int* left, int* top, int* right, int* bottom);
void _glfwGetWindowContentScaleNull(_GLFWwindow* window, float* xscale, float* yscale);
void _glfwIconifyWindowNull(_GLFWwindow* window);
void _glfwRestoreWindowNull(_GLFWwindow* window);
void _glfwMaximizeWindowNull(_GLFWwindow* window);
GLFWbool _glfwWindowMaximizedNull(_GLFWwindow* window);
GLFWbool _glfwWindowHoveredNull(_GLFWwindow* window);
GLFWbool _glfwFramebufferTransparentNull(_GLFWwindow* window);
void _glfwSetWindowResizableNull(_GLFWwindow* window, GLFWbool enabled);
void _glfwSetWindowDecoratedNull(_GLFWwindow* window, GLFWbool enabled);
void _glfwSetWindowFloatingNull(_GLFWwindow* window, GLFWbool enabled);
void _glfwSetWindowMousePassthroughNull(_GLFWwindow* window, GLFWbool enabled);
float _glfwGetWindowOpacityNull(_GLFWwindow* window);
void _glfwSetWindowOpacityNull(_GLFWwindow* window, float opacity);
void _glfwSetRawMouseMotionNull(_GLFWwindow *window, GLFWbool enabled);
GLFWbool _glfwRawMouseMotionSupportedNull(void);
void _glfwShowWindowNull(_GLFWwindow* window);
void _glfwRequestWindowAttentionNull(_GLFWwindow* window);
void _glfwHideWindowNull(_GLFWwindow* window);
void _glfwFocusWindowNull(_GLFWwindow* window);
GLFWbool _glfwWindowFocusedNull(_GLFWwindow* window);
GLFWbool _glfwWindowIconifiedNull(_GLFWwindow* window);
GLFWbool _glfwWindowVisibleNull(_GLFWwindow* window);
void _glfwPollEventsNull(void);
void _glfwWaitEventsNull(void);
void _glfwWaitEventsTimeoutNull(double timeout);
void _glfwPostEmptyEventNull(void);
void _glfwGetCursorPosNull(_GLFWwindow* window, double* xpos, double* ypos);
void _glfwSetCursorPosNull(_GLFWwindow* window, double x, double y);
void _glfwSetCursorModeNull(_GLFWwindow* window, int mode);
GLFWbool _glfwCreateCursorNull(_GLFWcursor* cursor, const GLFWimage* image, int xhot, int yhot);
GLFWbool _glfwCreateStandardCursorNull(_GLFWcursor* cursor, int shape);
void _glfwDestroyCursorNull(_GLFWcursor* cursor);
void _glfwSetCursorNull(_GLFWwindow* window, _GLFWcursor* cursor);
void _glfwSetClipboardStringNull(const char* string);
const char* _glfwGetClipboardStringNull(void);
const char* _glfwGetScancodeNameNull(int scancode);
int _glfwGetKeyScancodeNull(int key);

EGLenum _glfwGetEGLPlatformNull(EGLint** attribs);
EGLNativeDisplayType _glfwGetEGLNativeDisplayNull(void);
EGLNativeWindowType _glfwGetEGLNativeWindowNull(_GLFWwindow* window);

void _glfwGetRequiredInstanceExtensionsNull(char** extensions);
GLFWbool _glfwGetPhysicalDevicePresentationSupportNull(VkInstance instance, VkPhysicalDevice device, uint32_t queuefamily);
VkResult _glfwCreateWindowSurfaceNull(VkInstance instance, _GLFWwindow* window, const VkAllocationCallbacks* allocator, VkSurfaceKHR* surface);

void _glfwPollMonitorsNull(void);
#line 41 "./platform.h"




#line 1 "./win32_platform.h"
#line 67 "./win32_platform.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\wctype.h"
#line 18 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\wctype.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\tchar.h"
#line 15 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\tchar.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\_stddef.h"
#line 15 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\tchar.h"
#line 37 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\tchar.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\_str.h"
#line 21 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\_str.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\_stddef.h"
#line 21 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\_str.h"





#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\locale.h"
#line 13 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\locale.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\_loc.h"
#line 19 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\_loc.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\_stddef.h"
#line 19 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\_loc.h"
#line 54 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\_loc.h"
struct lconv {

   char *decimal_point;
   char *thousands_sep;
   char *grouping;
   char *int_curr_symbol;
   char *currency_symbol;
   char *mon_decimal_point;
   char *mon_thousands_sep;
   char *mon_grouping;
   char *positive_sign;
   char *negative_sign;
   char int_frac_digits;
   char frac_digits;
   char p_cs_precedes;
   char p_sep_by_space;
   char n_cs_precedes;
   char n_sep_by_space;
   char p_sign_posn;
   char n_sign_posn;
};


#pragma pack(push, 1)








char * __cdecl setlocale( int __category, const char *__locale );
wchar_t * __cdecl _wsetlocale( int __category, const wchar_t *__locale );

char * __cdecl _lsetlocale( int __category, const char *__locale );
struct lconv * __cdecl localeconv( void );
struct lconv * __cdecl _llocaleconv( void );
wchar_t * __cdecl _lwsetlocale( int __category, const wchar_t *__locale );




#pragma pack(pop)
#line 13 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\locale.h"
#line 26 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\_str.h"
#line 53 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\_str.h"
size_t __cdecl strnlen_s(const char *__s, size_t __maxlen);
size_t __cdecl wcsnlen_s(const wchar_t *__s, size_t __maxlen);
errno_t __cdecl strerror_s(char *__s, rsize_t __maxsize, errno_t __errnum);
errno_t __cdecl _wcserror_s(wchar_t *__s, rsize_t __maxsize, errno_t __errnum);
size_t __cdecl strerrorlen_s(errno_t errnum);
errno_t __cdecl strncpy_s(char * dest, rsize_t destmax,
        const char * src, rsize_t n);
errno_t __cdecl wcsncpy_s(wchar_t * dest, rsize_t destmax,
        const wchar_t * src, rsize_t n);
errno_t __cdecl strcpy_s(char * dest, rsize_t destmax,
       const char * src);
errno_t __cdecl wcscpy_s(wchar_t * dest, rsize_t destmax,
       const wchar_t * src);
errno_t __cdecl strncat_s(char * dest, rsize_t destmax,
        const char * src, rsize_t n);
errno_t __cdecl wcsncat_s(wchar_t * dest, rsize_t destmax,
        const wchar_t * src, rsize_t n);
errno_t __cdecl strcat_s(char * dest, rsize_t destmax,
       const char * src);
errno_t __cdecl wcscat_s(wchar_t * dest, rsize_t destmax,
       const wchar_t * src);
char * __cdecl strtok_s(char * __s1, rsize_t * __s1max,
       const char * __s2, char ** __ptr);
wchar_t * __cdecl wcstok_s(wchar_t * __s1, rsize_t * __s1max,
       const wchar_t * __s2, wchar_t ** __ptr);


size_t __cdecl wcslen(const wchar_t *__s);
wchar_t * __cdecl wcscpy(wchar_t *__dst, const wchar_t *__src);
wchar_t * __cdecl wcscat(wchar_t *__dest, const wchar_t *__src);
int __cdecl wcscmp(const wchar_t *__s1, const wchar_t *__s2);
int __cdecl wcscoll(const wchar_t * __s1, const wchar_t * __s2);
size_t __cdecl wcscspn(const wchar_t *__s1, const wchar_t *__s2);
wchar_t * __cdecl _wcsdup(const wchar_t *__s);
int __cdecl wcsncmp(const wchar_t *__s1, const wchar_t *__s2, size_t __maxlen);
wchar_t * __cdecl wcsncpy(wchar_t *__dest, const wchar_t *__src, size_t __maxlen);
wchar_t * __cdecl _wcsnset(wchar_t *__s, wchar_t __ch, size_t __n);
wchar_t * __cdecl wcspbrk(const wchar_t *__s1, const wchar_t *__s2);
wchar_t * __cdecl wcsrchr(const wchar_t *__s, wchar_t __c);
wchar_t * __cdecl _wcsrev(wchar_t *__s);
wchar_t * __cdecl _wcsset(wchar_t*__s, wchar_t __ch);
size_t __cdecl wcsspn(const wchar_t *__s1, const wchar_t *__s2);
wchar_t * __cdecl wcsstr(const wchar_t *__s1, const wchar_t *__s2);
wchar_t * __cdecl wcstok(wchar_t *__s1, const wchar_t *__s2);
wchar_t * __cdecl wcsncat(wchar_t *__dest, const wchar_t *__src, size_t __maxlen);
wchar_t * __cdecl wcspcpy(wchar_t *__dest, const wchar_t *__src);
wchar_t * __cdecl _wcspcpy(wchar_t *__dest, const wchar_t *__src);
int __cdecl _wcsicmp(const wchar_t *__s1, const wchar_t *__s2);
int __cdecl _wcsnicmp(const wchar_t *__s1, const wchar_t *__s2, size_t __maxlen);
wchar_t * __cdecl _wcslwr(wchar_t *__s);
wchar_t * __cdecl _wcsupr(wchar_t *__s);
wchar_t * __cdecl _lwcslwr(wchar_t *__s);
wchar_t * __cdecl _lwcsupr(wchar_t *__s);
wchar_t * __cdecl __wcserror(const wchar_t *__s);
wchar_t * __cdecl _wcserror(int __errnum);


wchar_t * __cdecl wcschr(const wchar_t *__s, wchar_t __c);







char * __cdecl strcat(char *__dest, const char *__src);
int __cdecl strcmp(const char *__s1, const char *__s2);
char * __cdecl strcpy(char *__dest, const char *__src);
size_t __cdecl strlen(const char *__s);
char * __cdecl strncat(char *__dest, const char *__src,
                                        size_t __maxlen);
int __cdecl strncmp(const char *__s1, const char *__s2,
                                        size_t __maxlen);
char * __cdecl strncpy(char *__dest, const char *__src,
                                        size_t __maxlen);
size_t __cdecl strcspn(const char *__s1, const char *__s2);
char * __cdecl strerror(int __errnum);
size_t __cdecl strspn(const char *__s1, const char *__s2);
char * __cdecl strtok(char *__s1, const char *__s2);
char * __cdecl _strerror(const char *__s);






char * __cdecl _lstrlwr(char *__s);
char * __cdecl _lstrupr(char *__s);
char * __cdecl stpcpy(char *__dest, const char *__src);
char * __cdecl _stpcpy(char *__dest, const char *__src);
char * __cdecl strdup(const char *__s);
int __cdecl stricmp(const char *__s1, const char *__s2);
char * __cdecl strlwr(char *__s);
int __cdecl strnicmp(const char *__s1, const char *__s2,
                                           size_t __maxlen);
char * __cdecl strnset(char *__s, int __ch, size_t __n);
char * __cdecl strrev(char *__s);
char * __cdecl strset(char *__s, int __ch);
char * __cdecl strupr(char *__s);
#line 171 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\_str.h"
          char * __cdecl strchr(const char * __s, int __c);
          char * __cdecl strrchr(const char *__s, int __c);
          char * __cdecl strpbrk(const char *__s1, const char *__s2);
          char * __cdecl strstr(const char *__s1, const char *__s2);
#line 350 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\_str.h"
int __cdecl _lstrcoll(const char * __s1, const char * __s2);
int __cdecl _lstricoll(const char * __s1, const char * __s2);
int __cdecl _lstrncoll(const char * __s1, const char * __s2, const int __len);
int __cdecl _lstrnicoll(const char * __s1, const char * __s2, int __len);
size_t __cdecl _lstrxfrm(char * __s1, const char * __s2,size_t __n );
int __cdecl _stricoll(const char * __s1, const char * __s2);
int __cdecl _strncoll(const char * __s1, const char * __s2, size_t __n);
int __cdecl _strnicoll(const char * __s1, const char * __s2, int __len);





int __cdecl strcoll(const char * __s1, const char * __s2);
size_t __cdecl strxfrm(char * __s1, const char * __s2,size_t __n );





int __cdecl _lwcscoll(const wchar_t * __s1, const wchar_t * __s2);
int __cdecl _lwcsicoll(const wchar_t * __s1, const wchar_t * __s2);
int __cdecl _lwcsncoll(const wchar_t * __s1, const wchar_t * __s2, const int __len);
int __cdecl _lwcsnicoll(const wchar_t * __s1, const wchar_t * __s2, int __len);
size_t __cdecl _lwcsxfrm(wchar_t * __s1, const wchar_t * __s2,size_t __n );
int __cdecl wcscoll(const wchar_t * __s1, const wchar_t * __s2);
int __cdecl _wcsicoll(const wchar_t * __s1, const wchar_t * __s2);
int __cdecl _wcsncoll(const wchar_t * __s1, const wchar_t * __s2, size_t __n);
int __cdecl _wcsnicoll(const wchar_t * __s1, const wchar_t * __s2, int __len);
size_t __cdecl wcsxfrm(wchar_t * __s1, const wchar_t * __s2, size_t __n );
#line 454 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\_str.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\mem.h"
#line 20 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\mem.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\_stddef.h"
#line 20 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\mem.h"
#line 40 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\mem.h"
errno_t __cdecl memcpy_s(void * __dest, rsize_t __destmax,
         const void * __src, rsize_t __n);
errno_t __cdecl memmove_s(void * __dest, rsize_t __destmax,
          const void * __src, rsize_t __n);
errno_t __cdecl wmemcpy_s(wchar_t * __dest, rsize_t __destmax,
          const wchar_t * __src, rsize_t __n);
errno_t __cdecl wmemmove_s(wchar_t * __dest, rsize_t __destmax,
           const wchar_t * __src, rsize_t __n);


void * __cdecl memccpy(void *__dest, const void *__src,
                                        int __c, size_t __n);
int __cdecl memcmp(const void *__s1, const void *__s2,
                                       size_t __n);
void * __cdecl memcpy(void *__dest, const void *__src,
                                       size_t __n);
int __cdecl memicmp(const void *__s1, const void *__s2,
                                        size_t __n);
void * __cdecl memmove(void *__dest, const void *__src,
                                        size_t __n);
void * __cdecl memset(void *__s, int __c, size_t __n);

wchar_t * __cdecl wmemset(wchar_t *__s, int __c, size_t __n);
wchar_t * __cdecl wmemcpy(wchar_t *__dest, const wchar_t *__src, size_t __n);
wchar_t * __cdecl wmemmove(wchar_t *__dest, const wchar_t *__src, size_t __n);
wchar_t * __cdecl wmemchr(const wchar_t *__s, int __c, size_t __n);
int __cdecl wmemcmp(const wchar_t *__s1, const wchar_t *__s2, size_t __n);


wchar_t * __cdecl _wmemset(wchar_t *__s, int __c, size_t __n);
wchar_t * __cdecl _wmemcpy(wchar_t *__dest, const wchar_t *__src, size_t __n);
#line 81 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\mem.h"
          void * __cdecl memchr(const void *__s, int __c, size_t __n);
          wchar_t * __cdecl _wmemchr(const wchar_t *__s, int __c, size_t __n);
#line 454 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\_str.h"
#line 37 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\tchar.h"
#line 58 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\tchar.h"
typedef char _TCHAR;
typedef signed char _TSCHAR;
typedef unsigned char _TUCHAR;
typedef char _TXCHAR;
typedef int _TINT;
#line 18 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\wctype.h"




#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\ctype.h"
#line 22 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\ctype.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\_stddef.h"
#line 22 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\ctype.h"




#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\mbctype.h"
#line 21 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\mbctype.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\_stddef.h"
#line 21 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\mbctype.h"
#line 32 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\mbctype.h"
extern unsigned char __cdecl _mbctype[];
#line 53 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\mbctype.h"
int __cdecl _setmbcp(int newCodePage);
int __cdecl _getmbcp(void);

int __cdecl _ismbbkalpha(unsigned int __c);
int __cdecl _ismbbkpunct(unsigned int __c);
int __cdecl _ismbbkana (unsigned int __c);
int __cdecl _ismbbalpha (unsigned int __c);
int __cdecl _ismbbpunct (unsigned int __c);
int __cdecl _ismbbalnum (unsigned int __c);
int __cdecl _ismbbprint (unsigned int __c);
int __cdecl _ismbbgraph (unsigned int __c);



int __cdecl _ismbblead (unsigned int __c);
int __cdecl _ismbbtrail (unsigned int __c);
int __cdecl _ismbslead (const unsigned char *__s1, const unsigned char *__s2);
int __cdecl _ismbstrail (const unsigned char *__s1, const unsigned char *__s2);
#line 26 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\ctype.h"
#line 47 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\ctype.h"
extern unsigned short __cdecl _chartype[ 257 ];
extern unsigned char __cdecl _lower[ 256 ];
extern unsigned char __cdecl _upper[ 256 ];

int __cdecl isalnum (int __c);
int __cdecl isalpha (int __c);
int __cdecl isblank (int __c);
int __cdecl iscntrl (int __c);
int __cdecl isdigit (int __c);
int __cdecl isgraph (int __c);
int __cdecl islower (int __c);
int __cdecl isprint (int __c);
int __cdecl ispunct (int __c);
int __cdecl isspace (int __c);
int __cdecl isupper (int __c);
int __cdecl isxdigit(int __c);
int __cdecl isascii (int __c);

int __cdecl iswalnum (wint_t __c);
int __cdecl iswalpha (wint_t __c);
int __cdecl iswblank (wint_t __c);
int __cdecl iswcntrl (wint_t __c);
int __cdecl iswdigit (wint_t __c);
int __cdecl iswgraph (wint_t __c);
int __cdecl iswlower (wint_t __c);
int __cdecl iswprint (wint_t __c);
int __cdecl iswpunct (wint_t __c);
int __cdecl iswspace (wint_t __c);
int __cdecl iswupper (wint_t __c);
int __cdecl iswxdigit(wint_t __c);
int __cdecl iswascii (wint_t __c);
#line 148 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\ctype.h"
int __cdecl _ltolower(int __ch);
int __cdecl _ltolower_lcid(int __ch, unsigned long __handle);
int __cdecl _ltoupper(int __ch);
int __cdecl _ltoupper_lcid(int __ch, unsigned long __handle);
wchar_t __cdecl _ltowupper(wchar_t __ch);
wchar_t __cdecl _ltowlower(wchar_t __ch);
#line 175 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\ctype.h"
#pragma option push -vi


__inline

int __cdecl tolower(int __ch) { return _ltolower(__ch); }


__inline

int __cdecl toupper(int __ch) { return _ltoupper(__ch); }


__inline

wint_t __cdecl towlower(wint_t __ch) { return _ltowlower(__ch); }


__inline

wint_t __cdecl towupper(wint_t __ch) { return _ltowupper(__ch); }

#pragma option pop
#line 22 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\wctype.h"
#line 68 "./win32_platform.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\windows.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winapifamily.h"
#line 16 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winapifamily.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 27 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winapifamily.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winpackagefamily.h"
#line 16 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winpackagefamily.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 73 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winpackagefamily.h"
#pragma option pop
#line 27 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winapifamily.h"
#line 235 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winapifamily.h"
#pragma option pop
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\windows.h"
#line 22 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\windows.h"
#pragma defineonoption __BOROPT_A -A
#pragma defineonoption __BOROPT_H -H







#pragma option push -b -a8 -pc -A- -w-pun


#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\sdkddkver.h"
#line 16 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\sdkddkver.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 294 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\sdkddkver.h"
#pragma option pop
#line 33 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\windows.h"
#line 42 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\windows.h"
#pragma region Application Family or OneCore Family
#line 195 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\windows.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\excpt.h"
#line 12 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\excpt.h"
#pragma option push -b -a8 -pc -A-
#line 50 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\excpt.h"
typedef enum _EXCEPTION_DISPOSITION {
    ExceptionContinueExecution,
    ExceptionContinueSearch,
    ExceptionNestedException,
    ExceptionCollidedUnwind
} EXCEPTION_DISPOSITION;
#line 67 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\excpt.h"
struct _EXCEPTION_RECORD;
struct _CONTEXT;

EXCEPTION_DISPOSITION __cdecl _except_handler (
        struct _EXCEPTION_RECORD *ExceptionRecord,
        void *EstablisherFrame,
        struct _CONTEXT *ContextRecord,
        void *DispatcherContext
        );
#line 117 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\excpt.h"
int __exception_code();
struct _EXCEPTION_RECORD * __exception_info();


int AbnormalTermination(void);
#line 186 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\excpt.h"
#pragma option pop
#line 195 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\windows.h"

#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\stdarg.h"
#line 26 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\stdarg.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\_stddef.h"
#line 26 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\stdarg.h"
#line 35 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\stdarg.h"
typedef __builtin_va_list va_list;
#line 196 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\windows.h"



#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\windef.h"
#line 13 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\windef.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 25 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\windef.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\minwindef.h"
#line 11 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\minwindef.h"
#pragma option push -b -a8 -pc -A- -w-pun




#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\specstrings.h"

#pragma option push -b -a8 -pc -A- -w-pun
#line 62 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\specstrings.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\sal.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 718 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\sal.h"
#pragma region Input Buffer SAL 1 compatibility macros
#line 1482 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\sal.h"
#pragma endregion Input Buffer SAL 1 compatibility macros
#line 2995 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\sal.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\ConcurrencySal.h"
#line 17 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\ConcurrencySal.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 358 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\ConcurrencySal.h"
#pragma option pop
#line 2995 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\sal.h"


#pragma option pop
#line 62 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\specstrings.h"
#line 675 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\specstrings.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\specstrings_strict.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 1192 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\specstrings_strict.h"
#pragma option pop
#line 675 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\specstrings.h"
#line 696 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\specstrings.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\driverspecs.h"
#line 118 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\driverspecs.h"
#pragma option push -b -a8 -pc -A- -w-pun








#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/sdv_driverspecs.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 24 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/sdv_driverspecs.h"
#pragma option pop
#line 126 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\driverspecs.h"
#line 901 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\driverspecs.h"
#pragma option pop
#line 696 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\specstrings.h"
#line 708 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\specstrings.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\no_sal2.h"
#line 19 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\no_sal2.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 1043 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\no_sal2.h"
#pragma option pop
#line 708 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\specstrings.h"







#pragma option pop
#line 15 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\minwindef.h"




#pragma region Application Family or OneCore Family
#line 52 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\minwindef.h"
typedef unsigned long ULONG;
typedef ULONG *PULONG;
typedef unsigned short USHORT;
typedef USHORT *PUSHORT;
typedef unsigned char UCHAR;
typedef UCHAR *PUCHAR;
typedef char *PSZ;
#line 157 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\minwindef.h"
typedef unsigned long DWORD;
typedef int BOOL;
typedef unsigned char BYTE;
typedef unsigned short WORD;
typedef float FLOAT;
typedef FLOAT *PFLOAT;
typedef BOOL *PBOOL;
typedef BOOL *LPBOOL;
typedef BYTE *PBYTE;
typedef BYTE *LPBYTE;
typedef int *PINT;
typedef int *LPINT;
typedef WORD *PWORD;
typedef WORD *LPWORD;
typedef long *LPLONG;
typedef DWORD *PDWORD;
typedef DWORD *LPDWORD;
typedef void *LPVOID;
typedef const void *LPCVOID;

typedef int INT;
typedef unsigned int UINT;
typedef unsigned int *PUINT;




#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
#line 19 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
#pragma option push -b -a8 -pc -A- -w-pun -w-inl
#line 35 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\ctype.h"
#line 35 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
#line 87 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\kernelspecs.h"
#line 34 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\kernelspecs.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 260 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\kernelspecs.h"
#pragma option pop
#line 87 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
#line 175 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\basetsd.h"
#line 20 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\basetsd.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 46 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\basetsd.h"
 typedef unsigned long POINTER_64_INT;
#line 76 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\basetsd.h"
typedef signed char INT8, *PINT8;
typedef signed short INT16, *PINT16;
typedef signed int INT32, *PINT32;
typedef signed __int64 INT64, *PINT64;
typedef unsigned char UINT8, *PUINT8;
typedef unsigned short UINT16, *PUINT16;
typedef unsigned int UINT32, *PUINT32;
typedef unsigned __int64 UINT64, *PUINT64;





typedef signed int LONG32, *PLONG32;





typedef unsigned int ULONG32, *PULONG32;
typedef unsigned int DWORD32, *PDWORD32;
#line 135 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\basetsd.h"
    typedef int INT_PTR, *PINT_PTR;
    typedef unsigned int UINT_PTR, *PUINT_PTR;

    typedef long LONG_PTR, *PLONG_PTR;
    typedef unsigned long ULONG_PTR, *PULONG_PTR;
#line 336 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\basetsd.h"
typedef unsigned short UHALF_PTR, *PUHALF_PTR;
typedef short HALF_PTR, *PHALF_PTR;
typedef long SHANDLE_PTR;
typedef unsigned long HANDLE_PTR;
#line 357 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\basetsd.h"
__inline
void *
PtrToPtr64(
    const void *p
    )
{
    return((void * ) (unsigned __int64) (ULONG_PTR)p );
}

__inline
void *
Ptr64ToPtr(
    const void * p
    )
{
    return((void *) (ULONG_PTR) (unsigned __int64) p);
}

__inline
void *
HandleToHandle64(
    const void *h
    )
{
    return((void * )(__int64)(LONG_PTR)h );
}

__inline
void *
Handle64ToHandle(
    const void * h
    )
{
    return((void *) (ULONG_PTR) (unsigned __int64) h );
}
#line 423 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\basetsd.h"
typedef ULONG_PTR SIZE_T, *PSIZE_T;
typedef LONG_PTR SSIZE_T, *PSSIZE_T;
#line 472 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\basetsd.h"
typedef ULONG_PTR DWORD_PTR, *PDWORD_PTR;





typedef __int64 LONG64, *PLONG64;






typedef unsigned __int64 ULONG64, *PULONG64;
typedef unsigned __int64 DWORD64, *PDWORD64;







typedef ULONG_PTR KAFFINITY;
typedef KAFFINITY *PKAFFINITY;
#line 507 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\basetsd.h"
#pragma option pop
#line 175 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
#line 365 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef void *PVOID;
typedef void * PVOID64;
#line 407 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef char CHAR;
typedef short SHORT;
typedef long LONG;

typedef int INT;
#line 420 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef wchar_t WCHAR;





typedef WCHAR *PWCHAR, *LPWCH, *PWCH;
typedef const WCHAR *LPCWCH, *PCWCH;

typedef WCHAR *NWPSTR, *LPWSTR, *PWSTR;
typedef PWSTR *PZPWSTR;
typedef const PWSTR *PCZPWSTR;
typedef WCHAR *LPUWSTR, *PUWSTR;
typedef const WCHAR *LPCWSTR, *PCWSTR;
typedef PCWSTR *PZPCWSTR;
typedef const PCWSTR *PCZPCWSTR;
typedef const WCHAR *LPCUWSTR, *PCUWSTR;

typedef WCHAR *PZZWSTR;
typedef const WCHAR *PCZZWSTR;
typedef WCHAR *PUZZWSTR;
typedef const WCHAR *PCUZZWSTR;

typedef WCHAR *PNZWCH;
typedef const WCHAR *PCNZWCH;
typedef WCHAR *PUNZWCH;
typedef const WCHAR *PCUNZWCH;
#line 495 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef CHAR *PCHAR, *LPCH, *PCH;
typedef const CHAR *LPCCH, *PCCH;

typedef CHAR *NPSTR, *LPSTR, *PSTR;
typedef PSTR *PZPSTR;
typedef const PSTR *PCZPSTR;
typedef const CHAR *LPCSTR, *PCSTR;
typedef PCSTR *PZPCSTR;
typedef const PCSTR *PCZPCSTR;

typedef CHAR *PZZSTR;
typedef const CHAR *PCZZSTR;

typedef CHAR *PNZCH;
typedef const CHAR *PCNZCH;







typedef WCHAR TCHAR, *PTCHAR;
typedef WCHAR TBYTE , *PTBYTE ;



typedef LPWCH LPTCH, PTCH;
typedef LPCWCH LPCTCH, PCTCH;
typedef LPWSTR PTSTR, LPTSTR;
typedef LPCWSTR PCTSTR, LPCTSTR;
typedef LPUWSTR PUTSTR, LPUTSTR;
typedef LPCUWSTR PCUTSTR, LPCUTSTR;
typedef LPWSTR LP;
typedef PZZWSTR PZZTSTR;
typedef PCZZWSTR PCZZTSTR;
typedef PUZZWSTR PUZZTSTR;
typedef PCUZZWSTR PCUZZTSTR;
typedef PZPWSTR PZPTSTR;
typedef PNZWCH PNZTCH;
typedef PCNZWCH PCNZTCH;
typedef PUNZWCH PUNZTCH;
typedef PCUNZWCH PCUNZTCH;
#line 563 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef SHORT *PSHORT;
typedef LONG *PLONG;
#line 573 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef struct _PROCESSOR_NUMBER {
    WORD Group;
    BYTE Number;
    BYTE Reserved;
} PROCESSOR_NUMBER, *PPROCESSOR_NUMBER;






typedef struct _GROUP_AFFINITY {
    KAFFINITY Mask;
    WORD Group;
    WORD Reserved[3];
} GROUP_AFFINITY, *PGROUP_AFFINITY;
#line 609 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef void *HANDLE;
#line 619 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef HANDLE *PHANDLE;







typedef BYTE FCHAR;
typedef WORD FSHORT;
typedef DWORD FLONG;
#line 640 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef long HRESULT;
#line 707 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef char CCHAR;
typedef DWORD LCID;
typedef PDWORD PLCID;
typedef WORD LANGID;
#line 719 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef enum {
    UNSPECIFIED_COMPARTMENT_ID = 0,
    DEFAULT_COMPARTMENT_ID
} COMPARTMENT_ID, *PCOMPARTMENT_ID;
#line 750 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef struct _FLOAT128 {
    __int64 LowPart;
    __int64 HighPart;
} FLOAT128;

typedef FLOAT128 *PFLOAT128;
#line 765 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef __int64 LONGLONG;
typedef unsigned __int64 ULONGLONG;
#line 787 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef LONGLONG *PLONGLONG;
typedef ULONGLONG *PULONGLONG;



typedef LONGLONG USN;




typedef union _LARGE_INTEGER {
    struct {
        DWORD LowPart;
        LONG HighPart;
    } ;
    struct {
        DWORD LowPart;
        LONG HighPart;
    } u;

    LONGLONG QuadPart;
} LARGE_INTEGER;

typedef LARGE_INTEGER *PLARGE_INTEGER;




typedef union _ULARGE_INTEGER {
    struct {
        DWORD LowPart;
        DWORD HighPart;
    } ;
    struct {
        DWORD LowPart;
        DWORD HighPart;
    } u;

    ULONGLONG QuadPart;
} ULARGE_INTEGER;

typedef ULARGE_INTEGER *PULARGE_INTEGER;





typedef LONG_PTR RTL_REFERENCE_COUNT, *PRTL_REFERENCE_COUNT;
#line 844 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef struct _LUID {
    DWORD LowPart;
    LONG HighPart;
} LUID, *PLUID;


typedef ULONGLONG DWORDLONG;
typedef DWORDLONG *PDWORDLONG;
#line 1093 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef BYTE BOOLEAN;
typedef BOOLEAN *PBOOLEAN;





typedef struct _LIST_ENTRY {
   struct _LIST_ENTRY *Flink;
   struct _LIST_ENTRY *Blink;
} LIST_ENTRY, *PLIST_ENTRY, * PRLIST_ENTRY;






typedef struct _SINGLE_LIST_ENTRY {
    struct _SINGLE_LIST_ENTRY *Next;
} SINGLE_LIST_ENTRY, *PSINGLE_LIST_ENTRY;
#line 1121 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef struct LIST_ENTRY32 {
    DWORD Flink;
    DWORD Blink;
} LIST_ENTRY32;
typedef LIST_ENTRY32 *PLIST_ENTRY32;

typedef struct LIST_ENTRY64 {
    ULONGLONG Flink;
    ULONGLONG Blink;
} LIST_ENTRY64;
typedef LIST_ENTRY64 *PLIST_ENTRY64;



#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\guiddef.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 23 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\guiddef.h"
typedef struct _GUID {
    unsigned long Data1;
    unsigned short Data2;
    unsigned short Data3;
    unsigned char Data4[ 8 ];
} GUID;
#line 76 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\guiddef.h"
typedef GUID *LPGUID;




typedef const GUID *LPCGUID;





typedef GUID IID;
typedef IID *LPIID;


typedef GUID CLSID;
typedef CLSID *LPCLSID;


typedef GUID FMTID;
typedef FMTID *LPFMTID;
#line 147 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\guiddef.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\string.h"
#line 13 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\string.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\_str.h"
#line 454 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\_str.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\mem.h"
#line 454 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\_str.h"
#line 13 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\string.h"
#line 147 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\guiddef.h"
#line 217 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\guiddef.h"
#pragma option pop
#line 1134 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"





typedef struct _OBJECTID {
    GUID Lineage;
    DWORD Uniquifier;
} OBJECTID;
#line 1357 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef


EXCEPTION_DISPOSITION
__stdcall
EXCEPTION_ROUTINE (
            struct _EXCEPTION_RECORD *ExceptionRecord,
         PVOID EstablisherFrame,
            struct _CONTEXT *ContextRecord,
         PVOID DispatcherContext
    );

typedef EXCEPTION_ROUTINE *PEXCEPTION_ROUTINE;
#line 2363 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef ULONG_PTR KSPIN_LOCK;
typedef KSPIN_LOCK *PKSPIN_LOCK;







typedef struct __attribute__((aligned(16))) _M128A {
    ULONGLONG Low;
    LONGLONG High;
} M128A, *PM128A;





typedef struct __attribute__((aligned(16))) _XSAVE_FORMAT {
    WORD ControlWord;
    WORD StatusWord;
    BYTE TagWord;
    BYTE Reserved1;
    WORD ErrorOpcode;
    DWORD ErrorOffset;
    WORD ErrorSelector;
    WORD Reserved2;
    DWORD DataOffset;
    WORD DataSelector;
    WORD Reserved3;
    DWORD MxCsr;
    DWORD MxCsr_Mask;
    M128A FloatRegisters[8];
#line 2404 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
    M128A XmmRegisters[8];
    BYTE Reserved4[224];



} XSAVE_FORMAT, *PXSAVE_FORMAT;



typedef struct __attribute__((aligned(8))) _XSAVE_AREA_HEADER {
    DWORD64 Mask;
    DWORD64 CompactionMask;
    DWORD64 Reserved2[6];
} XSAVE_AREA_HEADER, *PXSAVE_AREA_HEADER;

typedef struct __attribute__((aligned(16))) _XSAVE_AREA {
    XSAVE_FORMAT LegacyState;
    XSAVE_AREA_HEADER Header;
} XSAVE_AREA, *PXSAVE_AREA;

typedef struct _XSTATE_CONTEXT {
    DWORD64 Mask;
    DWORD Length;
    DWORD Reserved1;
                                   PXSAVE_AREA Area;


    DWORD Reserved2;


    PVOID Buffer;


    DWORD Reserved3;


} XSTATE_CONTEXT, *PXSTATE_CONTEXT;





typedef struct _SCOPE_TABLE_AMD64 {
    DWORD Count;
    struct {
        DWORD BeginAddress;
        DWORD EndAddress;
        DWORD HandlerAddress;
        DWORD JumpTarget;
    } ScopeRecord[1];
} SCOPE_TABLE_AMD64, *PSCOPE_TABLE_AMD64;
#line 3962 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef struct _SCOPE_TABLE_ARM {
    DWORD Count;
    struct
    {
        DWORD BeginAddress;
        DWORD EndAddress;
        DWORD HandlerAddress;
        DWORD JumpTarget;
    } ScopeRecord[1];
} SCOPE_TABLE_ARM, *PSCOPE_TABLE_ARM;
#line 4934 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef struct _SCOPE_TABLE_ARM64 {
    DWORD Count;
    struct
    {
        DWORD BeginAddress;
        DWORD EndAddress;
        DWORD HandlerAddress;
        DWORD JumpTarget;
    } ScopeRecord[1];
} SCOPE_TABLE_ARM64, *PSCOPE_TABLE_ARM64;
#line 6250 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
BOOLEAN
_bittest (
                                   LONG const *Base,
         LONG Offset
    );

BOOLEAN
_bittestandcomplement (
                                        LONG *Base,
         LONG Offset
    );

BOOLEAN
_bittestandset (
                                        LONG *Base,
         LONG Offset
    );

BOOLEAN
_bittestandreset (
                                        LONG *Base,
         LONG Offset
    );

BOOLEAN
_interlockedbittestandset (
                                                              LONG volatile *Base,
         LONG Offset
    );

BOOLEAN
_interlockedbittestandreset (
                                                              LONG volatile *Base,
         LONG Offset
    );


__inline
BOOLEAN
InterlockedBitTestAndSet (
                                                LONG volatile *Base,
         LONG Bit
    )
{







    __asm {
           mov eax, Bit
           mov ecx, Base
           lock bts [ecx], eax
           setc al
    };

}
#line 6332 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
BOOLEAN
_BitScanForward (
          DWORD *Index,
         DWORD Mask
    );


BOOLEAN
_BitScanReverse (
          DWORD *Index,
         DWORD Mask
    );
#line 6381 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
SHORT
InterlockedIncrement16 (
                                  SHORT volatile *Addend
    );

SHORT
InterlockedDecrement16 (
                                  SHORT volatile *Addend
    );

SHORT
InterlockedCompareExchange16 (
                                  SHORT volatile *Destination,
         SHORT ExChange,
         SHORT Comperand
    );

LONG64

__stdcall

InterlockedCompareExchange64 (
                                  LONG64 volatile *Destination,
         LONG64 ExChange,
         LONG64 Comperand
    );
#line 6468 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
LONG
InterlockedAnd (
                                  LONG volatile *Destination,
         LONG Value
    );

LONG

__stdcall



InterlockedOr (
                                  LONG volatile *Destination,
         LONG Value
    );

LONG
InterlockedXor (
                                  LONG volatile *Destination,
         LONG Value
    );

LONG

__stdcall



InterlockedIncrement (
                                  LONG volatile *Addend
    );

LONG

__stdcall



InterlockedDecrement (
                                  LONG volatile *Addend
    );

LONG

__stdcall



InterlockedExchange (
                                  LONG volatile *Target,
         LONG Value
    );

LONG

__stdcall



InterlockedExchangeAdd (
                                  LONG volatile *Addend,
         LONG Value
    );

__inline
LONG
_InlineInterlockedAdd (
                                  LONG volatile *Addend,
         LONG Value
    )

{

    return InterlockedExchangeAdd(Addend, Value) + Value;
}

LONG

__stdcall



InterlockedCompareExchange (
                                  LONG volatile * Destination,
         LONG ExChange,
         LONG Comperand
    );



__inline

PVOID
_InlineInterlockedExchangePointer(



                          PVOID volatile * Destination,
             PVOID Value
    )
{
    return (PVOID)InterlockedExchange((LONG volatile *) Destination,
                                      (LONG) Value);
}






__inline

PVOID
_InlineInterlockedCompareExchangePointer (



                          PVOID volatile * Destination,
             PVOID ExChange,
             PVOID Comperand
    )
{
    return (PVOID)InterlockedCompareExchange((LONG volatile *) Destination,
                                             (LONG) ExChange,
                                             (LONG) Comperand);
}
#line 6736 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
__inline
LONG64
_InlineInterlockedAnd64 (
                                  LONG64 volatile *Destination,
         LONG64 Value
    )
{
    LONG64 Old;

    do {
        Old = *Destination;
    } while (InterlockedCompareExchange64(Destination,
                                          Old & Value,
                                          Old) != Old);

    return Old;
}






__inline
LONG64
_InlineInterlockedAdd64 (
                                  LONG64 volatile *Addend,
         LONG64 Value
    )
{
    LONG64 Old;

    do {
        Old = *Addend;
    } while (InterlockedCompareExchange64(Addend,
                                          Old + Value,
                                          Old) != Old);

    return Old + Value;
}
#line 6811 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
LONGLONG
__inline
_InlineInterlockedOr64 (
                                  LONGLONG volatile *Destination,
         LONGLONG Value
    )
{
    LONGLONG Old;

    do {
        Old = *Destination;
    } while (InterlockedCompareExchange64(Destination,
                                          Old | Value,
                                          Old) != Old);

    return Old;
}



__inline
LONG64
_InlineInterlockedXor64 (
                                  LONG64 volatile *Destination,
         LONG64 Value
    )
{
    LONG64 Old;

    do {
        Old = *Destination;
    } while (InterlockedCompareExchange64(Destination,
                                          Old ^ Value,
                                          Old) != Old);

    return Old;
}



LONGLONG
__inline
_InlineInterlockedIncrement64 (
                                  LONGLONG volatile *Addend
    )
{
    LONGLONG Old;

    do {
        Old = *Addend;
    } while (InterlockedCompareExchange64(Addend,
                                          Old + 1,
                                          Old) != Old);

    return Old + 1;
}





__inline
LONGLONG
_InlineInterlockedDecrement64 (
                                  LONGLONG volatile *Addend
    )
{
    LONGLONG Old;

    do {
        Old = *Addend;
    } while (InterlockedCompareExchange64(Addend,
                                          Old - 1,
                                          Old) != Old);

    return Old - 1;
}



__inline
LONGLONG
_InlineInterlockedExchange64 (
                                  LONGLONG volatile *Target,
         LONGLONG Value
    )
{
    LONGLONG Old;

    do {
        Old = *Target;
    } while (InterlockedCompareExchange64(Target,
                                          Value,
                                          Old) != Old);

    return Old;
}






__inline
LONGLONG
_InlineInterlockedExchangeAdd64 (
                                  LONGLONG volatile *Addend,
         LONGLONG Value
    )
{
    LONGLONG Old;

    do {
        Old = *Addend;
    } while (InterlockedCompareExchange64(Addend,
                                          Old + Value,
                                          Old) != Old);

    return Old;
}
#line 7247 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef struct _FLOATING_SAVE_AREA {
    DWORD ControlWord;
    DWORD StatusWord;
    DWORD TagWord;
    DWORD ErrorOffset;
    DWORD ErrorSelector;
    DWORD DataOffset;
    DWORD DataSelector;
    BYTE RegisterArea[80];
    DWORD Spare0;
} FLOATING_SAVE_AREA;

typedef FLOATING_SAVE_AREA *PFLOATING_SAVE_AREA;
#line 7269 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef char __C_ASSERT__[(sizeof(XSAVE_FORMAT) == 512)?1:-1];







#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/pshpack4.h"
#line 26 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/pshpack4.h"
#pragma pack(push,4)
#line 7276 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
#line 7288 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef struct _CONTEXT {
#line 7308 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
    DWORD ContextFlags;







    DWORD Dr0;
    DWORD Dr1;
    DWORD Dr2;
    DWORD Dr3;
    DWORD Dr6;
    DWORD Dr7;






    FLOATING_SAVE_AREA FloatSave;






    DWORD SegGs;
    DWORD SegFs;
    DWORD SegEs;
    DWORD SegDs;






    DWORD Edi;
    DWORD Esi;
    DWORD Ebx;
    DWORD Edx;
    DWORD Ecx;
    DWORD Eax;






    DWORD Ebp;
    DWORD Eip;
    DWORD SegCs;
    DWORD EFlags;
    DWORD Esp;
    DWORD SegSs;







    BYTE ExtendedRegisters[512];

} CONTEXT;

typedef CONTEXT *PCONTEXT;


#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/poppack.h"
#line 29 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/poppack.h"
#pragma pack(pop)
#line 7376 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
#line 7386 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef struct _LDT_ENTRY {
    WORD LimitLow;
    WORD BaseLow;
    union {
        struct {
            BYTE BaseMid;
            BYTE Flags1;
            BYTE Flags2;
            BYTE BaseHi;
        } Bytes;
        struct {
            DWORD BaseMid : 8;
            DWORD Type : 5;
            DWORD Dpl : 2;
            DWORD Pres : 1;
            DWORD LimitHi : 4;
            DWORD Sys : 1;
            DWORD Reserved_0 : 1;
            DWORD Default_Big : 1;
            DWORD Granularity : 1;
            DWORD BaseHi : 8;
        } Bits;
    } HighWord;
} LDT_ENTRY, *PLDT_ENTRY;
#line 7423 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
__inline
CHAR
ReadAcquire8 (
                               CHAR const volatile *Source
    )

{

    CHAR Value;

    Value = *Source;
    return Value;
}

__inline
CHAR
ReadNoFence8 (
                               CHAR const volatile *Source
    )

{

    CHAR Value;

    Value = *Source;
    return Value;
}

__inline
void
WriteRelease8 (
                                CHAR volatile *Destination,
         CHAR Value
    )

{

    *Destination = Value;
    return;
}

__inline
void
WriteNoFence8 (
                                CHAR volatile *Destination,
         CHAR Value
    )

{

    *Destination = Value;
    return;
}

__inline
SHORT
ReadAcquire16 (
                               SHORT const volatile *Source
    )

{

    SHORT Value;

    Value = *Source;
    return Value;
}

__inline
SHORT
ReadNoFence16 (
                               SHORT const volatile *Source
    )

{

    SHORT Value;

    Value = *Source;
    return Value;
}

__inline
void
WriteRelease16 (
                                SHORT volatile *Destination,
         SHORT Value
    )

{

    *Destination = Value;
    return;
}

__inline
void
WriteNoFence16 (
                                SHORT volatile *Destination,
         SHORT Value
    )

{

    *Destination = Value;
    return;
}

__inline
LONG
ReadAcquire (
                               LONG const volatile *Source
    )

{

    LONG Value;

    Value = *Source;
    return Value;
}

__inline
LONG
ReadNoFence (
                               LONG const volatile *Source
    )

{

    LONG Value;

    Value = *Source;
    return Value;
}

__inline
void
WriteRelease (
                                LONG volatile *Destination,
         LONG Value
    )

{

    *Destination = Value;
    return;
}

__inline
void
WriteNoFence (
                                LONG volatile *Destination,
         LONG Value
    )

{

    *Destination = Value;
    return;
}

__inline
LONG64
ReadAcquire64 (
                               LONG64 const volatile *Source
    )

{

    LONG64 Value;

    Value = *Source;
    return Value;
}

__inline
LONG64
ReadNoFence64 (
                               LONG64 const volatile *Source
    )

{

    LONG64 Value;

    Value = *Source;
    return Value;
}

__inline
void
WriteRelease64 (
                                LONG64 volatile *Destination,
         LONG64 Value
    )

{

    *Destination = Value;
    return;
}

__inline
void
WriteNoFence64 (
                                LONG64 volatile *Destination,
         LONG64 Value
    )

{

    *Destination = Value;
    return;
}
#line 7649 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
__inline
CHAR
ReadRaw8 (
                               CHAR const volatile *Source
    )

{

    CHAR Value;

    Value = *(CHAR *)Source;
    return Value;
}

__inline
void
WriteRaw8 (
                                CHAR volatile *Destination,
         CHAR Value
    )

{

    *(CHAR *)Destination = Value;
    return;
}

__inline
SHORT
ReadRaw16 (
                               SHORT const volatile *Source
    )

{

    SHORT Value;

    Value = *(SHORT *)Source;
    return Value;
}

__inline
void
WriteRaw16 (
                                SHORT volatile *Destination,
         SHORT Value
    )

{

    *(SHORT *)Destination = Value;
    return;
}

__inline
LONG
ReadRaw (
                               LONG const volatile *Source
    )

{

    LONG Value;

    Value = *(LONG *)Source;
    return Value;
}

__inline
void
WriteRaw (
                                LONG volatile *Destination,
         LONG Value
    )

{

    *(LONG *)Destination = Value;
    return;
}

__inline
LONG64
ReadRaw64 (
                               LONG64 const volatile *Source
    )

{

    LONG64 Value;

    Value = *(LONG64 *)Source;
    return Value;
}

__inline
void
WriteRaw64 (
                                LONG64 volatile *Destination,
         LONG64 Value
    )

{

    *(LONG64 *)Destination = Value;
    return;
}





__inline
BYTE
ReadUCharAcquire (
                               BYTE const volatile *Source
    )

{

    return (BYTE )ReadAcquire8((PCHAR)Source);
}

__inline
BYTE
ReadUCharNoFence (
                               BYTE const volatile *Source
    )

{

    return (BYTE )ReadNoFence8((PCHAR)Source);
}

__inline
BYTE
ReadBooleanAcquire (
                               BOOLEAN const volatile *Source
    )

{

    return (BOOLEAN)ReadAcquire8((PCHAR)Source);
}

__inline
BYTE
ReadBooleanNoFence (
                               BOOLEAN const volatile *Source
    )

{

    return (BOOLEAN)ReadNoFence8((PCHAR)Source);
}

__inline
BYTE
ReadUCharRaw (
                               BYTE const volatile *Source
    )

{

    return (BYTE )ReadRaw8((PCHAR)Source);
}

__inline
void
WriteUCharRelease (
                                BYTE volatile *Destination,
         BYTE Value
    )

{

    WriteRelease8((PCHAR)Destination, (CHAR)Value);
    return;
}

__inline
void
WriteUCharNoFence (
                                BYTE volatile *Destination,
         BYTE Value
    )

{

    WriteNoFence8((PCHAR)Destination, (CHAR)Value);
    return;
}

__inline
void
WriteBooleanRelease (
                                BOOLEAN volatile *Destination,
         BOOLEAN Value
    )

{

    WriteRelease8((PCHAR)Destination, (CHAR)Value);
    return;
}

__inline
void
WriteBooleanNoFence (
                                BOOLEAN volatile *Destination,
         BOOLEAN Value
    )

{

    WriteNoFence8((PCHAR)Destination, (CHAR)Value);
    return;
}

__inline
void
WriteUCharRaw (
                                BYTE volatile *Destination,
         BYTE Value
    )

{

    WriteRaw8((PCHAR)Destination, (CHAR)Value);
    return;
}

__inline
WORD
ReadUShortAcquire (
                               WORD const volatile *Source
    )

{

    return (WORD )ReadAcquire16((PSHORT)Source);
}

__inline
WORD
ReadUShortNoFence (
                               WORD const volatile *Source
    )

{

    return (WORD )ReadNoFence16((PSHORT)Source);
}

__inline
WORD
ReadUShortRaw (
                               WORD const volatile *Source
    )

{

    return (WORD )ReadRaw16((PSHORT)Source);
}

__inline
void
WriteUShortRelease (
                                WORD volatile *Destination,
         WORD Value
    )

{

    WriteRelease16((PSHORT)Destination, (SHORT)Value);
    return;
}

__inline
void
WriteUShortNoFence (
                                WORD volatile *Destination,
         WORD Value
    )

{

    WriteNoFence16((PSHORT)Destination, (SHORT)Value);
    return;
}

__inline
void
WriteUShortRaw (
                                WORD volatile *Destination,
         WORD Value
    )

{

    WriteRaw16((PSHORT)Destination, (SHORT)Value);
    return;
}

__inline
DWORD
ReadULongAcquire (
                               DWORD const volatile *Source
    )

{

    return (DWORD)ReadAcquire((PLONG)Source);
}

__inline
DWORD
ReadULongNoFence (
                               DWORD const volatile *Source
    )

{

    return (DWORD)ReadNoFence((PLONG)Source);
}

__inline
DWORD
ReadULongRaw (
                               DWORD const volatile *Source
    )

{

    return (DWORD)ReadRaw((PLONG)Source);
}

__inline
void
WriteULongRelease (
                                DWORD volatile *Destination,
         DWORD Value
    )

{

    WriteRelease((PLONG)Destination, (LONG)Value);
    return;
}

__inline
void
WriteULongNoFence (
                                DWORD volatile *Destination,
         DWORD Value
    )

{

    WriteNoFence((PLONG)Destination, (LONG)Value);
    return;
}

__inline
void
WriteULongRaw (
                                DWORD volatile *Destination,
         DWORD Value
    )

{

    WriteRaw((PLONG)Destination, (LONG)Value);
    return;
}

__inline
DWORD64
ReadULong64Acquire (
                               DWORD64 const volatile *Source
    )

{

    return (DWORD64)ReadAcquire64((PLONG64)Source);
}

__inline
DWORD64
ReadULong64NoFence (
                               DWORD64 const volatile *Source
    )

{

    return (DWORD64)ReadNoFence64((PLONG64)Source);
}

__inline
DWORD64
ReadULong64Raw (
                               DWORD64 const volatile *Source
    )

{

    return (DWORD64)ReadRaw64((PLONG64)Source);
}

__inline
void
WriteULong64Release (
                                DWORD64 volatile *Destination,
         DWORD64 Value
    )

{

    WriteRelease64((PLONG64)Destination, (LONG64)Value);
    return;
}

__inline
void
WriteULong64NoFence (
                                DWORD64 volatile *Destination,
         DWORD64 Value
    )

{

    WriteNoFence64((PLONG64)Destination, (LONG64)Value);
    return;
}

__inline
void
WriteULong64Raw (
                                DWORD64 volatile *Destination,
         DWORD64 Value
    )

{

    WriteRaw64((PLONG64)Destination, (LONG64)Value);
    return;
}
#line 8111 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
__inline
PVOID
ReadPointerAcquire (
                               PVOID const volatile *Source
    )

{

    return (PVOID)ReadAcquire((PLONG)Source);
}

__inline
PVOID
ReadPointerNoFence (
                               PVOID const volatile *Source
    )

{

    return (PVOID)ReadNoFence((PLONG)Source);
}

__inline
PVOID
ReadPointerRaw (
                               PVOID const volatile *Source
    )

{

    return (PVOID)ReadRaw((PLONG)Source);
}

__inline
void
WritePointerRelease (
                                PVOID volatile *Destination,
         PVOID Value
    )

{

    WriteRelease((PLONG)Destination, (LONG)Value);
    return;
}

__inline
void
WritePointerNoFence (
                                PVOID volatile *Destination,
             PVOID Value
    )

{

    WriteNoFence((PLONG)Destination, (LONG)Value);
    return;
}

__inline
void
WritePointerRaw (
                                PVOID volatile *Destination,
             PVOID Value
    )

{

    WriteRaw((PLONG)Destination, (LONG)Value);
    return;
}
#line 8347 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef struct _WOW64_FLOATING_SAVE_AREA {
    DWORD ControlWord;
    DWORD StatusWord;
    DWORD TagWord;
    DWORD ErrorOffset;
    DWORD ErrorSelector;
    DWORD DataOffset;
    DWORD DataSelector;
    BYTE RegisterArea[80];
    DWORD Cr0NpxState;
} WOW64_FLOATING_SAVE_AREA;

typedef WOW64_FLOATING_SAVE_AREA *PWOW64_FLOATING_SAVE_AREA;


#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/pshpack4.h"
#line 26 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/pshpack4.h"
#pragma pack(push,4)
#line 8361 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
#line 8373 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef struct _WOW64_CONTEXT {
#line 8393 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
    DWORD ContextFlags;







    DWORD Dr0;
    DWORD Dr1;
    DWORD Dr2;
    DWORD Dr3;
    DWORD Dr6;
    DWORD Dr7;






    WOW64_FLOATING_SAVE_AREA FloatSave;






    DWORD SegGs;
    DWORD SegFs;
    DWORD SegEs;
    DWORD SegDs;






    DWORD Edi;
    DWORD Esi;
    DWORD Ebx;
    DWORD Edx;
    DWORD Ecx;
    DWORD Eax;






    DWORD Ebp;
    DWORD Eip;
    DWORD SegCs;
    DWORD EFlags;
    DWORD Esp;
    DWORD SegSs;







    BYTE ExtendedRegisters[512];

} WOW64_CONTEXT;

typedef WOW64_CONTEXT *PWOW64_CONTEXT;


#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/poppack.h"
#line 29 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/poppack.h"
#pragma pack(pop)
#line 8461 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"



typedef struct _WOW64_LDT_ENTRY {
    WORD LimitLow;
    WORD BaseLow;
    union {
        struct {
            BYTE BaseMid;
            BYTE Flags1;
            BYTE Flags2;
            BYTE BaseHi;
        } Bytes;
        struct {
            DWORD BaseMid : 8;
            DWORD Type : 5;
            DWORD Dpl : 2;
            DWORD Pres : 1;
            DWORD LimitHi : 4;
            DWORD Sys : 1;
            DWORD Reserved_0 : 1;
            DWORD Default_Big : 1;
            DWORD Granularity : 1;
            DWORD BaseHi : 8;
        } Bits;
    } HighWord;
} WOW64_LDT_ENTRY, *PWOW64_LDT_ENTRY;

typedef struct _WOW64_DESCRIPTOR_TABLE_ENTRY {
    DWORD Selector;
    WOW64_LDT_ENTRY Descriptor;
} WOW64_DESCRIPTOR_TABLE_ENTRY, *PWOW64_DESCRIPTOR_TABLE_ENTRY;
#line 8515 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef struct _EXCEPTION_RECORD {
    DWORD ExceptionCode;
    DWORD ExceptionFlags;
    struct _EXCEPTION_RECORD *ExceptionRecord;
    PVOID ExceptionAddress;
    DWORD NumberParameters;
    ULONG_PTR ExceptionInformation[15];
    } EXCEPTION_RECORD;

typedef EXCEPTION_RECORD *PEXCEPTION_RECORD;

typedef struct _EXCEPTION_RECORD32 {
    DWORD ExceptionCode;
    DWORD ExceptionFlags;
    DWORD ExceptionRecord;
    DWORD ExceptionAddress;
    DWORD NumberParameters;
    DWORD ExceptionInformation[15];
} EXCEPTION_RECORD32, *PEXCEPTION_RECORD32;

typedef struct _EXCEPTION_RECORD64 {
    DWORD ExceptionCode;
    DWORD ExceptionFlags;
    DWORD64 ExceptionRecord;
    DWORD64 ExceptionAddress;
    DWORD NumberParameters;
    DWORD __unusedAlignment;
    DWORD64 ExceptionInformation[15];
} EXCEPTION_RECORD64, *PEXCEPTION_RECORD64;





typedef struct _EXCEPTION_POINTERS {
    PEXCEPTION_RECORD ExceptionRecord;
    PCONTEXT ContextRecord;
} EXCEPTION_POINTERS, *PEXCEPTION_POINTERS;
#line 8573 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef PVOID PACCESS_TOKEN;
typedef PVOID PSECURITY_DESCRIPTOR;
typedef PVOID PSID;
typedef PVOID PCLAIMS_BLOB;
#line 8617 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef DWORD ACCESS_MASK;
typedef ACCESS_MASK *PACCESS_MASK;
#line 8676 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef struct _GENERIC_MAPPING {
    ACCESS_MASK GenericRead;
    ACCESS_MASK GenericWrite;
    ACCESS_MASK GenericExecute;
    ACCESS_MASK GenericAll;
} GENERIC_MAPPING;
typedef GENERIC_MAPPING *PGENERIC_MAPPING;
#line 8695 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/pshpack4.h"
#line 26 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/pshpack4.h"
#pragma pack(push,4)
#line 8695 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"


typedef struct _LUID_AND_ATTRIBUTES {
    LUID Luid;
    DWORD Attributes;
    } LUID_AND_ATTRIBUTES, * PLUID_AND_ATTRIBUTES;
typedef LUID_AND_ATTRIBUTES LUID_AND_ATTRIBUTES_ARRAY[1];
typedef LUID_AND_ATTRIBUTES_ARRAY *PLUID_AND_ATTRIBUTES_ARRAY;


#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/poppack.h"
#line 29 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/poppack.h"
#pragma pack(pop)
#line 8704 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
#line 8739 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef struct _SID_IDENTIFIER_AUTHORITY {
    BYTE Value[6];
} SID_IDENTIFIER_AUTHORITY, *PSID_IDENTIFIER_AUTHORITY;





typedef struct _SID {
   BYTE Revision;
   BYTE SubAuthorityCount;
   SID_IDENTIFIER_AUTHORITY IdentifierAuthority;



   DWORD SubAuthority[1];

} SID, *PISID;
#line 8775 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef union _SE_SID {
    SID Sid;
    BYTE Buffer[(sizeof(SID) - sizeof(DWORD) + ((15) * sizeof(DWORD)))];
} SE_SID, *PSE_SID;




typedef enum _SID_NAME_USE {
    SidTypeUser = 1,
    SidTypeGroup,
    SidTypeDomain,
    SidTypeAlias,
    SidTypeWellKnownGroup,
    SidTypeDeletedAccount,
    SidTypeInvalid,
    SidTypeUnknown,
    SidTypeComputer,
    SidTypeLabel,
    SidTypeLogonSession
} SID_NAME_USE, *PSID_NAME_USE;

typedef struct _SID_AND_ATTRIBUTES {



    PSID Sid;

    DWORD Attributes;
    } SID_AND_ATTRIBUTES, * PSID_AND_ATTRIBUTES;

typedef SID_AND_ATTRIBUTES SID_AND_ATTRIBUTES_ARRAY[1];
typedef SID_AND_ATTRIBUTES_ARRAY *PSID_AND_ATTRIBUTES_ARRAY;


typedef ULONG_PTR SID_HASH_ENTRY, *PSID_HASH_ENTRY;

typedef struct _SID_AND_ATTRIBUTES_HASH {
    DWORD SidCount;
    PSID_AND_ATTRIBUTES SidAttr;
    SID_HASH_ENTRY Hash[32];
} SID_AND_ATTRIBUTES_HASH, *PSID_AND_ATTRIBUTES_HASH;
#line 9201 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef enum {

    WinNullSid = 0,
    WinWorldSid = 1,
    WinLocalSid = 2,
    WinCreatorOwnerSid = 3,
    WinCreatorGroupSid = 4,
    WinCreatorOwnerServerSid = 5,
    WinCreatorGroupServerSid = 6,
    WinNtAuthoritySid = 7,
    WinDialupSid = 8,
    WinNetworkSid = 9,
    WinBatchSid = 10,
    WinInteractiveSid = 11,
    WinServiceSid = 12,
    WinAnonymousSid = 13,
    WinProxySid = 14,
    WinEnterpriseControllersSid = 15,
    WinSelfSid = 16,
    WinAuthenticatedUserSid = 17,
    WinRestrictedCodeSid = 18,
    WinTerminalServerSid = 19,
    WinRemoteLogonIdSid = 20,
    WinLogonIdsSid = 21,
    WinLocalSystemSid = 22,
    WinLocalServiceSid = 23,
    WinNetworkServiceSid = 24,
    WinBuiltinDomainSid = 25,
    WinBuiltinAdministratorsSid = 26,
    WinBuiltinUsersSid = 27,
    WinBuiltinGuestsSid = 28,
    WinBuiltinPowerUsersSid = 29,
    WinBuiltinAccountOperatorsSid = 30,
    WinBuiltinSystemOperatorsSid = 31,
    WinBuiltinPrintOperatorsSid = 32,
    WinBuiltinBackupOperatorsSid = 33,
    WinBuiltinReplicatorSid = 34,
    WinBuiltinPreWindows2000CompatibleAccessSid = 35,
    WinBuiltinRemoteDesktopUsersSid = 36,
    WinBuiltinNetworkConfigurationOperatorsSid = 37,
    WinAccountAdministratorSid = 38,
    WinAccountGuestSid = 39,
    WinAccountKrbtgtSid = 40,
    WinAccountDomainAdminsSid = 41,
    WinAccountDomainUsersSid = 42,
    WinAccountDomainGuestsSid = 43,
    WinAccountComputersSid = 44,
    WinAccountControllersSid = 45,
    WinAccountCertAdminsSid = 46,
    WinAccountSchemaAdminsSid = 47,
    WinAccountEnterpriseAdminsSid = 48,
    WinAccountPolicyAdminsSid = 49,
    WinAccountRasAndIasServersSid = 50,
    WinNTLMAuthenticationSid = 51,
    WinDigestAuthenticationSid = 52,
    WinSChannelAuthenticationSid = 53,
    WinThisOrganizationSid = 54,
    WinOtherOrganizationSid = 55,
    WinBuiltinIncomingForestTrustBuildersSid = 56,
    WinBuiltinPerfMonitoringUsersSid = 57,
    WinBuiltinPerfLoggingUsersSid = 58,
    WinBuiltinAuthorizationAccessSid = 59,
    WinBuiltinTerminalServerLicenseServersSid = 60,
    WinBuiltinDCOMUsersSid = 61,
    WinBuiltinIUsersSid = 62,
    WinIUserSid = 63,
    WinBuiltinCryptoOperatorsSid = 64,
    WinUntrustedLabelSid = 65,
    WinLowLabelSid = 66,
    WinMediumLabelSid = 67,
    WinHighLabelSid = 68,
    WinSystemLabelSid = 69,
    WinWriteRestrictedCodeSid = 70,
    WinCreatorOwnerRightsSid = 71,
    WinCacheablePrincipalsGroupSid = 72,
    WinNonCacheablePrincipalsGroupSid = 73,
    WinEnterpriseReadonlyControllersSid = 74,
    WinAccountReadonlyControllersSid = 75,
    WinBuiltinEventLogReadersGroup = 76,
    WinNewEnterpriseReadonlyControllersSid = 77,
    WinBuiltinCertSvcDComAccessGroup = 78,
    WinMediumPlusLabelSid = 79,
    WinLocalLogonSid = 80,
    WinConsoleLogonSid = 81,
    WinThisOrganizationCertificateSid = 82,
    WinApplicationPackageAuthoritySid = 83,
    WinBuiltinAnyPackageSid = 84,
    WinCapabilityInternetClientSid = 85,
    WinCapabilityInternetClientServerSid = 86,
    WinCapabilityPrivateNetworkClientServerSid = 87,
    WinCapabilityPicturesLibrarySid = 88,
    WinCapabilityVideosLibrarySid = 89,
    WinCapabilityMusicLibrarySid = 90,
    WinCapabilityDocumentsLibrarySid = 91,
    WinCapabilitySharedUserCertificatesSid = 92,
    WinCapabilityEnterpriseAuthenticationSid = 93,
    WinCapabilityRemovableStorageSid = 94,
    WinBuiltinRDSRemoteAccessServersSid = 95,
    WinBuiltinRDSEndpointServersSid = 96,
    WinBuiltinRDSManagementServersSid = 97,
    WinUserModeDriversSid = 98,
    WinBuiltinHyperVAdminsSid = 99,
    WinAccountCloneableControllersSid = 100,
    WinBuiltinAccessControlAssistanceOperatorsSid = 101,
    WinBuiltinRemoteManagementUsersSid = 102,
    WinAuthenticationAuthorityAssertedSid = 103,
    WinAuthenticationServiceAssertedSid = 104,
    WinLocalAccountSid = 105,
    WinLocalAccountAndAdministratorSid = 106,
    WinAccountProtectedUsersSid = 107,
    WinCapabilityAppointmentsSid = 108,
    WinCapabilityContactsSid = 109,
    WinAccountDefaultSystemManagedSid = 110,
    WinBuiltinDefaultSystemManagedGroupSid = 111,
    WinBuiltinStorageReplicaAdminsSid = 112,
    WinAccountKeyAdminsSid = 113,
    WinAccountEnterpriseKeyAdminsSid = 114,
    WinAuthenticationKeyTrustSid = 115,
    WinAuthenticationKeyPropertyMFASid = 116,
    WinAuthenticationKeyPropertyAttestationSid = 117,
} WELL_KNOWN_SID_TYPE;
#line 9418 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef struct _ACL {
    BYTE AclRevision;
    BYTE Sbz1;
    WORD AclSize;
    WORD AceCount;
    WORD Sbz2;
} ACL;
typedef ACL *PACL;
#line 9448 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef struct _ACE_HEADER {
    BYTE AceType;
    BYTE AceFlags;
    WORD AceSize;
} ACE_HEADER;
typedef ACE_HEADER *PACE_HEADER;
#line 9562 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef struct _ACCESS_ALLOWED_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} ACCESS_ALLOWED_ACE;

typedef ACCESS_ALLOWED_ACE *PACCESS_ALLOWED_ACE;

typedef struct _ACCESS_DENIED_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} ACCESS_DENIED_ACE;
typedef ACCESS_DENIED_ACE *PACCESS_DENIED_ACE;

typedef struct _SYSTEM_AUDIT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} SYSTEM_AUDIT_ACE;
typedef SYSTEM_AUDIT_ACE *PSYSTEM_AUDIT_ACE;

typedef struct _SYSTEM_ALARM_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} SYSTEM_ALARM_ACE;
typedef SYSTEM_ALARM_ACE *PSYSTEM_ALARM_ACE;

typedef struct _SYSTEM_RESOURCE_ATTRIBUTE_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;

} SYSTEM_RESOURCE_ATTRIBUTE_ACE, *PSYSTEM_RESOURCE_ATTRIBUTE_ACE;

typedef struct _SYSTEM_SCOPED_POLICY_ID_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} SYSTEM_SCOPED_POLICY_ID_ACE, *PSYSTEM_SCOPED_POLICY_ID_ACE;

typedef struct _SYSTEM_MANDATORY_LABEL_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} SYSTEM_MANDATORY_LABEL_ACE, *PSYSTEM_MANDATORY_LABEL_ACE;

typedef struct _SYSTEM_PROCESS_TRUST_LABEL_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} SYSTEM_PROCESS_TRUST_LABEL_ACE, *PSYSTEM_PROCESS_TRUST_LABEL_ACE;
#line 9630 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef struct _ACCESS_ALLOWED_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
} ACCESS_ALLOWED_OBJECT_ACE, *PACCESS_ALLOWED_OBJECT_ACE;

typedef struct _ACCESS_DENIED_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
} ACCESS_DENIED_OBJECT_ACE, *PACCESS_DENIED_OBJECT_ACE;

typedef struct _SYSTEM_AUDIT_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
} SYSTEM_AUDIT_OBJECT_ACE, *PSYSTEM_AUDIT_OBJECT_ACE;

typedef struct _SYSTEM_ALARM_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
} SYSTEM_ALARM_OBJECT_ACE, *PSYSTEM_ALARM_OBJECT_ACE;






typedef struct _ACCESS_ALLOWED_CALLBACK_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;

} ACCESS_ALLOWED_CALLBACK_ACE, *PACCESS_ALLOWED_CALLBACK_ACE;

typedef struct _ACCESS_DENIED_CALLBACK_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;

} ACCESS_DENIED_CALLBACK_ACE, *PACCESS_DENIED_CALLBACK_ACE;

typedef struct _SYSTEM_AUDIT_CALLBACK_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;

} SYSTEM_AUDIT_CALLBACK_ACE, *PSYSTEM_AUDIT_CALLBACK_ACE;

typedef struct _SYSTEM_ALARM_CALLBACK_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;

} SYSTEM_ALARM_CALLBACK_ACE, *PSYSTEM_ALARM_CALLBACK_ACE;

typedef struct _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;

} ACCESS_ALLOWED_CALLBACK_OBJECT_ACE, *PACCESS_ALLOWED_CALLBACK_OBJECT_ACE;

typedef struct _ACCESS_DENIED_CALLBACK_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;

} ACCESS_DENIED_CALLBACK_OBJECT_ACE, *PACCESS_DENIED_CALLBACK_OBJECT_ACE;

typedef struct _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;

} SYSTEM_AUDIT_CALLBACK_OBJECT_ACE, *PSYSTEM_AUDIT_CALLBACK_OBJECT_ACE;

typedef struct _SYSTEM_ALARM_CALLBACK_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;

} SYSTEM_ALARM_CALLBACK_OBJECT_ACE, *PSYSTEM_ALARM_CALLBACK_OBJECT_ACE;
#line 9753 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef enum _ACL_INFORMATION_CLASS {
    AclRevisionInformation = 1,
    AclSizeInformation
} ACL_INFORMATION_CLASS;






typedef struct _ACL_REVISION_INFORMATION {
    DWORD AclRevision;
} ACL_REVISION_INFORMATION;
typedef ACL_REVISION_INFORMATION *PACL_REVISION_INFORMATION;





typedef struct _ACL_SIZE_INFORMATION {
    DWORD AceCount;
    DWORD AclBytesInUse;
    DWORD AclBytesFree;
} ACL_SIZE_INFORMATION;
typedef ACL_SIZE_INFORMATION *PACL_SIZE_INFORMATION;
#line 9804 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef WORD SECURITY_DESCRIPTOR_CONTROL, *PSECURITY_DESCRIPTOR_CONTROL;
#line 9894 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef struct _SECURITY_DESCRIPTOR_RELATIVE {
    BYTE Revision;
    BYTE Sbz1;
    SECURITY_DESCRIPTOR_CONTROL Control;
    DWORD Owner;
    DWORD Group;
    DWORD Sacl;
    DWORD Dacl;
    } SECURITY_DESCRIPTOR_RELATIVE, *PISECURITY_DESCRIPTOR_RELATIVE;

typedef struct _SECURITY_DESCRIPTOR {
   BYTE Revision;
   BYTE Sbz1;
   SECURITY_DESCRIPTOR_CONTROL Control;
   PSID Owner;
   PSID Group;
   PACL Sacl;
   PACL Dacl;

   } SECURITY_DESCRIPTOR, *PISECURITY_DESCRIPTOR;


typedef struct _SECURITY_OBJECT_AI_PARAMS {
    DWORD Size;
    DWORD ConstraintMask;
} SECURITY_OBJECT_AI_PARAMS, *PSECURITY_OBJECT_AI_PARAMS;
#line 9971 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef struct _OBJECT_TYPE_LIST {
    WORD Level;
    WORD Sbz;
    GUID *ObjectType;
} OBJECT_TYPE_LIST, *POBJECT_TYPE_LIST;
#line 9991 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef enum _AUDIT_EVENT_TYPE {
    AuditEventObjectAccess,
    AuditEventDirectoryServiceAccess
} AUDIT_EVENT_TYPE, *PAUDIT_EVENT_TYPE;
#line 10045 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef struct _PRIVILEGE_SET {
    DWORD PrivilegeCount;
    DWORD Control;
    LUID_AND_ATTRIBUTES Privilege[1];
    } PRIVILEGE_SET, * PPRIVILEGE_SET;
#line 10066 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef enum _ACCESS_REASON_TYPE{

    AccessReasonNone = 0x00000000,






    AccessReasonAllowedAce = 0x00010000,
    AccessReasonDeniedAce = 0x00020000,

    AccessReasonAllowedParentAce = 0x00030000,
    AccessReasonDeniedParentAce = 0x00040000,

    AccessReasonNotGrantedByCape = 0x00050000,
    AccessReasonNotGrantedByParentCape = 0x00060000,

    AccessReasonNotGrantedToAppContainer = 0x00070000,

    AccessReasonMissingPrivilege = 0x00100000,
    AccessReasonFromPrivilege = 0x00200000,


    AccessReasonIntegrityLevel = 0x00300000,

    AccessReasonOwnership = 0x00400000,

    AccessReasonNullDacl = 0x00500000,
    AccessReasonEmptyDacl = 0x00600000,

    AccessReasonNoSD = 0x00700000,
    AccessReasonNoGrant = 0x00800000,

    AccessReasonTrustLabel = 0x00900000
}
ACCESS_REASON_TYPE;
#line 10117 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef DWORD ACCESS_REASON;

typedef struct _ACCESS_REASONS{
        ACCESS_REASON Data[32];
} ACCESS_REASONS, *PACCESS_REASONS;
#line 10146 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef struct _SE_SECURITY_DESCRIPTOR
{
    DWORD Size;
    DWORD Flags;
    PSECURITY_DESCRIPTOR SecurityDescriptor;
} SE_SECURITY_DESCRIPTOR, *PSE_SECURITY_DESCRIPTOR;

typedef struct _SE_ACCESS_REQUEST
{
    DWORD Size;
    PSE_SECURITY_DESCRIPTOR SeSecurityDescriptor;
    ACCESS_MASK DesiredAccess;
    ACCESS_MASK PreviouslyGrantedAccess;
    PSID PrincipalSelfSid;
    PGENERIC_MAPPING GenericMapping;
    DWORD ObjectTypeListCount;
    POBJECT_TYPE_LIST ObjectTypeList;
} SE_ACCESS_REQUEST, *PSE_ACCESS_REQUEST;


typedef struct _SE_ACCESS_REPLY
{
    DWORD Size;
    DWORD ResultListCount;
    PACCESS_MASK GrantedAccess;
    PDWORD AccessStatus;
    PACCESS_REASONS AccessReason;
    PPRIVILEGE_SET* Privileges;
} SE_ACCESS_REPLY, *PSE_ACCESS_REPLY;
#line 10245 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef enum _SECURITY_IMPERSONATION_LEVEL {
    SecurityAnonymous,
    SecurityIdentification,
    SecurityImpersonation,
    SecurityDelegation
    } SECURITY_IMPERSONATION_LEVEL, * PSECURITY_IMPERSONATION_LEVEL;
#line 10327 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef enum _TOKEN_TYPE {
    TokenPrimary = 1,
    TokenImpersonation
    } TOKEN_TYPE;
typedef TOKEN_TYPE *PTOKEN_TYPE;







typedef enum _TOKEN_ELEVATION_TYPE {
    TokenElevationTypeDefault = 1,
    TokenElevationTypeFull,
    TokenElevationTypeLimited,
} TOKEN_ELEVATION_TYPE, *PTOKEN_ELEVATION_TYPE;






typedef enum _TOKEN_INFORMATION_CLASS {
    TokenUser = 1,
    TokenGroups,
    TokenPrivileges,
    TokenOwner,
    TokenPrimaryGroup,
    TokenDefaultDacl,
    TokenSource,
    TokenType,
    TokenImpersonationLevel,
    TokenStatistics,
    TokenRestrictedSids,
    TokenSessionId,
    TokenGroupsAndPrivileges,
    TokenSessionReference,
    TokenSandBoxInert,
    TokenAuditPolicy,
    TokenOrigin,
    TokenElevationType,
    TokenLinkedToken,
    TokenElevation,
    TokenHasRestrictions,
    TokenAccessInformation,
    TokenVirtualizationAllowed,
    TokenVirtualizationEnabled,
    TokenIntegrityLevel,
    TokenUIAccess,
    TokenMandatoryPolicy,
    TokenLogonSid,
    TokenIsAppContainer,
    TokenCapabilities,
    TokenAppContainerSid,
    TokenAppContainerNumber,
    TokenUserClaimAttributes,
    TokenDeviceClaimAttributes,
    TokenRestrictedUserClaimAttributes,
    TokenRestrictedDeviceClaimAttributes,
    TokenDeviceGroups,
    TokenRestrictedDeviceGroups,
    TokenSecurityAttributes,
    TokenIsRestricted,
    TokenProcessTrustLevel,
    TokenPrivateNameSpace,
    MaxTokenInfoClass
} TOKEN_INFORMATION_CLASS, *PTOKEN_INFORMATION_CLASS;





typedef struct _TOKEN_USER {
    SID_AND_ATTRIBUTES User;
} TOKEN_USER, *PTOKEN_USER;



typedef struct _SE_TOKEN_USER {
    union {
        TOKEN_USER TokenUser;
        SID_AND_ATTRIBUTES User;
    } ;

    union {
        SID Sid;
        BYTE Buffer[(sizeof(SID) - sizeof(DWORD) + ((15) * sizeof(DWORD)))];
    } ;

} SE_TOKEN_USER , PSE_TOKEN_USER;






typedef struct _TOKEN_GROUPS {
    DWORD GroupCount;



    SID_AND_ATTRIBUTES Groups[1];

} TOKEN_GROUPS, *PTOKEN_GROUPS;

typedef struct _TOKEN_PRIVILEGES {
    DWORD PrivilegeCount;
    LUID_AND_ATTRIBUTES Privileges[1];
} TOKEN_PRIVILEGES, *PTOKEN_PRIVILEGES;


typedef struct _TOKEN_OWNER {
    PSID Owner;
} TOKEN_OWNER, *PTOKEN_OWNER;





typedef struct _TOKEN_PRIMARY_GROUP {
    PSID PrimaryGroup;
} TOKEN_PRIMARY_GROUP, *PTOKEN_PRIMARY_GROUP;


typedef struct _TOKEN_DEFAULT_DACL {
    PACL DefaultDacl;
} TOKEN_DEFAULT_DACL, *PTOKEN_DEFAULT_DACL;

typedef struct _TOKEN_USER_CLAIMS {
    PCLAIMS_BLOB UserClaims;
} TOKEN_USER_CLAIMS, *PTOKEN_USER_CLAIMS;

typedef struct _TOKEN_DEVICE_CLAIMS {
    PCLAIMS_BLOB DeviceClaims;
} TOKEN_DEVICE_CLAIMS, *PTOKEN_DEVICE_CLAIMS;

typedef struct _TOKEN_GROUPS_AND_PRIVILEGES {
    DWORD SidCount;
    DWORD SidLength;
    PSID_AND_ATTRIBUTES Sids;
    DWORD RestrictedSidCount;
    DWORD RestrictedSidLength;
    PSID_AND_ATTRIBUTES RestrictedSids;
    DWORD PrivilegeCount;
    DWORD PrivilegeLength;
    PLUID_AND_ATTRIBUTES Privileges;
    LUID AuthenticationId;
} TOKEN_GROUPS_AND_PRIVILEGES, *PTOKEN_GROUPS_AND_PRIVILEGES;

typedef struct _TOKEN_LINKED_TOKEN {
    HANDLE LinkedToken;
} TOKEN_LINKED_TOKEN, *PTOKEN_LINKED_TOKEN;

typedef struct _TOKEN_ELEVATION {
    DWORD TokenIsElevated;
} TOKEN_ELEVATION, *PTOKEN_ELEVATION;

typedef struct _TOKEN_MANDATORY_LABEL {
    SID_AND_ATTRIBUTES Label;
} TOKEN_MANDATORY_LABEL, *PTOKEN_MANDATORY_LABEL;
#line 10500 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef struct _TOKEN_MANDATORY_POLICY {
    DWORD Policy;
} TOKEN_MANDATORY_POLICY, *PTOKEN_MANDATORY_POLICY;

typedef PVOID PSECURITY_ATTRIBUTES_OPAQUE;

typedef struct _TOKEN_ACCESS_INFORMATION {
    PSID_AND_ATTRIBUTES_HASH SidHash;
    PSID_AND_ATTRIBUTES_HASH RestrictedSidHash;
    PTOKEN_PRIVILEGES Privileges;
    LUID AuthenticationId;
    TOKEN_TYPE TokenType;
    SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
    TOKEN_MANDATORY_POLICY MandatoryPolicy;
    DWORD Flags;
    DWORD AppContainerNumber;
    PSID PackageSid;
    PSID_AND_ATTRIBUTES_HASH CapabilitiesHash;
    PSID TrustLevelSid;
    PSECURITY_ATTRIBUTES_OPAQUE SecurityAttributes;
} TOKEN_ACCESS_INFORMATION, *PTOKEN_ACCESS_INFORMATION;







typedef struct _TOKEN_AUDIT_POLICY {
    BYTE PerUserPolicy[(((58)) >> 1) + 1];
} TOKEN_AUDIT_POLICY, *PTOKEN_AUDIT_POLICY;



typedef struct _TOKEN_SOURCE {
    CHAR SourceName[8];
    LUID SourceIdentifier;
} TOKEN_SOURCE, *PTOKEN_SOURCE;


typedef struct _TOKEN_STATISTICS {
    LUID TokenId;
    LUID AuthenticationId;
    LARGE_INTEGER ExpirationTime;
    TOKEN_TYPE TokenType;
    SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
    DWORD DynamicCharged;
    DWORD DynamicAvailable;
    DWORD GroupCount;
    DWORD PrivilegeCount;
    LUID ModifiedId;
} TOKEN_STATISTICS, *PTOKEN_STATISTICS;



typedef struct _TOKEN_CONTROL {
    LUID TokenId;
    LUID AuthenticationId;
    LUID ModifiedId;
    TOKEN_SOURCE TokenSource;
} TOKEN_CONTROL, *PTOKEN_CONTROL;

typedef struct _TOKEN_ORIGIN {
    LUID OriginatingLogonSession ;
} TOKEN_ORIGIN, * PTOKEN_ORIGIN ;


typedef enum _MANDATORY_LEVEL {
    MandatoryLevelUntrusted = 0,
    MandatoryLevelLow,
    MandatoryLevelMedium,
    MandatoryLevelHigh,
    MandatoryLevelSystem,
    MandatoryLevelSecureProcess,
    MandatoryLevelCount
} MANDATORY_LEVEL, *PMANDATORY_LEVEL;

typedef struct _TOKEN_APPCONTAINER_INFORMATION {
    PSID TokenAppContainer;
} TOKEN_APPCONTAINER_INFORMATION, *PTOKEN_APPCONTAINER_INFORMATION;





typedef struct _TOKEN_SID_INFORMATION {
    PSID Sid;
} TOKEN_SID_INFORMATION, *PTOKEN_SID_INFORMATION;
#line 10618 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef struct _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE {
    DWORD64 Version;
    PWSTR Name;
} CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE, *PCLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE;
#line 10630 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef struct _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE {
    PVOID pValue;
    DWORD ValueLength;
} CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE,
    *PCLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE;
#line 10702 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef struct _CLAIM_SECURITY_ATTRIBUTE_V1 {






    PWSTR Name;





    WORD ValueType;






    WORD Reserved;





    DWORD Flags;





    DWORD ValueCount;





    union {
        PLONG64 pInt64;
        PDWORD64 pUint64;
        PWSTR *ppString;
        PCLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE pFqbn;
        PCLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE pOctetString;
    } Values;
} CLAIM_SECURITY_ATTRIBUTE_V1, *PCLAIM_SECURITY_ATTRIBUTE_V1;






typedef struct _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1 {






    DWORD Name;





    WORD ValueType;






    WORD Reserved;





    DWORD Flags;





    DWORD ValueCount;





    union {
        DWORD pInt64[1];
        DWORD pUint64[1];
        DWORD ppString[1];
        DWORD pFqbn[1];
        DWORD pOctetString[1];
    } Values;
} CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1, *PCLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1;
#line 10821 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef struct _CLAIM_SECURITY_ATTRIBUTES_INFORMATION {





    WORD Version;





    WORD Reserved;

    DWORD AttributeCount;
    union {
        PCLAIM_SECURITY_ATTRIBUTE_V1 pAttributeV1;
    } Attribute;
} CLAIM_SECURITY_ATTRIBUTES_INFORMATION, *PCLAIM_SECURITY_ATTRIBUTES_INFORMATION;
#line 10848 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef BOOLEAN SECURITY_CONTEXT_TRACKING_MODE,
                    * PSECURITY_CONTEXT_TRACKING_MODE;







typedef struct _SECURITY_QUALITY_OF_SERVICE {
    DWORD Length;
    SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
    SECURITY_CONTEXT_TRACKING_MODE ContextTrackingMode;
    BOOLEAN EffectiveOnly;
    } SECURITY_QUALITY_OF_SERVICE, * PSECURITY_QUALITY_OF_SERVICE;






typedef struct _SE_IMPERSONATION_STATE {
    PACCESS_TOKEN Token;
    BOOLEAN CopyOnOpen;
    BOOLEAN EffectiveOnly;
    SECURITY_IMPERSONATION_LEVEL Level;
} SE_IMPERSONATION_STATE, *PSE_IMPERSONATION_STATE;






typedef DWORD SECURITY_INFORMATION, *PSECURITY_INFORMATION;
#line 10903 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef enum _SE_LEARNING_MODE_DATA_TYPE {
    SeLearningModeInvalidType = 0,
    SeLearningModeSettings,
    SeLearningModeMax
} SE_LEARNING_MODE_DATA_TYPE;



typedef struct _SECURITY_CAPABILITIES {




    PSID AppContainerSid;
    PSID_AND_ATTRIBUTES Capabilities;

    DWORD CapabilityCount;
    DWORD Reserved;
} SECURITY_CAPABILITIES, *PSECURITY_CAPABILITIES, *LPSECURITY_CAPABILITIES;
#line 10976 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef struct _JOB_SET_ARRAY {
    HANDLE JobHandle;
    DWORD MemberLevel;
    DWORD Flags;
} JOB_SET_ARRAY, *PJOB_SET_ARRAY;




typedef struct _EXCEPTION_REGISTRATION_RECORD {
    struct _EXCEPTION_REGISTRATION_RECORD *Next;
    PEXCEPTION_ROUTINE Handler;
} EXCEPTION_REGISTRATION_RECORD;

typedef EXCEPTION_REGISTRATION_RECORD *PEXCEPTION_REGISTRATION_RECORD;

typedef struct _NT_TIB {
    struct _EXCEPTION_REGISTRATION_RECORD *ExceptionList;
    PVOID StackBase;
    PVOID StackLimit;
    PVOID SubSystemTib;






    PVOID FiberData;

    PVOID ArbitraryUserPointer;
    struct _NT_TIB *Self;
} NT_TIB;
typedef NT_TIB *PNT_TIB;




typedef struct _NT_TIB32 {
    DWORD ExceptionList;
    DWORD StackBase;
    DWORD StackLimit;
    DWORD SubSystemTib;







    DWORD FiberData;


    DWORD ArbitraryUserPointer;
    DWORD Self;
} NT_TIB32, *PNT_TIB32;

typedef struct _NT_TIB64 {
    DWORD64 ExceptionList;
    DWORD64 StackBase;
    DWORD64 StackLimit;
    DWORD64 SubSystemTib;
#line 11045 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
    DWORD64 FiberData;


    DWORD64 ArbitraryUserPointer;
    DWORD64 Self;
} NT_TIB64, *PNT_TIB64;
#line 11059 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef struct _UMS_CREATE_THREAD_ATTRIBUTES {
    DWORD UmsVersion;
        PVOID UmsContext;
        PVOID UmsCompletionList;
} UMS_CREATE_THREAD_ATTRIBUTES, *PUMS_CREATE_THREAD_ATTRIBUTES;

typedef struct _QUOTA_LIMITS {
    SIZE_T PagedPoolLimit;
    SIZE_T NonPagedPoolLimit;
    SIZE_T MinimumWorkingSetSize;
    SIZE_T MaximumWorkingSetSize;
    SIZE_T PagefileLimit;
    LARGE_INTEGER TimeLimit;
} QUOTA_LIMITS, *PQUOTA_LIMITS;







typedef union _RATE_QUOTA_LIMIT {
    DWORD RateData;
    struct {
        DWORD RatePercent : 7;
        DWORD Reserved0 : 25;
    } ;
} RATE_QUOTA_LIMIT, *PRATE_QUOTA_LIMIT;

typedef struct _QUOTA_LIMITS_EX {
    SIZE_T PagedPoolLimit;
    SIZE_T NonPagedPoolLimit;
    SIZE_T MinimumWorkingSetSize;
    SIZE_T MaximumWorkingSetSize;
    SIZE_T PagefileLimit;
    LARGE_INTEGER TimeLimit;
    SIZE_T WorkingSetLimit;
    SIZE_T Reserved2;
    SIZE_T Reserved3;
    SIZE_T Reserved4;
    DWORD Flags;
    RATE_QUOTA_LIMIT CpuRateLimit;
} QUOTA_LIMITS_EX, *PQUOTA_LIMITS_EX;

typedef struct _IO_COUNTERS {
    ULONGLONG ReadOperationCount;
    ULONGLONG WriteOperationCount;
    ULONGLONG OtherOperationCount;
    ULONGLONG ReadTransferCount;
    ULONGLONG WriteTransferCount;
    ULONGLONG OtherTransferCount;
} IO_COUNTERS;
typedef IO_COUNTERS *PIO_COUNTERS;




typedef enum _HARDWARE_COUNTER_TYPE {
    PMCCounter,
    MaxHardwareCounterType
} HARDWARE_COUNTER_TYPE, *PHARDWARE_COUNTER_TYPE;
typedef enum _PROCESS_MITIGATION_POLICY {
    ProcessDEPPolicy,
    ProcessASLRPolicy,
    ProcessDynamicCodePolicy,
    ProcessStrictHandleCheckPolicy,
    ProcessSystemCallDisablePolicy,
    ProcessMitigationOptionsMask,
    ProcessExtensionPointDisablePolicy,
    ProcessReserved1Policy,
    ProcessSignaturePolicy,
    ProcessFontDisablePolicy,
    MaxProcessMitigationPolicy
} PROCESS_MITIGATION_POLICY, *PPROCESS_MITIGATION_POLICY;






typedef struct _PROCESS_MITIGATION_ASLR_POLICY {
    union {
        DWORD Flags;
        struct {
            DWORD EnableBottomUpRandomization : 1;
            DWORD EnableForceRelocateImages : 1;
            DWORD EnableHighEntropy : 1;
            DWORD DisallowStrippedImages : 1;
            DWORD ReservedFlags : 28;
        } ;
    } ;
} PROCESS_MITIGATION_ASLR_POLICY, *PPROCESS_MITIGATION_ASLR_POLICY;

typedef struct _PROCESS_MITIGATION_DEP_POLICY {
    union {
        DWORD Flags;
        struct {
            DWORD Enable : 1;
            DWORD DisableAtlThunkEmulation : 1;
            DWORD ReservedFlags : 30;
        } ;
    } ;
    BOOLEAN Permanent;
} PROCESS_MITIGATION_DEP_POLICY, *PPROCESS_MITIGATION_DEP_POLICY;

typedef struct _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY {
    union {
        DWORD Flags;
        struct {
            DWORD RaiseExceptionOnInvalidHandleReference : 1;
            DWORD HandleExceptionsPermanentlyEnabled : 1;
            DWORD ReservedFlags : 30;
        } ;
    } ;
} PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY, *PPROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY;

typedef struct _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY {
    union {
        DWORD Flags;
        struct {
            DWORD DisallowWin32kSystemCalls : 1;
            DWORD ReservedFlags : 31;
        } ;
    } ;
} PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY, *PPROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY;

typedef struct _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY {
    union {
        DWORD Flags;
        struct {
            DWORD DisableExtensionPoints : 1;
            DWORD ReservedFlags : 31;
        } ;
    } ;
} PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY, *PPROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY;

typedef struct _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY {
    union {
        DWORD Flags;
        struct {
            DWORD ProhibitDynamicCode : 1;
            DWORD ReservedFlags : 31;
        } ;
    } ;
} PROCESS_MITIGATION_DYNAMIC_CODE_POLICY, *PPROCESS_MITIGATION_DYNAMIC_CODE_POLICY;


typedef struct _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY {
    union {
        DWORD Flags;
        struct {
            DWORD MicrosoftSignedOnly : 1;
            DWORD ReservedFlags : 31;
        } ;
    } ;
} PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY, *PPROCESS_MITIGATION_BINARY_SIGNATURE_POLICY;

typedef struct _PROCESS_MITIGATION_FONT_DISABLE_POLICY {
    union {
        DWORD Flags;
        struct {
            DWORD DisableNonSystemFonts : 1;
            DWORD AuditNonSystemFontLoading : 1;
            DWORD ReservedFlags : 30;
        } ;
    } ;
} PROCESS_MITIGATION_FONT_DISABLE_POLICY, *PPROCESS_MITIGATION_FONT_DISABLE_POLICY;


typedef struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION {
    LARGE_INTEGER TotalUserTime;
    LARGE_INTEGER TotalKernelTime;
    LARGE_INTEGER ThisPeriodTotalUserTime;
    LARGE_INTEGER ThisPeriodTotalKernelTime;
    DWORD TotalPageFaultCount;
    DWORD TotalProcesses;
    DWORD ActiveProcesses;
    DWORD TotalTerminatedProcesses;
} JOBOBJECT_BASIC_ACCOUNTING_INFORMATION, *PJOBOBJECT_BASIC_ACCOUNTING_INFORMATION;

typedef struct _JOBOBJECT_BASIC_LIMIT_INFORMATION {
    LARGE_INTEGER PerProcessUserTimeLimit;
    LARGE_INTEGER PerJobUserTimeLimit;
    DWORD LimitFlags;
    SIZE_T MinimumWorkingSetSize;
    SIZE_T MaximumWorkingSetSize;
    DWORD ActiveProcessLimit;
    ULONG_PTR Affinity;
    DWORD PriorityClass;
    DWORD SchedulingClass;
} JOBOBJECT_BASIC_LIMIT_INFORMATION, *PJOBOBJECT_BASIC_LIMIT_INFORMATION;

typedef struct _JOBOBJECT_EXTENDED_LIMIT_INFORMATION {
    JOBOBJECT_BASIC_LIMIT_INFORMATION BasicLimitInformation;
    IO_COUNTERS IoInfo;
    SIZE_T ProcessMemoryLimit;
    SIZE_T JobMemoryLimit;
    SIZE_T PeakProcessMemoryUsed;
    SIZE_T PeakJobMemoryUsed;
} JOBOBJECT_EXTENDED_LIMIT_INFORMATION, *PJOBOBJECT_EXTENDED_LIMIT_INFORMATION;


typedef struct _JOBOBJECT_BASIC_PROCESS_ID_LIST {
    DWORD NumberOfAssignedProcesses;
    DWORD NumberOfProcessIdsInList;
    ULONG_PTR ProcessIdList[1];
} JOBOBJECT_BASIC_PROCESS_ID_LIST, *PJOBOBJECT_BASIC_PROCESS_ID_LIST;

typedef struct _JOBOBJECT_BASIC_UI_RESTRICTIONS {
    DWORD UIRestrictionsClass;
} JOBOBJECT_BASIC_UI_RESTRICTIONS, *PJOBOBJECT_BASIC_UI_RESTRICTIONS;





typedef struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION {
    DWORD SecurityLimitFlags ;
    HANDLE JobToken ;
    PTOKEN_GROUPS SidsToDisable ;
    PTOKEN_PRIVILEGES PrivilegesToDelete ;
    PTOKEN_GROUPS RestrictedSids ;
} JOBOBJECT_SECURITY_LIMIT_INFORMATION, *PJOBOBJECT_SECURITY_LIMIT_INFORMATION ;

typedef struct _JOBOBJECT_END_OF_JOB_TIME_INFORMATION {
    DWORD EndOfJobTimeAction;
} JOBOBJECT_END_OF_JOB_TIME_INFORMATION, *PJOBOBJECT_END_OF_JOB_TIME_INFORMATION;

typedef struct _JOBOBJECT_ASSOCIATE_COMPLETION_PORT {
    PVOID CompletionKey;
    HANDLE CompletionPort;
} JOBOBJECT_ASSOCIATE_COMPLETION_PORT, *PJOBOBJECT_ASSOCIATE_COMPLETION_PORT;

typedef struct _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION {
    JOBOBJECT_BASIC_ACCOUNTING_INFORMATION BasicInfo;
    IO_COUNTERS IoInfo;
} JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION, *PJOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION;

typedef struct _JOBOBJECT_JOBSET_INFORMATION {
    DWORD MemberLevel;
} JOBOBJECT_JOBSET_INFORMATION, *PJOBOBJECT_JOBSET_INFORMATION;

typedef enum _JOBOBJECT_RATE_CONTROL_TOLERANCE {
    ToleranceLow = 1,
    ToleranceMedium,
    ToleranceHigh
} JOBOBJECT_RATE_CONTROL_TOLERANCE, *PJOBOBJECT_RATE_CONTROL_TOLERANCE;

typedef enum _JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL {
    ToleranceIntervalShort = 1,
    ToleranceIntervalMedium,
    ToleranceIntervalLong
} JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL,
  *PJOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL;

typedef struct _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION {
    DWORD64 IoReadBytesLimit;
    DWORD64 IoWriteBytesLimit;
    LARGE_INTEGER PerJobUserTimeLimit;
    DWORD64 JobMemoryLimit;
    JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlTolerance;
    JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL RateControlToleranceInterval;
    DWORD LimitFlags;
} JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION, *PJOBOBJECT_NOTIFICATION_LIMIT_INFORMATION;



typedef struct _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_EX {
    WORD Version;
    WORD Reserved;
    DWORD LimitFlags;
    DWORD64 IoReadBytesLimit;
    DWORD64 IoWriteBytesLimit;
    LARGE_INTEGER PerJobUserTimeLimit;
    DWORD64 JobLowMemoryLimit;
    DWORD64 JobHighMemoryLimit;
    union {
        JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlTolerance;
        JOBOBJECT_RATE_CONTROL_TOLERANCE CpuRateControlTolerance;
    } ;

    union {
        JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL RateControlToleranceInterval;
        JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL
            CpuRateControlToleranceInterval;
    } ;

    JOBOBJECT_RATE_CONTROL_TOLERANCE IoRateControlTolerance;
    JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL IoRateControlToleranceInterval;
    JOBOBJECT_RATE_CONTROL_TOLERANCE NetRateControlTolerance;
    JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL NetRateControlToleranceInterval;
} JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_EX, *PJOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_EX;

typedef struct _JOBOBJECT_LIMIT_VIOLATION_INFORMATION {
    DWORD LimitFlags;
    DWORD ViolationLimitFlags;
    DWORD64 IoReadBytes;
    DWORD64 IoReadBytesLimit;
    DWORD64 IoWriteBytes;
    DWORD64 IoWriteBytesLimit;
    LARGE_INTEGER PerJobUserTime;
    LARGE_INTEGER PerJobUserTimeLimit;
    DWORD64 JobMemory;
    DWORD64 JobMemoryLimit;
    JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlTolerance;
    JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlToleranceLimit;
} JOBOBJECT_LIMIT_VIOLATION_INFORMATION, *PJOBOBJECT_LIMIT_VIOLATION_INFORMATION;



typedef struct _JOBOBJECT_LIMIT_VIOLATION_INFORMATION_EX {
    WORD Version;
    WORD Reserved;
    DWORD LimitFlags;
    DWORD ViolationLimitFlags;
    DWORD64 IoReadBytes;
    DWORD64 IoReadBytesLimit;
    DWORD64 IoWriteBytes;
    DWORD64 IoWriteBytesLimit;
    LARGE_INTEGER PerJobUserTime;
    LARGE_INTEGER PerJobUserTimeLimit;
    DWORD64 JobMemory;
    DWORD64 JobLowMemoryLimit;
    DWORD64 JobHighMemoryLimit;
    union {
        JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlTolerance;
        JOBOBJECT_RATE_CONTROL_TOLERANCE CpuRateControlTolerance;
    } ;

    union {
        JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlToleranceLimit;
        JOBOBJECT_RATE_CONTROL_TOLERANCE CpuRateControlToleranceLimit;
    } ;

    JOBOBJECT_RATE_CONTROL_TOLERANCE IoRateControlTolerance;
    JOBOBJECT_RATE_CONTROL_TOLERANCE IoRateControlToleranceLimit;
    JOBOBJECT_RATE_CONTROL_TOLERANCE NetRateControlTolerance;
    JOBOBJECT_RATE_CONTROL_TOLERANCE NetRateControlToleranceLimit;
} JOBOBJECT_LIMIT_VIOLATION_INFORMATION_EX,
  *PJOBOBJECT_LIMIT_VIOLATION_INFORMATION_EX;

typedef struct _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION {
    DWORD ControlFlags;
    union {
        DWORD CpuRate;
        DWORD Weight;
        struct {
            WORD MinRate;
            WORD MaxRate;
        } ;
    } ;
} JOBOBJECT_CPU_RATE_CONTROL_INFORMATION, *PJOBOBJECT_CPU_RATE_CONTROL_INFORMATION;



typedef struct _JOBOBJECT_NET_RATE_CONTROL_INFORMATION {
    WORD Version;
    BYTE DscpTag;
    BYTE Reserved;
    DWORD ControlFlags;
    DWORD64 MaxBandwidth;
} JOBOBJECT_NET_RATE_CONTROL_INFORMATION, *PJOBOBJECT_NET_RATE_CONTROL_INFORMATION;





typedef struct _JOBOBJECT_IO_RATE_CONTROL_INFORMATION {
    WORD Version;
    WORD VolumeNameLength;
    DWORD ControlFlags;
    LONG64 MaxIops;
    LONG64 MaxBandwidth;
    LONG64 ReservationIops;
    PWSTR VolumeName;
    DWORD BaseIoSize;
} JOBOBJECT_IO_RATE_CONTROL_INFORMATION, *PJOBOBJECT_IO_RATE_CONTROL_INFORMATION;
#line 11589 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef enum _JOBOBJECTINFOCLASS {
    JobObjectBasicAccountingInformation = 1,
    JobObjectBasicLimitInformation,
    JobObjectBasicProcessIdList,
    JobObjectBasicUIRestrictions,
    JobObjectSecurityLimitInformation,
    JobObjectEndOfJobTimeInformation,
    JobObjectAssociateCompletionPortInformation,
    JobObjectBasicAndIoAccountingInformation,
    JobObjectExtendedLimitInformation,
    JobObjectJobSetInformation,
    JobObjectGroupInformation,
    JobObjectNotificationLimitInformation,
    JobObjectLimitViolationInformation,
    JobObjectGroupInformationEx,
    JobObjectCpuRateControlInformation,
    JobObjectCompletionFilter,
    JobObjectCompletionCounter,
    JobObjectReserved1Information = 18,
    JobObjectReserved2Information,
    JobObjectReserved3Information,
    JobObjectReserved4Information,
    JobObjectReserved5Information,
    JobObjectReserved6Information,
    JobObjectReserved7Information,
    JobObjectReserved8Information,
    JobObjectReserved9Information,
    JobObjectReserved10Information,
    JobObjectReserved11Information,
    JobObjectReserved12Information,
    JobObjectReserved13Information,
    JobObjectReserved14Information,
    JobObjectVersionedInformationBaseClass,
    JobObjectNetRateControlInformation = JobObjectVersionedInformationBaseClass,
    JobObjectIoRateControlInformation,
    JobObjectNotificationLimitInformationEx,
    JobObjectLimitViolationInformationEx,
    MaxJobObjectInfoClass
} JOBOBJECTINFOCLASS;
#line 11636 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef struct _SILOOBJECT_BASIC_INFORMATION {
    HANDLE SiloIdNumber;
    HANDLE SiloParentIdNumber;
    DWORD NumberOfProcesses;
    DWORD NumberOfChildSilos;
    BOOLEAN IsInServerSilo;
}SILOOBJECT_BASIC_INFORMATION, *PSILOOBJECT_BASIC_INFORMATION;

typedef struct _SILOOBJECT_ROOT_DIRECTORY {
    HANDLE DirectoryHandle;
} SILOOBJECT_ROOT_DIRECTORY, *PSILOOBJECT_ROOT_DIRECTORY;


typedef enum _SERVERSILO_STATE
{
    SERVERSILO_INITING = 0,
    SERVERSILO_STARTED,
    SERVERSILO_TERMINATING,
    SERVERSILO_TERMINATED,
} SERVERSILO_STATE, *PSERVERSILO_STATE;

typedef struct _SERVERSILO_BASIC_INFORMATION {
    HANDLE SiloIdNumber;
    DWORD ServiceSessionId;
    DWORD DefaultCompartmentId;
    SERVERSILO_STATE State;
} SERVERSILO_BASIC_INFORMATION, *PSERVERSILO_BASIC_INFORMATION;

typedef enum _SILOOBJECTINFOCLASS
{
    SiloObjectBasicInformation = 1,
    SiloObjectBasicProcessIdList,
    SiloObjectChildSiloIdList,
    SiloObjectRootDirectory,
    ServerSiloBasicInformation,
    ServerSiloServiceSessionId,
    ServerSiloInitialize,
    ServerSiloDefaultCompartmentId,
    MaxSiloObjectInfoClass
} SILOOBJECTINFOCLASS;



typedef enum _FIRMWARE_TYPE {
    FirmwareTypeUnknown,
    FirmwareTypeBios,
    FirmwareTypeUefi,
    FirmwareTypeMax
} FIRMWARE_TYPE, *PFIRMWARE_TYPE;
#line 11718 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef enum _LOGICAL_PROCESSOR_RELATIONSHIP {
    RelationProcessorCore,
    RelationNumaNode,
    RelationCache,
    RelationProcessorPackage,
    RelationGroup,
    RelationAll = 0xffff
} LOGICAL_PROCESSOR_RELATIONSHIP;



typedef enum _PROCESSOR_CACHE_TYPE {
    CacheUnified,
    CacheInstruction,
    CacheData,
    CacheTrace
} PROCESSOR_CACHE_TYPE;



typedef struct _CACHE_DESCRIPTOR {
    BYTE Level;
    BYTE Associativity;
    WORD LineSize;
    DWORD Size;
    PROCESSOR_CACHE_TYPE Type;
} CACHE_DESCRIPTOR, *PCACHE_DESCRIPTOR;

typedef struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION {
    ULONG_PTR ProcessorMask;
    LOGICAL_PROCESSOR_RELATIONSHIP Relationship;
    union {
        struct {
            BYTE Flags;
        } ProcessorCore;
        struct {
            DWORD NodeNumber;
        } NumaNode;
        CACHE_DESCRIPTOR Cache;
        ULONGLONG Reserved[2];
    } ;
} SYSTEM_LOGICAL_PROCESSOR_INFORMATION, *PSYSTEM_LOGICAL_PROCESSOR_INFORMATION;

typedef struct _PROCESSOR_RELATIONSHIP {
    BYTE Flags;
    BYTE EfficiencyClass;
    BYTE Reserved[20];
    WORD GroupCount;
                             GROUP_AFFINITY GroupMask[1];
} PROCESSOR_RELATIONSHIP, *PPROCESSOR_RELATIONSHIP;

typedef struct _NUMA_NODE_RELATIONSHIP {
    DWORD NodeNumber;
    BYTE Reserved[20];
    GROUP_AFFINITY GroupMask;
} NUMA_NODE_RELATIONSHIP, *PNUMA_NODE_RELATIONSHIP;

typedef struct _CACHE_RELATIONSHIP {
    BYTE Level;
    BYTE Associativity;
    WORD LineSize;
    DWORD CacheSize;
    PROCESSOR_CACHE_TYPE Type;
    BYTE Reserved[20];
    GROUP_AFFINITY GroupMask;
} CACHE_RELATIONSHIP, *PCACHE_RELATIONSHIP;

typedef struct _PROCESSOR_GROUP_INFO {
    BYTE MaximumProcessorCount;
    BYTE ActiveProcessorCount;
    BYTE Reserved[38];
    KAFFINITY ActiveProcessorMask;
} PROCESSOR_GROUP_INFO, *PPROCESSOR_GROUP_INFO;

typedef struct _GROUP_RELATIONSHIP {
    WORD MaximumGroupCount;
    WORD ActiveGroupCount;
    BYTE Reserved[20];
    PROCESSOR_GROUP_INFO GroupInfo[1];
} GROUP_RELATIONSHIP, *PGROUP_RELATIONSHIP;

                          struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX {
    LOGICAL_PROCESSOR_RELATIONSHIP Relationship;
    DWORD Size;
    union {
        PROCESSOR_RELATIONSHIP Processor;
        NUMA_NODE_RELATIONSHIP NumaNode;
        CACHE_RELATIONSHIP Cache;
        GROUP_RELATIONSHIP Group;
    } ;
};

typedef struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX, *PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX;



typedef struct _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION {
    DWORD64 CycleTime;
} SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION, *PSYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION;
#line 11924 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef struct _XSTATE_FEATURE {
    DWORD Offset;
    DWORD Size;
} XSTATE_FEATURE, *PXSTATE_FEATURE;

typedef struct _XSTATE_CONFIGURATION {

    DWORD64 EnabledFeatures;


    DWORD64 EnabledVolatileFeatures;


    DWORD Size;


    DWORD OptimizedSave : 1;
    DWORD CompactionEnabled : 1;


    XSTATE_FEATURE Features[(64)];


    DWORD64 ThreadSupervisorFeatures;


    DWORD64 AlignedFeatures;


    DWORD AllFeatureSize;


    DWORD AllFeatures[(64)];

} XSTATE_CONFIGURATION, *PXSTATE_CONFIGURATION;



typedef struct _MEMORY_BASIC_INFORMATION {
    PVOID BaseAddress;
    PVOID AllocationBase;
    DWORD AllocationProtect;
    SIZE_T RegionSize;
    DWORD State;
    DWORD Protect;
    DWORD Type;
} MEMORY_BASIC_INFORMATION, *PMEMORY_BASIC_INFORMATION;



typedef struct _MEMORY_BASIC_INFORMATION32 {
    DWORD BaseAddress;
    DWORD AllocationBase;
    DWORD AllocationProtect;
    DWORD RegionSize;
    DWORD State;
    DWORD Protect;
    DWORD Type;
} MEMORY_BASIC_INFORMATION32, *PMEMORY_BASIC_INFORMATION32;

typedef struct __attribute__((aligned(16))) _MEMORY_BASIC_INFORMATION64 {
    ULONGLONG BaseAddress;
    ULONGLONG AllocationBase;
    DWORD AllocationProtect;
    DWORD __alignment1;
    ULONGLONG RegionSize;
    DWORD State;
    DWORD Protect;
    DWORD Type;
    DWORD __alignment2;
} MEMORY_BASIC_INFORMATION64, *PMEMORY_BASIC_INFORMATION64;



typedef struct _CFG_CALL_TARGET_INFO {
    ULONG_PTR Offset;
    ULONG_PTR Flags;
} CFG_CALL_TARGET_INFO, *PCFG_CALL_TARGET_INFO;
#line 12202 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef struct _FILE_ID_128 {
    BYTE Identifier[16];
} FILE_ID_128, *PFILE_ID_128;





typedef struct _FILE_NOTIFY_INFORMATION {
    DWORD NextEntryOffset;
    DWORD Action;
    DWORD FileNameLength;
    WCHAR FileName[1];
} FILE_NOTIFY_INFORMATION, *PFILE_NOTIFY_INFORMATION;






typedef union _FILE_SEGMENT_ELEMENT {
    PVOID64 Buffer;
    ULONGLONG Alignment;
}FILE_SEGMENT_ELEMENT, *PFILE_SEGMENT_ELEMENT;
#line 12282 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef struct _REPARSE_GUID_DATA_BUFFER {
    DWORD ReparseTag;
    WORD ReparseDataLength;
    WORD Reserved;
    GUID ReparseGuid;
    struct {
        BYTE DataBuffer[1];
    } GenericReparseBuffer;
} REPARSE_GUID_DATA_BUFFER, *PREPARSE_GUID_DATA_BUFFER;
#line 12689 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
extern const GUID GUID_MAX_POWER_SAVINGS;






extern const GUID GUID_MIN_POWER_SAVINGS;






extern const GUID GUID_TYPICAL_POWER_SAVINGS;







extern const GUID NO_SUBGROUP_GUID;







extern const GUID ALL_POWERSCHEMES_GUID;
#line 12756 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
extern const GUID GUID_POWERSCHEME_PERSONALITY;
#line 12765 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
extern const GUID GUID_ACTIVE_POWERSCHEME;
#line 12780 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
extern const GUID GUID_IDLE_RESILIENCY_SUBGROUP;







extern const GUID GUID_IDLE_RESILIENCY_PERIOD;





extern const GUID GUID_DEEP_SLEEP_ENABLED;
#line 12803 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
extern const GUID GUID_DEEP_SLEEP_PLATFORM_STATE;






extern const GUID GUID_DISK_COALESCING_POWERDOWN_TIMEOUT;
#line 12823 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
extern const GUID GUID_EXECUTION_REQUIRED_REQUEST_TIMEOUT;
#line 12832 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
extern const GUID GUID_VIDEO_SUBGROUP;





extern const GUID GUID_VIDEO_POWERDOWN_TIMEOUT;





extern const GUID GUID_VIDEO_ANNOYANCE_TIMEOUT;





extern const GUID GUID_VIDEO_ADAPTIVE_PERCENT_INCREASE;





extern const GUID GUID_VIDEO_DIM_TIMEOUT;





extern const GUID GUID_VIDEO_ADAPTIVE_POWERDOWN;




extern const GUID GUID_DISK_MAX_POWER;





extern const GUID GUID_MONITOR_POWER_ON;




extern const GUID GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS;





extern const GUID GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS;




extern const GUID GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS;






extern const GUID GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS;





extern const GUID GUID_CONSOLE_DISPLAY_STATE;







extern const GUID GUID_ALLOW_DISPLAY_REQUIRED;







extern const GUID GUID_VIDEO_CONSOLE_LOCK_TIMEOUT;






extern const GUID GUID_ADAPTIVE_POWER_BEHAVIOR_SUBGROUP;






extern const GUID GUID_NON_ADAPTIVE_INPUT_TIMEOUT;







extern const GUID GUID_DISK_SUBGROUP;





extern const GUID GUID_DISK_POWERDOWN_TIMEOUT;






extern const GUID GUID_DISK_IDLE_TIMEOUT;
#line 12962 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
extern const GUID GUID_DISK_BURST_IGNORE_THRESHOLD;





extern const GUID GUID_DISK_ADAPTIVE_POWERDOWN;
#line 12977 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
extern const GUID GUID_SLEEP_SUBGROUP;







extern const GUID GUID_SLEEP_IDLE_THRESHOLD;





extern const GUID GUID_STANDBY_TIMEOUT;
#line 13000 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
extern const GUID GUID_UNATTEND_SLEEP_TIMEOUT;





extern const GUID GUID_HIBERNATE_TIMEOUT;





extern const GUID GUID_HIBERNATE_FASTS4_POLICY;
#line 13021 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
extern const GUID GUID_CRITICAL_POWER_TRANSITION;





extern const GUID GUID_SYSTEM_AWAYMODE;





extern const GUID GUID_ALLOW_AWAYMODE;







extern const GUID GUID_ALLOW_STANDBY_STATES;






extern const GUID GUID_ALLOW_RTC_WAKE;







extern const GUID GUID_ALLOW_SYSTEM_REQUIRED;
#line 13065 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
extern const GUID GUID_POWER_SAVING_STATUS;







extern const GUID GUID_ENERGY_SAVER_SUBGROUP;






extern const GUID GUID_ENERGY_SAVER_BATTERY_THRESHOLD;
#line 13089 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
extern const GUID GUID_SYSTEM_BUTTON_SUBGROUP;
#line 13110 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
extern const GUID GUID_POWERBUTTON_ACTION;





extern const GUID GUID_SLEEPBUTTON_ACTION;






extern const GUID GUID_USERINTERFACEBUTTON_ACTION;





extern const GUID GUID_LIDCLOSE_ACTION;
extern const GUID GUID_LIDOPEN_POWERSTATE;
#line 13139 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
extern const GUID GUID_BATTERY_SUBGROUP;
#line 13151 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
extern const GUID GUID_BATTERY_DISCHARGE_ACTION_0;
extern const GUID GUID_BATTERY_DISCHARGE_LEVEL_0;
extern const GUID GUID_BATTERY_DISCHARGE_FLAGS_0;

extern const GUID GUID_BATTERY_DISCHARGE_ACTION_1;
extern const GUID GUID_BATTERY_DISCHARGE_LEVEL_1;
extern const GUID GUID_BATTERY_DISCHARGE_FLAGS_1;

extern const GUID GUID_BATTERY_DISCHARGE_ACTION_2;
extern const GUID GUID_BATTERY_DISCHARGE_LEVEL_2;
extern const GUID GUID_BATTERY_DISCHARGE_FLAGS_2;

extern const GUID GUID_BATTERY_DISCHARGE_ACTION_3;
extern const GUID GUID_BATTERY_DISCHARGE_LEVEL_3;
extern const GUID GUID_BATTERY_DISCHARGE_FLAGS_3;
#line 13174 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
extern const GUID GUID_PROCESSOR_SETTINGS_SUBGROUP;





extern const GUID GUID_PROCESSOR_THROTTLE_POLICY;
#line 13196 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
extern const GUID GUID_PROCESSOR_THROTTLE_MAXIMUM;







extern const GUID GUID_PROCESSOR_THROTTLE_MINIMUM;







extern const GUID GUID_PROCESSOR_ALLOW_THROTTLING;
#line 13222 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
extern const GUID GUID_PROCESSOR_IDLESTATE_POLICY;





extern const GUID GUID_PROCESSOR_PERFSTATE_POLICY;







extern const GUID GUID_PROCESSOR_PERF_INCREASE_THRESHOLD;







extern const GUID GUID_PROCESSOR_PERF_DECREASE_THRESHOLD;







extern const GUID GUID_PROCESSOR_PERF_INCREASE_POLICY;







extern const GUID GUID_PROCESSOR_PERF_DECREASE_POLICY;
#line 13269 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
extern const GUID GUID_PROCESSOR_PERF_INCREASE_TIME;
#line 13278 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
extern const GUID GUID_PROCESSOR_PERF_DECREASE_TIME;







extern const GUID GUID_PROCESSOR_PERF_TIME_CHECK;







extern const GUID GUID_PROCESSOR_PERF_BOOST_POLICY;
#line 13306 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
extern const GUID GUID_PROCESSOR_PERF_BOOST_MODE;
#line 13322 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
extern const GUID GUID_PROCESSOR_PERF_AUTONOMOUS_MODE;
#line 13333 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
extern const GUID GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE;
#line 13344 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
extern const GUID GUID_PROCESSOR_PERF_AUTONOMOUS_ACTIVITY_WINDOW;
#line 13356 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
extern const GUID GUID_PROCESSOR_IDLE_ALLOW_SCALING;






extern const GUID GUID_PROCESSOR_IDLE_DISABLE;
#line 13372 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
extern const GUID GUID_PROCESSOR_IDLE_STATE_MAXIMUM;
#line 13381 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
extern const GUID GUID_PROCESSOR_IDLE_TIME_CHECK;
#line 13390 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
extern const GUID GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD;







extern const GUID GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD;






extern const GUID GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD;






extern const GUID GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD;






extern const GUID GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY;
#line 13432 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
extern const GUID GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY;






extern const GUID GUID_PROCESSOR_CORE_PARKING_MAX_CORES;






extern const GUID GUID_PROCESSOR_CORE_PARKING_MIN_CORES;






extern const GUID GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME;






extern const GUID GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME;






extern const GUID GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR;






extern const GUID GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD;






extern const GUID GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING;






extern const GUID GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR;






extern const GUID GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD;






extern const GUID GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING;






extern const GUID GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD;







extern const GUID GUID_PROCESSOR_PARKING_CORE_OVERRIDE;







extern const GUID GUID_PROCESSOR_PARKING_PERF_STATE;







extern const GUID GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD;







extern const GUID GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD;







extern const GUID GUID_PROCESSOR_PARKING_DISTRIBUTION_THRESHOLD;






extern const GUID GUID_PROCESSOR_PERF_HISTORY;
#line 13566 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
extern const GUID GUID_PROCESSOR_PERF_INCREASE_HISTORY;
#line 13576 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
extern const GUID GUID_PROCESSOR_PERF_DECREASE_HISTORY;
#line 13586 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
extern const GUID GUID_PROCESSOR_PERF_CORE_PARKING_HISTORY;
#line 13596 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
extern const GUID GUID_PROCESSOR_PERF_LATENCY_HINT;






extern const GUID GUID_PROCESSOR_PERF_LATENCY_HINT_PERF;
#line 13612 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
extern const GUID GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK;







extern const GUID GUID_PROCESSOR_DISTRIBUTE_UTILITY;







extern const GUID GUID_SYSTEM_COOLING_POLICY;
#line 13638 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
extern const GUID GUID_LOCK_CONSOLE_ON_WAKE;
#line 13648 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
extern const GUID GUID_DEVICE_IDLE_POLICY;
#line 13657 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
extern const GUID GUID_WIFI_IN_STANDBY;
#line 13678 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
extern const GUID GUID_ACDC_POWER_SOURCE;
#line 13694 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
extern const GUID GUID_LIDSWITCH_STATE_CHANGE;
#line 13711 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
extern const GUID GUID_BATTERY_PERCENTAGE_REMAINING;
#line 13724 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
extern const GUID GUID_BATTERY_COUNT;






extern const GUID GUID_GLOBAL_USER_PRESENCE;
#line 13742 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
extern const GUID GUID_SESSION_DISPLAY_STATUS;
#line 13752 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
extern const GUID GUID_SESSION_USER_PRESENCE;






extern const GUID GUID_IDLE_BACKGROUND_TASK;






extern const GUID GUID_BACKGROUND_TASK_NOTIFICATION;







extern const GUID GUID_APPLAUNCH_BUTTON;
#line 13785 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
extern const GUID GUID_PCIEXPRESS_SETTINGS_SUBGROUP;





extern const GUID GUID_PCIEXPRESS_ASPM_POLICY;
#line 13803 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
extern const GUID GUID_ENABLE_SWITCH_FORCED_SHUTDOWN;






extern const GUID GUID_INTSTEER_SUBGROUP;



extern const GUID GUID_INTSTEER_MODE;



extern const GUID GUID_INTSTEER_LOAD_PER_PROC_TRIGGER;



extern const GUID GUID_INTSTEER_TIME_UNPARK_TRIGGER;



typedef enum _SYSTEM_POWER_STATE {
    PowerSystemUnspecified = 0,
    PowerSystemWorking = 1,
    PowerSystemSleeping1 = 2,
    PowerSystemSleeping2 = 3,
    PowerSystemSleeping3 = 4,
    PowerSystemHibernate = 5,
    PowerSystemShutdown = 6,
    PowerSystemMaximum = 7
} SYSTEM_POWER_STATE, *PSYSTEM_POWER_STATE;



typedef enum {
    PowerActionNone = 0,
    PowerActionReserved,
    PowerActionSleep,
    PowerActionHibernate,
    PowerActionShutdown,
    PowerActionShutdownReset,
    PowerActionShutdownOff,
    PowerActionWarmEject,
    PowerActionDisplayOff
} POWER_ACTION, *PPOWER_ACTION;

typedef enum _DEVICE_POWER_STATE {
    PowerDeviceUnspecified = 0,
    PowerDeviceD0,
    PowerDeviceD1,
    PowerDeviceD2,
    PowerDeviceD3,
    PowerDeviceMaximum
} DEVICE_POWER_STATE, *PDEVICE_POWER_STATE;

typedef enum _MONITOR_DISPLAY_STATE {
    PowerMonitorOff = 0,
    PowerMonitorOn,
    PowerMonitorDim
} MONITOR_DISPLAY_STATE, *PMONITOR_DISPLAY_STATE;

typedef enum _USER_ACTIVITY_PRESENCE {
    PowerUserPresent = 0,
    PowerUserNotPresent,
    PowerUserInactive,
    PowerUserMaximum,
    PowerUserInvalid = PowerUserMaximum
} USER_ACTIVITY_PRESENCE, *PUSER_ACTIVITY_PRESENCE;
#line 13882 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef DWORD EXECUTION_STATE, *PEXECUTION_STATE;

typedef enum {
    LT_DONT_CARE,
    LT_LOWEST_LATENCY
} LATENCY_TIME;
#line 13908 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef enum _POWER_REQUEST_TYPE {
    PowerRequestDisplayRequired,
    PowerRequestSystemRequired,
    PowerRequestAwayModeRequired,
    PowerRequestExecutionRequired
} POWER_REQUEST_TYPE, *PPOWER_REQUEST_TYPE;
#line 13934 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef struct CM_Power_Data_s {
    DWORD PD_Size;
    DEVICE_POWER_STATE PD_MostRecentPowerState;
    DWORD PD_Capabilities;
    DWORD PD_D1Latency;
    DWORD PD_D2Latency;
    DWORD PD_D3Latency;
    DEVICE_POWER_STATE PD_PowerStateMapping[7];
    SYSTEM_POWER_STATE PD_DeepestSystemWake;
} CM_POWER_DATA, *PCM_POWER_DATA;





typedef enum {
    SystemPowerPolicyAc,
    SystemPowerPolicyDc,
    VerifySystemPolicyAc,
    VerifySystemPolicyDc,
    SystemPowerCapabilities,
    SystemBatteryState,
    SystemPowerStateHandler,
    ProcessorStateHandler,
    SystemPowerPolicyCurrent,
    AdministratorPowerPolicy,
    SystemReserveHiberFile,
    ProcessorInformation,
    SystemPowerInformation,
    ProcessorStateHandler2,
    LastWakeTime,
    LastSleepTime,
    SystemExecutionState,
    SystemPowerStateNotifyHandler,
    ProcessorPowerPolicyAc,
    ProcessorPowerPolicyDc,
    VerifyProcessorPowerPolicyAc,
    VerifyProcessorPowerPolicyDc,
    ProcessorPowerPolicyCurrent,
    SystemPowerStateLogging,
    SystemPowerLoggingEntry,
    SetPowerSettingValue,
    NotifyUserPowerSetting,
    PowerInformationLevelUnused0,
    SystemMonitorHiberBootPowerOff,
    SystemVideoState,
    TraceApplicationPowerMessage,
    TraceApplicationPowerMessageEnd,
    ProcessorPerfStates,
    ProcessorIdleStates,
    ProcessorCap,
    SystemWakeSource,
    SystemHiberFileInformation,
    TraceServicePowerMessage,
    ProcessorLoad,
    PowerShutdownNotification,
    MonitorCapabilities,
    SessionPowerInit,
    SessionDisplayState,
    PowerRequestCreate,
    PowerRequestAction,
    GetPowerRequestList,
    ProcessorInformationEx,
    NotifyUserModeLegacyPowerEvent,
    GroupPark,
    ProcessorIdleDomains,
    WakeTimerList,
    SystemHiberFileSize,
    ProcessorIdleStatesHv,
    ProcessorPerfStatesHv,
    ProcessorPerfCapHv,
    ProcessorSetIdle,
    LogicalProcessorIdling,
    UserPresence,
    PowerSettingNotificationName,
    GetPowerSettingValue,
    IdleResiliency,
    SessionRITState,
    SessionConnectNotification,
    SessionPowerCleanup,
    SessionLockState,
    SystemHiberbootState,
    PlatformInformation,
    PdcInvocation,
    MonitorInvocation,
    FirmwareTableInformationRegistered,
    SetShutdownSelectedTime,
    SuspendResumeInvocation,
    PlmPowerRequestCreate,
    ScreenOff,
    CsDeviceNotification,
    PlatformRole,
    LastResumePerformance,
    DisplayBurst,
    ExitLatencySamplingPercentage,
    RegisterSpmPowerSettings,
    PlatformIdleStates,
    ProcessorIdleVeto,
    PlatformIdleVeto,
    SystemBatteryStatePrecise,
    ThermalEvent,
    PowerRequestActionInternal,
    BatteryDeviceState,
    PowerInformationInternal,
    ThermalStandby,
    SystemHiberFileType,
    PowerInformationLevelMaximum
} POWER_INFORMATION_LEVEL;





typedef enum {
    UserNotPresent = 0,
    UserPresent = 1,
    UserUnknown = 0xff
} POWER_USER_PRESENCE_TYPE, *PPOWER_USER_PRESENCE_TYPE;

typedef struct _POWER_USER_PRESENCE {
    POWER_USER_PRESENCE_TYPE UserPresence;
} POWER_USER_PRESENCE, *PPOWER_USER_PRESENCE;




typedef struct _POWER_SESSION_CONNECT {
    BOOLEAN Connected;
    BOOLEAN Console;
} POWER_SESSION_CONNECT, *PPOWER_SESSION_CONNECT;

typedef struct _POWER_SESSION_TIMEOUTS {
    DWORD InputTimeout;
    DWORD DisplayTimeout;
} POWER_SESSION_TIMEOUTS, *PPOWER_SESSION_TIMEOUTS;




typedef struct _POWER_SESSION_RIT_STATE {
    BOOLEAN Active;
    DWORD LastInputTime;
} POWER_SESSION_RIT_STATE, *PPOWER_SESSION_RIT_STATE;




typedef struct _POWER_SESSION_WINLOGON {
    DWORD SessionId;
    BOOLEAN Console;
    BOOLEAN Locked;
} POWER_SESSION_WINLOGON, *PPOWER_SESSION_WINLOGON;




typedef struct _POWER_IDLE_RESILIENCY {
    DWORD CoalescingTimeout;
    DWORD IdleResiliencyPeriod;
} POWER_IDLE_RESILIENCY, *PPOWER_IDLE_RESILIENCY;




typedef enum {
    MonitorRequestReasonUnknown,
    MonitorRequestReasonPowerButton,
    MonitorRequestReasonRemoteConnection,
    MonitorRequestReasonScMonitorpower,
    MonitorRequestReasonUserInput,
    MonitorRequestReasonAcDcDisplayBurst,
    MonitorRequestReasonUserDisplayBurst,
    MonitorRequestReasonPoSetSystemState,
    MonitorRequestReasonSetThreadExecutionState,
    MonitorRequestReasonFullWake,
    MonitorRequestReasonSessionUnlock,
    MonitorRequestReasonScreenOffRequest,
    MonitorRequestReasonIdleTimeout,
    MonitorRequestReasonPolicyChange,
    MonitorRequestReasonSleepButton,
    MonitorRequestReasonLid,
    MonitorRequestReasonBatteryCountChange,
    MonitorRequestReasonGracePeriod,
    MonitorRequestReasonPnP,
    MonitorRequestReasonDP,
    MonitorRequestReasonSxTransition,
    MonitorRequestReasonSystemIdle,
    MonitorRequestReasonNearProximity,
    MonitorRequestReasonThermalStandby,
    MonitorRequestReasonMax
} POWER_MONITOR_REQUEST_REASON;




typedef struct _POWER_MONITOR_INVOCATION {
    BOOLEAN On;
    BOOLEAN Console;
    POWER_MONITOR_REQUEST_REASON RequestReason;
} POWER_MONITOR_INVOCATION, *PPOWER_MONITOR_INVOCATION;





typedef struct _RESUME_PERFORMANCE {
    DWORD PostTimeMs;
    ULONGLONG TotalResumeTimeMs;
    ULONGLONG ResumeCompleteTimestamp;
} RESUME_PERFORMANCE, *PRESUME_PERFORMANCE;





typedef enum {
    PoAc,
    PoDc,
    PoHot,
    PoConditionMaximum
} SYSTEM_POWER_CONDITION;

typedef struct {





    DWORD Version;





    GUID Guid;






    SYSTEM_POWER_CONDITION PowerCondition;




    DWORD DataLength;




    BYTE Data[1];
} SET_POWER_SETTING_VALUE, *PSET_POWER_SETTING_VALUE;



typedef struct {
    GUID Guid;
} NOTIFY_USER_POWER_SETTING, *PNOTIFY_USER_POWER_SETTING;






typedef struct _APPLICATIONLAUNCH_SETTING_VALUE {





    LARGE_INTEGER ActivationTime;




    DWORD Flags;




    DWORD ButtonInstanceID;


} APPLICATIONLAUNCH_SETTING_VALUE, *PAPPLICATIONLAUNCH_SETTING_VALUE;





typedef enum _POWER_PLATFORM_ROLE {
    PlatformRoleUnspecified = 0,
    PlatformRoleDesktop,
    PlatformRoleMobile,
    PlatformRoleWorkstation,
    PlatformRoleEnterpriseServer,
    PlatformRoleSOHOServer,
    PlatformRoleAppliancePC,
    PlatformRolePerformanceServer,
    PlatformRoleSlate,
    PlatformRoleMaximum
} POWER_PLATFORM_ROLE, *PPOWER_PLATFORM_ROLE;
#line 14255 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef struct _POWER_PLATFORM_INFORMATION {
    BOOLEAN AoAc;
} POWER_PLATFORM_INFORMATION, *PPOWER_PLATFORM_INFORMATION;






typedef struct {
    DWORD Granularity;
    DWORD Capacity;
} BATTERY_REPORTING_SCALE, *PBATTERY_REPORTING_SCALE;




typedef struct {
    DWORD Frequency;
    DWORD Flags;
    DWORD PercentFrequency;
} PPM_WMI_LEGACY_PERFSTATE, *PPPM_WMI_LEGACY_PERFSTATE;

typedef struct {
    DWORD Latency;
    DWORD Power;
    DWORD TimeCheck;
    BYTE PromotePercent;
    BYTE DemotePercent;
    BYTE StateType;
    BYTE Reserved;
    DWORD StateFlags;
    DWORD Context;
    DWORD IdleHandler;
    DWORD Reserved1;
} PPM_WMI_IDLE_STATE, *PPPM_WMI_IDLE_STATE;

typedef struct {
    DWORD Type;
    DWORD Count;
    DWORD TargetState;
    DWORD OldState;
    DWORD64 TargetProcessors;
    PPM_WMI_IDLE_STATE State[1];
} PPM_WMI_IDLE_STATES, *PPPM_WMI_IDLE_STATES;

typedef struct {
    DWORD Type;
    DWORD Count;
    DWORD TargetState;
    DWORD OldState;
    PVOID TargetProcessors;
    PPM_WMI_IDLE_STATE State[1];
} PPM_WMI_IDLE_STATES_EX, *PPPM_WMI_IDLE_STATES_EX;

typedef struct {
    DWORD Frequency;
    DWORD Power;
    BYTE PercentFrequency;
    BYTE IncreaseLevel;
    BYTE DecreaseLevel;
    BYTE Type;
    DWORD IncreaseTime;
    DWORD DecreaseTime;
    DWORD64 Control;
    DWORD64 Status;
    DWORD HitCount;
    DWORD Reserved1;
    DWORD64 Reserved2;
    DWORD64 Reserved3;
} PPM_WMI_PERF_STATE, *PPPM_WMI_PERF_STATE;

typedef struct {
    DWORD Count;
    DWORD MaxFrequency;
    DWORD CurrentState;
    DWORD MaxPerfState;
    DWORD MinPerfState;
    DWORD LowestPerfState;
    DWORD ThermalConstraint;
    BYTE BusyAdjThreshold;
    BYTE PolicyType;
    BYTE Type;
    BYTE Reserved;
    DWORD TimerInterval;
    DWORD64 TargetProcessors;
    DWORD PStateHandler;
    DWORD PStateContext;
    DWORD TStateHandler;
    DWORD TStateContext;
    DWORD FeedbackHandler;
    DWORD Reserved1;
    DWORD64 Reserved2;
    PPM_WMI_PERF_STATE State[1];
} PPM_WMI_PERF_STATES, *PPPM_WMI_PERF_STATES;

typedef struct {
    DWORD Count;
    DWORD MaxFrequency;
    DWORD CurrentState;
    DWORD MaxPerfState;
    DWORD MinPerfState;
    DWORD LowestPerfState;
    DWORD ThermalConstraint;
    BYTE BusyAdjThreshold;
    BYTE PolicyType;
    BYTE Type;
    BYTE Reserved;
    DWORD TimerInterval;
    PVOID TargetProcessors;
    DWORD PStateHandler;
    DWORD PStateContext;
    DWORD TStateHandler;
    DWORD TStateContext;
    DWORD FeedbackHandler;
    DWORD Reserved1;
    DWORD64 Reserved2;
    PPM_WMI_PERF_STATE State[1];
} PPM_WMI_PERF_STATES_EX, *PPPM_WMI_PERF_STATES_EX;







typedef struct {
    DWORD IdleTransitions;
    DWORD FailedTransitions;
    DWORD InvalidBucketIndex;
    DWORD64 TotalTime;
    DWORD IdleTimeBuckets[6];
} PPM_IDLE_STATE_ACCOUNTING, *PPPM_IDLE_STATE_ACCOUNTING;

typedef struct {
    DWORD StateCount;
    DWORD TotalTransitions;
    DWORD ResetCount;
    DWORD64 StartTime;
    PPM_IDLE_STATE_ACCOUNTING State[1];
} PPM_IDLE_ACCOUNTING, *PPPM_IDLE_ACCOUNTING;







typedef struct {
    DWORD64 TotalTimeUs;
    DWORD MinTimeUs;
    DWORD MaxTimeUs;
    DWORD Count;
} PPM_IDLE_STATE_BUCKET_EX, *PPPM_IDLE_STATE_BUCKET_EX;

typedef struct {
    DWORD64 TotalTime;
    DWORD IdleTransitions;
    DWORD FailedTransitions;
    DWORD InvalidBucketIndex;
    DWORD MinTimeUs;
    DWORD MaxTimeUs;
    DWORD CancelledTransitions;
    PPM_IDLE_STATE_BUCKET_EX IdleTimeBuckets[16];
} PPM_IDLE_STATE_ACCOUNTING_EX, *PPPM_IDLE_STATE_ACCOUNTING_EX;

typedef struct {
    DWORD StateCount;
    DWORD TotalTransitions;
    DWORD ResetCount;
    DWORD AbortCount;
    DWORD64 StartTime;
                             PPM_IDLE_STATE_ACCOUNTING_EX State[1];
} PPM_IDLE_ACCOUNTING_EX, *PPPM_IDLE_ACCOUNTING_EX;
#line 14489 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
extern const GUID PPM_PERFSTATE_CHANGE_GUID;



extern const GUID PPM_PERFSTATE_DOMAIN_CHANGE_GUID;



extern const GUID PPM_IDLESTATE_CHANGE_GUID;



extern const GUID PPM_PERFSTATES_DATA_GUID;



extern const GUID PPM_IDLESTATES_DATA_GUID;



extern const GUID PPM_IDLE_ACCOUNTING_GUID;



extern const GUID PPM_IDLE_ACCOUNTING_EX_GUID;



extern const GUID PPM_THERMALCONSTRAINT_GUID;



extern const GUID PPM_PERFMON_PERFSTATE_GUID;



extern const GUID PPM_THERMAL_POLICY_CHANGE_GUID;



typedef struct {
    DWORD State;
    DWORD Status;
    DWORD Latency;
    DWORD Speed;
    DWORD Processor;
} PPM_PERFSTATE_EVENT, *PPPM_PERFSTATE_EVENT;

typedef struct {
    DWORD State;
    DWORD Latency;
    DWORD Speed;
    DWORD64 Processors;
} PPM_PERFSTATE_DOMAIN_EVENT, *PPPM_PERFSTATE_DOMAIN_EVENT;

typedef struct {
    DWORD NewState;
    DWORD OldState;
    DWORD64 Processors;
} PPM_IDLESTATE_EVENT, *PPPM_IDLESTATE_EVENT;

typedef struct {
    DWORD ThermalConstraint;
    DWORD64 Processors;
} PPM_THERMALCHANGE_EVENT, *PPPM_THERMALCHANGE_EVENT;




typedef struct {
    BYTE Mode;
    DWORD64 Processors;
} PPM_THERMAL_POLICY_EVENT, *PPPM_THERMAL_POLICY_EVENT;






typedef struct {
    POWER_ACTION Action;
    DWORD Flags;
    DWORD EventCode;
} POWER_ACTION_POLICY, *PPOWER_ACTION_POLICY;
#line 14605 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef struct {
    BOOLEAN Enable;
    BYTE Spare[3];
    DWORD BatteryLevel;
    POWER_ACTION_POLICY PowerPolicy;
    SYSTEM_POWER_STATE MinSystemState;
} SYSTEM_POWER_LEVEL, *PSYSTEM_POWER_LEVEL;
#line 14620 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef struct _SYSTEM_POWER_POLICY {
    DWORD Revision;


    POWER_ACTION_POLICY PowerButton;
    POWER_ACTION_POLICY SleepButton;
    POWER_ACTION_POLICY LidClose;
    SYSTEM_POWER_STATE LidOpenWake;
    DWORD Reserved;


    POWER_ACTION_POLICY Idle;
    DWORD IdleTimeout;
    BYTE IdleSensitivity;

    BYTE DynamicThrottle;
    BYTE Spare2[2];


    SYSTEM_POWER_STATE MinSleep;
    SYSTEM_POWER_STATE MaxSleep;
    SYSTEM_POWER_STATE ReducedLatencySleep;
    DWORD WinLogonFlags;

    DWORD Spare3;



    DWORD DozeS4Timeout;


    DWORD BroadcastCapacityResolution;
    SYSTEM_POWER_LEVEL DischargePolicy[4];


    DWORD VideoTimeout;
    BOOLEAN VideoDimDisplay;
    DWORD VideoReserved[3];


    DWORD SpindownTimeout;


    BOOLEAN OptimizeForPower;
    BYTE FanThrottleTolerance;
    BYTE ForcedThrottle;
    BYTE MinThrottle;
    POWER_ACTION_POLICY OverThrottled;

} SYSTEM_POWER_POLICY, *PSYSTEM_POWER_POLICY;
#line 14680 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef struct {
    DWORD TimeCheck;
    BYTE DemotePercent;
    BYTE PromotePercent;
    BYTE Spare[2];
} PROCESSOR_IDLESTATE_INFO, *PPROCESSOR_IDLESTATE_INFO;

typedef struct {
    WORD Revision;
    union {
        WORD AsWORD ;
        struct {
            WORD AllowScaling : 1;
            WORD Disabled : 1;
            WORD Reserved : 14;
        } ;
    } Flags;

    DWORD PolicyCount;
    PROCESSOR_IDLESTATE_INFO Policy[0x3];
} PROCESSOR_IDLESTATE_POLICY, *PPROCESSOR_IDLESTATE_POLICY;
#line 14715 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef struct _PROCESSOR_POWER_POLICY_INFO {


    DWORD TimeCheck;
    DWORD DemoteLimit;
    DWORD PromoteLimit;


    BYTE DemotePercent;
    BYTE PromotePercent;
    BYTE Spare[2];


    DWORD AllowDemotion:1;
    DWORD AllowPromotion:1;
    DWORD Reserved:30;

} PROCESSOR_POWER_POLICY_INFO, *PPROCESSOR_POWER_POLICY_INFO;


typedef struct _PROCESSOR_POWER_POLICY {
    DWORD Revision;


    BYTE DynamicThrottle;
    BYTE Spare[3];


    DWORD DisableCStates:1;
    DWORD Reserved:31;




    DWORD PolicyCount;
    PROCESSOR_POWER_POLICY_INFO Policy[3];

} PROCESSOR_POWER_POLICY, *PPROCESSOR_POWER_POLICY;





typedef struct {
    DWORD Revision;
    BYTE MaxThrottle;
    BYTE MinThrottle;
    BYTE BusyAdjThreshold;
    union {
        BYTE Spare;
        union {
            BYTE AsBYTE ;
            struct {
                BYTE NoDomainAccounting : 1;
                BYTE IncreasePolicy: 2;
                BYTE DecreasePolicy: 2;
                BYTE Reserved : 3;
            } ;
        } Flags;
    } ;

    DWORD TimeCheck;
    DWORD IncreaseTime;
    DWORD DecreaseTime;
    DWORD IncreasePercent;
    DWORD DecreasePercent;
} PROCESSOR_PERFSTATE_POLICY, *PPROCESSOR_PERFSTATE_POLICY;


typedef struct _ADMINISTRATOR_POWER_POLICY {


    SYSTEM_POWER_STATE MinSleep;
    SYSTEM_POWER_STATE MaxSleep;


    DWORD MinVideoTimeout;
    DWORD MaxVideoTimeout;


    DWORD MinSpindownTimeout;
    DWORD MaxSpindownTimeout;
} ADMINISTRATOR_POWER_POLICY, *PADMINISTRATOR_POWER_POLICY;


typedef enum _HIBERFILE_BUCKET_SIZE {
    HiberFileBucket1GB = 0,
    HiberFileBucket2GB,
    HiberFileBucket4GB,
    HiberFileBucket8GB,
    HiberFileBucket16GB,
    HiberFileBucket32GB,
    HiberFileBucketUnlimited,
    HiberFileBucketMax
} HIBERFILE_BUCKET_SIZE, *PHIBERFILE_BUCKET_SIZE;






typedef struct _HIBERFILE_BUCKET {
    DWORD64 MaxPhysicalMemory;
    DWORD PhysicalMemoryPercent[0x03];
} HIBERFILE_BUCKET, *PHIBERFILE_BUCKET;

typedef struct {

    BOOLEAN PowerButtonPresent;
    BOOLEAN SleepButtonPresent;
    BOOLEAN LidPresent;
    BOOLEAN SystemS1;
    BOOLEAN SystemS2;
    BOOLEAN SystemS3;
    BOOLEAN SystemS4;
    BOOLEAN SystemS5;
    BOOLEAN HiberFilePresent;
    BOOLEAN FullWake;
    BOOLEAN VideoDimPresent;
    BOOLEAN ApmPresent;
    BOOLEAN UpsPresent;


    BOOLEAN ThermalControl;
    BOOLEAN ProcessorThrottle;
    BYTE ProcessorMinThrottle;





    BYTE ProcessorMaxThrottle;
    BOOLEAN FastSystemS4;
    BOOLEAN Hiberboot;
    BOOLEAN WakeAlarmPresent;
    BOOLEAN AoAc;



    BOOLEAN DiskSpinDown;


    BYTE spare3[8];







    BOOLEAN SystemBatteriesPresent;
    BOOLEAN BatteriesAreShortTerm;
    BATTERY_REPORTING_SCALE BatteryScale[3];


    SYSTEM_POWER_STATE AcOnLineWake;
    SYSTEM_POWER_STATE SoftLidWake;
    SYSTEM_POWER_STATE RtcWake;
    SYSTEM_POWER_STATE MinDeviceWakeState;
    SYSTEM_POWER_STATE DefaultLowLatencyWake;
} SYSTEM_POWER_CAPABILITIES, *PSYSTEM_POWER_CAPABILITIES;

typedef struct {
    BOOLEAN AcOnLine;
    BOOLEAN BatteryPresent;
    BOOLEAN Charging;
    BOOLEAN Discharging;
    BOOLEAN Spare1[3];

    BYTE Tag;

    DWORD MaxCapacity;
    DWORD RemainingCapacity;
    DWORD Rate;
    DWORD EstimatedTime;

    DWORD DefaultAlert1;
    DWORD DefaultAlert2;
} SYSTEM_BATTERY_STATE, *PSYSTEM_BATTERY_STATE;
#line 14904 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/pshpack4.h"
#line 26 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/pshpack4.h"
#pragma pack(push,4)
#line 14904 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"








#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/pshpack2.h"
#line 26 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/pshpack2.h"
#pragma pack(push,2)
#line 14912 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
#line 14924 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef struct _IMAGE_DOS_HEADER {
    WORD e_magic;
    WORD e_cblp;
    WORD e_cp;
    WORD e_crlc;
    WORD e_cparhdr;
    WORD e_minalloc;
    WORD e_maxalloc;
    WORD e_ss;
    WORD e_sp;
    WORD e_csum;
    WORD e_ip;
    WORD e_cs;
    WORD e_lfarlc;
    WORD e_ovno;
    WORD e_res[4];
    WORD e_oemid;
    WORD e_oeminfo;
    WORD e_res2[10];
    LONG e_lfanew;
  } IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER;

typedef struct _IMAGE_OS2_HEADER {
    WORD ne_magic;
    CHAR ne_ver;
    CHAR ne_rev;
    WORD ne_enttab;
    WORD ne_cbenttab;
    LONG ne_crc;
    WORD ne_flags;
    WORD ne_autodata;
    WORD ne_heap;
    WORD ne_stack;
    LONG ne_csip;
    LONG ne_sssp;
    WORD ne_cseg;
    WORD ne_cmod;
    WORD ne_cbnrestab;
    WORD ne_segtab;
    WORD ne_rsrctab;
    WORD ne_restab;
    WORD ne_modtab;
    WORD ne_imptab;
    LONG ne_nrestab;
    WORD ne_cmovent;
    WORD ne_align;
    WORD ne_cres;
    BYTE ne_exetyp;
    BYTE ne_flagsothers;
    WORD ne_pretthunks;
    WORD ne_psegrefbytes;
    WORD ne_swaparea;
    WORD ne_expver;
  } IMAGE_OS2_HEADER, *PIMAGE_OS2_HEADER;

typedef struct _IMAGE_VXD_HEADER {
    WORD e32_magic;
    BYTE e32_border;
    BYTE e32_worder;
    DWORD e32_level;
    WORD e32_cpu;
    WORD e32_os;
    DWORD e32_ver;
    DWORD e32_mflags;
    DWORD e32_mpages;
    DWORD e32_startobj;
    DWORD e32_eip;
    DWORD e32_stackobj;
    DWORD e32_esp;
    DWORD e32_pagesize;
    DWORD e32_lastpagesize;
    DWORD e32_fixupsize;
    DWORD e32_fixupsum;
    DWORD e32_ldrsize;
    DWORD e32_ldrsum;
    DWORD e32_objtab;
    DWORD e32_objcnt;
    DWORD e32_objmap;
    DWORD e32_itermap;
    DWORD e32_rsrctab;
    DWORD e32_rsrccnt;
    DWORD e32_restab;
    DWORD e32_enttab;
    DWORD e32_dirtab;
    DWORD e32_dircnt;
    DWORD e32_fpagetab;
    DWORD e32_frectab;
    DWORD e32_impmod;
    DWORD e32_impmodcnt;
    DWORD e32_impproc;
    DWORD e32_pagesum;
    DWORD e32_datapage;
    DWORD e32_preload;
    DWORD e32_nrestab;
    DWORD e32_cbnrestab;
    DWORD e32_nressum;
    DWORD e32_autodata;
    DWORD e32_debuginfo;
    DWORD e32_debuglen;
    DWORD e32_instpreload;
    DWORD e32_instdemand;
    DWORD e32_heapsize;
    BYTE e32_res3[12];
    DWORD e32_winresoff;
    DWORD e32_winreslen;
    WORD e32_devid;
    WORD e32_ddkver;
  } IMAGE_VXD_HEADER, *PIMAGE_VXD_HEADER;



#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/poppack.h"
#line 29 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/poppack.h"
#pragma pack(pop)
#line 15034 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"







typedef struct _IMAGE_FILE_HEADER {
    WORD Machine;
    WORD NumberOfSections;
    DWORD TimeDateStamp;
    DWORD PointerToSymbolTable;
    DWORD NumberOfSymbols;
    WORD SizeOfOptionalHeader;
    WORD Characteristics;
} IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER;
#line 15105 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef struct _IMAGE_DATA_DIRECTORY {
    DWORD VirtualAddress;
    DWORD Size;
} IMAGE_DATA_DIRECTORY, *PIMAGE_DATA_DIRECTORY;







typedef struct _IMAGE_OPTIONAL_HEADER {




    WORD Magic;
    BYTE MajorLinkerVersion;
    BYTE MinorLinkerVersion;
    DWORD SizeOfCode;
    DWORD SizeOfInitializedData;
    DWORD SizeOfUninitializedData;
    DWORD AddressOfEntryPoint;
    DWORD BaseOfCode;
    DWORD BaseOfData;





    DWORD ImageBase;
    DWORD SectionAlignment;
    DWORD FileAlignment;
    WORD MajorOperatingSystemVersion;
    WORD MinorOperatingSystemVersion;
    WORD MajorImageVersion;
    WORD MinorImageVersion;
    WORD MajorSubsystemVersion;
    WORD MinorSubsystemVersion;
    DWORD Win32VersionValue;
    DWORD SizeOfImage;
    DWORD SizeOfHeaders;
    DWORD CheckSum;
    WORD Subsystem;
    WORD DllCharacteristics;
    DWORD SizeOfStackReserve;
    DWORD SizeOfStackCommit;
    DWORD SizeOfHeapReserve;
    DWORD SizeOfHeapCommit;
    DWORD LoaderFlags;
    DWORD NumberOfRvaAndSizes;
    IMAGE_DATA_DIRECTORY DataDirectory[16];
} IMAGE_OPTIONAL_HEADER32, *PIMAGE_OPTIONAL_HEADER32;

typedef struct _IMAGE_ROM_OPTIONAL_HEADER {
    WORD Magic;
    BYTE MajorLinkerVersion;
    BYTE MinorLinkerVersion;
    DWORD SizeOfCode;
    DWORD SizeOfInitializedData;
    DWORD SizeOfUninitializedData;
    DWORD AddressOfEntryPoint;
    DWORD BaseOfCode;
    DWORD BaseOfData;
    DWORD BaseOfBss;
    DWORD GprMask;
    DWORD CprMask[4];
    DWORD GpValue;
} IMAGE_ROM_OPTIONAL_HEADER, *PIMAGE_ROM_OPTIONAL_HEADER;

typedef struct _IMAGE_OPTIONAL_HEADER64 {
    WORD Magic;
    BYTE MajorLinkerVersion;
    BYTE MinorLinkerVersion;
    DWORD SizeOfCode;
    DWORD SizeOfInitializedData;
    DWORD SizeOfUninitializedData;
    DWORD AddressOfEntryPoint;
    DWORD BaseOfCode;
    ULONGLONG ImageBase;
    DWORD SectionAlignment;
    DWORD FileAlignment;
    WORD MajorOperatingSystemVersion;
    WORD MinorOperatingSystemVersion;
    WORD MajorImageVersion;
    WORD MinorImageVersion;
    WORD MajorSubsystemVersion;
    WORD MinorSubsystemVersion;
    DWORD Win32VersionValue;
    DWORD SizeOfImage;
    DWORD SizeOfHeaders;
    DWORD CheckSum;
    WORD Subsystem;
    WORD DllCharacteristics;
    ULONGLONG SizeOfStackReserve;
    ULONGLONG SizeOfStackCommit;
    ULONGLONG SizeOfHeapReserve;
    ULONGLONG SizeOfHeapCommit;
    DWORD LoaderFlags;
    DWORD NumberOfRvaAndSizes;
    IMAGE_DATA_DIRECTORY DataDirectory[16];
} IMAGE_OPTIONAL_HEADER64, *PIMAGE_OPTIONAL_HEADER64;
#line 15217 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef IMAGE_OPTIONAL_HEADER32 IMAGE_OPTIONAL_HEADER;
typedef PIMAGE_OPTIONAL_HEADER32 PIMAGE_OPTIONAL_HEADER;



typedef struct _IMAGE_NT_HEADERS64 {
    DWORD Signature;
    IMAGE_FILE_HEADER FileHeader;
    IMAGE_OPTIONAL_HEADER64 OptionalHeader;
} IMAGE_NT_HEADERS64, *PIMAGE_NT_HEADERS64;

typedef struct _IMAGE_NT_HEADERS {
    DWORD Signature;
    IMAGE_FILE_HEADER FileHeader;
    IMAGE_OPTIONAL_HEADER32 OptionalHeader;
} IMAGE_NT_HEADERS32, *PIMAGE_NT_HEADERS32;

typedef struct _IMAGE_ROM_HEADERS {
    IMAGE_FILE_HEADER FileHeader;
    IMAGE_ROM_OPTIONAL_HEADER OptionalHeader;
} IMAGE_ROM_HEADERS, *PIMAGE_ROM_HEADERS;





typedef IMAGE_NT_HEADERS32 IMAGE_NT_HEADERS;
typedef PIMAGE_NT_HEADERS32 PIMAGE_NT_HEADERS;
#line 15314 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef struct ANON_OBJECT_HEADER {
    WORD Sig1;
    WORD Sig2;
    WORD Version;
    WORD Machine;
    DWORD TimeDateStamp;
    CLSID ClassID;
    DWORD SizeOfData;
} ANON_OBJECT_HEADER;

typedef struct ANON_OBJECT_HEADER_V2 {
    WORD Sig1;
    WORD Sig2;
    WORD Version;
    WORD Machine;
    DWORD TimeDateStamp;
    CLSID ClassID;
    DWORD SizeOfData;
    DWORD Flags;
    DWORD MetaDataSize;
    DWORD MetaDataOffset;
} ANON_OBJECT_HEADER_V2;

typedef struct ANON_OBJECT_HEADER_BIGOBJ {

    WORD Sig1;
    WORD Sig2;
    WORD Version;
    WORD Machine;
    DWORD TimeDateStamp;
    CLSID ClassID;
    DWORD SizeOfData;
    DWORD Flags;
    DWORD MetaDataSize;
    DWORD MetaDataOffset;


    DWORD NumberOfSections;
    DWORD PointerToSymbolTable;
    DWORD NumberOfSymbols;
} ANON_OBJECT_HEADER_BIGOBJ;







typedef struct _IMAGE_SECTION_HEADER {
    BYTE Name[8];
    union {
            DWORD PhysicalAddress;
            DWORD VirtualSize;
    } Misc;
    DWORD VirtualAddress;
    DWORD SizeOfRawData;
    DWORD PointerToRawData;
    DWORD PointerToRelocations;
    DWORD PointerToLinenumbers;
    WORD NumberOfRelocations;
    WORD NumberOfLinenumbers;
    DWORD Characteristics;
} IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER;
#line 15442 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/pshpack2.h"
#line 26 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/pshpack2.h"
#pragma pack(push,2)
#line 15442 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"







typedef struct _IMAGE_SYMBOL {
    union {
        BYTE ShortName[8];
        struct {
            DWORD Short;
            DWORD Long;
        } Name;
        DWORD LongName[2];
    } N;
    DWORD Value;
    SHORT SectionNumber;
    WORD Type;
    BYTE StorageClass;
    BYTE NumberOfAuxSymbols;
} IMAGE_SYMBOL;
typedef IMAGE_SYMBOL *PIMAGE_SYMBOL;



typedef struct _IMAGE_SYMBOL_EX {
    union {
        BYTE ShortName[8];
        struct {
            DWORD Short;
            DWORD Long;
        } Name;
        DWORD LongName[2];
    } N;
    DWORD Value;
    LONG SectionNumber;
    WORD Type;
    BYTE StorageClass;
    BYTE NumberOfAuxSymbols;
} IMAGE_SYMBOL_EX;
typedef IMAGE_SYMBOL_EX *PIMAGE_SYMBOL_EX;
#line 15605 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/pshpack2.h"
#line 26 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/pshpack2.h"
#pragma pack(push,2)
#line 15605 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"


typedef struct IMAGE_AUX_SYMBOL_TOKEN_DEF {
    BYTE bAuxType;
    BYTE bReserved;
    DWORD SymbolTableIndex;
    BYTE rgbReserved[12];
} IMAGE_AUX_SYMBOL_TOKEN_DEF;

typedef IMAGE_AUX_SYMBOL_TOKEN_DEF *PIMAGE_AUX_SYMBOL_TOKEN_DEF;


#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/poppack.h"
#line 29 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/poppack.h"
#pragma pack(pop)
#line 15616 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"






typedef union _IMAGE_AUX_SYMBOL {
    struct {
        DWORD TagIndex;
        union {
            struct {
                WORD Linenumber;
                WORD Size;
            } LnSz;
           DWORD TotalSize;
        } Misc;
        union {
            struct {
                DWORD PointerToLinenumber;
                DWORD PointerToNextFunction;
            } Function;
            struct {
                WORD Dimension[4];
            } Array;
        } FcnAry;
        WORD TvIndex;
    } Sym;
    struct {
        BYTE Name[18];
    } File;
    struct {
        DWORD Length;
        WORD NumberOfRelocations;
        WORD NumberOfLinenumbers;
        DWORD CheckSum;
        SHORT Number;
        BYTE Selection;
 BYTE bReserved;
 SHORT HighNumber;
    } Section;
    IMAGE_AUX_SYMBOL_TOKEN_DEF TokenDef;
    struct {
        DWORD crc;
        BYTE rgbReserved[14];
    } CRC;
} IMAGE_AUX_SYMBOL;
typedef IMAGE_AUX_SYMBOL *PIMAGE_AUX_SYMBOL;

typedef union _IMAGE_AUX_SYMBOL_EX {
    struct {
        DWORD WeakDefaultSymIndex;
        DWORD WeakSearchType;
        BYTE rgbReserved[12];
    } Sym;
    struct {
        BYTE Name[sizeof(IMAGE_SYMBOL_EX)];
    } File;
    struct {
        DWORD Length;
        WORD NumberOfRelocations;
        WORD NumberOfLinenumbers;
        DWORD CheckSum;
        SHORT Number;
        BYTE Selection;
        BYTE bReserved;
        SHORT HighNumber;
        BYTE rgbReserved[2];
    } Section;
    struct{
        IMAGE_AUX_SYMBOL_TOKEN_DEF TokenDef;
        BYTE rgbReserved[2];
    } ;
    struct {
        DWORD crc;
        BYTE rgbReserved[16];
    } CRC;
} IMAGE_AUX_SYMBOL_EX;
typedef IMAGE_AUX_SYMBOL_EX *PIMAGE_AUX_SYMBOL_EX;

typedef enum IMAGE_AUX_SYMBOL_TYPE {
    IMAGE_AUX_SYMBOL_TYPE_TOKEN_DEF = 1,
} IMAGE_AUX_SYMBOL_TYPE;
#line 15720 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef struct _IMAGE_RELOCATION {
    union {
        DWORD VirtualAddress;
        DWORD RelocCount;
    } ;
    DWORD SymbolTableIndex;
    WORD Type;
} IMAGE_RELOCATION;
typedef IMAGE_RELOCATION *PIMAGE_RELOCATION;
#line 16121 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef struct _IMAGE_LINENUMBER {
    union {
        DWORD SymbolTableIndex;
        DWORD VirtualAddress;
    } Type;
    WORD Linenumber;
} IMAGE_LINENUMBER;
typedef IMAGE_LINENUMBER *PIMAGE_LINENUMBER;



#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/poppack.h"
#line 29 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/poppack.h"
#pragma pack(pop)
#line 16131 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"







typedef struct _IMAGE_BASE_RELOCATION {
    DWORD VirtualAddress;
    DWORD SizeOfBlock;

} IMAGE_BASE_RELOCATION;
typedef IMAGE_BASE_RELOCATION * PIMAGE_BASE_RELOCATION;
#line 16185 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef struct _IMAGE_ARCHIVE_MEMBER_HEADER {
    BYTE Name[16];
    BYTE Date[12];
    BYTE UserID[6];
    BYTE GroupID[6];
    BYTE Mode[8];
    BYTE Size[10];
    BYTE EndHeader[2];
} IMAGE_ARCHIVE_MEMBER_HEADER, *PIMAGE_ARCHIVE_MEMBER_HEADER;
#line 16205 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef struct _IMAGE_EXPORT_DIRECTORY {
    DWORD Characteristics;
    DWORD TimeDateStamp;
    WORD MajorVersion;
    WORD MinorVersion;
    DWORD Name;
    DWORD Base;
    DWORD NumberOfFunctions;
    DWORD NumberOfNames;
    DWORD AddressOfFunctions;
    DWORD AddressOfNames;
    DWORD AddressOfNameOrdinals;
} IMAGE_EXPORT_DIRECTORY, *PIMAGE_EXPORT_DIRECTORY;





typedef struct _IMAGE_IMPORT_BY_NAME {
    WORD Hint;
    CHAR Name[1];
} IMAGE_IMPORT_BY_NAME, *PIMAGE_IMPORT_BY_NAME;


#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/pshpack8.h"
#line 26 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/pshpack8.h"
#pragma pack(push,8)
#line 16228 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"


typedef struct _IMAGE_THUNK_DATA64 {
    union {
        ULONGLONG ForwarderString;
        ULONGLONG Function;
        ULONGLONG Ordinal;
        ULONGLONG AddressOfData;
    } u1;
} IMAGE_THUNK_DATA64;
typedef IMAGE_THUNK_DATA64 * PIMAGE_THUNK_DATA64;


#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/poppack.h"
#line 29 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/poppack.h"
#pragma pack(pop)
#line 16240 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"


typedef struct _IMAGE_THUNK_DATA32 {
    union {
        DWORD ForwarderString;
        DWORD Function;
        DWORD Ordinal;
        DWORD AddressOfData;
    } u1;
} IMAGE_THUNK_DATA32;
typedef IMAGE_THUNK_DATA32 * PIMAGE_THUNK_DATA32;
#line 16263 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef void
(__stdcall *PIMAGE_TLS_CALLBACK) (
    PVOID DllHandle,
    DWORD Reason,
    PVOID Reserved
    );

typedef struct _IMAGE_TLS_DIRECTORY64 {
    ULONGLONG StartAddressOfRawData;
    ULONGLONG EndAddressOfRawData;
    ULONGLONG AddressOfIndex;
    ULONGLONG AddressOfCallBacks;
    DWORD SizeOfZeroFill;
    union {
        DWORD Characteristics;
        struct {
            DWORD Reserved0 : 20;
            DWORD Alignment : 4;
            DWORD Reserved1 : 8;
        } ;
    } ;

} IMAGE_TLS_DIRECTORY64;

typedef IMAGE_TLS_DIRECTORY64 * PIMAGE_TLS_DIRECTORY64;

typedef struct _IMAGE_TLS_DIRECTORY32 {
    DWORD StartAddressOfRawData;
    DWORD EndAddressOfRawData;
    DWORD AddressOfIndex;
    DWORD AddressOfCallBacks;
    DWORD SizeOfZeroFill;
    union {
        DWORD Characteristics;
        struct {
            DWORD Reserved0 : 20;
            DWORD Alignment : 4;
            DWORD Reserved1 : 8;
        } ;
    } ;

} IMAGE_TLS_DIRECTORY32;
typedef IMAGE_TLS_DIRECTORY32 * PIMAGE_TLS_DIRECTORY32;
#line 16318 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef IMAGE_THUNK_DATA32 IMAGE_THUNK_DATA;
typedef PIMAGE_THUNK_DATA32 PIMAGE_THUNK_DATA;

typedef IMAGE_TLS_DIRECTORY32 IMAGE_TLS_DIRECTORY;
typedef PIMAGE_TLS_DIRECTORY32 PIMAGE_TLS_DIRECTORY;


typedef struct _IMAGE_IMPORT_DESCRIPTOR {
    union {
        DWORD Characteristics;
        DWORD OriginalFirstThunk;
    } ;
    DWORD TimeDateStamp;




    DWORD ForwarderChain;
    DWORD Name;
    DWORD FirstThunk;
} IMAGE_IMPORT_DESCRIPTOR;
typedef IMAGE_IMPORT_DESCRIPTOR *PIMAGE_IMPORT_DESCRIPTOR;





typedef struct _IMAGE_BOUND_IMPORT_DESCRIPTOR {
    DWORD TimeDateStamp;
    WORD OffsetModuleName;
    WORD NumberOfModuleForwarderRefs;

} IMAGE_BOUND_IMPORT_DESCRIPTOR, *PIMAGE_BOUND_IMPORT_DESCRIPTOR;

typedef struct _IMAGE_BOUND_FORWARDER_REF {
    DWORD TimeDateStamp;
    WORD OffsetModuleName;
    WORD Reserved;
} IMAGE_BOUND_FORWARDER_REF, *PIMAGE_BOUND_FORWARDER_REF;

typedef struct _IMAGE_DELAYLOAD_DESCRIPTOR {
    union {
        DWORD AllAttributes;
        struct {
            DWORD RvaBased : 1;
            DWORD ReservedAttributes : 31;
        } ;
    } Attributes;

    DWORD DllNameRVA;
    DWORD ModuleHandleRVA;
    DWORD ImportAddressTableRVA;
    DWORD ImportNameTableRVA;
    DWORD BoundImportAddressTableRVA;
    DWORD UnloadInformationTableRVA;
    DWORD TimeDateStamp;


} IMAGE_DELAYLOAD_DESCRIPTOR, *PIMAGE_DELAYLOAD_DESCRIPTOR;

typedef const IMAGE_DELAYLOAD_DESCRIPTOR *PCIMAGE_DELAYLOAD_DESCRIPTOR;
#line 16398 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef struct _IMAGE_RESOURCE_DIRECTORY {
    DWORD Characteristics;
    DWORD TimeDateStamp;
    WORD MajorVersion;
    WORD MinorVersion;
    WORD NumberOfNamedEntries;
    WORD NumberOfIdEntries;

} IMAGE_RESOURCE_DIRECTORY, *PIMAGE_RESOURCE_DIRECTORY;
#line 16425 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef struct _IMAGE_RESOURCE_DIRECTORY_ENTRY {
    union {
        struct {
            DWORD NameOffset:31;
            DWORD NameIsString:1;
        } ;
        DWORD Name;
        WORD Id;
    } ;
    union {
        DWORD OffsetToData;
        struct {
            DWORD OffsetToDirectory:31;
            DWORD DataIsDirectory:1;
        } ;
    } ;
} IMAGE_RESOURCE_DIRECTORY_ENTRY, *PIMAGE_RESOURCE_DIRECTORY_ENTRY;
#line 16452 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef struct _IMAGE_RESOURCE_DIRECTORY_STRING {
    WORD Length;
    CHAR NameString[ 1 ];
} IMAGE_RESOURCE_DIRECTORY_STRING, *PIMAGE_RESOURCE_DIRECTORY_STRING;


typedef struct _IMAGE_RESOURCE_DIR_STRING_U {
    WORD Length;
    WCHAR NameString[ 1 ];
} IMAGE_RESOURCE_DIR_STRING_U, *PIMAGE_RESOURCE_DIR_STRING_U;
#line 16473 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef struct _IMAGE_RESOURCE_DATA_ENTRY {
    DWORD OffsetToData;
    DWORD Size;
    DWORD CodePage;
    DWORD Reserved;
} IMAGE_RESOURCE_DATA_ENTRY, *PIMAGE_RESOURCE_DATA_ENTRY;





typedef struct _IMAGE_LOAD_CONFIG_CODE_INTEGRITY {
    WORD Flags;
    WORD Catalog;
    DWORD CatalogOffset;
    DWORD Reserved;
} IMAGE_LOAD_CONFIG_CODE_INTEGRITY, *PIMAGE_LOAD_CONFIG_CODE_INTEGRITY;





typedef struct _IMAGE_LOAD_CONFIG_DIRECTORY32 {
    DWORD Size;
    DWORD TimeDateStamp;
    WORD MajorVersion;
    WORD MinorVersion;
    DWORD GlobalFlagsClear;
    DWORD GlobalFlagsSet;
    DWORD CriticalSectionDefaultTimeout;
    DWORD DeCommitFreeBlockThreshold;
    DWORD DeCommitTotalFreeThreshold;
    DWORD LockPrefixTable;
    DWORD MaximumAllocationSize;
    DWORD VirtualMemoryThreshold;
    DWORD ProcessHeapFlags;
    DWORD ProcessAffinityMask;
    WORD CSDVersion;
    WORD Reserved1;
    DWORD EditList;
    DWORD SecurityCookie;
    DWORD SEHandlerTable;
    DWORD SEHandlerCount;
    DWORD GuardCFCheckFunctionPointer;
    DWORD GuardCFDispatchFunctionPointer;
    DWORD GuardCFFunctionTable;
    DWORD GuardCFFunctionCount;
    DWORD GuardFlags;
    IMAGE_LOAD_CONFIG_CODE_INTEGRITY CodeIntegrity;
} IMAGE_LOAD_CONFIG_DIRECTORY32, *PIMAGE_LOAD_CONFIG_DIRECTORY32;

typedef struct _IMAGE_LOAD_CONFIG_DIRECTORY64 {
    DWORD Size;
    DWORD TimeDateStamp;
    WORD MajorVersion;
    WORD MinorVersion;
    DWORD GlobalFlagsClear;
    DWORD GlobalFlagsSet;
    DWORD CriticalSectionDefaultTimeout;
    ULONGLONG DeCommitFreeBlockThreshold;
    ULONGLONG DeCommitTotalFreeThreshold;
    ULONGLONG LockPrefixTable;
    ULONGLONG MaximumAllocationSize;
    ULONGLONG VirtualMemoryThreshold;
    ULONGLONG ProcessAffinityMask;
    DWORD ProcessHeapFlags;
    WORD CSDVersion;
    WORD Reserved1;
    ULONGLONG EditList;
    ULONGLONG SecurityCookie;
    ULONGLONG SEHandlerTable;
    ULONGLONG SEHandlerCount;
    ULONGLONG GuardCFCheckFunctionPointer;
    ULONGLONG GuardCFDispatchFunctionPointer;
    ULONGLONG GuardCFFunctionTable;
    ULONGLONG GuardCFFunctionCount;
    DWORD GuardFlags;
    IMAGE_LOAD_CONFIG_CODE_INTEGRITY CodeIntegrity;
} IMAGE_LOAD_CONFIG_DIRECTORY64, *PIMAGE_LOAD_CONFIG_DIRECTORY64;





typedef IMAGE_LOAD_CONFIG_DIRECTORY32 IMAGE_LOAD_CONFIG_DIRECTORY;
typedef PIMAGE_LOAD_CONFIG_DIRECTORY32 PIMAGE_LOAD_CONFIG_DIRECTORY;
#line 16585 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef struct _IMAGE_CE_RUNTIME_FUNCTION_ENTRY {
    DWORD FuncStart;
    DWORD PrologLen : 8;
    DWORD FuncLen : 22;
    DWORD ThirtyTwoBit : 1;
    DWORD ExceptionFlag : 1;
} IMAGE_CE_RUNTIME_FUNCTION_ENTRY, * PIMAGE_CE_RUNTIME_FUNCTION_ENTRY;

typedef struct _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY {
    DWORD BeginAddress;
    union {
        DWORD UnwindData;
        struct {
            DWORD Flag : 2;
            DWORD FunctionLength : 11;
            DWORD Ret : 2;
            DWORD H : 1;
            DWORD Reg : 3;
            DWORD R : 1;
            DWORD L : 1;
            DWORD C : 1;
            DWORD StackAdjust : 10;
        } ;
    } ;
} IMAGE_ARM_RUNTIME_FUNCTION_ENTRY, * PIMAGE_ARM_RUNTIME_FUNCTION_ENTRY;

typedef struct _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY {
    DWORD BeginAddress;
    union {
        DWORD UnwindData;
        struct {
            DWORD Flag : 2;
            DWORD FunctionLength : 11;
            DWORD RegF : 3;
            DWORD RegI : 4;
            DWORD H : 1;
            DWORD CR : 2;
            DWORD FrameSize : 9;
        } ;
    } ;
} IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY, * PIMAGE_ARM64_RUNTIME_FUNCTION_ENTRY;

typedef struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY {
    ULONGLONG BeginAddress;
    ULONGLONG EndAddress;
    ULONGLONG ExceptionHandler;
    ULONGLONG HandlerData;
    ULONGLONG PrologEndAddress;
} IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY, *PIMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY;

typedef struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY {
    DWORD BeginAddress;
    DWORD EndAddress;
    DWORD ExceptionHandler;
    DWORD HandlerData;
    DWORD PrologEndAddress;
} IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY, *PIMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY;

typedef struct _IMAGE_RUNTIME_FUNCTION_ENTRY {
    DWORD BeginAddress;
    DWORD EndAddress;
    union {
        DWORD UnwindInfoAddress;
        DWORD UnwindData;
    } ;
} _IMAGE_RUNTIME_FUNCTION_ENTRY, *_PIMAGE_RUNTIME_FUNCTION_ENTRY;

typedef _IMAGE_RUNTIME_FUNCTION_ENTRY IMAGE_IA64_RUNTIME_FUNCTION_ENTRY;
typedef _PIMAGE_RUNTIME_FUNCTION_ENTRY PIMAGE_IA64_RUNTIME_FUNCTION_ENTRY;
#line 16679 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef _IMAGE_RUNTIME_FUNCTION_ENTRY IMAGE_RUNTIME_FUNCTION_ENTRY;
typedef _PIMAGE_RUNTIME_FUNCTION_ENTRY PIMAGE_RUNTIME_FUNCTION_ENTRY;







typedef struct _IMAGE_DEBUG_DIRECTORY {
    DWORD Characteristics;
    DWORD TimeDateStamp;
    WORD MajorVersion;
    WORD MinorVersion;
    DWORD Type;
    DWORD SizeOfData;
    DWORD AddressOfRawData;
    DWORD PointerToRawData;
} IMAGE_DEBUG_DIRECTORY, *PIMAGE_DEBUG_DIRECTORY;
#line 16717 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef struct _IMAGE_COFF_SYMBOLS_HEADER {
    DWORD NumberOfSymbols;
    DWORD LvaToFirstSymbol;
    DWORD NumberOfLinenumbers;
    DWORD LvaToFirstLinenumber;
    DWORD RvaToFirstByteOfCode;
    DWORD RvaToLastByteOfCode;
    DWORD RvaToFirstByteOfData;
    DWORD RvaToLastByteOfData;
} IMAGE_COFF_SYMBOLS_HEADER, *PIMAGE_COFF_SYMBOLS_HEADER;






typedef struct _FPO_DATA {
    DWORD ulOffStart;
    DWORD cbProcSize;
    DWORD cdwLocals;
    WORD cdwParams;
    WORD cbProlog : 8;
    WORD cbRegs : 3;
    WORD fHasSEH : 1;
    WORD fUseBP : 1;
    WORD reserved : 1;
    WORD cbFrame : 2;
} FPO_DATA, *PFPO_DATA;





typedef struct _IMAGE_DEBUG_MISC {
    DWORD DataType;
    DWORD Length;

    BOOLEAN Unicode;
    BYTE Reserved[ 3 ];
    BYTE Data[ 1 ];
} IMAGE_DEBUG_MISC, *PIMAGE_DEBUG_MISC;
#line 16766 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef struct _IMAGE_FUNCTION_ENTRY {
    DWORD StartingAddress;
    DWORD EndingAddress;
    DWORD EndOfPrologue;
} IMAGE_FUNCTION_ENTRY, *PIMAGE_FUNCTION_ENTRY;

typedef struct _IMAGE_FUNCTION_ENTRY64 {
    ULONGLONG StartingAddress;
    ULONGLONG EndingAddress;
    union {
        ULONGLONG EndOfPrologue;
        ULONGLONG UnwindInfoAddress;
    } ;
} IMAGE_FUNCTION_ENTRY64, *PIMAGE_FUNCTION_ENTRY64;
#line 16801 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef struct _IMAGE_SEPARATE_DEBUG_HEADER {
    WORD Signature;
    WORD Flags;
    WORD Machine;
    WORD Characteristics;
    DWORD TimeDateStamp;
    DWORD CheckSum;
    DWORD ImageBase;
    DWORD SizeOfImage;
    DWORD NumberOfSections;
    DWORD ExportedNamesSize;
    DWORD DebugDirectorySize;
    DWORD SectionAlignment;
    DWORD Reserved[2];
} IMAGE_SEPARATE_DEBUG_HEADER, *PIMAGE_SEPARATE_DEBUG_HEADER;



typedef struct _NON_PAGED_DEBUG_INFO {
    WORD Signature;
    WORD Flags;
    DWORD Size;
    WORD Machine;
    WORD Characteristics;
    DWORD TimeDateStamp;
    DWORD CheckSum;
    DWORD SizeOfImage;
    ULONGLONG ImageBase;


} NON_PAGED_DEBUG_INFO, *PNON_PAGED_DEBUG_INFO;
#line 16855 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef struct _ImageArchitectureHeader {
    unsigned int AmaskValue: 1;

    int :7;
    unsigned int AmaskShift: 8;
    int :16;
    DWORD FirstEntryRVA;
} IMAGE_ARCHITECTURE_HEADER, *PIMAGE_ARCHITECTURE_HEADER;

typedef struct _ImageArchitectureEntry {
    DWORD FixupInstRVA;
    DWORD NewInst;
} IMAGE_ARCHITECTURE_ENTRY, *PIMAGE_ARCHITECTURE_ENTRY;


#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/poppack.h"
#line 29 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/poppack.h"
#pragma pack(pop)
#line 16869 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
#line 16878 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef struct IMPORT_OBJECT_HEADER {
    WORD Sig1;
    WORD Sig2;
    WORD Version;
    WORD Machine;
    DWORD TimeDateStamp;
    DWORD SizeOfData;

    union {
        WORD Ordinal;
        WORD Hint;
    } ;

    WORD Type : 2;
    WORD NameType : 3;
    WORD Reserved : 11;
} IMPORT_OBJECT_HEADER;

typedef enum IMPORT_OBJECT_TYPE
{
    IMPORT_OBJECT_CODE = 0,
    IMPORT_OBJECT_DATA = 1,
    IMPORT_OBJECT_CONST = 2,
} IMPORT_OBJECT_TYPE;

typedef enum IMPORT_OBJECT_NAME_TYPE
{
    IMPORT_OBJECT_ORDINAL = 0,
    IMPORT_OBJECT_NAME = 1,
    IMPORT_OBJECT_NAME_NO_PREFIX = 2,
    IMPORT_OBJECT_NAME_UNDECORATE = 3,

} IMPORT_OBJECT_NAME_TYPE;





typedef enum ReplacesCorHdrNumericDefines
{

    COMIMAGE_FLAGS_ILONLY =0x00000001,
    COMIMAGE_FLAGS_32BITREQUIRED =0x00000002,
    COMIMAGE_FLAGS_IL_LIBRARY =0x00000004,
    COMIMAGE_FLAGS_STRONGNAMESIGNED =0x00000008,
    COMIMAGE_FLAGS_NATIVE_ENTRYPOINT =0x00000010,
    COMIMAGE_FLAGS_TRACKDEBUGDATA =0x00010000,
    COMIMAGE_FLAGS_32BITPREFERRED =0x00020000,


    COR_VERSION_MAJOR_V2 =2,
    COR_VERSION_MAJOR =COR_VERSION_MAJOR_V2,
    COR_VERSION_MINOR =5,
    COR_DELETED_NAME_LENGTH =8,
    COR_VTABLEGAP_NAME_LENGTH =8,


    NATIVE_TYPE_MAX_CB =1,
    COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE=0xFF,


    IMAGE_COR_MIH_METHODRVA =0x01,
    IMAGE_COR_MIH_EHRVA =0x02,
    IMAGE_COR_MIH_BASICBLOCK =0x08,


    COR_VTABLE_32BIT =0x01,
    COR_VTABLE_64BIT =0x02,
    COR_VTABLE_FROM_UNMANAGED =0x04,
    COR_VTABLE_FROM_UNMANAGED_RETAIN_APPDOMAIN =0x08,
    COR_VTABLE_CALL_MOST_DERIVED =0x10,


    IMAGE_COR_EATJ_THUNK_SIZE =32,



    MAX_CLASS_NAME =1024,
    MAX_PACKAGE_NAME =1024,
} ReplacesCorHdrNumericDefines;


typedef struct IMAGE_COR20_HEADER
{

    DWORD cb;
    WORD MajorRuntimeVersion;
    WORD MinorRuntimeVersion;


    IMAGE_DATA_DIRECTORY MetaData;
    DWORD Flags;



    union {
        DWORD EntryPointToken;
        DWORD EntryPointRVA;
    } ;


    IMAGE_DATA_DIRECTORY Resources;
    IMAGE_DATA_DIRECTORY StrongNameSignature;


    IMAGE_DATA_DIRECTORY CodeManagerTable;
    IMAGE_DATA_DIRECTORY VTableFixups;
    IMAGE_DATA_DIRECTORY ExportAddressTableJumps;


    IMAGE_DATA_DIRECTORY ManagedNativeHeader;

} IMAGE_COR20_HEADER, *PIMAGE_COR20_HEADER;








#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\apiset.h"
#line 20 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\apiset.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 89 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\apiset.h"
#pragma option pop
#line 16998 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"








#pragma region Application or OneCore Family
#line 17028 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family







void
__stdcall
RtlCaptureContext(
          PCONTEXT ContextRecord
    );





#pragma endregion



#pragma region Application or OneCore Family




void
__stdcall
RtlUnwind(
             PVOID TargetFrame,
             PVOID TargetIp,
             PEXCEPTION_RECORD ExceptionRecord,
         PVOID ReturnValue
    );



#pragma endregion
#line 17671 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
#pragma region Application or OneCore Family







PVOID
__stdcall
RtlPcToFileHeader(
         PVOID PcValue,
          PVOID * BaseOfImage
    );





#pragma endregion


#pragma region Desktop Family or OneCore Family
#line 17704 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
SIZE_T
__stdcall
RtlCompareMemory(
         const void * Source1,
         const void * Source2,
         SIZE_T Length
    );







#pragma endregion
#line 17728 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\string.h"
#line 13 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\string.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\_str.h"
#line 454 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\_str.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\mem.h"
#line 454 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\_str.h"
#line 13 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\string.h"
#line 17728 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
#line 17757 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef struct _SINGLE_LIST_ENTRY SLIST_ENTRY, *PSLIST_ENTRY;
#line 17794 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef union _SLIST_HEADER {
    ULONGLONG Alignment;
    struct {
        SLIST_ENTRY Next;
        WORD Depth;
        WORD CpuId;
    } ;
} SLIST_HEADER, *PSLIST_HEADER;
#line 17819 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
#pragma region Desktop Family or OneCore Family



void
__stdcall
RtlInitializeSListHead (
          PSLIST_HEADER ListHead
    );



PSLIST_ENTRY
__stdcall
RtlFirstEntrySList (
         const SLIST_HEADER *ListHead
    );


PSLIST_ENTRY
__stdcall
RtlInterlockedPopEntrySList (
            PSLIST_HEADER ListHead
    );


PSLIST_ENTRY
__stdcall
RtlInterlockedPushEntrySList (
            PSLIST_HEADER ListHead,
                             PSLIST_ENTRY ListEntry
    );


PSLIST_ENTRY
__stdcall
RtlInterlockedPushListSListEx (
            PSLIST_HEADER ListHead,
                             PSLIST_ENTRY List,
            PSLIST_ENTRY ListEnd,
         DWORD Count
    );


PSLIST_ENTRY
__stdcall
RtlInterlockedFlushSList (
            PSLIST_HEADER ListHead
    );


WORD
__stdcall
RtlQueryDepthSList (
         PSLIST_HEADER ListHead
    );


#pragma endregion
#line 17904 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef union _RTL_RUN_ONCE {
    PVOID Ptr;
} RTL_RUN_ONCE, *PRTL_RUN_ONCE;



typedef struct _RTL_BARRIER {
            DWORD Reserved1;
            DWORD Reserved2;
            ULONG_PTR Reserved3[2];
            DWORD Reserved4;
            DWORD Reserved5;
} RTL_BARRIER, *PRTL_BARRIER;
#line 17987 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
#pragma region Desktop Family


__inline
DWORD
HEAP_MAKE_TAG_FLAGS (
         DWORD TagBase,
         DWORD Tag
    )

{
    return ((DWORD)((TagBase) + ((Tag) << 18)));
}


#pragma endregion
#line 18069 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
__inline
PVOID
RtlSecureZeroMemory(
                                PVOID ptr,
         SIZE_T cnt
    )
{
    volatile char *vptr = (volatile char *)ptr;







    while (cnt) {







        *vptr = 0;



        vptr++;
        cnt--;
    }



    return ptr;
}
#line 18126 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef struct _MESSAGE_RESOURCE_ENTRY {
    WORD Length;
    WORD Flags;
    BYTE Text[ 1 ];
} MESSAGE_RESOURCE_ENTRY, *PMESSAGE_RESOURCE_ENTRY;



typedef struct _MESSAGE_RESOURCE_BLOCK {
    DWORD LowId;
    DWORD HighId;
    DWORD OffsetToEntries;
} MESSAGE_RESOURCE_BLOCK, *PMESSAGE_RESOURCE_BLOCK;

typedef struct _MESSAGE_RESOURCE_DATA {
    DWORD NumberOfBlocks;
    MESSAGE_RESOURCE_BLOCK Blocks[ 1 ];
} MESSAGE_RESOURCE_DATA, *PMESSAGE_RESOURCE_DATA;

typedef struct _OSVERSIONINFOA {
    DWORD dwOSVersionInfoSize;
    DWORD dwMajorVersion;
    DWORD dwMinorVersion;
    DWORD dwBuildNumber;
    DWORD dwPlatformId;
    CHAR szCSDVersion[ 128 ];
} OSVERSIONINFOA, *POSVERSIONINFOA, *LPOSVERSIONINFOA;

typedef struct _OSVERSIONINFOW {
    DWORD dwOSVersionInfoSize;
    DWORD dwMajorVersion;
    DWORD dwMinorVersion;
    DWORD dwBuildNumber;
    DWORD dwPlatformId;
    WCHAR szCSDVersion[ 128 ];
} OSVERSIONINFOW, *POSVERSIONINFOW, *LPOSVERSIONINFOW, RTL_OSVERSIONINFOW, *PRTL_OSVERSIONINFOW;

typedef OSVERSIONINFOW OSVERSIONINFO;
typedef POSVERSIONINFOW POSVERSIONINFO;
typedef LPOSVERSIONINFOW LPOSVERSIONINFO;






typedef struct _OSVERSIONINFOEXA {
    DWORD dwOSVersionInfoSize;
    DWORD dwMajorVersion;
    DWORD dwMinorVersion;
    DWORD dwBuildNumber;
    DWORD dwPlatformId;
    CHAR szCSDVersion[ 128 ];
    WORD wServicePackMajor;
    WORD wServicePackMinor;
    WORD wSuiteMask;
    BYTE wProductType;
    BYTE wReserved;
} OSVERSIONINFOEXA, *POSVERSIONINFOEXA, *LPOSVERSIONINFOEXA;
typedef struct _OSVERSIONINFOEXW {
    DWORD dwOSVersionInfoSize;
    DWORD dwMajorVersion;
    DWORD dwMinorVersion;
    DWORD dwBuildNumber;
    DWORD dwPlatformId;
    WCHAR szCSDVersion[ 128 ];
    WORD wServicePackMajor;
    WORD wServicePackMinor;
    WORD wSuiteMask;
    BYTE wProductType;
    BYTE wReserved;
} OSVERSIONINFOEXW, *POSVERSIONINFOEXW, *LPOSVERSIONINFOEXW, RTL_OSVERSIONINFOEXW, *PRTL_OSVERSIONINFOEXW;

typedef OSVERSIONINFOEXW OSVERSIONINFOEX;
typedef POSVERSIONINFOEXW POSVERSIONINFOEX;
typedef LPOSVERSIONINFOEXW LPOSVERSIONINFOEX;
#line 18252 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
#pragma region Desktop Family or OneCore Family
#line 18272 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
ULONGLONG
__stdcall
VerSetConditionMask(
         ULONGLONG ConditionMask,
         DWORD TypeMask,
         BYTE Condition
    );






#pragma endregion



#pragma region Desktop Family or OneCore Family
#line 18312 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
#pragma endregion



typedef enum _RTL_UMS_THREAD_INFO_CLASS {
    UmsThreadInvalidInfoClass = 0,
    UmsThreadUserContext,
    UmsThreadPriority,
    UmsThreadAffinity,
    UmsThreadTeb,
    UmsThreadIsSuspended,
    UmsThreadIsTerminated,
    UmsThreadMaxInfoClass
} RTL_UMS_THREAD_INFO_CLASS, *PRTL_UMS_THREAD_INFO_CLASS;

typedef enum _RTL_UMS_SCHEDULER_REASON {
    UmsSchedulerStartup = 0,
    UmsSchedulerThreadBlocked,
    UmsSchedulerThreadYield,
} RTL_UMS_SCHEDULER_REASON, *PRTL_UMS_SCHEDULER_REASON;

typedef

void
__stdcall
RTL_UMS_SCHEDULER_ENTRY_POINT(
         RTL_UMS_SCHEDULER_REASON Reason,
         ULONG_PTR ActivationPayload,
         PVOID SchedulerParam
    );

typedef RTL_UMS_SCHEDULER_ENTRY_POINT *PRTL_UMS_SCHEDULER_ENTRY_POINT;
#line 18459 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef struct _RTL_CRITICAL_SECTION_DEBUG {
    WORD Type;
    WORD CreatorBackTraceIndex;
    struct _RTL_CRITICAL_SECTION *CriticalSection;
    LIST_ENTRY ProcessLocksList;
    DWORD EntryCount;
    DWORD ContentionCount;
    DWORD Flags;
    WORD CreatorBackTraceIndexHigh;
    WORD SpareWORD ;
} RTL_CRITICAL_SECTION_DEBUG, *PRTL_CRITICAL_SECTION_DEBUG, RTL_RESOURCE_DEBUG, *PRTL_RESOURCE_DEBUG;
#line 18487 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
#pragma pack(push, 8)

typedef struct _RTL_CRITICAL_SECTION {
    PRTL_CRITICAL_SECTION_DEBUG DebugInfo;






    LONG LockCount;
    LONG RecursionCount;
    HANDLE OwningThread;
    HANDLE LockSemaphore;
    ULONG_PTR SpinCount;
} RTL_CRITICAL_SECTION, *PRTL_CRITICAL_SECTION;

#pragma pack(pop)

typedef struct _RTL_SRWLOCK {
        PVOID Ptr;
} RTL_SRWLOCK, *PRTL_SRWLOCK;

typedef struct _RTL_CONDITION_VARIABLE {
        PVOID Ptr;
} RTL_CONDITION_VARIABLE, *PRTL_CONDITION_VARIABLE;


typedef
void
(__stdcall *PAPCFUNC)(
         ULONG_PTR Parameter
    );
typedef LONG (__stdcall *PVECTORED_EXCEPTION_HANDLER)(
    struct _EXCEPTION_POINTERS *ExceptionInfo
    );

typedef enum _HEAP_INFORMATION_CLASS {

    HeapCompatibilityInformation = 0,
    HeapEnableTerminationOnCorruption = 1
#line 18539 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
} HEAP_INFORMATION_CLASS;
#line 18565 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef void (__stdcall * WAITORTIMERCALLBACKFUNC) (PVOID, BOOLEAN );
typedef void (__stdcall * WORKERCALLBACKFUNC) (PVOID );
typedef void (__stdcall * APC_CALLBACK_FUNCTION) (DWORD , PVOID, PVOID);
typedef WAITORTIMERCALLBACKFUNC WAITORTIMERCALLBACK;
typedef
void
(__stdcall *PFLS_CALLBACK_FUNCTION) (
       PVOID lpFlsData
    );

typedef
BOOLEAN
(__stdcall *PSECURE_MEMORY_CACHE_CALLBACK) (
                            PVOID Addr,
         SIZE_T Range
    );




typedef enum _ACTIVATION_CONTEXT_INFO_CLASS {
    ActivationContextBasicInformation = 1,
    ActivationContextDetailedInformation = 2,
    AssemblyDetailedInformationInActivationContext = 3,
    FileInformationInAssemblyOfAssemblyInActivationContext = 4,
    RunlevelInformationInActivationContext = 5,
    CompatibilityInformationInActivationContext = 6,
    ActivationContextManifestResourceName = 7,
    MaxActivationContextInfoClass,




    AssemblyDetailedInformationInActivationContxt = 3,
    FileInformationInAssemblyOfAssemblyInActivationContxt = 4
} ACTIVATION_CONTEXT_INFO_CLASS;




typedef struct _ACTIVATION_CONTEXT_QUERY_INDEX {
    DWORD ulAssemblyIndex;
    DWORD ulFileIndexInAssembly;
} ACTIVATION_CONTEXT_QUERY_INDEX, * PACTIVATION_CONTEXT_QUERY_INDEX;

typedef const struct _ACTIVATION_CONTEXT_QUERY_INDEX * PCACTIVATION_CONTEXT_QUERY_INDEX;







typedef struct _ASSEMBLY_FILE_DETAILED_INFORMATION {
    DWORD ulFlags;
    DWORD ulFilenameLength;
    DWORD ulPathLength;

    PCWSTR lpFileName;
    PCWSTR lpFilePath;
} ASSEMBLY_FILE_DETAILED_INFORMATION, *PASSEMBLY_FILE_DETAILED_INFORMATION;
typedef const ASSEMBLY_FILE_DETAILED_INFORMATION *PCASSEMBLY_FILE_DETAILED_INFORMATION;
#line 18637 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION {
    DWORD ulFlags;
    DWORD ulEncodedAssemblyIdentityLength;
    DWORD ulManifestPathType;
    DWORD ulManifestPathLength;
    LARGE_INTEGER liManifestLastWriteTime;
    DWORD ulPolicyPathType;
    DWORD ulPolicyPathLength;
    LARGE_INTEGER liPolicyLastWriteTime;
    DWORD ulMetadataSatelliteRosterIndex;

    DWORD ulManifestVersionMajor;
    DWORD ulManifestVersionMinor;
    DWORD ulPolicyVersionMajor;
    DWORD ulPolicyVersionMinor;
    DWORD ulAssemblyDirectoryNameLength;

    PCWSTR lpAssemblyEncodedAssemblyIdentity;
    PCWSTR lpAssemblyManifestPath;
    PCWSTR lpAssemblyPolicyPath;
    PCWSTR lpAssemblyDirectoryName;

    DWORD ulFileCount;
} ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION, * PACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION;

typedef const struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION * PCACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION ;

typedef enum
{
    ACTCTX_RUN_LEVEL_UNSPECIFIED = 0,
    ACTCTX_RUN_LEVEL_AS_INVOKER,
    ACTCTX_RUN_LEVEL_HIGHEST_AVAILABLE,
    ACTCTX_RUN_LEVEL_REQUIRE_ADMIN,
    ACTCTX_RUN_LEVEL_NUMBERS
} ACTCTX_REQUESTED_RUN_LEVEL;

typedef struct _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION {
    DWORD ulFlags;
    ACTCTX_REQUESTED_RUN_LEVEL RunLevel;
    DWORD UiAccess;
} ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION, * PACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION;

typedef const struct _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION * PCACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION ;

typedef enum
{
    ACTCTX_COMPATIBILITY_ELEMENT_TYPE_UNKNOWN = 0,
    ACTCTX_COMPATIBILITY_ELEMENT_TYPE_OS,
    ACTCTX_COMPATIBILITY_ELEMENT_TYPE_MITIGATION
} ACTCTX_COMPATIBILITY_ELEMENT_TYPE;

typedef struct _COMPATIBILITY_CONTEXT_ELEMENT {
    GUID Id;
    ACTCTX_COMPATIBILITY_ELEMENT_TYPE Type;
} COMPATIBILITY_CONTEXT_ELEMENT, *PCOMPATIBILITY_CONTEXT_ELEMENT;

typedef const struct _COMPATIBILITY_CONTEXT_ELEMENT *PCCOMPATIBILITY_CONTEXT_ELEMENT;
#line 18718 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef struct _SUPPORTED_OS_INFO {
    WORD OsCount;
    WORD MitigationExist;
    WORD OsList[(4)];
} SUPPORTED_OS_INFO, *PSUPPORTED_OS_INFO;

typedef struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION {
    DWORD dwFlags;
    DWORD ulFormatVersion;
    DWORD ulAssemblyCount;
    DWORD ulRootManifestPathType;
    DWORD ulRootManifestPathChars;
    DWORD ulRootConfigurationPathType;
    DWORD ulRootConfigurationPathChars;
    DWORD ulAppDirPathType;
    DWORD ulAppDirPathChars;
    PCWSTR lpRootManifestPath;
    PCWSTR lpRootConfigurationPath;
    PCWSTR lpAppDirPath;
} ACTIVATION_CONTEXT_DETAILED_INFORMATION, *PACTIVATION_CONTEXT_DETAILED_INFORMATION;

typedef const struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION *PCACTIVATION_CONTEXT_DETAILED_INFORMATION;




typedef struct _HARDWARE_COUNTER_DATA {
    HARDWARE_COUNTER_TYPE Type;
    DWORD Reserved;
    DWORD64 Value;
} HARDWARE_COUNTER_DATA, *PHARDWARE_COUNTER_DATA;



typedef struct _PERFORMANCE_DATA {
    WORD Size;
    BYTE Version;
    BYTE HwCountersCount;
    DWORD ContextSwitchCount;
    DWORD64 WaitReasonBitMap;
    DWORD64 CycleTime;
    DWORD RetryCount;
    DWORD Reserved;
    HARDWARE_COUNTER_DATA HwCounters[16];
} PERFORMANCE_DATA, *PPERFORMANCE_DATA;




#pragma region Desktop Family
#line 18836 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
#pragma endregion
#line 18881 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef struct _EVENTLOGRECORD {
    DWORD Length;
    DWORD Reserved;
    DWORD RecordNumber;
    DWORD TimeGenerated;
    DWORD TimeWritten;
    DWORD EventID;
    WORD EventType;
    WORD NumStrings;
    WORD EventCategory;
    WORD ReservedFlags;
    DWORD ClosingRecordNumber;
    DWORD StringOffset;
    DWORD UserSidLength;
    DWORD UserSidOffset;
    DWORD DataLength;
    DWORD DataOffset;
#line 18909 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
} EVENTLOGRECORD, *PEVENTLOGRECORD;
#line 18920 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
struct _EVENTSFORLOGFILE;
typedef struct _EVENTSFORLOGFILE EVENTSFORLOGFILE, *PEVENTSFORLOGFILE;

struct _PACKEDEVENTINFO;
typedef struct _PACKEDEVENTINFO PACKEDEVENTINFO, *PPACKEDEVENTINFO;
#line 19173 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef enum _CM_SERVICE_NODE_TYPE {
    DriverType = 0x00000001,
    FileSystemType = 0x00000002,
    Win32ServiceOwnProcess = 0x00000010,
    Win32ServiceShareProcess = 0x00000020,
    AdapterType = 0x00000004,
    RecognizerType = 0x00000008
} SERVICE_NODE_TYPE;

typedef enum _CM_SERVICE_LOAD_TYPE {
    BootLoad = 0x00000000,
    SystemLoad = 0x00000001,
    AutoLoad = 0x00000002,
    DemandLoad = 0x00000003,
    DisableLoad = 0x00000004
} SERVICE_LOAD_TYPE;

typedef enum _CM_ERROR_CONTROL_TYPE {
    IgnoreError = 0x00000000,
    NormalError = 0x00000001,
    SevereError = 0x00000002,
    CriticalError = 0x00000003
} SERVICE_ERROR_TYPE;
#line 19261 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef struct _TAPE_ERASE {
    DWORD Type;
    BOOLEAN Immediate;
} TAPE_ERASE, *PTAPE_ERASE;
#line 19277 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef struct _TAPE_PREPARE {
    DWORD Operation;
    BOOLEAN Immediate;
} TAPE_PREPARE, *PTAPE_PREPARE;
#line 19291 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef struct _TAPE_WRITE_MARKS {
    DWORD Type;
    DWORD Count;
    BOOLEAN Immediate;
} TAPE_WRITE_MARKS, *PTAPE_WRITE_MARKS;
#line 19305 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef struct _TAPE_GET_POSITION {
    DWORD Type;
    DWORD Partition;
    LARGE_INTEGER Offset;
} TAPE_GET_POSITION, *PTAPE_GET_POSITION;
#line 19326 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef struct _TAPE_SET_POSITION {
    DWORD Method;
    DWORD Partition;
    LARGE_INTEGER Offset;
    BOOLEAN Immediate;
} TAPE_SET_POSITION, *PTAPE_SET_POSITION;
#line 19419 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef struct _TAPE_GET_DRIVE_PARAMETERS {
    BOOLEAN ECC;
    BOOLEAN Compression;
    BOOLEAN DataPadding;
    BOOLEAN ReportSetmarks;
    DWORD DefaultBlockSize;
    DWORD MaximumBlockSize;
    DWORD MinimumBlockSize;
    DWORD MaximumPartitionCount;
    DWORD FeaturesLow;
    DWORD FeaturesHigh;
    DWORD EOTWarningZoneSize;
} TAPE_GET_DRIVE_PARAMETERS, *PTAPE_GET_DRIVE_PARAMETERS;





typedef struct _TAPE_SET_DRIVE_PARAMETERS {
    BOOLEAN ECC;
    BOOLEAN Compression;
    BOOLEAN DataPadding;
    BOOLEAN ReportSetmarks;
    DWORD EOTWarningZoneSize;
} TAPE_SET_DRIVE_PARAMETERS, *PTAPE_SET_DRIVE_PARAMETERS;





typedef struct _TAPE_GET_MEDIA_PARAMETERS {
    LARGE_INTEGER Capacity;
    LARGE_INTEGER Remaining;
    DWORD BlockSize;
    DWORD PartitionCount;
    BOOLEAN WriteProtected;
} TAPE_GET_MEDIA_PARAMETERS, *PTAPE_GET_MEDIA_PARAMETERS;





typedef struct _TAPE_SET_MEDIA_PARAMETERS {
    DWORD BlockSize;
} TAPE_SET_MEDIA_PARAMETERS, *PTAPE_SET_MEDIA_PARAMETERS;
#line 19473 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef struct _TAPE_CREATE_PARTITION {
    DWORD Method;
    DWORD Count;
    DWORD Size;
} TAPE_CREATE_PARTITION, *PTAPE_CREATE_PARTITION;
#line 19489 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef struct _TAPE_WMI_OPERATIONS {
   DWORD Method;
   DWORD DataBufferSize;
   PVOID DataBuffer;
} TAPE_WMI_OPERATIONS, *PTAPE_WMI_OPERATIONS;




typedef enum _TAPE_DRIVE_PROBLEM_TYPE {
   TapeDriveProblemNone, TapeDriveReadWriteWarning,
   TapeDriveReadWriteError, TapeDriveReadWarning,
   TapeDriveWriteWarning, TapeDriveReadError,
   TapeDriveWriteError, TapeDriveHardwareError,
   TapeDriveUnsupportedMedia, TapeDriveScsiConnectionError,
   TapeDriveTimetoClean, TapeDriveCleanDriveNow,
   TapeDriveMediaLifeExpired, TapeDriveSnappedTape
} TAPE_DRIVE_PROBLEM_TYPE;
#line 19518 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\ktmtypes.h"
#line 19 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\ktmtypes.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 32 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\ktmtypes.h"
typedef GUID UOW, *PUOW;
typedef GUID CRM_PROTOCOL_ID, *PCRM_PROTOCOL_ID;
#line 83 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\ktmtypes.h"
typedef ULONG NOTIFICATION_MASK;
#line 138 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\ktmtypes.h"
typedef struct _TRANSACTION_NOTIFICATION {
    PVOID TransactionKey;
    ULONG TransactionNotification;
    LARGE_INTEGER TmVirtualClock;
    ULONG ArgumentLength;
} TRANSACTION_NOTIFICATION, *PTRANSACTION_NOTIFICATION;

typedef struct _TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT {
    GUID EnlistmentId;
    UOW UOW;
} TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT, *PTRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT;



typedef struct _TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT {
    GUID TmIdentity;
    ULONG Flags;
} TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT, *PTRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT;

typedef ULONG SAVEPOINT_ID, *PSAVEPOINT_ID;

typedef struct _TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT {
    SAVEPOINT_ID SavepointId;
} TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT, *PTRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT;

typedef struct _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT {
    ULONG PropagationCookie;
    GUID UOW;
    GUID TmIdentity;
    ULONG BufferLength;

} TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT, *PTRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT;

typedef struct _TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT {
    ULONG MarshalCookie;
    GUID UOW;
} TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT, *PTRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT;

typedef TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT TRANSACTION_NOTIFICATION_PROMOTE_ARGUMENT, *PTRANSACTION_NOTIFICATION_PROMOTE_ARGUMENT;







typedef struct _KCRM_MARSHAL_HEADER {
    ULONG VersionMajor;
    ULONG VersionMinor;
    ULONG NumProtocols;
    ULONG Unused;
} KCRM_MARSHAL_HEADER, *PKCRM_MARSHAL_HEADER, * PRKCRM_MARSHAL_HEADER;

typedef struct _KCRM_TRANSACTION_BLOB {
    UOW UOW;
    GUID TmIdentity;
    ULONG IsolationLevel;
    ULONG IsolationFlags;
    ULONG Timeout;
    WCHAR Description[64];
} KCRM_TRANSACTION_BLOB, *PKCRM_TRANSACTION_BLOB, * PRKCRM_TRANSACTION_BLOB;

typedef struct _KCRM_PROTOCOL_BLOB {
    CRM_PROTOCOL_ID ProtocolId;
                                  ULONG StaticInfoLength;
    ULONG TransactionIdInfoLength;
    ULONG Unused1;
    ULONG Unused2;
} KCRM_PROTOCOL_BLOB, *PKCRM_PROTOCOL_BLOB, * PRKCRM_PROTOCOL_BLOB;
#line 216 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\ktmtypes.h"
#pragma option pop
#line 19518 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
#line 19695 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef enum _TRANSACTION_OUTCOME {
    TransactionOutcomeUndetermined = 1,
    TransactionOutcomeCommitted,
    TransactionOutcomeAborted,
} TRANSACTION_OUTCOME;


typedef enum _TRANSACTION_STATE {
    TransactionStateNormal = 1,
    TransactionStateIndoubt,
    TransactionStateCommittedNotify,
} TRANSACTION_STATE;


typedef struct _TRANSACTION_BASIC_INFORMATION {
    GUID TransactionId;
    DWORD State;
    DWORD Outcome;
} TRANSACTION_BASIC_INFORMATION, *PTRANSACTION_BASIC_INFORMATION;

typedef struct _TRANSACTIONMANAGER_BASIC_INFORMATION {
    GUID TmIdentity;
    LARGE_INTEGER VirtualClock;
} TRANSACTIONMANAGER_BASIC_INFORMATION, *PTRANSACTIONMANAGER_BASIC_INFORMATION;

typedef struct _TRANSACTIONMANAGER_LOG_INFORMATION {
    GUID LogIdentity;
} TRANSACTIONMANAGER_LOG_INFORMATION, *PTRANSACTIONMANAGER_LOG_INFORMATION;

typedef struct _TRANSACTIONMANAGER_LOGPATH_INFORMATION {
    DWORD LogPathLength;
                                WCHAR LogPath[1];

} TRANSACTIONMANAGER_LOGPATH_INFORMATION, *PTRANSACTIONMANAGER_LOGPATH_INFORMATION;

typedef struct _TRANSACTIONMANAGER_RECOVERY_INFORMATION {
    ULONGLONG LastRecoveredLsn;
} TRANSACTIONMANAGER_RECOVERY_INFORMATION, *PTRANSACTIONMANAGER_RECOVERY_INFORMATION;



typedef struct _TRANSACTIONMANAGER_OLDEST_INFORMATION {
    GUID OldestTransactionGuid;
} TRANSACTIONMANAGER_OLDEST_INFORMATION, *PTRANSACTIONMANAGER_OLDEST_INFORMATION;



typedef struct _TRANSACTION_PROPERTIES_INFORMATION {
    DWORD IsolationLevel;
    DWORD IsolationFlags;
    LARGE_INTEGER Timeout;
    DWORD Outcome;
    DWORD DescriptionLength;
    WCHAR Description[1];

} TRANSACTION_PROPERTIES_INFORMATION, *PTRANSACTION_PROPERTIES_INFORMATION;



typedef struct _TRANSACTION_BIND_INFORMATION {
    HANDLE TmHandle;
} TRANSACTION_BIND_INFORMATION, *PTRANSACTION_BIND_INFORMATION;

typedef struct _TRANSACTION_ENLISTMENT_PAIR {
    GUID EnlistmentId;
    GUID ResourceManagerId;
} TRANSACTION_ENLISTMENT_PAIR, *PTRANSACTION_ENLISTMENT_PAIR;

typedef struct _TRANSACTION_ENLISTMENTS_INFORMATION {
    DWORD NumberOfEnlistments;
    TRANSACTION_ENLISTMENT_PAIR EnlistmentPair[1];
} TRANSACTION_ENLISTMENTS_INFORMATION, *PTRANSACTION_ENLISTMENTS_INFORMATION;

typedef struct _TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION {
    TRANSACTION_ENLISTMENT_PAIR SuperiorEnlistmentPair;
} TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION, *PTRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION;


typedef struct _RESOURCEMANAGER_BASIC_INFORMATION {
    GUID ResourceManagerId;
    DWORD DescriptionLength;
    WCHAR Description[1];
} RESOURCEMANAGER_BASIC_INFORMATION, *PRESOURCEMANAGER_BASIC_INFORMATION;

typedef struct _RESOURCEMANAGER_COMPLETION_INFORMATION {
    HANDLE IoCompletionPortHandle;
    ULONG_PTR CompletionKey;
} RESOURCEMANAGER_COMPLETION_INFORMATION, *PRESOURCEMANAGER_COMPLETION_INFORMATION;




typedef enum _TRANSACTION_INFORMATION_CLASS {
    TransactionBasicInformation,
    TransactionPropertiesInformation,
    TransactionEnlistmentInformation,
    TransactionSuperiorEnlistmentInformation

    ,


    TransactionBindInformation,
    TransactionDTCPrivateInformation
    ,

} TRANSACTION_INFORMATION_CLASS;


typedef enum _TRANSACTIONMANAGER_INFORMATION_CLASS {
    TransactionManagerBasicInformation,
    TransactionManagerLogInformation,
    TransactionManagerLogPathInformation,
    TransactionManagerRecoveryInformation = 4

    ,



    TransactionManagerOnlineProbeInformation = 3,
    TransactionManagerOldestTransactionInformation = 5



} TRANSACTIONMANAGER_INFORMATION_CLASS;



typedef enum _RESOURCEMANAGER_INFORMATION_CLASS {
    ResourceManagerBasicInformation,
    ResourceManagerCompletionInformation,
} RESOURCEMANAGER_INFORMATION_CLASS;


typedef struct _ENLISTMENT_BASIC_INFORMATION {
    GUID EnlistmentId;
    GUID TransactionId;
    GUID ResourceManagerId;
} ENLISTMENT_BASIC_INFORMATION, *PENLISTMENT_BASIC_INFORMATION;

typedef struct _ENLISTMENT_CRM_INFORMATION {
    GUID CrmTransactionManagerId;
    GUID CrmResourceManagerId;
    GUID CrmEnlistmentId;
} ENLISTMENT_CRM_INFORMATION, *PENLISTMENT_CRM_INFORMATION;



typedef enum _ENLISTMENT_INFORMATION_CLASS {
    EnlistmentBasicInformation,
    EnlistmentRecoveryInformation,
    EnlistmentCrmInformation
} ENLISTMENT_INFORMATION_CLASS;

typedef struct _TRANSACTION_LIST_ENTRY {
    UOW UOW;
} TRANSACTION_LIST_ENTRY, *PTRANSACTION_LIST_ENTRY;

typedef struct _TRANSACTION_LIST_INFORMATION {
    DWORD NumberOfTransactions;
    TRANSACTION_LIST_ENTRY TransactionInformation[1];
} TRANSACTION_LIST_INFORMATION, *PTRANSACTION_LIST_INFORMATION;






typedef enum _KTMOBJECT_TYPE {

    KTMOBJECT_TRANSACTION,
    KTMOBJECT_TRANSACTION_MANAGER,
    KTMOBJECT_RESOURCE_MANAGER,
    KTMOBJECT_ENLISTMENT,
    KTMOBJECT_INVALID

} KTMOBJECT_TYPE, *PKTMOBJECT_TYPE;
#line 19880 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef struct _KTMOBJECT_CURSOR {





    GUID LastQuery;





    DWORD ObjectIdCount;





    GUID ObjectIds[1];

} KTMOBJECT_CURSOR, *PKTMOBJECT_CURSOR;
#line 19913 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef DWORD TP_VERSION, *PTP_VERSION;

typedef struct _TP_CALLBACK_INSTANCE TP_CALLBACK_INSTANCE, *PTP_CALLBACK_INSTANCE;

typedef void (__stdcall *PTP_SIMPLE_CALLBACK)(
                PTP_CALLBACK_INSTANCE Instance,
                PVOID Context
    );

typedef struct _TP_POOL TP_POOL, *PTP_POOL;

typedef enum _TP_CALLBACK_PRIORITY {
    TP_CALLBACK_PRIORITY_HIGH,
    TP_CALLBACK_PRIORITY_NORMAL,
    TP_CALLBACK_PRIORITY_LOW,
    TP_CALLBACK_PRIORITY_INVALID,
    TP_CALLBACK_PRIORITY_COUNT = TP_CALLBACK_PRIORITY_INVALID
} TP_CALLBACK_PRIORITY;

typedef struct _TP_POOL_STACK_INFORMATION {
    SIZE_T StackReserve;
    SIZE_T StackCommit;
}TP_POOL_STACK_INFORMATION, *PTP_POOL_STACK_INFORMATION;

typedef struct _TP_CLEANUP_GROUP TP_CLEANUP_GROUP, *PTP_CLEANUP_GROUP;

typedef void (__stdcall *PTP_CLEANUP_GROUP_CANCEL_CALLBACK)(
                PVOID ObjectContext,
                PVOID CleanupContext
    );
#line 19975 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
typedef struct _TP_CALLBACK_ENVIRON_V1 {
    TP_VERSION Version;
    PTP_POOL Pool;
    PTP_CLEANUP_GROUP CleanupGroup;
    PTP_CLEANUP_GROUP_CANCEL_CALLBACK CleanupGroupCancelCallback;
    PVOID RaceDll;
    struct _ACTIVATION_CONTEXT *ActivationContext;
    PTP_SIMPLE_CALLBACK FinalizationCallback;
    union {
        DWORD Flags;
        struct {
            DWORD LongFunction : 1;
            DWORD Persistent : 1;
            DWORD Private : 30;
        } s;
    } u;
} TP_CALLBACK_ENVIRON_V1;

typedef TP_CALLBACK_ENVIRON_V1 TP_CALLBACK_ENVIRON, *PTP_CALLBACK_ENVIRON;





__inline
void
TpInitializeCallbackEnviron(
          PTP_CALLBACK_ENVIRON CallbackEnviron
    )
{







    CallbackEnviron->Version = 1;



    CallbackEnviron->Pool = 0;
    CallbackEnviron->CleanupGroup = 0;
    CallbackEnviron->CleanupGroupCancelCallback = 0;
    CallbackEnviron->RaceDll = 0;
    CallbackEnviron->ActivationContext = 0;
    CallbackEnviron->FinalizationCallback = 0;
    CallbackEnviron->u.Flags = 0;
#line 20031 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
}

__inline
void
TpSetCallbackThreadpool(
            PTP_CALLBACK_ENVIRON CallbackEnviron,
            PTP_POOL Pool
    )
{
    CallbackEnviron->Pool = Pool;
}

__inline
void
TpSetCallbackCleanupGroup(
             PTP_CALLBACK_ENVIRON CallbackEnviron,
             PTP_CLEANUP_GROUP CleanupGroup,
             PTP_CLEANUP_GROUP_CANCEL_CALLBACK CleanupGroupCancelCallback
    )
{
    CallbackEnviron->CleanupGroup = CleanupGroup;
    CallbackEnviron->CleanupGroupCancelCallback = CleanupGroupCancelCallback;
}

__inline
void
TpSetCallbackActivationContext(
             PTP_CALLBACK_ENVIRON CallbackEnviron,
             struct _ACTIVATION_CONTEXT *ActivationContext
    )
{
    CallbackEnviron->ActivationContext = ActivationContext;
}

__inline
void
TpSetCallbackNoActivationContext(
            PTP_CALLBACK_ENVIRON CallbackEnviron
    )
{
    CallbackEnviron->ActivationContext = (struct _ACTIVATION_CONTEXT *)(LONG_PTR) -1;
}

__inline
void
TpSetCallbackLongFunction(
            PTP_CALLBACK_ENVIRON CallbackEnviron
    )
{
    CallbackEnviron->u.s.LongFunction = 1;
}

__inline
void
TpSetCallbackRaceWithDll(
            PTP_CALLBACK_ENVIRON CallbackEnviron,
            PVOID DllHandle
    )
{
    CallbackEnviron->RaceDll = DllHandle;
}

__inline
void
TpSetCallbackFinalizationCallback(
            PTP_CALLBACK_ENVIRON CallbackEnviron,
            PTP_SIMPLE_CALLBACK FinalizationCallback
    )
{
    CallbackEnviron->FinalizationCallback = FinalizationCallback;
}
#line 20117 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
__inline
void
TpSetCallbackPersistent(
            PTP_CALLBACK_ENVIRON CallbackEnviron
    )
{
    CallbackEnviron->u.s.Persistent = 1;
}


__inline
void
TpDestroyCallbackEnviron(
         PTP_CALLBACK_ENVIRON CallbackEnviron
    )
{






    (CallbackEnviron);
}




typedef struct _TP_WORK TP_WORK, *PTP_WORK;

typedef void (__stdcall *PTP_WORK_CALLBACK)(
                PTP_CALLBACK_INSTANCE Instance,
                PVOID Context,
                PTP_WORK Work
    );

typedef struct _TP_TIMER TP_TIMER, *PTP_TIMER;

typedef void (__stdcall *PTP_TIMER_CALLBACK)(
                PTP_CALLBACK_INSTANCE Instance,
                PVOID Context,
                PTP_TIMER Timer
    );

typedef DWORD TP_WAIT_RESULT;

typedef struct _TP_WAIT TP_WAIT, *PTP_WAIT;

typedef void (__stdcall *PTP_WAIT_CALLBACK)(
                PTP_CALLBACK_INSTANCE Instance,
                PVOID Context,
                PTP_WAIT Wait,
                TP_WAIT_RESULT WaitResult
    );

typedef struct _TP_IO TP_IO, *PTP_IO;
#line 20324 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnt.h"
#pragma option pop
#line 183 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\minwindef.h"




typedef UINT_PTR WPARAM;
typedef LONG_PTR LPARAM;
typedef LONG_PTR LRESULT;
#line 216 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\minwindef.h"
typedef HANDLE *SPHANDLE;
typedef HANDLE *LPHANDLE;
typedef HANDLE HGLOBAL;
typedef HANDLE HLOCAL;
typedef HANDLE GLOBALHANDLE;
typedef HANDLE LOCALHANDLE;
#line 234 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\minwindef.h"
typedef int ( __stdcall *FARPROC)();
typedef int ( __stdcall *NEARPROC)();
typedef int (__stdcall *PROC)();
#line 252 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\minwindef.h"
typedef WORD ATOM;

struct HKEY__{int unused;}; typedef struct HKEY__ *HKEY;
typedef HKEY *PHKEY;
struct HMETAFILE__{int unused;}; typedef struct HMETAFILE__ *HMETAFILE;
struct HINSTANCE__{int unused;}; typedef struct HINSTANCE__ *HINSTANCE;
typedef HINSTANCE HMODULE;
struct HRGN__{int unused;}; typedef struct HRGN__ *HRGN;
struct HRSRC__{int unused;}; typedef struct HRSRC__ *HRSRC;
struct HSPRITE__{int unused;}; typedef struct HSPRITE__ *HSPRITE;
struct HLSURF__{int unused;}; typedef struct HLSURF__ *HLSURF;
struct HSTR__{int unused;}; typedef struct HSTR__ *HSTR;
struct HTASK__{int unused;}; typedef struct HTASK__ *HTASK;
struct HWINSTA__{int unused;}; typedef struct HWINSTA__ *HWINSTA;
struct HKL__{int unused;}; typedef struct HKL__ *HKL;


typedef int HFILE;
#line 278 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\minwindef.h"
typedef struct _FILETIME {
    DWORD dwLowDateTime;
    DWORD dwHighDateTime;
} FILETIME, *PFILETIME, *LPFILETIME;







#pragma endregion

#pragma option pop
#line 25 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\windef.h"
#line 37 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\windef.h"
#pragma region Application Family or OneCore Family


struct HWND__{int unused;}; typedef struct HWND__ *HWND;
struct HHOOK__{int unused;}; typedef struct HHOOK__ *HHOOK;


#pragma endregion
#line 59 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\windef.h"
#pragma region Application Family




typedef void * HGDIOBJ;






struct HACCEL__{int unused;}; typedef struct HACCEL__ *HACCEL;


struct HBITMAP__{int unused;}; typedef struct HBITMAP__ *HBITMAP;
struct HBRUSH__{int unused;}; typedef struct HBRUSH__ *HBRUSH;


struct HCOLORSPACE__{int unused;}; typedef struct HCOLORSPACE__ *HCOLORSPACE;


struct HDC__{int unused;}; typedef struct HDC__ *HDC;

struct HGLRC__{int unused;}; typedef struct HGLRC__ *HGLRC;
struct HDESK__{int unused;}; typedef struct HDESK__ *HDESK;
struct HENHMETAFILE__{int unused;}; typedef struct HENHMETAFILE__ *HENHMETAFILE;

struct HFONT__{int unused;}; typedef struct HFONT__ *HFONT;

struct HICON__{int unused;}; typedef struct HICON__ *HICON;

struct HMENU__{int unused;}; typedef struct HMENU__ *HMENU;


struct HPALETTE__{int unused;}; typedef struct HPALETTE__ *HPALETTE;
struct HPEN__{int unused;}; typedef struct HPEN__ *HPEN;



struct HWINEVENTHOOK__{int unused;}; typedef struct HWINEVENTHOOK__ *HWINEVENTHOOK;



#pragma endregion




#pragma region Application Family


struct HMONITOR__{int unused;}; typedef struct HMONITOR__ *HMONITOR;


#pragma endregion



#pragma region Desktop Family


struct HUMPD__{int unused;}; typedef struct HUMPD__ *HUMPD;


#pragma endregion



#pragma region Application Family



typedef HICON HCURSOR;




typedef DWORD COLORREF;


#pragma endregion

#pragma region Desktop Family


typedef DWORD *LPCOLORREF;




#pragma endregion

#pragma region Application Family


typedef struct tagRECT
{
    LONG left;
    LONG top;
    LONG right;
    LONG bottom;
} RECT, *PRECT, *NPRECT, *LPRECT;

typedef const RECT * LPCRECT;

typedef struct _RECTL
{
    LONG left;
    LONG top;
    LONG right;
    LONG bottom;
} RECTL, *PRECTL, *LPRECTL;

typedef const RECTL * LPCRECTL;

typedef struct tagPOINT
{
    LONG x;
    LONG y;
} POINT, *PPOINT, *NPPOINT, *LPPOINT;

typedef struct _POINTL
{
    LONG x;
    LONG y;
} POINTL, *PPOINTL;

typedef struct tagSIZE
{
    LONG cx;
    LONG cy;
} SIZE, *PSIZE, *LPSIZE;

typedef SIZE SIZEL;
typedef SIZE *PSIZEL, *LPSIZEL;

typedef struct tagPOINTS
{

    SHORT x;
    SHORT y;




} POINTS, *PPOINTS, *LPPOINTS;


#pragma endregion
#line 245 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\windef.h"
#pragma option pop
#line 199 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\windows.h"

#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 37 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\apisetcconv.h"








#pragma option push -b -a8 -pc -A- -w-pun
#line 95 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\apisetcconv.h"
#pragma option pop
#line 37 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"

#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\minwinbase.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 47 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\minwinbase.h"
typedef struct _SECURITY_ATTRIBUTES {
    DWORD nLength;
    LPVOID lpSecurityDescriptor;
    BOOL bInheritHandle;
} SECURITY_ATTRIBUTES, *PSECURITY_ATTRIBUTES, *LPSECURITY_ATTRIBUTES;

typedef struct _OVERLAPPED {
    ULONG_PTR Internal;
    ULONG_PTR InternalHigh;
    union {
        struct {
            DWORD Offset;
            DWORD OffsetHigh;
        } ;
        PVOID Pointer;
    } ;

    HANDLE hEvent;
} OVERLAPPED, *LPOVERLAPPED;

typedef struct _OVERLAPPED_ENTRY {
    ULONG_PTR lpCompletionKey;
    LPOVERLAPPED lpOverlapped;
    ULONG_PTR Internal;
    DWORD dwNumberOfBytesTransferred;
} OVERLAPPED_ENTRY, *LPOVERLAPPED_ENTRY;
#line 91 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\minwinbase.h"
typedef struct _SYSTEMTIME {
    WORD wYear;
    WORD wMonth;
    WORD wDayOfWeek;
    WORD wDay;
    WORD wHour;
    WORD wMinute;
    WORD wSecond;
    WORD wMilliseconds;
} SYSTEMTIME, *PSYSTEMTIME, *LPSYSTEMTIME;


typedef struct _WIN32_FIND_DATAA {
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
    DWORD dwReserved0;
    DWORD dwReserved1;
              CHAR cFileName[ 260 ];
              CHAR cAlternateFileName[ 14 ];





} WIN32_FIND_DATAA, *PWIN32_FIND_DATAA, *LPWIN32_FIND_DATAA;
typedef struct _WIN32_FIND_DATAW {
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
    DWORD dwReserved0;
    DWORD dwReserved1;
              WCHAR cFileName[ 260 ];
              WCHAR cAlternateFileName[ 14 ];





} WIN32_FIND_DATAW, *PWIN32_FIND_DATAW, *LPWIN32_FIND_DATAW;

typedef WIN32_FIND_DATAW WIN32_FIND_DATA;
typedef PWIN32_FIND_DATAW PWIN32_FIND_DATA;
typedef LPWIN32_FIND_DATAW LPWIN32_FIND_DATA;
#line 149 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\minwinbase.h"
typedef enum _FINDEX_INFO_LEVELS {
    FindExInfoStandard,
    FindExInfoBasic,
    FindExInfoMaxInfoLevel
} FINDEX_INFO_LEVELS;




typedef enum _FINDEX_SEARCH_OPS {
    FindExSearchNameMatch,
    FindExSearchLimitToDirectories,
    FindExSearchLimitToDevices,
    FindExSearchMaxSearchOp
} FINDEX_SEARCH_OPS;


typedef enum _GET_FILEEX_INFO_LEVELS {
    GetFileExInfoStandard,
    GetFileExMaxInfoLevel
} GET_FILEEX_INFO_LEVELS;
#line 200 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\minwinbase.h"
typedef RTL_CRITICAL_SECTION CRITICAL_SECTION;
typedef PRTL_CRITICAL_SECTION PCRITICAL_SECTION;
typedef PRTL_CRITICAL_SECTION LPCRITICAL_SECTION;

typedef RTL_CRITICAL_SECTION_DEBUG CRITICAL_SECTION_DEBUG;
typedef PRTL_CRITICAL_SECTION_DEBUG PCRITICAL_SECTION_DEBUG;
typedef PRTL_CRITICAL_SECTION_DEBUG LPCRITICAL_SECTION_DEBUG;

typedef
void
(__stdcall *LPOVERLAPPED_COMPLETION_ROUTINE)(
            DWORD dwErrorCode,
            DWORD dwNumberOfBytesTransfered,
            LPOVERLAPPED lpOverlapped
    );




typedef struct _PROCESS_HEAP_ENTRY {
    PVOID lpData;
    DWORD cbData;
    BYTE cbOverhead;
    BYTE iRegionIndex;
    WORD wFlags;
    union {
        struct {
            HANDLE hMem;
            DWORD dwReserved[ 3 ];
        } Block;
        struct {
            DWORD dwCommittedSize;
            DWORD dwUnCommittedSize;
            LPVOID lpFirstBlock;
            LPVOID lpLastBlock;
        } Region;
    } ;
} PROCESS_HEAP_ENTRY, *LPPROCESS_HEAP_ENTRY, *PPROCESS_HEAP_ENTRY;
#line 246 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\minwinbase.h"
typedef struct _REASON_CONTEXT {
    ULONG Version;
    DWORD Flags;
    union {
        struct {
            HMODULE LocalizedReasonModule;
            ULONG LocalizedReasonId;
            ULONG ReasonStringCount;
            LPWSTR *ReasonStrings;

        } Detailed;

        LPWSTR SimpleReasonString;
    } Reason;
} REASON_CONTEXT, *PREASON_CONTEXT;
#line 275 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\minwinbase.h"
typedef DWORD (__stdcall *PTHREAD_START_ROUTINE)(
    LPVOID lpThreadParameter
    );
typedef PTHREAD_START_ROUTINE LPTHREAD_START_ROUTINE;

typedef struct _EXCEPTION_DEBUG_INFO {
    EXCEPTION_RECORD ExceptionRecord;
    DWORD dwFirstChance;
} EXCEPTION_DEBUG_INFO, *LPEXCEPTION_DEBUG_INFO;

typedef struct _CREATE_THREAD_DEBUG_INFO {
    HANDLE hThread;
    LPVOID lpThreadLocalBase;
    LPTHREAD_START_ROUTINE lpStartAddress;
} CREATE_THREAD_DEBUG_INFO, *LPCREATE_THREAD_DEBUG_INFO;

typedef struct _CREATE_PROCESS_DEBUG_INFO {
    HANDLE hFile;
    HANDLE hProcess;
    HANDLE hThread;
    LPVOID lpBaseOfImage;
    DWORD dwDebugInfoFileOffset;
    DWORD nDebugInfoSize;
    LPVOID lpThreadLocalBase;
    LPTHREAD_START_ROUTINE lpStartAddress;
    LPVOID lpImageName;
    WORD fUnicode;
} CREATE_PROCESS_DEBUG_INFO, *LPCREATE_PROCESS_DEBUG_INFO;

typedef struct _EXIT_THREAD_DEBUG_INFO {
    DWORD dwExitCode;
} EXIT_THREAD_DEBUG_INFO, *LPEXIT_THREAD_DEBUG_INFO;

typedef struct _EXIT_PROCESS_DEBUG_INFO {
    DWORD dwExitCode;
} EXIT_PROCESS_DEBUG_INFO, *LPEXIT_PROCESS_DEBUG_INFO;

typedef struct _LOAD_DLL_DEBUG_INFO {
    HANDLE hFile;
    LPVOID lpBaseOfDll;
    DWORD dwDebugInfoFileOffset;
    DWORD nDebugInfoSize;
    LPVOID lpImageName;
    WORD fUnicode;
} LOAD_DLL_DEBUG_INFO, *LPLOAD_DLL_DEBUG_INFO;

typedef struct _UNLOAD_DLL_DEBUG_INFO {
    LPVOID lpBaseOfDll;
} UNLOAD_DLL_DEBUG_INFO, *LPUNLOAD_DLL_DEBUG_INFO;

typedef struct _OUTPUT_DEBUG_STRING_INFO {
    LPSTR lpDebugStringData;
    WORD fUnicode;
    WORD nDebugStringLength;
} OUTPUT_DEBUG_STRING_INFO, *LPOUTPUT_DEBUG_STRING_INFO;

typedef struct _RIP_INFO {
    DWORD dwError;
    DWORD dwType;
} RIP_INFO, *LPRIP_INFO;


typedef struct _DEBUG_EVENT {
    DWORD dwDebugEventCode;
    DWORD dwProcessId;
    DWORD dwThreadId;
    union {
        EXCEPTION_DEBUG_INFO Exception;
        CREATE_THREAD_DEBUG_INFO CreateThread;
        CREATE_PROCESS_DEBUG_INFO CreateProcessInfo;
        EXIT_THREAD_DEBUG_INFO ExitThread;
        EXIT_PROCESS_DEBUG_INFO ExitProcess;
        LOAD_DLL_DEBUG_INFO LoadDll;
        UNLOAD_DLL_DEBUG_INFO UnloadDll;
        OUTPUT_DEBUG_STRING_INFO DebugString;
        RIP_INFO RipInfo;
    } u;
} DEBUG_EVENT, *LPDEBUG_EVENT;







typedef PCONTEXT LPCONTEXT;
#line 437 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\minwinbase.h"
#pragma option pop
#line 38 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"






#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\processenv.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 50 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\processenv.h"
#pragma region Desktop Family or OneCore Family







LPCH
__stdcall
GetEnvironmentStrings(
    void
    );




LPWCH
__stdcall
GetEnvironmentStringsW(
    void
    );
#line 81 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\processenv.h"
BOOL
__stdcall
SetEnvironmentStringsW(
                                     LPWCH NewEnvironment
    );






BOOL
__stdcall
FreeEnvironmentStringsA(
                                     LPCH penv
    );


BOOL
__stdcall
FreeEnvironmentStringsW(
                                     LPWCH penv
    );
#line 112 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\processenv.h"
HANDLE
__stdcall
GetStdHandle(
         DWORD nStdHandle
    );



BOOL
__stdcall
SetStdHandle(
         DWORD nStdHandle,
         HANDLE hHandle
    );
#line 146 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\processenv.h"
#pragma endregion

#pragma region Application Family or OneCore Family






LPSTR
__stdcall
GetCommandLineA(
    void
    );


LPWSTR
__stdcall
GetCommandLineW(
    void
    );
#line 177 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\processenv.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family







DWORD
__stdcall
GetEnvironmentVariableA(
             LPCSTR lpName,
                                           LPSTR lpBuffer,
         DWORD nSize
    );



DWORD
__stdcall
GetEnvironmentVariableW(
             LPCWSTR lpName,
                                           LPWSTR lpBuffer,
         DWORD nSize
    );
#line 212 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\processenv.h"
BOOL
__stdcall
SetEnvironmentVariableA(
         LPCSTR lpName,
             LPCSTR lpValue
    );


BOOL
__stdcall
SetEnvironmentVariableW(
         LPCWSTR lpName,
             LPCWSTR lpValue
    );
#line 235 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\processenv.h"
DWORD
__stdcall
ExpandEnvironmentStringsA(
         LPCSTR lpSrc,
                                       LPSTR lpDst,
         DWORD nSize
    );



DWORD
__stdcall
ExpandEnvironmentStringsW(
         LPCWSTR lpSrc,
                                       LPWSTR lpDst,
         DWORD nSize
    );
#line 262 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\processenv.h"
#pragma endregion

#pragma region Application Family or OneCore Family






BOOL
__stdcall
SetCurrentDirectoryA(
         LPCSTR lpPathName
    );


BOOL
__stdcall
SetCurrentDirectoryW(
         LPCWSTR lpPathName
    );
#line 293 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\processenv.h"
DWORD
__stdcall
GetCurrentDirectoryA(
         DWORD nBufferLength,
                                                   LPSTR lpBuffer
    );



DWORD
__stdcall
GetCurrentDirectoryW(
         DWORD nBufferLength,
                                                   LPWSTR lpBuffer
    );
#line 318 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\processenv.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family






DWORD
__stdcall
SearchPathW(
             LPCWSTR lpPath,
         LPCWSTR lpFileName,
             LPCWSTR lpExtension,
         DWORD nBufferLength,
                                                   LPWSTR lpBuffer,
              LPWSTR * lpFilePart
    );
#line 353 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\processenv.h"
DWORD
__stdcall
SearchPathA(
             LPCSTR lpPath,
         LPCSTR lpFileName,
             LPCSTR lpExtension,
         DWORD nBufferLength,
                                                   LPSTR lpBuffer,
              LPSTR * lpFilePart
    );
#line 395 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\processenv.h"
#pragma endregion
#line 407 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\processenv.h"
#pragma option pop
#line 44 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"

#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\fileapi.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 52 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\fileapi.h"
#pragma region Application Family or OneCore Family
#line 70 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\fileapi.h"
#pragma endregion







#pragma region Desktop Family or OneCore Family




LONG
__stdcall
CompareFileTime(
         const FILETIME * lpFileTime1,
         const FILETIME * lpFileTime2
    );



#pragma endregion

#pragma region Application Family or OneCore Family




BOOL
__stdcall
CreateDirectoryA(
         LPCSTR lpPathName,
             LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );


BOOL
__stdcall
CreateDirectoryW(
         LPCWSTR lpPathName,
             LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );








#pragma endregion

#pragma region Desktop Family or OneCore Family




HANDLE
__stdcall
CreateFileA(
         LPCSTR lpFileName,
         DWORD dwDesiredAccess,
         DWORD dwShareMode,
             LPSECURITY_ATTRIBUTES lpSecurityAttributes,
         DWORD dwCreationDisposition,
         DWORD dwFlagsAndAttributes,
             HANDLE hTemplateFile
    );


HANDLE
__stdcall
CreateFileW(
         LPCWSTR lpFileName,
         DWORD dwDesiredAccess,
         DWORD dwShareMode,
             LPSECURITY_ATTRIBUTES lpSecurityAttributes,
         DWORD dwCreationDisposition,
         DWORD dwFlagsAndAttributes,
             HANDLE hTemplateFile
    );
#line 160 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\fileapi.h"
BOOL
__stdcall
DefineDosDeviceW(
         DWORD dwFlags,
         LPCWSTR lpDeviceName,
             LPCWSTR lpTargetPath
    );







#pragma endregion

#pragma region Application Family or OneCore Family




BOOL
__stdcall
DeleteFileA(
         LPCSTR lpFileName
    );


BOOL
__stdcall
DeleteFileW(
         LPCWSTR lpFileName
    );








#pragma endregion

#pragma region Desktop Family or OneCore Family




BOOL
__stdcall
DeleteVolumeMountPointW(
         LPCWSTR lpszVolumeMountPoint
    );







BOOL
__stdcall
FileTimeToLocalFileTime(
         const FILETIME * lpFileTime,
          LPFILETIME lpLocalFileTime
    );



#pragma endregion

#pragma region Application Family or OneCore Family







BOOL
__stdcall
FindClose(
            HANDLE hFindFile
    );



#pragma endregion

#pragma region Desktop Family or OneCore Family




BOOL
__stdcall
FindCloseChangeNotification(
         HANDLE hChangeHandle
    );



HANDLE
__stdcall
FindFirstChangeNotificationA(
         LPCSTR lpPathName,
         BOOL bWatchSubtree,
         DWORD dwNotifyFilter
    );


HANDLE
__stdcall
FindFirstChangeNotificationW(
         LPCWSTR lpPathName,
         BOOL bWatchSubtree,
         DWORD dwNotifyFilter
    );
#line 286 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\fileapi.h"
HANDLE
__stdcall
FindFirstFileA(
         LPCSTR lpFileName,
          LPWIN32_FIND_DATAA lpFindFileData
    );


HANDLE
__stdcall
FindFirstFileW(
         LPCWSTR lpFileName,
          LPWIN32_FIND_DATAW lpFindFileData
    );








#pragma endregion

#pragma region Application Family or OneCore Family







HANDLE
__stdcall
FindFirstFileExA(
         LPCSTR lpFileName,
         FINDEX_INFO_LEVELS fInfoLevelId,
                                                 LPVOID lpFindFileData,
         FINDEX_SEARCH_OPS fSearchOp,
               LPVOID lpSearchFilter,
         DWORD dwAdditionalFlags
    );


HANDLE
__stdcall
FindFirstFileExW(
         LPCWSTR lpFileName,
         FINDEX_INFO_LEVELS fInfoLevelId,
                                                 LPVOID lpFindFileData,
         FINDEX_SEARCH_OPS fSearchOp,
               LPVOID lpSearchFilter,
         DWORD dwAdditionalFlags
    );
#line 350 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\fileapi.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family




HANDLE
__stdcall
FindFirstVolumeW(
                                  LPWSTR lpszVolumeName,
         DWORD cchBufferLength
    );







BOOL
__stdcall
FindNextChangeNotification(
         HANDLE hChangeHandle
    );



#pragma endregion

#pragma region Application Family or OneCore Family




BOOL
__stdcall
FindNextFileA(
         HANDLE hFindFile,
          LPWIN32_FIND_DATAA lpFindFileData
    );


BOOL
__stdcall
FindNextFileW(
         HANDLE hFindFile,
          LPWIN32_FIND_DATAW lpFindFileData
    );








#pragma endregion

#pragma region Desktop Family or OneCore Family




BOOL
__stdcall
FindNextVolumeW(
            HANDLE hFindVolume,
                                  LPWSTR lpszVolumeName,
         DWORD cchBufferLength
    );







BOOL
__stdcall
FindVolumeClose(
         HANDLE hFindVolume
    );



#pragma endregion

#pragma region Application Family or OneCore Family




BOOL
__stdcall
FlushFileBuffers(
         HANDLE hFile
    );



#pragma endregion

#pragma region Desktop Family or OneCore Family




BOOL
__stdcall
GetDiskFreeSpaceA(
             LPCSTR lpRootPathName,
              LPDWORD lpSectorsPerCluster,
              LPDWORD lpBytesPerSector,
              LPDWORD lpNumberOfFreeClusters,
              LPDWORD lpTotalNumberOfClusters
    );


BOOL
__stdcall
GetDiskFreeSpaceW(
             LPCWSTR lpRootPathName,
              LPDWORD lpSectorsPerCluster,
              LPDWORD lpBytesPerSector,
              LPDWORD lpNumberOfFreeClusters,
              LPDWORD lpTotalNumberOfClusters
    );








#pragma endregion

#pragma region Application Family or OneCore Family




BOOL
__stdcall
GetDiskFreeSpaceExA(
             LPCSTR lpDirectoryName,
              PULARGE_INTEGER lpFreeBytesAvailableToCaller,
              PULARGE_INTEGER lpTotalNumberOfBytes,
              PULARGE_INTEGER lpTotalNumberOfFreeBytes
    );


BOOL
__stdcall
GetDiskFreeSpaceExW(
             LPCWSTR lpDirectoryName,
              PULARGE_INTEGER lpFreeBytesAvailableToCaller,
              PULARGE_INTEGER lpTotalNumberOfBytes,
              PULARGE_INTEGER lpTotalNumberOfFreeBytes
    );








#pragma endregion

#pragma region Desktop Family or OneCore Family




UINT
__stdcall
GetDriveTypeA(
             LPCSTR lpRootPathName
    );


UINT
__stdcall
GetDriveTypeW(
             LPCWSTR lpRootPathName
    );
#line 546 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\fileapi.h"
DWORD
__stdcall
GetFileAttributesA(
         LPCSTR lpFileName
    );


DWORD
__stdcall
GetFileAttributesW(
         LPCWSTR lpFileName
    );








#pragma endregion

#pragma region Application Family or OneCore Family



typedef struct _WIN32_FILE_ATTRIBUTE_DATA {
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
} WIN32_FILE_ATTRIBUTE_DATA, *LPWIN32_FILE_ATTRIBUTE_DATA;


#pragma endregion

#pragma region Application Family or OneCore Family




BOOL
__stdcall
GetFileAttributesExA(
         LPCSTR lpFileName,
         GET_FILEEX_INFO_LEVELS fInfoLevelId,
                                                          LPVOID lpFileInformation
    );


BOOL
__stdcall
GetFileAttributesExW(
         LPCWSTR lpFileName,
         GET_FILEEX_INFO_LEVELS fInfoLevelId,
                                                          LPVOID lpFileInformation
    );








#pragma endregion

#pragma region Desktop Family or OneCore Family



typedef struct _BY_HANDLE_FILE_INFORMATION {
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD dwVolumeSerialNumber;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
    DWORD nNumberOfLinks;
    DWORD nFileIndexHigh;
    DWORD nFileIndexLow;
} BY_HANDLE_FILE_INFORMATION, *PBY_HANDLE_FILE_INFORMATION, *LPBY_HANDLE_FILE_INFORMATION;


BOOL
__stdcall
GetFileInformationByHandle(
         HANDLE hFile,
          LPBY_HANDLE_FILE_INFORMATION lpFileInformation
    );



DWORD
__stdcall
GetFileSize(
         HANDLE hFile,
              LPDWORD lpFileSizeHigh
    );



#pragma endregion

#pragma region Application Family




BOOL
__stdcall
GetFileSizeEx(
         HANDLE hFile,
          PLARGE_INTEGER lpFileSize
    );



DWORD
__stdcall
GetFileType(
         HANDLE hFile
    );



#pragma endregion

#pragma region Desktop Family
#line 713 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\fileapi.h"
#pragma endregion

#pragma region Application Family or OneCore Family




BOOL
__stdcall
GetFileTime(
         HANDLE hFile,
              LPFILETIME lpCreationTime,
              LPFILETIME lpLastAccessTime,
              LPFILETIME lpLastWriteTime
    );




DWORD
__stdcall
GetFullPathNameW(
         LPCWSTR lpFileName,
         DWORD nBufferLength,
                                                   LPWSTR lpBuffer,
                 LPWSTR * lpFilePart
    );







#pragma endregion

#pragma region Desktop Family or OneCore Family





DWORD
__stdcall
GetFullPathNameA(
         LPCSTR lpFileName,
         DWORD nBufferLength,
                                                   LPSTR lpBuffer,
                 LPSTR * lpFilePart
    );







DWORD
__stdcall
GetLogicalDrives(
    void
    );



DWORD
__stdcall
GetLogicalDriveStringsW(
         DWORD nBufferLength,
                                                   LPWSTR lpBuffer
    );
#line 792 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\fileapi.h"
DWORD
__stdcall
GetLongPathNameA(
         LPCSTR lpszShortPath,
                                               LPSTR lpszLongPath,
         DWORD cchBuffer
    );







#pragma endregion

#pragma region Application Family or OneCore Family





DWORD
__stdcall
GetLongPathNameW(
         LPCWSTR lpszShortPath,
                                               LPWSTR lpszLongPath,
         DWORD cchBuffer
    );







#pragma endregion

#pragma region Desktop Family or OneCore Family





DWORD
__stdcall
GetShortPathNameW(
         LPCWSTR lpszLongPath,
                                               LPWSTR lpszShortPath,
         DWORD cchBuffer
    );







#pragma endregion

#pragma region Application Family or OneCore Family




UINT
__stdcall
GetTempFileNameW(
         LPCWSTR lpPathName,
         LPCWSTR lpPrefixString,
         UINT uUnique,
                           LPWSTR lpTempFileName
    );







#pragma endregion

#pragma region Desktop Family or OneCore Family
#line 899 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\fileapi.h"
BOOL
__stdcall
GetVolumeInformationW(
             LPCWSTR lpRootPathName,
                                      LPWSTR lpVolumeNameBuffer,
         DWORD nVolumeNameSize,
              LPDWORD lpVolumeSerialNumber,
              LPDWORD lpMaximumComponentLength,
              LPDWORD lpFileSystemFlags,
                                          LPWSTR lpFileSystemNameBuffer,
         DWORD nFileSystemNameSize
    );







BOOL
__stdcall
GetVolumePathNameW(
         LPCWSTR lpszFileName,
                                  LPWSTR lpszVolumePathName,
         DWORD cchBufferLength
    );







BOOL
__stdcall
LocalFileTimeToFileTime(
         const FILETIME * lpLocalFileTime,
          LPFILETIME lpFileTime
    );



BOOL
__stdcall
LockFile(
         HANDLE hFile,
         DWORD dwFileOffsetLow,
         DWORD dwFileOffsetHigh,
         DWORD nNumberOfBytesToLockLow,
         DWORD nNumberOfBytesToLockHigh
    );



#pragma endregion

#pragma region Application Family or OneCore Family




BOOL
__stdcall
LockFileEx(
         HANDLE hFile,
         DWORD dwFlags,
               DWORD dwReserved,
         DWORD nNumberOfBytesToLockLow,
         DWORD nNumberOfBytesToLockHigh,
            LPOVERLAPPED lpOverlapped
    );



#pragma endregion

#pragma region Desktop Family or OneCore Family




DWORD
__stdcall
QueryDosDeviceW(
             LPCWSTR lpDeviceName,
                                         LPWSTR lpTargetPath,
         DWORD ucchMax
    );







#pragma endregion

#pragma region Application Family or OneCore Family





BOOL
__stdcall
ReadFile(
         HANDLE hFile,
                                                                                                  LPVOID lpBuffer,
         DWORD nNumberOfBytesToRead,
              LPDWORD lpNumberOfBytesRead,
                LPOVERLAPPED lpOverlapped
    );



#pragma endregion

#pragma region Desktop Family or OneCore Family





BOOL
__stdcall
ReadFileEx(
         HANDLE hFile,
                                                                         LPVOID lpBuffer,
         DWORD nNumberOfBytesToRead,
            LPOVERLAPPED lpOverlapped,
         LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
    );




BOOL
__stdcall
ReadFileScatter(
         HANDLE hFile,
         FILE_SEGMENT_ELEMENT aSegmentArray[],
         DWORD nNumberOfBytesToRead,
               LPDWORD lpReserved,
            LPOVERLAPPED lpOverlapped
    );



#pragma endregion

#pragma region Application Family or OneCore Family




BOOL
__stdcall
RemoveDirectoryA(
         LPCSTR lpPathName
    );


BOOL
__stdcall
RemoveDirectoryW(
         LPCWSTR lpPathName
    );
#line 1074 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\fileapi.h"
BOOL
__stdcall
SetEndOfFile(
         HANDLE hFile
    );



BOOL
__stdcall
SetFileAttributesA(
         LPCSTR lpFileName,
         DWORD dwFileAttributes
    );


BOOL
__stdcall
SetFileAttributesW(
         LPCWSTR lpFileName,
         DWORD dwFileAttributes
    );
#line 1120 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\fileapi.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family




DWORD
__stdcall
SetFilePointer(
         HANDLE hFile,
         LONG lDistanceToMove,
                PLONG lpDistanceToMoveHigh,
         DWORD dwMoveMethod
    );



#pragma endregion

#pragma region Application Family or OneCore Family




BOOL
__stdcall
SetFilePointerEx(
         HANDLE hFile,
         LARGE_INTEGER liDistanceToMove,
              PLARGE_INTEGER lpNewFilePointer,
         DWORD dwMoveMethod
    );



BOOL
__stdcall
SetFileTime(
         HANDLE hFile,
             const FILETIME * lpCreationTime,
             const FILETIME * lpLastAccessTime,
             const FILETIME * lpLastWriteTime
    );



#pragma endregion

#pragma region Desktop Family or OneCore Family







BOOL
__stdcall
SetFileValidData(
         HANDLE hFile,
         LONGLONG ValidDataLength
    );





BOOL
__stdcall
UnlockFile(
         HANDLE hFile,
         DWORD dwFileOffsetLow,
         DWORD dwFileOffsetHigh,
         DWORD nNumberOfBytesToUnlockLow,
         DWORD nNumberOfBytesToUnlockHigh
    );



#pragma endregion

#pragma region Application Family or OneCore Family




BOOL
__stdcall
UnlockFileEx(
         HANDLE hFile,
               DWORD dwReserved,
         DWORD nNumberOfBytesToUnlockLow,
         DWORD nNumberOfBytesToUnlockHigh,
            LPOVERLAPPED lpOverlapped
    );



BOOL
__stdcall
WriteFile(
         HANDLE hFile,
                                                LPCVOID lpBuffer,
         DWORD nNumberOfBytesToWrite,
              LPDWORD lpNumberOfBytesWritten,
                LPOVERLAPPED lpOverlapped
    );



#pragma endregion

#pragma region Desktop Family or OneCore Family




BOOL
__stdcall
WriteFileEx(
         HANDLE hFile,
                                                LPCVOID lpBuffer,
         DWORD nNumberOfBytesToWrite,
            LPOVERLAPPED lpOverlapped,
         LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
    );



BOOL
__stdcall
WriteFileGather(
         HANDLE hFile,
         FILE_SEGMENT_ELEMENT aSegmentArray[],
         DWORD nNumberOfBytesToWrite,
               LPDWORD lpReserved,
            LPOVERLAPPED lpOverlapped
    );



#pragma endregion








#pragma region Application Family or OneCore Family




DWORD
__stdcall
GetTempPathW(
         DWORD nBufferLength,
                                                   LPWSTR lpBuffer
    );







#pragma endregion

#pragma region Desktop Family or OneCore Family




BOOL
__stdcall
GetVolumeNameForVolumeMountPointW(
         LPCWSTR lpszVolumeMountPoint,
                                  LPWSTR lpszVolumeName,
         DWORD cchBufferLength
    );
#line 1313 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\fileapi.h"
BOOL
__stdcall
GetVolumePathNamesForVolumeNameW(
         LPCWSTR lpszVolumeName,
                                                                                          LPWCH lpszVolumePathNames,
         DWORD cchBufferLength,
          PDWORD lpcchReturnLength
    );
#line 1330 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\fileapi.h"
#pragma endregion

#pragma region Application Family or OneCore Family
#line 1363 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\fileapi.h"
#pragma endregion
#line 1373 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\fileapi.h"
#pragma region Desktop Family or OneCore Family
#line 1393 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\fileapi.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family







DWORD
__stdcall
GetCompressedFileSizeA(
         LPCSTR lpFileName,
              LPDWORD lpFileSizeHigh
    );


DWORD
__stdcall
GetCompressedFileSizeW(
         LPCWSTR lpFileName,
              LPDWORD lpFileSizeHigh
    );
#line 1427 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\fileapi.h"
#pragma endregion





#pragma region Desktop Family or OneCore Family






typedef enum _STREAM_INFO_LEVELS {

    FindStreamInfoStandard,
    FindStreamInfoMaxInfoLevel

} STREAM_INFO_LEVELS;

typedef struct _WIN32_FIND_STREAM_DATA {

    LARGE_INTEGER StreamSize;
    WCHAR cStreamName[ 260 + 36 ];

} WIN32_FIND_STREAM_DATA, *PWIN32_FIND_STREAM_DATA;





HANDLE
__stdcall
FindFirstStreamW(
         LPCWSTR lpFileName,
         STREAM_INFO_LEVELS InfoLevel,
                                                       LPVOID lpFindStreamData,
               DWORD dwFlags
    );



BOOL
__stdcall
FindNextStreamW(
         HANDLE hFindStream,
                                                       LPVOID lpFindStreamData
    );
#line 1485 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\fileapi.h"
BOOL
__stdcall
AreFileApisANSI(
    void
    );



DWORD
__stdcall
GetTempPathA(
         DWORD nBufferLength,
                                                   LPSTR lpBuffer
    );
#line 1532 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\fileapi.h"
BOOL
__stdcall
GetVolumeInformationA(
             LPCSTR lpRootPathName,
                                      LPSTR lpVolumeNameBuffer,
         DWORD nVolumeNameSize,
              LPDWORD lpVolumeSerialNumber,
              LPDWORD lpMaximumComponentLength,
              LPDWORD lpFileSystemFlags,
                                          LPSTR lpFileSystemNameBuffer,
         DWORD nFileSystemNameSize
    );
#line 1553 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\fileapi.h"
#pragma endregion
#line 1564 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\fileapi.h"
#pragma option pop
#line 45 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"

#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\debugapi.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 53 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\debugapi.h"
#pragma region Application Family or OneCore Family






BOOL
__stdcall
IsDebuggerPresent(
    void
    );




#pragma endregion

#pragma region Desktop Family or OneCore Family




void
__stdcall
DebugBreak(
    void
    );



#pragma endregion

#pragma region Application Family or OneCore Family




void
__stdcall
OutputDebugStringA(
             LPCSTR lpOutputString
    );


void
__stdcall
OutputDebugStringW(
             LPCWSTR lpOutputString
    );








#pragma endregion



#pragma region Desktop Family or OneCore Family







BOOL
__stdcall
ContinueDebugEvent(
         DWORD dwProcessId,
         DWORD dwThreadId,
         DWORD dwContinueStatus
    );



BOOL
__stdcall
WaitForDebugEvent(
          LPDEBUG_EVENT lpDebugEvent,
         DWORD dwMilliseconds
    );



BOOL
__stdcall
DebugActiveProcess(
         DWORD dwProcessId
    );



BOOL
__stdcall
DebugActiveProcessStop(
         DWORD dwProcessId
    );






BOOL
__stdcall
CheckRemoteDebuggerPresent(
         HANDLE hProcess,
          PBOOL pbDebuggerPresent
    );







#pragma endregion


#pragma region Desktop Family or OneCore Family







BOOL
__stdcall
WaitForDebugEventEx(
          LPDEBUG_EVENT lpDebugEvent,
         DWORD dwMilliseconds
    );





#pragma endregion
#line 209 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\debugapi.h"
#pragma option pop
#line 46 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"

#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\utilapiset.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 43 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\utilapiset.h"
#pragma region Application Family or OneCore Family





PVOID
__stdcall
EncodePointer(
             PVOID Ptr
    );




PVOID
__stdcall
DecodePointer(
             PVOID Ptr
    );



#pragma endregion

#pragma region Desktop Family or OneCore Family





PVOID
__stdcall
EncodeSystemPointer(
             PVOID Ptr
    );




PVOID
__stdcall
DecodeSystemPointer(
             PVOID Ptr
    );






HRESULT
__stdcall
EncodeRemotePointer(
         HANDLE ProcessHandle,
             PVOID Ptr,
          PVOID * EncodedPtr
    );



HRESULT
__stdcall
DecodeRemotePointer(
         HANDLE ProcessHandle,
             PVOID Ptr,
          PVOID * DecodedPtr
    );





BOOL
__stdcall
Beep(
         DWORD dwFreq,
         DWORD dwDuration
    );



#pragma endregion






#pragma option pop
#line 47 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"

#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\handleapi.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 46 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\handleapi.h"
#pragma region Application Family or OneCore Family







BOOL
__stdcall
CloseHandle(
         HANDLE hObject
    );



BOOL
__stdcall
DuplicateHandle(
         HANDLE hSourceProcessHandle,
         HANDLE hSourceHandle,
         HANDLE hTargetProcessHandle,
             LPHANDLE lpTargetHandle,
         DWORD dwDesiredAccess,
         BOOL bInheritHandle,
         DWORD dwOptions
    );



BOOL
__stdcall
CompareObjectHandles(
         HANDLE hFirstObjectHandle,
         HANDLE hSecondObjectHandle
    );



#pragma endregion

#pragma region Desktop Family or OneCore Family




BOOL
__stdcall
GetHandleInformation(
         HANDLE hObject,
          LPDWORD lpdwFlags
    );



BOOL
__stdcall
SetHandleInformation(
         HANDLE hObject,
         DWORD dwMask,
         DWORD dwFlags
    );



#pragma endregion






#pragma option pop
#line 48 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"

#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\errhandlingapi.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 56 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\errhandlingapi.h"
#pragma region Desktop Family or OneCore Family







typedef LONG (__stdcall *PTOP_LEVEL_EXCEPTION_FILTER)(
         struct _EXCEPTION_POINTERS *ExceptionInfo
    );

typedef PTOP_LEVEL_EXCEPTION_FILTER LPTOP_LEVEL_EXCEPTION_FILTER;






#pragma endregion

#pragma region Application Family or OneCore Family





void
__stdcall
RaiseException(
         DWORD dwExceptionCode,
         DWORD dwExceptionFlags,
         DWORD nNumberOfArguments,
                                       const ULONG_PTR * lpArguments
    );



#pragma endregion

#pragma region Desktop Family or OneCore Family





LONG
__stdcall
UnhandledExceptionFilter(
         struct _EXCEPTION_POINTERS * ExceptionInfo
    );



LPTOP_LEVEL_EXCEPTION_FILTER
__stdcall
SetUnhandledExceptionFilter(
             LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter
    );



#pragma endregion

#pragma region Application Family or OneCore Family







DWORD
__stdcall
GetLastError(
    void
    );





void
__stdcall
SetLastError(
         DWORD dwErrCode
    );



#pragma endregion

#pragma region Desktop Family or OneCore Family
#line 166 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\errhandlingapi.h"
UINT
__stdcall
SetErrorMode(
         UINT uMode
    );



#pragma endregion





#pragma region Desktop Family or OneCore Family








PVOID
__stdcall
AddVectoredExceptionHandler(
         ULONG First,
         PVECTORED_EXCEPTION_HANDLER Handler
    );



ULONG
__stdcall
RemoveVectoredExceptionHandler(
         PVOID Handle
    );




PVOID
__stdcall
AddVectoredContinueHandler(
         ULONG First,
         PVECTORED_EXCEPTION_HANDLER Handler
    );



ULONG
__stdcall
RemoveVectoredContinueHandler(
         PVOID Handle
    );
#line 253 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\errhandlingapi.h"
#pragma endregion





#pragma region Application Family or OneCore Family







void
__stdcall
RaiseFailFastException(
             PEXCEPTION_RECORD pExceptionRecord,
             PCONTEXT pContextRecord,
         DWORD dwFlags
    );





#pragma endregion



#pragma region Desktop Family or OneCore Family







void
__stdcall
FatalAppExitA(
         UINT uAction,
         LPCSTR lpMessageText
    );


void
__stdcall
FatalAppExitW(
         UINT uAction,
         LPCWSTR lpMessageText
    );
#line 315 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\errhandlingapi.h"
#pragma endregion

#pragma region Application Family or OneCore Family







void
__stdcall
TerminateProcessOnMemoryExhaustion(
         SIZE_T FailedAllocationSize
    );





#pragma endregion
#line 350 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\errhandlingapi.h"
#pragma option pop
#line 49 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"

#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\fibersapi.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 50 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\fibersapi.h"
#pragma region Application Family or OneCore Family
#line 97 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\fibersapi.h"
#pragma endregion





#pragma region Application Family or OneCore Family
#line 121 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\fibersapi.h"
#pragma endregion
#line 135 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\fibersapi.h"
#pragma option pop
#line 50 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"

#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\namedpipeapi.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 56 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\namedpipeapi.h"
BOOL
__stdcall
CreatePipe(
          PHANDLE hReadPipe,
          PHANDLE hWritePipe,
             LPSECURITY_ATTRIBUTES lpPipeAttributes,
         DWORD nSize
    );



BOOL
__stdcall
ConnectNamedPipe(
         HANDLE hNamedPipe,
                LPOVERLAPPED lpOverlapped
    );



BOOL
__stdcall
DisconnectNamedPipe(
         HANDLE hNamedPipe
    );



BOOL
__stdcall
SetNamedPipeHandleState(
         HANDLE hNamedPipe,
             LPDWORD lpMode,
             LPDWORD lpMaxCollectionCount,
             LPDWORD lpCollectDataTimeout
    );



BOOL
__stdcall
PeekNamedPipe(
         HANDLE hNamedPipe,
                                                         LPVOID lpBuffer,
         DWORD nBufferSize,
              LPDWORD lpBytesRead,
              LPDWORD lpTotalBytesAvail,
              LPDWORD lpBytesLeftThisMessage
    );



BOOL
__stdcall
TransactNamedPipe(
         HANDLE hNamedPipe,
                                        LPVOID lpInBuffer,
         DWORD nInBufferSize,
                                                            LPVOID lpOutBuffer,
         DWORD nOutBufferSize,
          LPDWORD lpBytesRead,
                LPOVERLAPPED lpOverlapped
    );



HANDLE
__stdcall
CreateNamedPipeW(
         LPCWSTR lpName,
         DWORD dwOpenMode,
         DWORD dwPipeMode,
         DWORD nMaxInstances,
         DWORD nOutBufferSize,
         DWORD nInBufferSize,
         DWORD nDefaultTimeOut,
             LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );







BOOL
__stdcall
WaitNamedPipeW(
         LPCWSTR lpNamedPipeName,
         DWORD nTimeOut
    );
#line 176 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\namedpipeapi.h"
BOOL
__stdcall
ImpersonateNamedPipeClient(
         HANDLE hNamedPipe
    );
#line 192 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\namedpipeapi.h"
#pragma region Desktop Family or OneCore Family




BOOL
__stdcall
GetNamedPipeInfo(
         HANDLE hNamedPipe,
              LPDWORD lpFlags,
              LPDWORD lpOutBufferSize,
              LPDWORD lpInBufferSize,
              LPDWORD lpMaxInstances
    );



BOOL
__stdcall
WaitNamedPipeA(
         LPCSTR lpNamedPipeName,
         DWORD nTimeOut
    );



#pragma endregion
#line 229 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\namedpipeapi.h"
#pragma option pop
#line 51 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"

#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\profileapi.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 41 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\profileapi.h"
#pragma region Application Family or OneCore Family








BOOL
__stdcall
QueryPerformanceCounter(
          LARGE_INTEGER * lpPerformanceCount
    );



BOOL
__stdcall
QueryPerformanceFrequency(
          LARGE_INTEGER * lpFrequency
    );



#pragma endregion






#pragma option pop
#line 52 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"

#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\heapapi.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 58 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\heapapi.h"
#pragma region Desktop Family or OneCore Family







typedef struct _HEAP_SUMMARY {
    DWORD cb;
    SIZE_T cbAllocated;
    SIZE_T cbCommitted;
    SIZE_T cbReserved;
    SIZE_T cbMaxReserve;
} HEAP_SUMMARY, *PHEAP_SUMMARY;
typedef PHEAP_SUMMARY LPHEAP_SUMMARY;


#pragma endregion

#pragma region Application Family or OneCore Family
#line 88 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\heapapi.h"
HANDLE
__stdcall
HeapCreate(
         DWORD flOptions,
         SIZE_T dwInitialSize,
         SIZE_T dwMaximumSize
    );



BOOL
__stdcall
HeapDestroy(
         HANDLE hHeap
    );






LPVOID
__stdcall
HeapAlloc(
         HANDLE hHeap,
         DWORD dwFlags,
         SIZE_T dwBytes
    );







LPVOID
__stdcall
HeapReAlloc(
            HANDLE hHeap,
         DWORD dwFlags,
                    LPVOID lpMem,
         SIZE_T dwBytes
    );




BOOL
__stdcall
HeapFree(
            HANDLE hHeap,
         DWORD dwFlags,
                                        LPVOID lpMem
    );



SIZE_T
__stdcall
HeapSize(
         HANDLE hHeap,
         DWORD dwFlags,
         LPCVOID lpMem
    );



HANDLE
__stdcall
GetProcessHeap(
    void
    );



SIZE_T
__stdcall
HeapCompact(
         HANDLE hHeap,
         DWORD dwFlags
    );



BOOL
__stdcall
HeapSetInformation(
             HANDLE HeapHandle,
         HEAP_INFORMATION_CLASS HeapInformationClass,
                                                PVOID HeapInformation,
         SIZE_T HeapInformationLength
    );



#pragma endregion

#pragma region Desktop Family or OneCore Family




BOOL
__stdcall
HeapValidate(
         HANDLE hHeap,
         DWORD dwFlags,
             LPCVOID lpMem
    );



#pragma endregion

#pragma region Desktop Family






BOOL
__stdcall
HeapSummary(
         HANDLE hHeap,
         DWORD dwFlags,
          LPHEAP_SUMMARY lpSummary
    );





#pragma endregion

#pragma region Desktop Family or OneCore Family




DWORD
__stdcall
GetProcessHeaps(
         DWORD NumberOfHeaps,
                                           PHANDLE ProcessHeaps
    );



BOOL
__stdcall
HeapLock(
         HANDLE hHeap
    );



BOOL
__stdcall
HeapUnlock(
         HANDLE hHeap
    );



BOOL
__stdcall
HeapWalk(
         HANDLE hHeap,
            LPPROCESS_HEAP_ENTRY lpEntry
    );



BOOL
__stdcall
HeapQueryInformation(
             HANDLE HeapHandle,
         HEAP_INFORMATION_CLASS HeapInformationClass,
                                                                    PVOID HeapInformation,
         SIZE_T HeapInformationLength,
              PSIZE_T ReturnLength
    );



#pragma endregion
#line 290 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\heapapi.h"
#pragma option pop
#line 53 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"

#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\ioapiset.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 51 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\ioapiset.h"
#pragma region Desktop Family or OneCore Family




BOOL
__stdcall
GetOverlappedResult(
         HANDLE hFile,
         LPOVERLAPPED lpOverlapped,
          LPDWORD lpNumberOfBytesTransferred,
         BOOL bWait
    );




HANDLE
__stdcall
CreateIoCompletionPort(
         HANDLE FileHandle,
             HANDLE ExistingCompletionPort,
         ULONG_PTR CompletionKey,
         DWORD NumberOfConcurrentThreads
    );



BOOL
__stdcall
GetQueuedCompletionStatus(
         HANDLE CompletionPort,
          LPDWORD lpNumberOfBytesTransferred,
          PULONG_PTR lpCompletionKey,
          LPOVERLAPPED * lpOverlapped,
         DWORD dwMilliseconds
    );
#line 109 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\ioapiset.h"
BOOL
__stdcall
PostQueuedCompletionStatus(
         HANDLE CompletionPort,
         DWORD dwNumberOfBytesTransferred,
         ULONG_PTR dwCompletionKey,
             LPOVERLAPPED lpOverlapped
    );



BOOL
__stdcall
DeviceIoControl(
         HANDLE hDevice,
         DWORD dwIoControlCode,
                                        LPVOID lpInBuffer,
         DWORD nInBufferSize,
                                                                LPVOID lpOutBuffer,
         DWORD nOutBufferSize,
              LPDWORD lpBytesReturned,
                LPOVERLAPPED lpOverlapped
    );



#pragma endregion

#pragma region Application Family or OneCore Family
#line 156 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\ioapiset.h"
#pragma endregion








#pragma region Application Family or OneCore Family




BOOL
__stdcall
GetOverlappedResultEx(
         HANDLE hFile,
         LPOVERLAPPED lpOverlapped,
          LPDWORD lpNumberOfBytesTransferred,
         DWORD dwMilliseconds,
         BOOL bAlertable
    );



#pragma endregion

#pragma region Desktop Family or OneCore Family




BOOL
__stdcall
CancelIo(
         HANDLE hFile
    );
#line 210 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\ioapiset.h"
#pragma endregion
#line 226 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\ioapiset.h"
#pragma option pop
#line 54 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"

#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\synchapi.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 55 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\synchapi.h"
#pragma region Application or OneCore Family
#line 65 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\synchapi.h"
typedef RTL_SRWLOCK SRWLOCK, *PSRWLOCK;


#pragma endregion





#pragma region Application or OneCore Family
#line 150 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\synchapi.h"
void
__stdcall
InitializeCriticalSection(
          LPCRITICAL_SECTION lpCriticalSection
    );
#line 170 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\synchapi.h"
void
__stdcall
EnterCriticalSection(
            LPCRITICAL_SECTION lpCriticalSection
    );



void
__stdcall
LeaveCriticalSection(
            LPCRITICAL_SECTION lpCriticalSection
    );




BOOL
__stdcall
InitializeCriticalSectionAndSpinCount(
          LPCRITICAL_SECTION lpCriticalSection,
         DWORD dwSpinCount
    );
#line 211 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\synchapi.h"
DWORD
__stdcall
SetCriticalSectionSpinCount(
            LPCRITICAL_SECTION lpCriticalSection,
         DWORD dwSpinCount
    );






BOOL
__stdcall
TryEnterCriticalSection(
            LPCRITICAL_SECTION lpCriticalSection
    );





void
__stdcall
DeleteCriticalSection(
            LPCRITICAL_SECTION lpCriticalSection
    );
#line 248 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\synchapi.h"
typedef RTL_RUN_ONCE INIT_ONCE;
typedef PRTL_RUN_ONCE PINIT_ONCE;
typedef PRTL_RUN_ONCE LPINIT_ONCE;
#line 269 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\synchapi.h"
typedef
BOOL
(__stdcall *PINIT_ONCE_FN) (
            PINIT_ONCE InitOnce,
                PVOID Parameter,
                                  PVOID *Context
    );
#line 331 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\synchapi.h"
typedef RTL_CONDITION_VARIABLE CONDITION_VARIABLE, *PCONDITION_VARIABLE;
#line 405 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\synchapi.h"
BOOL
__stdcall
SetEvent(
         HANDLE hEvent
    );



BOOL
__stdcall
ResetEvent(
         HANDLE hEvent
    );



BOOL
__stdcall
ReleaseSemaphore(
         HANDLE hSemaphore,
         LONG lReleaseCount,
              LPLONG lpPreviousCount
    );



BOOL
__stdcall
ReleaseMutex(
         HANDLE hMutex
    );



DWORD
__stdcall
WaitForSingleObject(
         HANDLE hHandle,
         DWORD dwMilliseconds
    );



DWORD
__stdcall
SleepEx(
         DWORD dwMilliseconds,
         BOOL bAlertable
    );



DWORD
__stdcall
WaitForSingleObjectEx(
         HANDLE hHandle,
         DWORD dwMilliseconds,
         BOOL bAlertable
    );



DWORD
__stdcall
WaitForMultipleObjectsEx(
         DWORD nCount,
                       const HANDLE * lpHandles,
         BOOL bWaitAll,
         DWORD dwMilliseconds,
         BOOL bAlertable
    );
#line 487 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\synchapi.h"
HANDLE
__stdcall
CreateMutexA(
             LPSECURITY_ATTRIBUTES lpMutexAttributes,
         BOOL bInitialOwner,
             LPCSTR lpName
    );



HANDLE
__stdcall
CreateMutexW(
             LPSECURITY_ATTRIBUTES lpMutexAttributes,
         BOOL bInitialOwner,
             LPCWSTR lpName
    );
#line 513 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\synchapi.h"
HANDLE
__stdcall
OpenMutexW(
         DWORD dwDesiredAccess,
         BOOL bInheritHandle,
         LPCWSTR lpName
    );







#pragma endregion

#pragma region Desktop or OneCore Family





HANDLE
__stdcall
CreateEventA(
             LPSECURITY_ATTRIBUTES lpEventAttributes,
         BOOL bManualReset,
         BOOL bInitialState,
             LPCSTR lpName
    );



HANDLE
__stdcall
CreateEventW(
             LPSECURITY_ATTRIBUTES lpEventAttributes,
         BOOL bManualReset,
         BOOL bInitialState,
             LPCWSTR lpName
    );








#pragma endregion

#pragma region Application or OneCore Family





HANDLE
__stdcall
OpenEventA(
         DWORD dwDesiredAccess,
         BOOL bInheritHandle,
         LPCSTR lpName
    );



HANDLE
__stdcall
OpenEventW(
         DWORD dwDesiredAccess,
         BOOL bInheritHandle,
         LPCWSTR lpName
    );
#line 596 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\synchapi.h"
HANDLE
__stdcall
OpenSemaphoreW(
         DWORD dwDesiredAccess,
         BOOL bInheritHandle,
         LPCWSTR lpName
    );







#pragma endregion




#pragma region Desktop or OneCore Family



typedef
void
(__stdcall *PTIMERAPCROUTINE)(
             LPVOID lpArgToCompletionRoutine,
             DWORD dwTimerLowValue,
             DWORD dwTimerHighValue
    );



HANDLE
__stdcall
OpenWaitableTimerW(
         DWORD dwDesiredAccess,
         BOOL bInheritHandle,
         LPCWSTR lpTimerName
    );
#line 661 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\synchapi.h"
BOOL
__stdcall
SetWaitableTimer(
         HANDLE hTimer,
         const LARGE_INTEGER * lpDueTime,
         LONG lPeriod,
             PTIMERAPCROUTINE pfnCompletionRoutine,
             LPVOID lpArgToCompletionRoutine,
         BOOL fResume
    );



BOOL
__stdcall
CancelWaitableTimer(
         HANDLE hTimer
    );



#pragma endregion
#line 809 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\synchapi.h"
#pragma region Desktop or OneCore Family



typedef RTL_BARRIER SYNCHRONIZATION_BARRIER;
typedef PRTL_BARRIER PSYNCHRONIZATION_BARRIER;
typedef PRTL_BARRIER LPSYNCHRONIZATION_BARRIER;





BOOL
__stdcall
EnterSynchronizationBarrier(
            LPSYNCHRONIZATION_BARRIER lpBarrier,
         DWORD dwFlags
    );


BOOL
__stdcall
InitializeSynchronizationBarrier(
          LPSYNCHRONIZATION_BARRIER lpBarrier,
         LONG lTotalThreads,
         LONG lSpinCount
    );


BOOL
__stdcall
DeleteSynchronizationBarrier(
            LPSYNCHRONIZATION_BARRIER lpBarrier
    );



#pragma endregion

#pragma region Application or OneCore Family




void
__stdcall
Sleep(
         DWORD dwMilliseconds
    );


BOOL
__stdcall
WaitOnAddress(
                                  volatile void * Address,
                                  PVOID CompareAddress,
         SIZE_T AddressSize,
             DWORD dwMilliseconds
    );


void
__stdcall
WakeByAddressSingle(
         PVOID Address
    );


void
__stdcall
WakeByAddressAll(
         PVOID Address
    );



#pragma endregion

#pragma region Desktop or OneCore Family






DWORD
__stdcall
SignalObjectAndWait(
         HANDLE hObjectToSignal,
         HANDLE hObjectToWaitOn,
         DWORD dwMilliseconds,
         BOOL bAlertable
    );





#pragma endregion








#pragma region Desktop or OneCore Family




DWORD
__stdcall
WaitForMultipleObjects(
         DWORD nCount,
                       const HANDLE * lpHandles,
         BOOL bWaitAll,
         DWORD dwMilliseconds
    );



#pragma endregion

#pragma region Desktop or OneCore Family




HANDLE
__stdcall
CreateSemaphoreW(
             LPSECURITY_ATTRIBUTES lpSemaphoreAttributes,
         LONG lInitialCount,
         LONG lMaximumCount,
             LPCWSTR lpName
    );







#pragma endregion

#pragma region Desktop or OneCore Family





HANDLE
__stdcall
CreateWaitableTimerW(
             LPSECURITY_ATTRIBUTES lpTimerAttributes,
         BOOL bManualReset,
             LPCWSTR lpTimerName
    );







#pragma endregion
#line 991 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\synchapi.h"
#pragma option pop
#line 55 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"

#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\interlockedapi.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 45 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\interlockedapi.h"
#pragma region Application Family or OneCore Family
#line 127 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\interlockedapi.h"
#pragma endregion







#pragma option pop
#line 56 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"

#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\processthreadsapi.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 59 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\processthreadsapi.h"
#pragma region Desktop Family or OneCore Family



typedef struct _PROCESS_INFORMATION {
    HANDLE hProcess;
    HANDLE hThread;
    DWORD dwProcessId;
    DWORD dwThreadId;
} PROCESS_INFORMATION, *PPROCESS_INFORMATION, *LPPROCESS_INFORMATION;

typedef struct _STARTUPINFOA {
    DWORD cb;
    LPSTR lpReserved;
    LPSTR lpDesktop;
    LPSTR lpTitle;
    DWORD dwX;
    DWORD dwY;
    DWORD dwXSize;
    DWORD dwYSize;
    DWORD dwXCountChars;
    DWORD dwYCountChars;
    DWORD dwFillAttribute;
    DWORD dwFlags;
    WORD wShowWindow;
    WORD cbReserved2;
    LPBYTE lpReserved2;
    HANDLE hStdInput;
    HANDLE hStdOutput;
    HANDLE hStdError;
} STARTUPINFOA, *LPSTARTUPINFOA;
typedef struct _STARTUPINFOW {
    DWORD cb;
    LPWSTR lpReserved;
    LPWSTR lpDesktop;
    LPWSTR lpTitle;
    DWORD dwX;
    DWORD dwY;
    DWORD dwXSize;
    DWORD dwYSize;
    DWORD dwXCountChars;
    DWORD dwYCountChars;
    DWORD dwFillAttribute;
    DWORD dwFlags;
    WORD wShowWindow;
    WORD cbReserved2;
    LPBYTE lpReserved2;
    HANDLE hStdInput;
    HANDLE hStdOutput;
    HANDLE hStdError;
} STARTUPINFOW, *LPSTARTUPINFOW;

typedef STARTUPINFOW STARTUPINFO;
typedef LPSTARTUPINFOW LPSTARTUPINFO;
#line 122 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\processthreadsapi.h"
DWORD
__stdcall
QueueUserAPC(
         PAPCFUNC pfnAPC,
         HANDLE hThread,
         ULONG_PTR dwData
    );





BOOL
__stdcall
GetProcessTimes(
         HANDLE hProcess,
          LPFILETIME lpCreationTime,
          LPFILETIME lpExitTime,
          LPFILETIME lpKernelTime,
          LPFILETIME lpUserTime
    );



#pragma endregion

#pragma region Application Family or OneCore Family




HANDLE
__stdcall
GetCurrentProcess(
    void
    );



DWORD
__stdcall
GetCurrentProcessId(
    void
    );



#pragma endregion

#pragma region Desktop Family or OneCore Family





void
__stdcall
ExitProcess(
         UINT uExitCode
    );



#pragma endregion

#pragma region Application Family or OneCore Family




BOOL
__stdcall
TerminateProcess(
         HANDLE hProcess,
         UINT uExitCode
    );



#pragma endregion

#pragma region Desktop Family or OneCore Family




BOOL
__stdcall
GetExitCodeProcess(
         HANDLE hProcess,
          LPDWORD lpExitCode
    );



#pragma endregion

#pragma region Application Family or OneCore Family




BOOL
__stdcall
SwitchToThread(
    void
    );




HANDLE
__stdcall
CreateThread(
             LPSECURITY_ATTRIBUTES lpThreadAttributes,
         SIZE_T dwStackSize,
         LPTHREAD_START_ROUTINE lpStartAddress,
                              LPVOID lpParameter,
         DWORD dwCreationFlags,
              LPDWORD lpThreadId
    );


#pragma endregion

#pragma region Desktop Family or OneCore Family




HANDLE
__stdcall
CreateRemoteThread(
         HANDLE hProcess,
             LPSECURITY_ATTRIBUTES lpThreadAttributes,
         SIZE_T dwStackSize,
         LPTHREAD_START_ROUTINE lpStartAddress,
             LPVOID lpParameter,
         DWORD dwCreationFlags,
              LPDWORD lpThreadId
    );



#pragma endregion

#pragma region Application Family or OneCore Family




HANDLE
__stdcall
GetCurrentThread(
    void
    );



DWORD
__stdcall
GetCurrentThreadId(
    void
    );



#pragma endregion

#pragma region Desktop Family or OneCore Family





HANDLE
__stdcall
OpenThread(
         DWORD dwDesiredAccess,
         BOOL bInheritHandle,
         DWORD dwThreadId
    );


#pragma endregion

#pragma region Application Family or OneCore Family



BOOL
__stdcall
SetThreadPriority(
         HANDLE hThread,
         int nPriority
    );


#pragma endregion

#pragma region Desktop Family or OneCore Family




BOOL
__stdcall
SetThreadPriorityBoost(
         HANDLE hThread,
         BOOL bDisablePriorityBoost
    );



BOOL
__stdcall
GetThreadPriorityBoost(
         HANDLE hThread,
          PBOOL pDisablePriorityBoost
    );


#pragma endregion

#pragma region Application Family or OneCore Family



int
__stdcall
GetThreadPriority(
         HANDLE hThread
    );




void
__stdcall
ExitThread(
         DWORD dwExitCode
    );


#pragma endregion

#pragma region Desktop Family or OneCore Family



BOOL
__stdcall
TerminateThread(
         HANDLE hThread,
         DWORD dwExitCode
    );


#pragma endregion

#pragma region Application Family or OneCore Family





BOOL
__stdcall
GetExitCodeThread(
         HANDLE hThread,
          LPDWORD lpExitCode
    );



DWORD
__stdcall
SuspendThread(
         HANDLE hThread
    );



DWORD
__stdcall
ResumeThread(
         HANDLE hThread
    );
#line 419 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\processthreadsapi.h"
#pragma endregion

#pragma region Application Family or OneCore Family
#line 474 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\processthreadsapi.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family





DWORD
__stdcall
TlsAlloc(
    void
    );



LPVOID
__stdcall
TlsGetValue(
         DWORD dwTlsIndex
    );



BOOL
__stdcall
TlsSetValue(
         DWORD dwTlsIndex,
             LPVOID lpTlsValue
    );



BOOL
__stdcall
TlsFree(
         DWORD dwTlsIndex
    );



#pragma endregion

#pragma region Desktop Family or OneCore Family






BOOL
__stdcall
CreateProcessA(
             LPCSTR lpApplicationName,
                LPSTR lpCommandLine,
             LPSECURITY_ATTRIBUTES lpProcessAttributes,
             LPSECURITY_ATTRIBUTES lpThreadAttributes,
         BOOL bInheritHandles,
         DWORD dwCreationFlags,
             LPVOID lpEnvironment,
             LPCSTR lpCurrentDirectory,
         LPSTARTUPINFOA lpStartupInfo,
          LPPROCESS_INFORMATION lpProcessInformation
    );


BOOL
__stdcall
CreateProcessW(
             LPCWSTR lpApplicationName,
                LPWSTR lpCommandLine,
             LPSECURITY_ATTRIBUTES lpProcessAttributes,
             LPSECURITY_ATTRIBUTES lpThreadAttributes,
         BOOL bInheritHandles,
         DWORD dwCreationFlags,
             LPVOID lpEnvironment,
             LPCWSTR lpCurrentDirectory,
         LPSTARTUPINFOW lpStartupInfo,
          LPPROCESS_INFORMATION lpProcessInformation
    );
#line 564 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\processthreadsapi.h"
BOOL
__stdcall
SetProcessShutdownParameters(
         DWORD dwLevel,
         DWORD dwFlags
    );



DWORD
__stdcall
GetProcessVersion(
         DWORD ProcessId
    );



void
__stdcall
GetStartupInfoW(
          LPSTARTUPINFOW lpStartupInfo
    );






BOOL
__stdcall
CreateProcessAsUserW(
             HANDLE hToken,
             LPCWSTR lpApplicationName,
                LPWSTR lpCommandLine,
             LPSECURITY_ATTRIBUTES lpProcessAttributes,
             LPSECURITY_ATTRIBUTES lpThreadAttributes,
         BOOL bInheritHandles,
         DWORD dwCreationFlags,
             LPVOID lpEnvironment,
             LPCWSTR lpCurrentDirectory,
         LPSTARTUPINFOW lpStartupInfo,
          LPPROCESS_INFORMATION lpProcessInformation
    );
#line 661 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\processthreadsapi.h"
BOOL
__stdcall
SetThreadToken(
             PHANDLE Thread,
             HANDLE Token
    );



BOOL
__stdcall
OpenProcessToken(
         HANDLE ProcessHandle,
         DWORD DesiredAccess,
             PHANDLE TokenHandle
    );



BOOL
__stdcall
OpenThreadToken(
         HANDLE ThreadHandle,
         DWORD DesiredAccess,
         BOOL OpenAsSelf,
             PHANDLE TokenHandle
    );



BOOL
__stdcall
SetPriorityClass(
         HANDLE hProcess,
         DWORD dwPriorityClass
    );



BOOL
__stdcall
SetThreadStackGuarantee(
            PULONG StackSizeInBytes
    );



DWORD
__stdcall
GetPriorityClass(
         HANDLE hProcess
    );



BOOL
__stdcall
ProcessIdToSessionId(
         DWORD dwProcessId,
          DWORD * pSessionId
    );







DWORD
__stdcall
GetProcessId(
         HANDLE Process
    );
#line 752 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\processthreadsapi.h"
typedef struct _PROC_THREAD_ATTRIBUTE_LIST *PPROC_THREAD_ATTRIBUTE_LIST, *LPPROC_THREAD_ATTRIBUTE_LIST;


#pragma endregion
#line 848 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\processthreadsapi.h"
#pragma region Desktop Family or OneCore Family





HANDLE
__stdcall
CreateRemoteThreadEx(
         HANDLE hProcess,
             LPSECURITY_ATTRIBUTES lpThreadAttributes,
         SIZE_T dwStackSize,
         LPTHREAD_START_ROUTINE lpStartAddress,
             LPVOID lpParameter,
         DWORD dwCreationFlags,
             LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList,
              LPDWORD lpThreadId
    );



#pragma endregion
#line 879 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\processthreadsapi.h"
#pragma region Desktop Family or OneCore Family
#line 898 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\processthreadsapi.h"
BOOL
__stdcall
GetThreadContext(
         HANDLE hThread,
            LPCONTEXT lpContext
    );



BOOL
__stdcall
SetThreadContext(
         HANDLE hThread,
         const CONTEXT * lpContext
    );
#line 942 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\processthreadsapi.h"
#pragma endregion







#pragma region Desktop Family or OneCore Family




BOOL
__stdcall
FlushInstructionCache(
         HANDLE hProcess,
                                 LPCVOID lpBaseAddress,
         SIZE_T dwSize
    );



BOOL
__stdcall
GetThreadTimes(
         HANDLE hThread,
          LPFILETIME lpCreationTime,
          LPFILETIME lpExitTime,
          LPFILETIME lpKernelTime,
          LPFILETIME lpUserTime
    );



#pragma endregion

#pragma region Application Family or OneCore Family




HANDLE
__stdcall
OpenProcess(
         DWORD dwDesiredAccess,
         BOOL bInheritHandle,
         DWORD dwProcessId
    );


BOOL
__stdcall
IsProcessorFeaturePresent(
         DWORD ProcessorFeature
    );



#pragma endregion






#pragma region Desktop Family or OneCore Family




BOOL
__stdcall
GetProcessHandleCount(
         HANDLE hProcess,
          PDWORD pdwHandleCount
    );



#pragma endregion
#line 1098 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\processthreadsapi.h"
#pragma region Desktop Family or OneCore Family







BOOL
__stdcall
GetProcessPriorityBoost(
         HANDLE hProcess,
          PBOOL pDisablePriorityBoost
    );



BOOL
__stdcall
SetProcessPriorityBoost(
         HANDLE hProcess,
         BOOL bDisablePriorityBoost
    );



BOOL
__stdcall
GetThreadIOPendingFlag(
         HANDLE hThread,
          PBOOL lpIOIsPending
    );



BOOL
__stdcall
GetSystemTimes(
              PFILETIME lpIdleTime,
              PFILETIME lpKernelTime,
              PFILETIME lpUserTime
    );
#line 1148 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\processthreadsapi.h"
typedef enum _THREAD_INFORMATION_CLASS {
    ThreadMemoryPriority,
    ThreadAbsoluteCpuPriority,
    ThreadInformationClassMax
} THREAD_INFORMATION_CLASS;
#line 1235 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\processthreadsapi.h"
#pragma endregion
#line 1245 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\processthreadsapi.h"
#pragma region Desktop Family or OneCore Family




DWORD
__stdcall
SetThreadIdealProcessor(
         HANDLE hThread,
         DWORD dwIdealProcessor
    );



#pragma endregion

#pragma region Application Family or OneCore Family



typedef enum _PROCESS_INFORMATION_CLASS {
    ProcessMemoryPriority,
    ProcessMemoryExhaustionInfo,
    ProcessAppMemoryInfo,
    ProcessInformationClassMax
} PROCESS_INFORMATION_CLASS;

typedef struct _APP_MEMORY_INFORMATION {
    ULONG64 AvailableCommit;
    ULONG64 PrivateCommitUsage;
    ULONG64 PeakPrivateCommitUsage;
    ULONG64 TotalCommitUsage;
} APP_MEMORY_INFORMATION, *PAPP_MEMORY_INFORMATION;
#line 1286 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\processthreadsapi.h"
typedef enum _PROCESS_MEMORY_EXHAUSTION_TYPE {
    PMETypeFailFastOnCommitFailure,
    PMETypeMax
} PROCESS_MEMORY_EXHAUSTION_TYPE, *PPROCESS_MEMORY_EXHAUSTION_TYPE;




typedef struct _PROCESS_MEMORY_EXHAUSTION_INFO {
    USHORT Version;
    USHORT Reserved;
    PROCESS_MEMORY_EXHAUSTION_TYPE Type;
    ULONG_PTR Value;
} PROCESS_MEMORY_EXHAUSTION_INFO, *PPROCESS_MEMORY_EXHAUSTION_INFO;
#line 1329 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\processthreadsapi.h"
#pragma endregion
#line 1349 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\processthreadsapi.h"
#pragma option pop
#line 57 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"

#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\sysinfoapi.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 86 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\sysinfoapi.h"
#pragma region Application Family or OneCore Family



typedef struct _SYSTEM_INFO {
    union {
        DWORD dwOemId;
        struct {
            WORD wProcessorArchitecture;
            WORD wReserved;
        } ;
    } ;
    DWORD dwPageSize;
    LPVOID lpMinimumApplicationAddress;
    LPVOID lpMaximumApplicationAddress;
    DWORD_PTR dwActiveProcessorMask;
    DWORD dwNumberOfProcessors;
    DWORD dwProcessorType;
    DWORD dwAllocationGranularity;
    WORD wProcessorLevel;
    WORD wProcessorRevision;
} SYSTEM_INFO, *LPSYSTEM_INFO;


#pragma endregion





#pragma region Desktop Family or OneCore Family



__declspec(deprecated)


DWORD
__stdcall
GetVersion(
    void
    );


typedef struct _MEMORYSTATUSEX {
    DWORD dwLength;
    DWORD dwMemoryLoad;
    DWORDLONG ullTotalPhys;
    DWORDLONG ullAvailPhys;
    DWORDLONG ullTotalPageFile;
    DWORDLONG ullAvailPageFile;
    DWORDLONG ullTotalVirtual;
    DWORDLONG ullAvailVirtual;
    DWORDLONG ullAvailExtendedVirtual;
} MEMORYSTATUSEX, *LPMEMORYSTATUSEX;


BOOL
__stdcall
GlobalMemoryStatusEx(
          LPMEMORYSTATUSEX lpBuffer
    );



#pragma endregion

#pragma region Application Family or OneCore Family




void
__stdcall
GetSystemInfo(
          LPSYSTEM_INFO lpSystemInfo
    );



void
__stdcall
GetSystemTime(
          LPSYSTEMTIME lpSystemTime
    );



void
__stdcall
GetSystemTimeAsFileTime(
          LPFILETIME lpSystemTimeAsFileTime
    );



void
__stdcall
GetLocalTime(
          LPSYSTEMTIME lpSystemTime
    );



#pragma endregion

#pragma region Desktop Family or OneCore Family




BOOL
__stdcall
SetLocalTime(
         const SYSTEMTIME * lpSystemTime
    );




#pragma endregion




#pragma region Desktop Family or OneCore Family





DWORD
__stdcall
GetTickCount(
    void
    );



#pragma endregion

#pragma region Application Family or OneCore Family
#line 245 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\sysinfoapi.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family





BOOL
__stdcall
GetSystemTimeAdjustment(
          PDWORD lpTimeAdjustment,
          PDWORD lpTimeIncrement,
          PBOOL lpTimeAdjustmentDisabled
    );




UINT
__stdcall
GetSystemDirectoryA(
                                           LPSTR lpBuffer,
         UINT uSize
    );



UINT
__stdcall
GetSystemDirectoryW(
                                           LPWSTR lpBuffer,
         UINT uSize
    );
#line 289 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\sysinfoapi.h"
UINT
__stdcall
GetWindowsDirectoryA(
                                           LPSTR lpBuffer,
         UINT uSize
    );




UINT
__stdcall
GetWindowsDirectoryW(
                                           LPWSTR lpBuffer,
         UINT uSize
    );
#line 314 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\sysinfoapi.h"
UINT
__stdcall
GetSystemWindowsDirectoryA(
                                           LPSTR lpBuffer,
         UINT uSize
    );



UINT
__stdcall
GetSystemWindowsDirectoryW(
                                           LPWSTR lpBuffer,
         UINT uSize
    );








#pragma endregion






#pragma region Desktop Family or OneCore Family



typedef enum _COMPUTER_NAME_FORMAT {
    ComputerNameNetBIOS,
    ComputerNameDnsHostname,
    ComputerNameDnsDomain,
    ComputerNameDnsFullyQualified,
    ComputerNamePhysicalNetBIOS,
    ComputerNamePhysicalDnsHostname,
    ComputerNamePhysicalDnsDomain,
    ComputerNamePhysicalDnsFullyQualified,
    ComputerNameMax
} COMPUTER_NAME_FORMAT ;


#pragma endregion






#pragma region Desktop Family or OneCore Family





BOOL
__stdcall
GetComputerNameExA(
         COMPUTER_NAME_FORMAT NameType,
                                            LPSTR lpBuffer,
            LPDWORD nSize
    );



BOOL
__stdcall
GetComputerNameExW(
         COMPUTER_NAME_FORMAT NameType,
                                            LPWSTR lpBuffer,
            LPDWORD nSize
    );








#pragma endregion







#pragma region Desktop Family or OneCore Family




BOOL
__stdcall
SetComputerNameExW(
         COMPUTER_NAME_FORMAT NameType,
         LPCWSTR lpBuffer
    );







BOOL
__stdcall
SetSystemTime(
         const SYSTEMTIME * lpSystemTime
    );



#pragma endregion






#pragma region Desktop Family or OneCore Family



__declspec(deprecated)


BOOL
__stdcall
GetVersionExA(
            LPOSVERSIONINFOA lpVersionInformation
    );

__declspec(deprecated)


BOOL
__stdcall
GetVersionExW(
            LPOSVERSIONINFOW lpVersionInformation
    );
#line 469 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\sysinfoapi.h"
BOOL
__stdcall
GetLogicalProcessorInformation(
                                                                PSYSTEM_LOGICAL_PROCESSOR_INFORMATION Buffer,
            PDWORD ReturnedLength
    );
#line 493 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\sysinfoapi.h"
#pragma endregion







#pragma region Application Family or OneCore Family







void
__stdcall
GetNativeSystemInfo(
          LPSYSTEM_INFO lpSystemInfo
    );
#line 532 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\sysinfoapi.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family
#line 559 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\sysinfoapi.h"
ULONGLONG
__stdcall
VerSetConditionMask(
         ULONGLONG ConditionMask,
         ULONG TypeMask,
         UCHAR Condition
    );
#line 584 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\sysinfoapi.h"
UINT
__stdcall
EnumSystemFirmwareTables(
         DWORD FirmwareTableProviderSignature,
                                                  PVOID pFirmwareTableEnumBuffer,
         DWORD BufferSize
    );



UINT
__stdcall
GetSystemFirmwareTable(
         DWORD FirmwareTableProviderSignature,
         DWORD FirmwareTableID,
                                                  PVOID pFirmwareTableBuffer,
         DWORD BufferSize
    );



#pragma endregion
#line 615 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\sysinfoapi.h"
#pragma region Desktop Family or OneCore Family





BOOL
__stdcall
DnsHostnameToComputerNameExW(
         LPCWSTR Hostname,
                                            LPWSTR ComputerName,
            LPDWORD nSize
    );




BOOL
__stdcall
GetPhysicallyInstalledSystemMemory(
          PULONGLONG TotalMemoryInKilobytes
    );





BOOL
__stdcall
SetComputerNameEx2W(
         COMPUTER_NAME_FORMAT NameType,
         DWORD Flags,
         LPCWSTR lpBuffer
    );
#line 657 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\sysinfoapi.h"
BOOL
__stdcall
SetSystemTimeAdjustment(
         DWORD dwTimeAdjustment,
         BOOL bTimeAdjustmentDisabled
    );



BOOL
__stdcall
InstallELAMCertificateInfo(
         HANDLE ELAMFile
    );



#pragma endregion
#line 707 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\sysinfoapi.h"
#pragma region Desktop Family or OneCore Family
#line 724 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\sysinfoapi.h"
#pragma endregion


#pragma region App Family or OneCore Family
#line 745 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\sysinfoapi.h"
#pragma endregion
#line 780 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\sysinfoapi.h"
#pragma option pop
#line 58 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"

#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\memoryapi.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 59 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\memoryapi.h"
#pragma region Application Family or OneCore Family
#line 77 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\memoryapi.h"
#pragma endregion







#pragma region Desktop Family or OneCore Family





LPVOID
__stdcall
VirtualAlloc(
             LPVOID lpAddress,
         SIZE_T dwSize,
         DWORD flAllocationType,
         DWORD flProtect
    );




BOOL
__stdcall
VirtualProtect(
         LPVOID lpAddress,
         SIZE_T dwSize,
         DWORD flNewProtect,
          PDWORD lpflOldProtect
    );



#pragma endregion

#pragma region Application Family or OneCore Family
#line 130 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\memoryapi.h"
BOOL
__stdcall
VirtualFree(
                                                                                                                           LPVOID lpAddress,
         SIZE_T dwSize,
         DWORD dwFreeType
    );



SIZE_T
__stdcall
VirtualQuery(
             LPCVOID lpAddress,
                                            PMEMORY_BASIC_INFORMATION lpBuffer,
         SIZE_T dwLength
    );



#pragma endregion

#pragma region Desktop Family or OneCore Family





LPVOID
__stdcall
VirtualAllocEx(
         HANDLE hProcess,
             LPVOID lpAddress,
         SIZE_T dwSize,
         DWORD flAllocationType,
         DWORD flProtect
    );
#line 182 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\memoryapi.h"
BOOL
__stdcall
VirtualFreeEx(
         HANDLE hProcess,
                                                                                                                           LPVOID lpAddress,
         SIZE_T dwSize,
         DWORD dwFreeType
    );




BOOL
__stdcall
VirtualProtectEx(
         HANDLE hProcess,
         LPVOID lpAddress,
         SIZE_T dwSize,
         DWORD flNewProtect,
          PDWORD lpflOldProtect
    );



SIZE_T
__stdcall
VirtualQueryEx(
         HANDLE hProcess,
             LPCVOID lpAddress,
                                            PMEMORY_BASIC_INFORMATION lpBuffer,
         SIZE_T dwLength
    );




BOOL
__stdcall
ReadProcessMemory(
         HANDLE hProcess,
         LPCVOID lpBaseAddress,
                                                       LPVOID lpBuffer,
         SIZE_T nSize,
              SIZE_T * lpNumberOfBytesRead
    );




BOOL
__stdcall
WriteProcessMemory(
         HANDLE hProcess,
         LPVOID lpBaseAddress,
                            LPCVOID lpBuffer,
         SIZE_T nSize,
              SIZE_T * lpNumberOfBytesWritten
    );




HANDLE
__stdcall
CreateFileMappingW(
         HANDLE hFile,
             LPSECURITY_ATTRIBUTES lpFileMappingAttributes,
         DWORD flProtect,
         DWORD dwMaximumSizeHigh,
         DWORD dwMaximumSizeLow,
             LPCWSTR lpName
    );
#line 262 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\memoryapi.h"
HANDLE
__stdcall
OpenFileMappingW(
         DWORD dwDesiredAccess,
         BOOL bInheritHandle,
         LPCWSTR lpName
    );
#line 277 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\memoryapi.h"
LPVOID
__stdcall
MapViewOfFile(
         HANDLE hFileMappingObject,
         DWORD dwDesiredAccess,
         DWORD dwFileOffsetHigh,
         DWORD dwFileOffsetLow,
         SIZE_T dwNumberOfBytesToMap
    );




LPVOID
__stdcall
MapViewOfFileEx(
         HANDLE hFileMappingObject,
         DWORD dwDesiredAccess,
         DWORD dwFileOffsetHigh,
         DWORD dwFileOffsetLow,
         SIZE_T dwNumberOfBytesToMap,
             LPVOID lpBaseAddress
    );



#pragma endregion

#pragma region Application Family or OneCore Family




BOOL
__stdcall
FlushViewOfFile(
         LPCVOID lpBaseAddress,
         SIZE_T dwNumberOfBytesToFlush
    );



BOOL
__stdcall
UnmapViewOfFile(
         LPCVOID lpBaseAddress
    );



#pragma endregion







#pragma region Desktop Family or OneCore Family




SIZE_T
__stdcall
GetLargePageMinimum(
    void
    );




BOOL
__stdcall
GetProcessWorkingSetSizeEx(
         HANDLE hProcess,
          PSIZE_T lpMinimumWorkingSetSize,
          PSIZE_T lpMaximumWorkingSetSize,
          PDWORD Flags
    );



BOOL
__stdcall
SetProcessWorkingSetSizeEx(
         HANDLE hProcess,
         SIZE_T dwMinimumWorkingSetSize,
         SIZE_T dwMaximumWorkingSetSize,
         DWORD Flags
    );



BOOL
__stdcall
VirtualLock(
         LPVOID lpAddress,
         SIZE_T dwSize
    );



BOOL
__stdcall
VirtualUnlock(
         LPVOID lpAddress,
         SIZE_T dwSize
    );




UINT
__stdcall
GetWriteWatch(
         DWORD dwFlags,
         PVOID lpBaseAddress,
         SIZE_T dwRegionSize,
                                                PVOID * lpAddresses,
                ULONG_PTR * lpdwCount,
              LPDWORD lpdwGranularity
    );



UINT
__stdcall
ResetWriteWatch(
         LPVOID lpBaseAddress,
         SIZE_T dwRegionSize
    );





typedef enum _MEMORY_RESOURCE_NOTIFICATION_TYPE {
    LowMemoryResourceNotification,
    HighMemoryResourceNotification
} MEMORY_RESOURCE_NOTIFICATION_TYPE;



HANDLE
__stdcall
CreateMemoryResourceNotification(
         MEMORY_RESOURCE_NOTIFICATION_TYPE NotificationType
    );




BOOL
__stdcall
QueryMemoryResourceNotification(
         HANDLE ResourceNotificationHandle,
          PBOOL ResourceState
    );
#line 527 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\memoryapi.h"
#pragma endregion

#pragma region Application Family or OneCore Family
#line 564 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\memoryapi.h"
#pragma endregion
#line 574 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\memoryapi.h"
#pragma region Desktop Family or OneCore Family








BOOL
__stdcall
AllocateUserPhysicalPages(
         HANDLE hProcess,
            PULONG_PTR NumberOfPages,
                                                    PULONG_PTR PageArray
    );




BOOL
__stdcall
FreeUserPhysicalPages(
         HANDLE hProcess,
            PULONG_PTR NumberOfPages,
                               PULONG_PTR PageArray
    );




BOOL
__stdcall
MapUserPhysicalPages(
         PVOID VirtualAddress,
         ULONG_PTR NumberOfPages,
                                  PULONG_PTR PageArray
    );
#line 692 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\memoryapi.h"
#pragma endregion







#pragma region Application Family or OneCore Family
#line 753 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\memoryapi.h"
#pragma endregion







#pragma region Application Family or OneCore Family
#line 785 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\memoryapi.h"
#pragma endregion

#pragma region Application Family or OneCore Family
#line 832 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\memoryapi.h"
#pragma endregion

#pragma region Application Family
#line 937 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\memoryapi.h"
#pragma endregion
#line 961 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\memoryapi.h"
#pragma option pop
#line 59 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"

#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\threadpoollegacyapiset.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 46 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\threadpoollegacyapiset.h"
#pragma region Desktop Family




BOOL
__stdcall
QueueUserWorkItem(
         LPTHREAD_START_ROUTINE Function,
             PVOID Context,
         ULONG Flags
    );




BOOL
__stdcall
UnregisterWaitEx(
         HANDLE WaitHandle,
             HANDLE CompletionEvent
    );




HANDLE
__stdcall
CreateTimerQueue(
    void
    );



BOOL
__stdcall
CreateTimerQueueTimer(
             PHANDLE phNewTimer,
             HANDLE TimerQueue,
         WAITORTIMERCALLBACK Callback,
             PVOID Parameter,
         DWORD DueTime,
         DWORD Period,
         ULONG Flags
    );




BOOL
__stdcall
ChangeTimerQueueTimer(
             HANDLE TimerQueue,
            HANDLE Timer,
         ULONG DueTime,
         ULONG Period
    );




BOOL
__stdcall
DeleteTimerQueueTimer(
             HANDLE TimerQueue,
         HANDLE Timer,
             HANDLE CompletionEvent
    );




BOOL
__stdcall
DeleteTimerQueueEx(
         HANDLE TimerQueue,
             HANDLE CompletionEvent
    );



#pragma endregion






#pragma option pop
#line 60 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"

#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\threadpoolapiset.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 49 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\threadpoolapiset.h"
#pragma region Application Family or OneCore Family



typedef
void
(__stdcall *PTP_WIN32_IO_CALLBACK)(
                PTP_CALLBACK_INSTANCE Instance,
                PVOID Context,
                PVOID Overlapped,
                ULONG IoResult,
                ULONG_PTR NumberOfBytesTransferred,
                PTP_IO Io
    );
#line 416 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\threadpoolapiset.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family
#line 429 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\threadpoolapiset.h"
#pragma endregion






#pragma option pop
#line 61 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"

#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\jobapi.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 42 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\jobapi.h"
#pragma region Desktop Family or OneCore Family







BOOL
__stdcall
IsProcessInJob(
         HANDLE ProcessHandle,
             HANDLE JobHandle,
          PBOOL Result
    );





#pragma endregion






#pragma option pop
#line 62 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"

#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wow64apiset.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 44 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wow64apiset.h"
#pragma region Desktop Family or OneCore Family
#line 55 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wow64apiset.h"
BOOL
__stdcall
Wow64DisableWow64FsRedirection(
          PVOID * OldValue
    );



BOOL
__stdcall
Wow64RevertWow64FsRedirection(
         PVOID OlValue
    );
#line 78 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wow64apiset.h"
BOOL
__stdcall
IsWow64Process(
         HANDLE hProcess,
          PBOOL Wow64Process
    );
#line 100 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wow64apiset.h"
UINT
__stdcall
GetSystemWow64DirectoryA(
                                           LPSTR lpBuffer,
         UINT uSize
    );




UINT
__stdcall
GetSystemWow64DirectoryW(
                                           LPWSTR lpBuffer,
         UINT uSize
    );
#line 129 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wow64apiset.h"
#pragma endregion






#pragma option pop
#line 63 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"

#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\libloaderapi.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 51 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\libloaderapi.h"
#pragma region Desktop Family or OneCore Family
#line 67 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\libloaderapi.h"
typedef struct tagENUMUILANG {
    ULONG NumOfEnumUILang;
    ULONG SizeOfEnumUIBuffer;
    LANGID *pEnumUIBuffer;
} ENUMUILANG, *PENUMUILANG;



typedef BOOL (__stdcall* ENUMRESLANGPROCA)(
             HMODULE hModule,
         LPCSTR lpType,
         LPCSTR lpName,
         WORD wLanguage,
         LONG_PTR lParam);
typedef BOOL (__stdcall* ENUMRESLANGPROCW)(
             HMODULE hModule,
         LPCWSTR lpType,
         LPCWSTR lpName,
         WORD wLanguage,
         LONG_PTR lParam);






typedef BOOL (__stdcall* ENUMRESNAMEPROCA)(
             HMODULE hModule,
         LPCSTR lpType,
         LPSTR lpName,
         LONG_PTR lParam);
typedef BOOL (__stdcall* ENUMRESNAMEPROCW)(
             HMODULE hModule,
         LPCWSTR lpType,
         LPWSTR lpName,
         LONG_PTR lParam);






typedef BOOL (__stdcall* ENUMRESTYPEPROCA)(
             HMODULE hModule,
         LPSTR lpType,
         LONG_PTR lParam
    );
typedef BOOL (__stdcall* ENUMRESTYPEPROCW)(
             HMODULE hModule,
         LPWSTR lpType,
         LONG_PTR lParam
    );
#line 152 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\libloaderapi.h"
#pragma endregion





#pragma region Application Family or OneCore Family




BOOL
__stdcall
DisableThreadLibraryCalls(
         HMODULE hLibModule
    );



#pragma endregion

#pragma region Desktop Family or OneCore Family





HRSRC
__stdcall
FindResourceExW(
             HMODULE hModule,
         LPCWSTR lpType,
         LPCWSTR lpName,
         WORD wLanguage
    );







#pragma endregion

#pragma region Application Family or OneCore Family
#line 219 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\libloaderapi.h"
BOOL
__stdcall
FreeLibrary(
         HMODULE hLibModule
    );



#pragma endregion

#pragma region Desktop Family or OneCore Family





void
__stdcall
FreeLibraryAndExitThread(
         HMODULE hLibModule,
         DWORD dwExitCode
    );



BOOL
__stdcall
FreeResource(
         HGLOBAL hResData
    );



#pragma endregion

#pragma region Application Family or OneCore Family






DWORD
__stdcall
GetModuleFileNameA(
             HMODULE hModule,
                                                                      LPSTR lpFilename,
         DWORD nSize
    );




DWORD
__stdcall
GetModuleFileNameW(
             HMODULE hModule,
                                                                      LPWSTR lpFilename,
         DWORD nSize
    );








#pragma endregion

#pragma region Desktop Family or OneCore Family






HMODULE
__stdcall
GetModuleHandleA(
             LPCSTR lpModuleName
    );




HMODULE
__stdcall
GetModuleHandleW(
             LPCWSTR lpModuleName
    );
#line 324 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\libloaderapi.h"
typedef
BOOL
(__stdcall*
PGET_MODULE_HANDLE_EXA)(
                DWORD dwFlags,
                LPCSTR lpModuleName,
             HMODULE* phModule
    );
typedef
BOOL
(__stdcall*
PGET_MODULE_HANDLE_EXW)(
                DWORD dwFlags,
                LPCWSTR lpModuleName,
             HMODULE* phModule
    );







BOOL
__stdcall
GetModuleHandleExA(
         DWORD dwFlags,
             LPCSTR lpModuleName,
          HMODULE * phModule
    );


BOOL
__stdcall
GetModuleHandleExW(
         DWORD dwFlags,
             LPCWSTR lpModuleName,
          HMODULE * phModule
    );
#line 373 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\libloaderapi.h"
#pragma endregion

#pragma region Application Family or OneCore Family




FARPROC
__stdcall
GetProcAddress(
         HMODULE hModule,
         LPCSTR lpProcName
    );



#pragma endregion

#pragma region Desktop Family or OneCore Family





HMODULE
__stdcall
LoadLibraryExA(
         LPCSTR lpLibFileName,
               HANDLE hFile,
         DWORD dwFlags
    );



HMODULE
__stdcall
LoadLibraryExW(
         LPCWSTR lpLibFileName,
               HANDLE hFile,
         DWORD dwFlags
    );
#line 437 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\libloaderapi.h"
HGLOBAL
__stdcall
LoadResource(
             HMODULE hModule,
         HRSRC hResInfo
    );



#pragma endregion



#pragma region Desktop Family or OneCore Family




int
__stdcall
LoadStringA(
             HINSTANCE hInstance,
         UINT uID,
                                              LPSTR lpBuffer,
         int cchBufferMax
    );


int
__stdcall
LoadStringW(
             HINSTANCE hInstance,
         UINT uID,
                                              LPWSTR lpBuffer,
         int cchBufferMax
    );








#pragma endregion



#pragma region Desktop Family or OneCore Family




LPVOID
__stdcall
LockResource(
         HGLOBAL hResData
    );



DWORD
__stdcall
SizeofResource(
             HMODULE hModule,
         HRSRC hResInfo
    );



#pragma endregion



#pragma region Desktop Family or OneCore Family



typedef PVOID DLL_DIRECTORY_COOKIE, *PDLL_DIRECTORY_COOKIE;


DLL_DIRECTORY_COOKIE
__stdcall
AddDllDirectory(
         PCWSTR NewDirectory
    );



BOOL
__stdcall
RemoveDllDirectory(
         DLL_DIRECTORY_COOKIE Cookie
    );



BOOL
__stdcall
SetDefaultDllDirectories(
         DWORD DirectoryFlags
    );



#pragma endregion






#pragma region Desktop Family or OneCore Family
#line 649 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\libloaderapi.h"
#pragma endregion








#pragma region Desktop Family or OneCore Family





HRSRC
__stdcall
FindResourceW(
             HMODULE hModule,
         LPCWSTR lpName,
         LPCWSTR lpType
    );
#line 679 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\libloaderapi.h"
HMODULE
__stdcall
LoadLibraryA(
         LPCSTR lpLibFileName
    );



HMODULE
__stdcall
LoadLibraryW(
         LPCWSTR lpLibFileName
    );








#pragma endregion
#line 713 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\libloaderapi.h"
#pragma option pop
#line 64 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"

#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\securitybaseapi.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 48 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\securitybaseapi.h"
#pragma region Desktop Family or OneCore Family
#line 60 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\securitybaseapi.h"
BOOL
__stdcall
AccessCheck(
         PSECURITY_DESCRIPTOR pSecurityDescriptor,
         HANDLE ClientToken,
         DWORD DesiredAccess,
         PGENERIC_MAPPING GenericMapping,
                                                                        PPRIVILEGE_SET PrivilegeSet,
            LPDWORD PrivilegeSetLength,
          LPDWORD GrantedAccess,
          LPBOOL AccessStatus
    );



BOOL
__stdcall
AccessCheckAndAuditAlarmW(
         LPCWSTR SubsystemName,
             LPVOID HandleId,
         LPWSTR ObjectTypeName,
             LPWSTR ObjectName,
         PSECURITY_DESCRIPTOR SecurityDescriptor,
         DWORD DesiredAccess,
         PGENERIC_MAPPING GenericMapping,
         BOOL ObjectCreation,
          LPDWORD GrantedAccess,
          LPBOOL AccessStatus,
          LPBOOL pfGenerateOnClose
    );







BOOL
__stdcall
AccessCheckByType(
         PSECURITY_DESCRIPTOR pSecurityDescriptor,
             PSID PrincipalSelfSid,
         HANDLE ClientToken,
         DWORD DesiredAccess,
                                              POBJECT_TYPE_LIST ObjectTypeList,
         DWORD ObjectTypeListLength,
         PGENERIC_MAPPING GenericMapping,
                                                                        PPRIVILEGE_SET PrivilegeSet,
            LPDWORD PrivilegeSetLength,
          LPDWORD GrantedAccess,
          LPBOOL AccessStatus
    );



BOOL
__stdcall
AccessCheckByTypeResultList(
         PSECURITY_DESCRIPTOR pSecurityDescriptor,
             PSID PrincipalSelfSid,
         HANDLE ClientToken,
         DWORD DesiredAccess,
                                              POBJECT_TYPE_LIST ObjectTypeList,
         DWORD ObjectTypeListLength,
         PGENERIC_MAPPING GenericMapping,
                                                                        PPRIVILEGE_SET PrivilegeSet,
            LPDWORD PrivilegeSetLength,
                                       LPDWORD GrantedAccessList,
                                       LPDWORD AccessStatusList
    );



BOOL
__stdcall
AccessCheckByTypeAndAuditAlarmW(
         LPCWSTR SubsystemName,
         LPVOID HandleId,
         LPCWSTR ObjectTypeName,
             LPCWSTR ObjectName,
         PSECURITY_DESCRIPTOR SecurityDescriptor,
             PSID PrincipalSelfSid,
         DWORD DesiredAccess,
         AUDIT_EVENT_TYPE AuditType,
         DWORD Flags,
                                              POBJECT_TYPE_LIST ObjectTypeList,
         DWORD ObjectTypeListLength,
         PGENERIC_MAPPING GenericMapping,
         BOOL ObjectCreation,
          LPDWORD GrantedAccess,
          LPBOOL AccessStatus,
          LPBOOL pfGenerateOnClose
    );







BOOL
__stdcall
AccessCheckByTypeResultListAndAuditAlarmW(
         LPCWSTR SubsystemName,
         LPVOID HandleId,
         LPCWSTR ObjectTypeName,
             LPCWSTR ObjectName,
         PSECURITY_DESCRIPTOR SecurityDescriptor,
             PSID PrincipalSelfSid,
         DWORD DesiredAccess,
         AUDIT_EVENT_TYPE AuditType,
         DWORD Flags,
                                              POBJECT_TYPE_LIST ObjectTypeList,
         DWORD ObjectTypeListLength,
         PGENERIC_MAPPING GenericMapping,
         BOOL ObjectCreation,
                                       LPDWORD GrantedAccessList,
                                       LPDWORD AccessStatusList,
          LPBOOL pfGenerateOnClose
    );







BOOL
__stdcall
AccessCheckByTypeResultListAndAuditAlarmByHandleW(
         LPCWSTR SubsystemName,
         LPVOID HandleId,
         HANDLE ClientToken,
         LPCWSTR ObjectTypeName,
             LPCWSTR ObjectName,
         PSECURITY_DESCRIPTOR SecurityDescriptor,
             PSID PrincipalSelfSid,
         DWORD DesiredAccess,
         AUDIT_EVENT_TYPE AuditType,
         DWORD Flags,
                                              POBJECT_TYPE_LIST ObjectTypeList,
         DWORD ObjectTypeListLength,
         PGENERIC_MAPPING GenericMapping,
         BOOL ObjectCreation,
                                       LPDWORD GrantedAccessList,
                                       LPDWORD AccessStatusList,
          LPBOOL pfGenerateOnClose
    );







BOOL
__stdcall
AddAccessAllowedAce(
            PACL pAcl,
         DWORD dwAceRevision,
         DWORD AccessMask,
         PSID pSid
    );



BOOL
__stdcall
AddAccessAllowedAceEx(
            PACL pAcl,
         DWORD dwAceRevision,
         DWORD AceFlags,
         DWORD AccessMask,
         PSID pSid
    );



BOOL
__stdcall
AddAccessAllowedObjectAce(
            PACL pAcl,
         DWORD dwAceRevision,
         DWORD AceFlags,
         DWORD AccessMask,
             GUID * ObjectTypeGuid,
             GUID * InheritedObjectTypeGuid,
         PSID pSid
    );



BOOL
__stdcall
AddAccessDeniedAce(
            PACL pAcl,
         DWORD dwAceRevision,
         DWORD AccessMask,
         PSID pSid
    );



BOOL
__stdcall
AddAccessDeniedAceEx(
            PACL pAcl,
         DWORD dwAceRevision,
         DWORD AceFlags,
         DWORD AccessMask,
         PSID pSid
    );



BOOL
__stdcall
AddAccessDeniedObjectAce(
            PACL pAcl,
         DWORD dwAceRevision,
         DWORD AceFlags,
         DWORD AccessMask,
             GUID * ObjectTypeGuid,
             GUID * InheritedObjectTypeGuid,
         PSID pSid
    );



BOOL
__stdcall
AddAce(
            PACL pAcl,
         DWORD dwAceRevision,
         DWORD dwStartingAceIndex,
                                     LPVOID pAceList,
         DWORD nAceListLength
    );



BOOL
__stdcall
AddAuditAccessAce(
            PACL pAcl,
         DWORD dwAceRevision,
         DWORD dwAccessMask,
         PSID pSid,
         BOOL bAuditSuccess,
         BOOL bAuditFailure
    );



BOOL
__stdcall
AddAuditAccessAceEx(
            PACL pAcl,
         DWORD dwAceRevision,
         DWORD AceFlags,
         DWORD dwAccessMask,
         PSID pSid,
         BOOL bAuditSuccess,
         BOOL bAuditFailure
    );



BOOL
__stdcall
AddAuditAccessObjectAce(
            PACL pAcl,
         DWORD dwAceRevision,
         DWORD AceFlags,
         DWORD AccessMask,
             GUID * ObjectTypeGuid,
             GUID * InheritedObjectTypeGuid,
         PSID pSid,
         BOOL bAuditSuccess,
         BOOL bAuditFailure
    );
#line 396 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\securitybaseapi.h"
BOOL
__stdcall
AdjustTokenGroups(
         HANDLE TokenHandle,
         BOOL ResetToDefault,
             PTOKEN_GROUPS NewState,
         DWORD BufferLength,
                                                           PTOKEN_GROUPS PreviousState,
              PDWORD ReturnLength
    );



BOOL
__stdcall
AdjustTokenPrivileges(
         HANDLE TokenHandle,
         BOOL DisableAllPrivileges,
             PTOKEN_PRIVILEGES NewState,
         DWORD BufferLength,
                                                           PTOKEN_PRIVILEGES PreviousState,
              PDWORD ReturnLength
    );



BOOL
__stdcall
AllocateAndInitializeSid(
         PSID_IDENTIFIER_AUTHORITY pIdentifierAuthority,
         BYTE nSubAuthorityCount,
         DWORD nSubAuthority0,
         DWORD nSubAuthority1,
         DWORD nSubAuthority2,
         DWORD nSubAuthority3,
         DWORD nSubAuthority4,
         DWORD nSubAuthority5,
         DWORD nSubAuthority6,
         DWORD nSubAuthority7,
             PSID * pSid
    );



BOOL
__stdcall
AllocateLocallyUniqueId(
          PLUID Luid
    );



BOOL
__stdcall
AreAllAccessesGranted(
         DWORD GrantedAccess,
         DWORD DesiredAccess
    );



BOOL
__stdcall
AreAnyAccessesGranted(
         DWORD GrantedAccess,
         DWORD DesiredAccess
    );



BOOL
__stdcall
CheckTokenMembership(
             HANDLE TokenHandle,
         PSID SidToCheck,
          PBOOL IsMember
    );
#line 517 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\securitybaseapi.h"
BOOL
__stdcall
ConvertToAutoInheritPrivateObjectSecurity(
             PSECURITY_DESCRIPTOR ParentDescriptor,
         PSECURITY_DESCRIPTOR CurrentSecurityDescriptor,
             PSECURITY_DESCRIPTOR * NewSecurityDescriptor,
             GUID * ObjectType,
         BOOLEAN IsDirectoryObject,
         PGENERIC_MAPPING GenericMapping
    );



BOOL
__stdcall
CopySid(
         DWORD nDestinationSidLength,
                                              PSID pDestinationSid,
         PSID pSourceSid
    );



BOOL
__stdcall
CreatePrivateObjectSecurity(
             PSECURITY_DESCRIPTOR ParentDescriptor,
             PSECURITY_DESCRIPTOR CreatorDescriptor,
             PSECURITY_DESCRIPTOR * NewDescriptor,
         BOOL IsDirectoryObject,
             HANDLE Token,
         PGENERIC_MAPPING GenericMapping
    );



BOOL
__stdcall
CreatePrivateObjectSecurityEx(
             PSECURITY_DESCRIPTOR ParentDescriptor,
             PSECURITY_DESCRIPTOR CreatorDescriptor,
             PSECURITY_DESCRIPTOR * NewDescriptor,
             GUID * ObjectType,
         BOOL IsContainerObject,
         ULONG AutoInheritFlags,
             HANDLE Token,
         PGENERIC_MAPPING GenericMapping
    );



BOOL
__stdcall
CreatePrivateObjectSecurityWithMultipleInheritance(
             PSECURITY_DESCRIPTOR ParentDescriptor,
             PSECURITY_DESCRIPTOR CreatorDescriptor,
             PSECURITY_DESCRIPTOR * NewDescriptor,
                              GUID ** ObjectTypes,
         ULONG GuidCount,
         BOOL IsContainerObject,
         ULONG AutoInheritFlags,
             HANDLE Token,
         PGENERIC_MAPPING GenericMapping
    );



BOOL
__stdcall
CreateRestrictedToken(
         HANDLE ExistingTokenHandle,
         DWORD Flags,
         DWORD DisableSidCount,
                                    PSID_AND_ATTRIBUTES SidsToDisable,
         DWORD DeletePrivilegeCount,
                                         PLUID_AND_ATTRIBUTES PrivilegesToDelete,
         DWORD RestrictedSidCount,
                                       PSID_AND_ATTRIBUTES SidsToRestrict,
             PHANDLE NewTokenHandle
    );







BOOL
__stdcall
CreateWellKnownSid(
         WELL_KNOWN_SID_TYPE WellKnownSidType,
             PSID DomainSid,
                                              PSID pSid,
            DWORD * cbSid
    );




BOOL
__stdcall
EqualDomainSid(
         PSID pSid1,
         PSID pSid2,
          BOOL * pfEqual
    );





BOOL
__stdcall
DeleteAce(
            PACL pAcl,
         DWORD dwAceIndex
    );



BOOL
__stdcall
DestroyPrivateObjectSecurity(
                               PSECURITY_DESCRIPTOR * ObjectDescriptor
    );



BOOL
__stdcall
DuplicateToken(
         HANDLE ExistingTokenHandle,
         SECURITY_IMPERSONATION_LEVEL ImpersonationLevel,
             PHANDLE DuplicateTokenHandle
    );



BOOL
__stdcall
DuplicateTokenEx(
         HANDLE hExistingToken,
         DWORD dwDesiredAccess,
             LPSECURITY_ATTRIBUTES lpTokenAttributes,
         SECURITY_IMPERSONATION_LEVEL ImpersonationLevel,
         TOKEN_TYPE TokenType,
             PHANDLE phNewToken
    );



BOOL
__stdcall
EqualPrefixSid(
         PSID pSid1,
         PSID pSid2
    );



BOOL
__stdcall
EqualSid(
         PSID pSid1,
         PSID pSid2
    );



BOOL
__stdcall
FindFirstFreeAce(
         PACL pAcl,
             LPVOID * pAce
    );



PVOID
__stdcall
FreeSid(
         PSID pSid
    );



BOOL
__stdcall
GetAce(
         PACL pAcl,
         DWORD dwAceIndex,
             LPVOID * pAce
    );



BOOL
__stdcall
GetAclInformation(
         PACL pAcl,
                                              LPVOID pAclInformation,
         DWORD nAclInformationLength,
         ACL_INFORMATION_CLASS dwAclInformationClass
    );



BOOL
__stdcall
GetFileSecurityW(
         LPCWSTR lpFileName,
         SECURITY_INFORMATION RequestedInformation,
                                                         PSECURITY_DESCRIPTOR pSecurityDescriptor,
         DWORD nLength,
          LPDWORD lpnLengthNeeded
    );







BOOL
__stdcall
GetKernelObjectSecurity(
         HANDLE Handle,
         SECURITY_INFORMATION RequestedInformation,
                                    PSECURITY_DESCRIPTOR pSecurityDescriptor,
         DWORD nLength,
          LPDWORD lpnLengthNeeded
    );





DWORD
__stdcall
GetLengthSid(
                                           PSID pSid
    );




BOOL
__stdcall
GetPrivateObjectSecurity(
         PSECURITY_DESCRIPTOR ObjectDescriptor,
         SECURITY_INFORMATION SecurityInformation,
                                                               PSECURITY_DESCRIPTOR ResultantDescriptor,
         DWORD DescriptorLength,
          PDWORD ReturnLength
    );



BOOL
__stdcall
GetSecurityDescriptorControl(
         PSECURITY_DESCRIPTOR pSecurityDescriptor,
          PSECURITY_DESCRIPTOR_CONTROL pControl,
          LPDWORD lpdwRevision
    );



BOOL
__stdcall
GetSecurityDescriptorDacl(
         PSECURITY_DESCRIPTOR pSecurityDescriptor,
          LPBOOL lpbDaclPresent,
             PACL * pDacl,
          LPBOOL lpbDaclDefaulted
    );



BOOL
__stdcall
GetSecurityDescriptorGroup(
         PSECURITY_DESCRIPTOR pSecurityDescriptor,
             PSID * pGroup,
          LPBOOL lpbGroupDefaulted
    );



DWORD
__stdcall
GetSecurityDescriptorLength(
         PSECURITY_DESCRIPTOR pSecurityDescriptor
    );



BOOL
__stdcall
GetSecurityDescriptorOwner(
         PSECURITY_DESCRIPTOR pSecurityDescriptor,
             PSID * pOwner,
          LPBOOL lpbOwnerDefaulted
    );



DWORD
__stdcall
GetSecurityDescriptorRMControl(
         PSECURITY_DESCRIPTOR SecurityDescriptor,
          PUCHAR RMControl
    );



BOOL
__stdcall
GetSecurityDescriptorSacl(
         PSECURITY_DESCRIPTOR pSecurityDescriptor,
          LPBOOL lpbSaclPresent,
             PACL * pSacl,
          LPBOOL lpbSaclDefaulted
    );



PSID_IDENTIFIER_AUTHORITY
__stdcall
GetSidIdentifierAuthority(
         PSID pSid
    );



DWORD
__stdcall
GetSidLengthRequired(
         UCHAR nSubAuthorityCount
    );



PDWORD
__stdcall
GetSidSubAuthority(
         PSID pSid,
         DWORD nSubAuthority
    );



PUCHAR
__stdcall
GetSidSubAuthorityCount(
         PSID pSid
    );



BOOL
__stdcall
GetTokenInformation(
         HANDLE TokenHandle,
         TOKEN_INFORMATION_CLASS TokenInformationClass,
                                                                     LPVOID TokenInformation,
         DWORD TokenInformationLength,
          PDWORD ReturnLength
    );







BOOL
__stdcall
GetWindowsAccountDomainSid(
         PSID pSid,
                                                          PSID pDomainSid,
            DWORD * cbDomainSid
    );





BOOL
__stdcall
ImpersonateAnonymousToken(
         HANDLE ThreadHandle
    );




BOOL
__stdcall
ImpersonateLoggedOnUser(
         HANDLE hToken
    );




BOOL
__stdcall
ImpersonateSelf(
         SECURITY_IMPERSONATION_LEVEL ImpersonationLevel
    );



BOOL
__stdcall
InitializeAcl(
                                   PACL pAcl,
         DWORD nAclLength,
         DWORD dwAclRevision
    );



BOOL
__stdcall
InitializeSecurityDescriptor(
          PSECURITY_DESCRIPTOR pSecurityDescriptor,
         DWORD dwRevision
    );



BOOL
__stdcall
InitializeSid(
                                                                                  PSID Sid,
         PSID_IDENTIFIER_AUTHORITY pIdentifierAuthority,
         BYTE nSubAuthorityCount
    );



BOOL
__stdcall
IsTokenRestricted(
         HANDLE TokenHandle
    );



BOOL
__stdcall
IsValidAcl(
         PACL pAcl
    );



BOOL
__stdcall
IsValidSecurityDescriptor(
         PSECURITY_DESCRIPTOR pSecurityDescriptor
    );



BOOL
__stdcall
IsValidSid(
         PSID pSid
    );






BOOL
__stdcall
IsWellKnownSid(
         PSID pSid,
         WELL_KNOWN_SID_TYPE WellKnownSidType
    );






BOOL
__stdcall
MakeAbsoluteSD(
         PSECURITY_DESCRIPTOR pSelfRelativeSecurityDescriptor,
                                                                                                        PSECURITY_DESCRIPTOR pAbsoluteSecurityDescriptor,
            LPDWORD lpdwAbsoluteSecurityDescriptorSize,
                                                            PACL pDacl,
            LPDWORD lpdwDaclSize,
                                                            PACL pSacl,
            LPDWORD lpdwSaclSize,
                                                              PSID pOwner,
            LPDWORD lpdwOwnerSize,
                                                                            PSID pPrimaryGroup,
            LPDWORD lpdwPrimaryGroupSize
    );




BOOL
__stdcall
MakeSelfRelativeSD(
         PSECURITY_DESCRIPTOR pAbsoluteSecurityDescriptor,
                                                                    PSECURITY_DESCRIPTOR pSelfRelativeSecurityDescriptor,
            LPDWORD lpdwBufferLength
    );



void
__stdcall
MapGenericMask(
            PDWORD AccessMask,
         PGENERIC_MAPPING GenericMapping
    );



BOOL
__stdcall
ObjectCloseAuditAlarmW(
         LPCWSTR SubsystemName,
         LPVOID HandleId,
         BOOL GenerateOnClose
    );







BOOL
__stdcall
ObjectDeleteAuditAlarmW(
         LPCWSTR SubsystemName,
         LPVOID HandleId,
         BOOL GenerateOnClose
    );







BOOL
__stdcall
ObjectOpenAuditAlarmW(
         LPCWSTR SubsystemName,
         LPVOID HandleId,
         LPWSTR ObjectTypeName,
             LPWSTR ObjectName,
         PSECURITY_DESCRIPTOR pSecurityDescriptor,
         HANDLE ClientToken,
         DWORD DesiredAccess,
         DWORD GrantedAccess,
             PPRIVILEGE_SET Privileges,
         BOOL ObjectCreation,
         BOOL AccessGranted,
          LPBOOL GenerateOnClose
    );







BOOL
__stdcall
ObjectPrivilegeAuditAlarmW(
         LPCWSTR SubsystemName,
         LPVOID HandleId,
         HANDLE ClientToken,
         DWORD DesiredAccess,
         PPRIVILEGE_SET Privileges,
         BOOL AccessGranted
    );







BOOL
__stdcall
PrivilegeCheck(
         HANDLE ClientToken,
            PPRIVILEGE_SET RequiredPrivileges,
          LPBOOL pfResult
    );



BOOL
__stdcall
PrivilegedServiceAuditAlarmW(
         LPCWSTR SubsystemName,
         LPCWSTR ServiceName,
         HANDLE ClientToken,
         PPRIVILEGE_SET Privileges,
         BOOL AccessGranted
    );
#line 1153 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\securitybaseapi.h"
BOOL
__stdcall
RevertToSelf(
    void
    );



BOOL
__stdcall
SetAclInformation(
            PACL pAcl,
                                            LPVOID pAclInformation,
         DWORD nAclInformationLength,
         ACL_INFORMATION_CLASS dwAclInformationClass
    );



BOOL
__stdcall
SetFileSecurityW(
         LPCWSTR lpFileName,
         SECURITY_INFORMATION SecurityInformation,
         PSECURITY_DESCRIPTOR pSecurityDescriptor
    );






BOOL
__stdcall
SetKernelObjectSecurity(
         HANDLE Handle,
         SECURITY_INFORMATION SecurityInformation,
         PSECURITY_DESCRIPTOR SecurityDescriptor
    );



BOOL
__stdcall
SetPrivateObjectSecurity(
         SECURITY_INFORMATION SecurityInformation,
         PSECURITY_DESCRIPTOR ModificationDescriptor,
            PSECURITY_DESCRIPTOR * ObjectsSecurityDescriptor,
         PGENERIC_MAPPING GenericMapping,
             HANDLE Token
    );



BOOL
__stdcall
SetPrivateObjectSecurityEx(
         SECURITY_INFORMATION SecurityInformation,
         PSECURITY_DESCRIPTOR ModificationDescriptor,
            PSECURITY_DESCRIPTOR * ObjectsSecurityDescriptor,
         ULONG AutoInheritFlags,
         PGENERIC_MAPPING GenericMapping,
             HANDLE Token
    );
#line 1234 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\securitybaseapi.h"
BOOL
__stdcall
SetSecurityDescriptorControl(
         PSECURITY_DESCRIPTOR pSecurityDescriptor,
         SECURITY_DESCRIPTOR_CONTROL ControlBitsOfInterest,
         SECURITY_DESCRIPTOR_CONTROL ControlBitsToSet
    );



BOOL
__stdcall
SetSecurityDescriptorDacl(
            PSECURITY_DESCRIPTOR pSecurityDescriptor,
         BOOL bDaclPresent,
             PACL pDacl,
         BOOL bDaclDefaulted
    );



BOOL
__stdcall
SetSecurityDescriptorGroup(
            PSECURITY_DESCRIPTOR pSecurityDescriptor,
             PSID pGroup,
         BOOL bGroupDefaulted
    );



BOOL
__stdcall
SetSecurityDescriptorOwner(
            PSECURITY_DESCRIPTOR pSecurityDescriptor,
             PSID pOwner,
         BOOL bOwnerDefaulted
    );



DWORD
__stdcall
SetSecurityDescriptorRMControl(
            PSECURITY_DESCRIPTOR SecurityDescriptor,
             PUCHAR RMControl
    );



BOOL
__stdcall
SetSecurityDescriptorSacl(
            PSECURITY_DESCRIPTOR pSecurityDescriptor,
         BOOL bSaclPresent,
             PACL pSacl,
         BOOL bSaclDefaulted
    );



BOOL
__stdcall
SetTokenInformation(
         HANDLE TokenHandle,
         TOKEN_INFORMATION_CLASS TokenInformationClass,
                                             LPVOID TokenInformation,
         DWORD TokenInformationLength
    );
#line 1337 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\securitybaseapi.h"
#pragma endregion
#line 1347 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\securitybaseapi.h"
#pragma option pop
#line 65 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"

#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\namespaceapi.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 42 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\namespaceapi.h"
#pragma region Desktop Family or OneCore Family






HANDLE
__stdcall
CreatePrivateNamespaceW(
             LPSECURITY_ATTRIBUTES lpPrivateNamespaceAttributes,
         LPVOID lpBoundaryDescriptor,
         LPCWSTR lpAliasPrefix
    );



HANDLE
__stdcall
OpenPrivateNamespaceW(
         LPVOID lpBoundaryDescriptor,
         LPCWSTR lpAliasPrefix
    );



BOOLEAN
__stdcall
ClosePrivateNamespace(
         HANDLE Handle,
         ULONG Flags
    );



HANDLE
__stdcall
CreateBoundaryDescriptorW(
         LPCWSTR Name,
         ULONG Flags
    );



BOOL
__stdcall
AddSIDToBoundaryDescriptor(
            HANDLE * BoundaryDescriptor,
         PSID RequiredSid
    );



void
__stdcall
DeleteBoundaryDescriptor(
         HANDLE BoundaryDescriptor
    );



#pragma endregion






#pragma option pop
#line 66 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"

#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\systemtopologyapi.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 42 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\systemtopologyapi.h"
#pragma region Desktop Family or OneCore Family




BOOL
__stdcall
GetNumaHighestNodeNumber(
          PULONG HighestNodeNumber
    );
#line 69 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\systemtopologyapi.h"
#pragma endregion






#pragma option pop
#line 67 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"

#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\processtopologyapi.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 45 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\processtopologyapi.h"
#pragma region Desktop Family or OneCore Family
#line 65 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\processtopologyapi.h"
#pragma endregion


#pragma region Desktop Family or OneCore Family
#line 97 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\processtopologyapi.h"
#pragma endregion






#pragma option pop
#line 68 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"

#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\securityappcontainer.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 40 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\securityappcontainer.h"
#pragma region Desktop Family or OneCore Family
#line 73 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\securityappcontainer.h"
#pragma endregion


#pragma option pop
#line 69 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"

#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\realtimeapiset.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 43 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\realtimeapiset.h"
#pragma region Desktop Family or OneCore Family
#line 95 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\realtimeapiset.h"
#pragma endregion

#pragma region Application Family or OneCore Family







void
__stdcall
QueryInterruptTimePrecise(
          PULONGLONG lpInterruptTimePrecise
    );



void
__stdcall
QueryUnbiasedInterruptTimePrecise(
          PULONGLONG lpUnbiasedInterruptTimePrecise
    );



void
__stdcall
QueryInterruptTime(
          PULONGLONG lpInterruptTime
    );
#line 144 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\realtimeapiset.h"
#pragma endregion






#pragma option pop
#line 70 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"






#pragma region Application Family
#line 90 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
#pragma endregion

#pragma region Desktop Family





#pragma endregion

#pragma region Application Family or OneCore Family
#line 286 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
typedef void (__stdcall *PFIBER_START_ROUTINE)(
    LPVOID lpFiberParameter
    );
typedef PFIBER_START_ROUTINE LPFIBER_START_ROUTINE;

typedef LPVOID (__stdcall *PFIBER_CALLOUT_ROUTINE)(
    LPVOID lpParameter
    );
#line 304 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
typedef PLDT_ENTRY LPLDT_ENTRY;
#line 409 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
typedef struct _COMMPROP {
    WORD wPacketLength;
    WORD wPacketVersion;
    DWORD dwServiceMask;
    DWORD dwReserved1;
    DWORD dwMaxTxQueue;
    DWORD dwMaxRxQueue;
    DWORD dwMaxBaud;
    DWORD dwProvSubType;
    DWORD dwProvCapabilities;
    DWORD dwSettableParams;
    DWORD dwSettableBaud;
    WORD wSettableData;
    WORD wSettableStopParity;
    DWORD dwCurrentTxQueue;
    DWORD dwCurrentRxQueue;
    DWORD dwProvSpec1;
    DWORD dwProvSpec2;
    WCHAR wcProvChar[1];
} COMMPROP,*LPCOMMPROP;







typedef struct _COMSTAT {
    DWORD fCtsHold : 1;
    DWORD fDsrHold : 1;
    DWORD fRlsdHold : 1;
    DWORD fXoffHold : 1;
    DWORD fXoffSent : 1;
    DWORD fEof : 1;
    DWORD fTxim : 1;
    DWORD fReserved : 25;
    DWORD cbInQue;
    DWORD cbOutQue;
} COMSTAT, *LPCOMSTAT;
#line 464 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
typedef struct _DCB {
    DWORD DCBlength;
    DWORD BaudRate;
    DWORD fBinary: 1;
    DWORD fParity: 1;
    DWORD fOutxCtsFlow:1;
    DWORD fOutxDsrFlow:1;
    DWORD fDtrControl:2;
    DWORD fDsrSensitivity:1;
    DWORD fTXContinueOnXoff: 1;
    DWORD fOutX: 1;
    DWORD fInX: 1;
    DWORD fErrorChar: 1;
    DWORD fNull: 1;
    DWORD fRtsControl:2;
    DWORD fAbortOnError:1;
    DWORD fDummy2:17;
    WORD wReserved;
    WORD XonLim;
    WORD XoffLim;
    BYTE ByteSize;
    BYTE Parity;
    BYTE StopBits;
    char XonChar;
    char XoffChar;
    char ErrorChar;
    char EofChar;
    char EvtChar;
    WORD wReserved1;
} DCB, *LPDCB;

typedef struct _COMMTIMEOUTS {
    DWORD ReadIntervalTimeout;
    DWORD ReadTotalTimeoutMultiplier;
    DWORD ReadTotalTimeoutConstant;
    DWORD WriteTotalTimeoutMultiplier;
    DWORD WriteTotalTimeoutConstant;
} COMMTIMEOUTS,*LPCOMMTIMEOUTS;

typedef struct _COMMCONFIG {
    DWORD dwSize;
    WORD wVersion;
    WORD wReserved;
    DCB dcb;
    DWORD dwProviderSubType;

    DWORD dwProviderOffset;

    DWORD dwProviderSize;
    WCHAR wcProviderData[1];
} COMMCONFIG,*LPCOMMCONFIG;
#line 551 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
typedef struct _MEMORYSTATUS {
    DWORD dwLength;
    DWORD dwMemoryLoad;
    SIZE_T dwTotalPhys;
    SIZE_T dwAvailPhys;
    SIZE_T dwTotalPageFile;
    SIZE_T dwAvailPageFile;
    SIZE_T dwTotalVirtual;
    SIZE_T dwAvailVirtual;
} MEMORYSTATUS, *LPMEMORYSTATUS;
#line 652 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
typedef struct _JIT_DEBUG_INFO {
    DWORD dwSize;
    DWORD dwProcessorArchitecture;
    DWORD dwThreadID;
    DWORD dwReserved0;
    ULONG64 lpExceptionAddress;
    ULONG64 lpExceptionRecord;
    ULONG64 lpContextRecord;
} JIT_DEBUG_INFO, *LPJIT_DEBUG_INFO;

typedef JIT_DEBUG_INFO JIT_DEBUG_INFO32, *LPJIT_DEBUG_INFO32;
typedef JIT_DEBUG_INFO JIT_DEBUG_INFO64, *LPJIT_DEBUG_INFO64;


typedef PEXCEPTION_RECORD LPEXCEPTION_RECORD;
typedef PEXCEPTION_POINTERS LPEXCEPTION_POINTERS;
#line 881 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
typedef struct _OFSTRUCT {
    BYTE cBytes;
    BYTE fFixedDisk;
    WORD nErrCode;
    WORD Reserved1;
    WORD Reserved2;
    CHAR szPathName[128];
} OFSTRUCT, *LPOFSTRUCT, *POFSTRUCT;







#pragma endregion

#pragma region Desktop Family


int




__stdcall




WinMain (
         HINSTANCE hInstance,
             HINSTANCE hPrevInstance,
         LPSTR lpCmdLine,
         int nShowCmd
    );

int



__stdcall

wWinMain(
         HINSTANCE hInstance,
             HINSTANCE hPrevInstance,
         LPWSTR lpCmdLine,
         int nShowCmd
    );





HGLOBAL
__stdcall
GlobalAlloc(
         UINT uFlags,
         SIZE_T dwBytes
    );




HGLOBAL
__stdcall
GlobalReAlloc (
                HGLOBAL hMem,
         SIZE_T dwBytes,
         UINT uFlags
    );


SIZE_T
__stdcall
GlobalSize (
         HGLOBAL hMem
    );


UINT
__stdcall
GlobalFlags (
         HGLOBAL hMem
    );



LPVOID
__stdcall
GlobalLock (
         HGLOBAL hMem
    );



HGLOBAL
__stdcall
GlobalHandle (
         LPCVOID pMem
    );


BOOL
__stdcall
GlobalUnlock(
         HGLOBAL hMem
    );




HGLOBAL
__stdcall
GlobalFree(
                    HGLOBAL hMem
    );


SIZE_T
__stdcall
GlobalCompact(
         DWORD dwMinFree
    );


void
__stdcall
GlobalFix(
         HGLOBAL hMem
    );


void
__stdcall
GlobalUnfix(
         HGLOBAL hMem
    );


LPVOID
__stdcall
GlobalWire(
         HGLOBAL hMem
    );


BOOL
__stdcall
GlobalUnWire(
         HGLOBAL hMem
    );



void
__stdcall
GlobalMemoryStatus(
          LPMEMORYSTATUS lpBuffer
    );





HLOCAL
__stdcall
LocalAlloc(
         UINT uFlags,
         SIZE_T uBytes
    );




HLOCAL
__stdcall
LocalReAlloc(
                    HLOCAL hMem,
         SIZE_T uBytes,
         UINT uFlags
    );



LPVOID
__stdcall
LocalLock(
         HLOCAL hMem
    );



HLOCAL
__stdcall
LocalHandle(
         LPCVOID pMem
    );


BOOL
__stdcall
LocalUnlock(
         HLOCAL hMem
    );


SIZE_T
__stdcall
LocalSize(
         HLOCAL hMem
    );


UINT
__stdcall
LocalFlags(
         HLOCAL hMem
    );


#pragma endregion

#pragma region Desktop Family or OneCore Family





HLOCAL
__stdcall
LocalFree(
                    HLOCAL hMem
    );


#pragma endregion

#pragma region Desktop Family



SIZE_T
__stdcall
LocalShrink(
         HLOCAL hMem,
         UINT cbNewSize
    );


SIZE_T
__stdcall
LocalCompact(
         UINT uMinFree
    );
#line 1154 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
BOOL
__stdcall
GetBinaryTypeA(
          LPCSTR lpApplicationName,
          LPDWORD lpBinaryType
    );

BOOL
__stdcall
GetBinaryTypeW(
          LPCWSTR lpApplicationName,
          LPDWORD lpBinaryType
    );
#line 1175 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
DWORD
__stdcall
GetShortPathNameA(
         LPCSTR lpszLongPath,
                                               LPSTR lpszShortPath,
         DWORD cchBuffer
    );
#line 1217 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
BOOL
__stdcall
GetProcessAffinityMask(
          HANDLE hProcess,
          PDWORD_PTR lpProcessAffinityMask,
          PDWORD_PTR lpSystemAffinityMask
    );


BOOL
__stdcall
SetProcessAffinityMask(
         HANDLE hProcess,
         DWORD_PTR dwProcessAffinityMask
    );


BOOL
__stdcall
GetProcessIoCounters(
          HANDLE hProcess,
          PIO_COUNTERS lpIoCounters
    );


BOOL
__stdcall
GetProcessWorkingSetSize(
          HANDLE hProcess,
          PSIZE_T lpMinimumWorkingSetSize,
          PSIZE_T lpMaximumWorkingSetSize
    );


BOOL
__stdcall
SetProcessWorkingSetSize(
         HANDLE hProcess,
         SIZE_T dwMinimumWorkingSetSize,
         SIZE_T dwMaximumWorkingSetSize
    );



void
__stdcall
FatalExit(
         int ExitCode
    );


BOOL
__stdcall
SetEnvironmentStringsA(
                                     LPCH NewEnvironment
    );





#pragma endregion







#pragma region Application Family or OneCore Family





void
__stdcall
SwitchToFiber(
         LPVOID lpFiber
    );


void
__stdcall
DeleteFiber(
         LPVOID lpFiber
    );




BOOL
__stdcall
ConvertFiberToThread(
    void
    );
#line 1332 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
LPVOID
__stdcall
CreateFiberEx(
             SIZE_T dwStackCommitSize,
             SIZE_T dwStackReserveSize,
             DWORD dwFlags,
             LPFIBER_START_ROUTINE lpStartAddress,
             LPVOID lpParameter
    );



LPVOID
__stdcall
ConvertThreadToFiberEx(
             LPVOID lpParameter,
             DWORD dwFlags
    );


#pragma endregion

#pragma region Desktop Family or OneCore Family




LPVOID
__stdcall
CreateFiber(
             SIZE_T dwStackSize,
             LPFIBER_START_ROUTINE lpStartAddress,
             LPVOID lpParameter
    );



LPVOID
__stdcall
ConvertThreadToFiber(
             LPVOID lpParameter
    );


#pragma endregion
#line 1386 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
#pragma region Desktop Family
#line 1552 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
#pragma endregion







#pragma region Desktop Family



DWORD_PTR
__stdcall
SetThreadAffinityMask(
         HANDLE hThread,
         DWORD_PTR dwThreadAffinityMask
    );

#pragma endregion

#pragma region Desktop Family
#line 1600 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
BOOL
__stdcall
RequestWakeupLatency(
         LATENCY_TIME latency
    );


BOOL
__stdcall
IsSystemResumeAutomatic(
    void
    );


BOOL
__stdcall
GetThreadSelectorEntry(
          HANDLE hThread,
          DWORD dwSelector,
          LPLDT_ENTRY lpSelectorEntry
    );


EXECUTION_STATE
__stdcall
SetThreadExecutionState(
         EXECUTION_STATE esFlags
    );
#line 1663 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
#pragma endregion

#pragma region Application Family







#pragma endregion

#pragma region Desktop Family
#line 1737 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
DWORD
__stdcall
GetThreadErrorMode(
    void
    );


BOOL
__stdcall
SetThreadErrorMode(
         DWORD dwNewMode,
             LPDWORD lpOldMode
    );
#line 1800 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
BOOL
__stdcall
DebugSetProcessKillOnExit(
         BOOL KillOnExit
    );


BOOL
__stdcall
DebugBreakProcess (
         HANDLE Process
    );


#pragma endregion

#pragma region Application Family







#pragma endregion

#pragma region Desktop Family



BOOL
__stdcall
PulseEvent(
         HANDLE hEvent
    );


ATOM
__stdcall
GlobalDeleteAtom(
         ATOM nAtom
    );


BOOL
__stdcall
InitAtomTable(
         DWORD nSize
    );


ATOM
__stdcall
DeleteAtom(
         ATOM nAtom
    );


UINT
__stdcall
SetHandleCount(
         UINT uNumber
    );


BOOL
__stdcall
RequestDeviceWakeup(
         HANDLE hDevice
    );


BOOL
__stdcall
CancelDeviceWakeupRequest(
         HANDLE hDevice
    );


BOOL
__stdcall
GetDevicePowerState(
          HANDLE hDevice,
          BOOL *pfOn
    );


BOOL
__stdcall
SetMessageWaitingIndicator(
         HANDLE hMsgIndicator,
         ULONG ulMsgCount
    );



BOOL
__stdcall
SetFileShortNameA(
         HANDLE hFile,
         LPCSTR lpShortName
    );

BOOL
__stdcall
SetFileShortNameW(
         HANDLE hFile,
         LPCWSTR lpShortName
    );
#line 1921 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
DWORD
__stdcall
LoadModule(
         LPCSTR lpModuleName,
         LPVOID lpParameterBlock
    );




UINT
__stdcall
WinExec(
         LPCSTR lpCmdLine,
         UINT uCmdShow
    );



#pragma endregion

#pragma region Desktop Family or OneCore Family



BOOL
__stdcall
ClearCommBreak(
         HANDLE hFile
    );


BOOL
__stdcall
ClearCommError(
              HANDLE hFile,
              LPDWORD lpErrors,
              LPCOMSTAT lpStat
    );


BOOL
__stdcall
SetupComm(
         HANDLE hFile,
         DWORD dwInQueue,
         DWORD dwOutQueue
    );


BOOL
__stdcall
EscapeCommFunction(
         HANDLE hFile,
         DWORD dwFunc
    );



BOOL
__stdcall
GetCommConfig(
              HANDLE hCommDev,
                                      LPCOMMCONFIG lpCC,
              LPDWORD lpdwSize
    );


BOOL
__stdcall
GetCommMask(
          HANDLE hFile,
          LPDWORD lpEvtMask
    );


BOOL
__stdcall
GetCommProperties(
            HANDLE hFile,
            LPCOMMPROP lpCommProp
    );


BOOL
__stdcall
GetCommModemStatus(
          HANDLE hFile,
          LPDWORD lpModemStat
    );


BOOL
__stdcall
GetCommState(
          HANDLE hFile,
          LPDCB lpDCB
    );


BOOL
__stdcall
GetCommTimeouts(
          HANDLE hFile,
          LPCOMMTIMEOUTS lpCommTimeouts
    );


BOOL
__stdcall
PurgeComm(
         HANDLE hFile,
         DWORD dwFlags
    );


BOOL
__stdcall
SetCommBreak(
         HANDLE hFile
    );


BOOL
__stdcall
SetCommConfig(
         HANDLE hCommDev,
                             LPCOMMCONFIG lpCC,
         DWORD dwSize
    );


BOOL
__stdcall
SetCommMask(
         HANDLE hFile,
         DWORD dwEvtMask
    );


BOOL
__stdcall
SetCommState(
         HANDLE hFile,
         LPDCB lpDCB
    );


BOOL
__stdcall
SetCommTimeouts(
         HANDLE hFile,
         LPCOMMTIMEOUTS lpCommTimeouts
    );


BOOL
__stdcall
TransmitCommChar(
         HANDLE hFile,
         char cChar
    );


BOOL
__stdcall
WaitCommEvent(
                HANDLE hFile,
                LPDWORD lpEvtMask,
                LPOVERLAPPED lpOverlapped
    );


#pragma endregion

#pragma region Desktop Family



DWORD
__stdcall
SetTapePosition(
         HANDLE hDevice,
         DWORD dwPositionMethod,
         DWORD dwPartition,
         DWORD dwOffsetLow,
         DWORD dwOffsetHigh,
         BOOL bImmediate
    );


DWORD
__stdcall
GetTapePosition(
          HANDLE hDevice,
          DWORD dwPositionType,
          LPDWORD lpdwPartition,
          LPDWORD lpdwOffsetLow,
          LPDWORD lpdwOffsetHigh
    );


DWORD
__stdcall
PrepareTape(
         HANDLE hDevice,
         DWORD dwOperation,
         BOOL bImmediate
    );


DWORD
__stdcall
EraseTape(
         HANDLE hDevice,
         DWORD dwEraseType,
         BOOL bImmediate
    );


DWORD
__stdcall
CreateTapePartition(
         HANDLE hDevice,
         DWORD dwPartitionMethod,
         DWORD dwCount,
         DWORD dwSize
    );


DWORD
__stdcall
WriteTapemark(
         HANDLE hDevice,
         DWORD dwTapemarkType,
         DWORD dwTapemarkCount,
         BOOL bImmediate
    );


DWORD
__stdcall
GetTapeStatus(
         HANDLE hDevice
    );


DWORD
__stdcall
GetTapeParameters(
            HANDLE hDevice,
            DWORD dwOperation,
            LPDWORD lpdwSize,
                                  LPVOID lpTapeInformation
    );





DWORD
__stdcall
SetTapeParameters(
         HANDLE hDevice,
         DWORD dwOperation,
         LPVOID lpTapeInformation
    );





#pragma endregion

#pragma region Application Family or OneCore Family



int
__stdcall
MulDiv(
         int nNumber,
         int nNumerator,
         int nDenominator
    );


#pragma endregion

#pragma region Desktop Family


typedef enum _DEP_SYSTEM_POLICY_TYPE {
    DEPPolicyAlwaysOff = 0,
    DEPPolicyAlwaysOn,
    DEPPolicyOptIn,
    DEPPolicyOptOut,
    DEPTotalPolicyCount
} DEP_SYSTEM_POLICY_TYPE;
#line 2235 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
BOOL
__stdcall
GetSystemRegistryQuota(
              PDWORD pdwQuotaAllowed,
              PDWORD pdwQuotaUsed
    );
#line 2249 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
BOOL
__stdcall
FileTimeToDosDateTime(
          const FILETIME *lpFileTime,
          LPWORD lpFatDate,
          LPWORD lpFatTime
    );


BOOL
__stdcall
DosDateTimeToFileTime(
          WORD wFatDate,
          WORD wFatTime,
          LPFILETIME lpFileTime
    );


#pragma endregion


#pragma region Application Family or OneCore Family





DWORD
__stdcall
FormatMessageA(
             DWORD dwFlags,
             LPCVOID lpSource,
             DWORD dwMessageId,
             DWORD dwLanguageId,
             LPSTR lpBuffer,
             DWORD nSize,
             va_list *Arguments
    );


DWORD
__stdcall
FormatMessageW(
             DWORD dwFlags,
             LPCVOID lpSource,
             DWORD dwMessageId,
             DWORD dwLanguageId,
             LPWSTR lpBuffer,
             DWORD nSize,
             va_list *Arguments
    );
#line 2345 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
#pragma endregion

#pragma region Desktop Family
#line 2359 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
HANDLE
__stdcall
CreateMailslotA(
             LPCSTR lpName,
             DWORD nMaxMessageSize,
             DWORD lReadTimeout,
             LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );

HANDLE
__stdcall
CreateMailslotW(
             LPCWSTR lpName,
             DWORD nMaxMessageSize,
             DWORD lReadTimeout,
             LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );







BOOL
__stdcall
GetMailslotInfo(
              HANDLE hMailslot,
              LPDWORD lpMaxMessageSize,
              LPDWORD lpNextSize,
              LPDWORD lpMessageCount,
              LPDWORD lpReadTimeout
    );


BOOL
__stdcall
SetMailslotInfo(
         HANDLE hMailslot,
         DWORD lReadTimeout
    );






BOOL
__stdcall
EncryptFileA(
         LPCSTR lpFileName
    );

BOOL
__stdcall
EncryptFileW(
         LPCWSTR lpFileName
    );







BOOL
__stdcall
DecryptFileA(
               LPCSTR lpFileName,
               DWORD dwReserved
    );

BOOL
__stdcall
DecryptFileW(
               LPCWSTR lpFileName,
               DWORD dwReserved
    );
#line 2459 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
BOOL
__stdcall
FileEncryptionStatusA(
          LPCSTR lpFileName,
          LPDWORD lpStatus
    );

BOOL
__stdcall
FileEncryptionStatusW(
          LPCWSTR lpFileName,
          LPDWORD lpStatus
    );
#line 2484 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
typedef
DWORD
(__stdcall *PFE_EXPORT_FUNC)(
                               PBYTE pbData,
             PVOID pvCallbackContext,
             ULONG ulLength
    );

typedef
DWORD
(__stdcall *PFE_IMPORT_FUNC)(
                                                PBYTE pbData,
             PVOID pvCallbackContext,
             PULONG ulLength
    );
#line 2513 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
DWORD
__stdcall
OpenEncryptedFileRawA(
                LPCSTR lpFileName,
                ULONG ulFlags,
             PVOID *pvContext
    );

DWORD
__stdcall
OpenEncryptedFileRawW(
                LPCWSTR lpFileName,
                ULONG ulFlags,
             PVOID *pvContext
    );







DWORD
__stdcall
ReadEncryptedFileRaw(
             PFE_EXPORT_FUNC pfExportCallback,
             PVOID pvCallbackContext,
             PVOID pvContext
    );


DWORD
__stdcall
WriteEncryptedFileRaw(
             PFE_IMPORT_FUNC pfImportCallback,
             PVOID pvCallbackContext,
             PVOID pvContext
    );


void
__stdcall
CloseEncryptedFileRaw(
         PVOID pvContext
    );






int
__stdcall
lstrcmpA(
         LPCSTR lpString1,
         LPCSTR lpString2
    );

int
__stdcall
lstrcmpW(
         LPCWSTR lpString1,
         LPCWSTR lpString2
    );







int
__stdcall
lstrcmpiA(
         LPCSTR lpString1,
         LPCSTR lpString2
    );

int
__stdcall
lstrcmpiW(
         LPCWSTR lpString1,
         LPCWSTR lpString2
    );
#line 2613 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
LPSTR
__stdcall
lstrcpynA(
                             LPSTR lpString1,
         LPCSTR lpString2,
         int iMaxLength
    );





LPWSTR
__stdcall
lstrcpynW(
                             LPWSTR lpString1,
         LPCWSTR lpString2,
         int iMaxLength
    );







LPSTR
__stdcall
lstrcpyA(
                                                 LPSTR lpString1,
          LPCSTR lpString2
    );

LPWSTR
__stdcall
lstrcpyW(
                                                 LPWSTR lpString1,
          LPCWSTR lpString2
    );







LPSTR
__stdcall
lstrcatA(
                                                                                   LPSTR lpString1,
            LPCSTR lpString2
    );

LPWSTR
__stdcall
lstrcatW(
                                                                                   LPWSTR lpString1,
            LPCWSTR lpString2
    );
#line 2683 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
int
__stdcall
lstrlenA(
         LPCSTR lpString
    );

int
__stdcall
lstrlenW(
         LPCWSTR lpString
    );







HFILE
__stdcall
OpenFile(
            LPCSTR lpFileName,
            LPOFSTRUCT lpReOpenBuff,
            UINT uStyle
    );


HFILE
__stdcall
_lopen(
         LPCSTR lpPathName,
         int iReadWrite
    );


HFILE
__stdcall
_lcreat(
         LPCSTR lpPathName,
         int iAttribute
    );


UINT
__stdcall
_lread(
         HFILE hFile,
                                          LPVOID lpBuffer,
         UINT uBytes
    );


UINT
__stdcall
_lwrite(
         HFILE hFile,
                             LPCCH lpBuffer,
         UINT uBytes
    );


long
__stdcall
_hread(
         HFILE hFile,
                                          LPVOID lpBuffer,
         long lBytes
    );


long
__stdcall
_hwrite(
         HFILE hFile,
                             LPCCH lpBuffer,
         long lBytes
    );


HFILE
__stdcall
_lclose(
         HFILE hFile
    );


LONG
__stdcall
_llseek(
         HFILE hFile,
         LONG lOffset,
         int iOrigin
    );


BOOL
__stdcall
IsTextUnicode(
                            const void* lpv,
                int iSize,
                LPINT lpiResult
    );



DWORD
__stdcall
SignalObjectAndWait(
         HANDLE hObjectToSignal,
         HANDLE hObjectToWaitOn,
         DWORD dwMilliseconds,
         BOOL bAlertable
    );



BOOL
__stdcall
BackupRead(
            HANDLE hFile,
                                                                      LPBYTE lpBuffer,
            DWORD nNumberOfBytesToRead,
            LPDWORD lpNumberOfBytesRead,
            BOOL bAbort,
            BOOL bProcessSecurity,
            LPVOID *lpContext
    );


BOOL
__stdcall
BackupSeek(
            HANDLE hFile,
            DWORD dwLowBytesToSeek,
            DWORD dwHighBytesToSeek,
            LPDWORD lpdwLowByteSeeked,
            LPDWORD lpdwHighByteSeeked,
            LPVOID *lpContext
    );


BOOL
__stdcall
BackupWrite(
            HANDLE hFile,
                                            LPBYTE lpBuffer,
            DWORD nNumberOfBytesToWrite,
            LPDWORD lpNumberOfBytesWritten,
            BOOL bAbort,
            BOOL bProcessSecurity,
            LPVOID *lpContext
    );




typedef struct _WIN32_STREAM_ID {
        DWORD dwStreamId ;
        DWORD dwStreamAttributes ;
        LARGE_INTEGER Size ;
        DWORD dwStreamNameSize ;
        WCHAR cStreamName[ 1 ] ;
} WIN32_STREAM_ID, *LPWIN32_STREAM_ID ;
#line 2919 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
#pragma endregion

#pragma region Application Family or OneCore Family




HANDLE
__stdcall
OpenMutexA(
         DWORD dwDesiredAccess,
         BOOL bInheritHandle,
         LPCSTR lpName
    );





#pragma endregion

#pragma region Desktop Family




HANDLE
__stdcall
CreateSemaphoreA(
             LPSECURITY_ATTRIBUTES lpSemaphoreAttributes,
             LONG lInitialCount,
             LONG lMaximumCount,
             LPCSTR lpName
    );






HANDLE
__stdcall
OpenSemaphoreA(
         DWORD dwDesiredAccess,
         BOOL bInheritHandle,
         LPCSTR lpName
    );
#line 2974 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
HANDLE
__stdcall
CreateWaitableTimerA(
             LPSECURITY_ATTRIBUTES lpTimerAttributes,
             BOOL bManualReset,
             LPCSTR lpTimerName
    );






HANDLE
__stdcall
OpenWaitableTimerA(
         DWORD dwDesiredAccess,
         BOOL bInheritHandle,
         LPCSTR lpTimerName
    );
#line 3036 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
HANDLE
__stdcall
CreateFileMappingA(
             HANDLE hFile,
             LPSECURITY_ATTRIBUTES lpFileMappingAttributes,
             DWORD flProtect,
             DWORD dwMaximumSizeHigh,
             DWORD dwMaximumSizeLow,
             LPCSTR lpName
    );
#line 3073 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
HANDLE
__stdcall
OpenFileMappingA(
         DWORD dwDesiredAccess,
         BOOL bInheritHandle,
         LPCSTR lpName
    );






DWORD
__stdcall
GetLogicalDriveStringsA(
         DWORD nBufferLength,
                                                   LPSTR lpBuffer
    );






#pragma endregion

#pragma region Application Family or OneCore Family
#line 3147 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
#pragma endregion

#pragma region Desktop Family
#line 3376 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
BOOL
__stdcall
GetProcessShutdownParameters(
          LPDWORD lpdwLevel,
          LPDWORD lpdwFlags
    );


void
__stdcall
GetStartupInfoA(
          LPSTARTUPINFOA lpStartupInfo
    );
#line 3448 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family



DWORD
__stdcall
GetFirmwareEnvironmentVariableA(
         LPCSTR lpName,
         LPCSTR lpGuid,
                                             PVOID pBuffer,
         DWORD nSize
    );

DWORD
__stdcall
GetFirmwareEnvironmentVariableW(
         LPCWSTR lpName,
         LPCWSTR lpGuid,
                                             PVOID pBuffer,
         DWORD nSize
    );
#line 3508 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
BOOL
__stdcall
SetFirmwareEnvironmentVariableA(
         LPCSTR lpName,
         LPCSTR lpGuid,
                                PVOID pValue,
         DWORD nSize
    );

BOOL
__stdcall
SetFirmwareEnvironmentVariableW(
         LPCWSTR lpName,
         LPCWSTR lpGuid,
                                PVOID pValue,
         DWORD nSize
    );
#line 3562 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
#pragma endregion

#pragma region Desktop Family
#line 3588 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
HRSRC
__stdcall
FindResourceA(
             HMODULE hModule,
             LPCSTR lpName,
             LPCSTR lpType
    );






HRSRC
__stdcall
FindResourceExA(
             HMODULE hModule,
             LPCSTR lpType,
             LPCSTR lpName,
             WORD wLanguage
    );





BOOL
__stdcall
EnumResourceTypesA(
             HMODULE hModule,
             ENUMRESTYPEPROCA lpEnumFunc,
             LONG_PTR lParam
    );

BOOL
__stdcall
EnumResourceTypesW(
             HMODULE hModule,
             ENUMRESTYPEPROCW lpEnumFunc,
             LONG_PTR lParam
    );







BOOL
__stdcall
EnumResourceNamesA(
             HMODULE hModule,
             LPCSTR lpType,
             ENUMRESNAMEPROCA lpEnumFunc,
             LONG_PTR lParam
    );

BOOL
__stdcall
EnumResourceNamesW(
             HMODULE hModule,
             LPCWSTR lpType,
             ENUMRESNAMEPROCW lpEnumFunc,
             LONG_PTR lParam
    );







BOOL
__stdcall
EnumResourceLanguagesA(
             HMODULE hModule,
             LPCSTR lpType,
             LPCSTR lpName,
             ENUMRESLANGPROCA lpEnumFunc,
             LONG_PTR lParam
    );

BOOL
__stdcall
EnumResourceLanguagesW(
             HMODULE hModule,
             LPCWSTR lpType,
             LPCWSTR lpName,
             ENUMRESLANGPROCW lpEnumFunc,
             LONG_PTR lParam
    );







HANDLE
__stdcall
BeginUpdateResourceA(
         LPCSTR pFileName,
         BOOL bDeleteExistingResources
    );

HANDLE
__stdcall
BeginUpdateResourceW(
         LPCWSTR pFileName,
         BOOL bDeleteExistingResources
    );







BOOL
__stdcall
UpdateResourceA(
         HANDLE hUpdate,
         LPCSTR lpType,
         LPCSTR lpName,
         WORD wLanguage,
                             LPVOID lpData,
         DWORD cb
    );

BOOL
__stdcall
UpdateResourceW(
         HANDLE hUpdate,
         LPCWSTR lpType,
         LPCWSTR lpName,
         WORD wLanguage,
                             LPVOID lpData,
         DWORD cb
    );







BOOL
__stdcall
EndUpdateResourceA(
         HANDLE hUpdate,
         BOOL fDiscard
    );

BOOL
__stdcall
EndUpdateResourceW(
         HANDLE hUpdate,
         BOOL fDiscard
    );
#line 3756 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
ATOM
__stdcall
GlobalAddAtomA(
             LPCSTR lpString
    );

ATOM
__stdcall
GlobalAddAtomW(
             LPCWSTR lpString
    );







ATOM
__stdcall
GlobalAddAtomExA(
             LPCSTR lpString,
         DWORD Flags
    );

ATOM
__stdcall
GlobalAddAtomExW(
             LPCWSTR lpString,
         DWORD Flags
    );







ATOM
__stdcall
GlobalFindAtomA(
             LPCSTR lpString
    );

ATOM
__stdcall
GlobalFindAtomW(
             LPCWSTR lpString
    );







UINT
__stdcall
GlobalGetAtomNameA(
         ATOM nAtom,
                                       LPSTR lpBuffer,
         int nSize
    );

UINT
__stdcall
GlobalGetAtomNameW(
         ATOM nAtom,
                                       LPWSTR lpBuffer,
         int nSize
    );







ATOM
__stdcall
AddAtomA(
             LPCSTR lpString
    );

ATOM
__stdcall
AddAtomW(
             LPCWSTR lpString
    );







ATOM
__stdcall
FindAtomA(
             LPCSTR lpString
    );

ATOM
__stdcall
FindAtomW(
             LPCWSTR lpString
    );







UINT
__stdcall
GetAtomNameA(
         ATOM nAtom,
                                       LPSTR lpBuffer,
         int nSize
    );

UINT
__stdcall
GetAtomNameW(
         ATOM nAtom,
                                       LPWSTR lpBuffer,
         int nSize
    );







UINT
__stdcall
GetProfileIntA(
         LPCSTR lpAppName,
         LPCSTR lpKeyName,
         INT nDefault
    );

UINT
__stdcall
GetProfileIntW(
         LPCWSTR lpAppName,
         LPCWSTR lpKeyName,
         INT nDefault
    );







DWORD
__stdcall
GetProfileStringA(
             LPCSTR lpAppName,
             LPCSTR lpKeyName,
             LPCSTR lpDefault,
                                           LPSTR lpReturnedString,
             DWORD nSize
    );

DWORD
__stdcall
GetProfileStringW(
             LPCWSTR lpAppName,
             LPCWSTR lpKeyName,
             LPCWSTR lpDefault,
                                           LPWSTR lpReturnedString,
             DWORD nSize
    );







BOOL
__stdcall
WriteProfileStringA(
             LPCSTR lpAppName,
             LPCSTR lpKeyName,
             LPCSTR lpString
    );

BOOL
__stdcall
WriteProfileStringW(
             LPCWSTR lpAppName,
             LPCWSTR lpKeyName,
             LPCWSTR lpString
    );







DWORD
__stdcall
GetProfileSectionA(
         LPCSTR lpAppName,
                                           LPSTR lpReturnedString,
         DWORD nSize
    );

DWORD
__stdcall
GetProfileSectionW(
         LPCWSTR lpAppName,
                                           LPWSTR lpReturnedString,
         DWORD nSize
    );







BOOL
__stdcall
WriteProfileSectionA(
         LPCSTR lpAppName,
         LPCSTR lpString
    );

BOOL
__stdcall
WriteProfileSectionW(
         LPCWSTR lpAppName,
         LPCWSTR lpString
    );







UINT
__stdcall
GetPrivateProfileIntA(
             LPCSTR lpAppName,
             LPCSTR lpKeyName,
             INT nDefault,
             LPCSTR lpFileName
    );

UINT
__stdcall
GetPrivateProfileIntW(
             LPCWSTR lpAppName,
             LPCWSTR lpKeyName,
             INT nDefault,
             LPCWSTR lpFileName
    );
#line 4052 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
DWORD
__stdcall
GetPrivateProfileStringA(
             LPCSTR lpAppName,
             LPCSTR lpKeyName,
             LPCSTR lpDefault,
                                           LPSTR lpReturnedString,
             DWORD nSize,
             LPCSTR lpFileName
    );

DWORD
__stdcall
GetPrivateProfileStringW(
             LPCWSTR lpAppName,
             LPCWSTR lpKeyName,
             LPCWSTR lpDefault,
                                           LPWSTR lpReturnedString,
             DWORD nSize,
             LPCWSTR lpFileName
    );
#line 4108 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
BOOL
__stdcall
WritePrivateProfileStringA(
             LPCSTR lpAppName,
             LPCSTR lpKeyName,
             LPCSTR lpString,
             LPCSTR lpFileName
    );

BOOL
__stdcall
WritePrivateProfileStringW(
             LPCWSTR lpAppName,
             LPCWSTR lpKeyName,
             LPCWSTR lpString,
             LPCWSTR lpFileName
    );







DWORD
__stdcall
GetPrivateProfileSectionA(
             LPCSTR lpAppName,
                                           LPSTR lpReturnedString,
             DWORD nSize,
             LPCSTR lpFileName
    );

DWORD
__stdcall
GetPrivateProfileSectionW(
             LPCWSTR lpAppName,
                                           LPWSTR lpReturnedString,
             DWORD nSize,
             LPCWSTR lpFileName
    );
#line 4180 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
BOOL
__stdcall
WritePrivateProfileSectionA(
             LPCSTR lpAppName,
             LPCSTR lpString,
             LPCSTR lpFileName
    );

BOOL
__stdcall
WritePrivateProfileSectionW(
             LPCWSTR lpAppName,
             LPCWSTR lpString,
             LPCWSTR lpFileName
    );
#line 4203 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
DWORD
__stdcall
GetPrivateProfileSectionNamesA(
                                           LPSTR lpszReturnBuffer,
             DWORD nSize,
             LPCSTR lpFileName
    );

DWORD
__stdcall
GetPrivateProfileSectionNamesW(
                                           LPWSTR lpszReturnBuffer,
             DWORD nSize,
             LPCWSTR lpFileName
    );
#line 4247 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
BOOL
__stdcall
GetPrivateProfileStructA(
             LPCSTR lpszSection,
             LPCSTR lpszKey,
                                        LPVOID lpStruct,
             UINT uSizeStruct,
             LPCSTR szFile
    );

BOOL
__stdcall
GetPrivateProfileStructW(
             LPCWSTR lpszSection,
             LPCWSTR lpszKey,
                                        LPVOID lpStruct,
             UINT uSizeStruct,
             LPCWSTR szFile
    );
#line 4299 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
BOOL
__stdcall
WritePrivateProfileStructA(
             LPCSTR lpszSection,
             LPCSTR lpszKey,
                                      LPVOID lpStruct,
             UINT uSizeStruct,
             LPCSTR szFile
    );

BOOL
__stdcall
WritePrivateProfileStructW(
             LPCWSTR lpszSection,
             LPCWSTR lpszKey,
                                      LPVOID lpStruct,
             UINT uSizeStruct,
             LPCWSTR szFile
    );







UINT
__stdcall
GetTempFileNameA(
         LPCSTR lpPathName,
         LPCSTR lpPrefixString,
         UINT uUnique,
                           LPSTR lpTempFileName
    );
#line 4365 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
BOOLEAN
__stdcall
Wow64EnableWow64FsRedirection (
         BOOLEAN Wow64FsEnableRedirection
    );




typedef UINT (__stdcall* PGET_SYSTEM_WOW64_DIRECTORY_A)( LPSTR lpBuffer, UINT uSize);
typedef UINT (__stdcall* PGET_SYSTEM_WOW64_DIRECTORY_W)( LPWSTR lpBuffer, UINT uSize);
#line 4490 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
BOOL
__stdcall
SetSearchPathMode (
         DWORD Flags
    );


#pragma endregion

#pragma region Application Family
#line 4523 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family



BOOL
__stdcall
CreateDirectoryExA(
             LPCSTR lpTemplateDirectory,
             LPCSTR lpNewDirectory,
             LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );

BOOL
__stdcall
CreateDirectoryExW(
             LPCWSTR lpTemplateDirectory,
             LPCWSTR lpNewDirectory,
             LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );







#pragma endregion

#pragma region Desktop Family
#line 4639 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
BOOL
__stdcall
DefineDosDeviceA(
             DWORD dwFlags,
             LPCSTR lpDeviceName,
             LPCSTR lpTargetPath
    );





DWORD
__stdcall
QueryDosDeviceA(
             LPCSTR lpDeviceName,
                                         LPSTR lpTargetPath,
             DWORD ucchMax
    );
#line 4705 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family
#line 4725 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
#pragma endregion


#pragma region Desktop Family
#line 4824 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
#pragma endregion

#pragma region Application Family
#line 4848 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
#pragma endregion

#pragma region Desktop Family





BOOL
__stdcall
CheckNameLegalDOS8Dot3A(
              LPCSTR lpName,
                                  LPSTR lpOemName,
              DWORD OemNameSize,
              PBOOL pbNameContainsSpaces ,
              PBOOL pbNameLegal
    );

BOOL
__stdcall
CheckNameLegalDOS8Dot3W(
              LPCWSTR lpName,
                                  LPSTR lpOemName,
              DWORD OemNameSize,
              PBOOL pbNameContainsSpaces ,
              PBOOL pbNameLegal
    );
#line 4884 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
#pragma endregion



#pragma region Desktop Family
#line 4926 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
#pragma endregion



#pragma region Desktop Family or OneCore Family




BOOL
__stdcall
CopyFileA(
         LPCSTR lpExistingFileName,
         LPCSTR lpNewFileName,
         BOOL bFailIfExists
    );

BOOL
__stdcall
CopyFileW(
         LPCWSTR lpExistingFileName,
         LPCWSTR lpNewFileName,
         BOOL bFailIfExists
    );
#line 4979 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
#pragma endregion



#pragma region Desktop Family or OneCore Family


typedef
DWORD
(__stdcall *LPPROGRESS_ROUTINE)(
             LARGE_INTEGER TotalFileSize,
             LARGE_INTEGER TotalBytesTransferred,
             LARGE_INTEGER StreamSize,
             LARGE_INTEGER StreamBytesTransferred,
             DWORD dwStreamNumber,
             DWORD dwCallbackReason,
             HANDLE hSourceFile,
             HANDLE hDestinationFile,
             LPVOID lpData
    );


BOOL
__stdcall
CopyFileExA(
                LPCSTR lpExistingFileName,
                LPCSTR lpNewFileName,
                LPPROGRESS_ROUTINE lpProgressRoutine,
                LPVOID lpData,

                LPBOOL pbCancel,
                DWORD dwCopyFlags
    );

BOOL
__stdcall
CopyFileExW(
                LPCWSTR lpExistingFileName,
                LPCWSTR lpNewFileName,
                LPPROGRESS_ROUTINE lpProgressRoutine,
                LPVOID lpData,

                LPBOOL pbCancel,
                DWORD dwCopyFlags
    );







#pragma endregion

#pragma region Desktop Family
#line 5071 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
#pragma endregion

#pragma region Application Family
#line 5212 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
#pragma endregion



#pragma region Desktop Family



BOOL
__stdcall
MoveFileA(
         LPCSTR lpExistingFileName,
         LPCSTR lpNewFileName
    );

BOOL
__stdcall
MoveFileW(
         LPCWSTR lpExistingFileName,
         LPCWSTR lpNewFileName
    );
#line 5260 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
#pragma endregion

#pragma region Application Family or OneCore Family



BOOL
__stdcall
MoveFileExA(
             LPCSTR lpExistingFileName,
             LPCSTR lpNewFileName,
             DWORD dwFlags
    );

BOOL
__stdcall
MoveFileExW(
             LPCWSTR lpExistingFileName,
             LPCWSTR lpNewFileName,
             DWORD dwFlags
    );







#pragma endregion

#pragma region Desktop Family or OneCore Family




BOOL
__stdcall
MoveFileWithProgressA(
             LPCSTR lpExistingFileName,
             LPCSTR lpNewFileName,
             LPPROGRESS_ROUTINE lpProgressRoutine,
             LPVOID lpData,
             DWORD dwFlags
    );

BOOL
__stdcall
MoveFileWithProgressW(
             LPCWSTR lpExistingFileName,
             LPCWSTR lpNewFileName,
             LPPROGRESS_ROUTINE lpProgressRoutine,
             LPVOID lpData,
             DWORD dwFlags
    );








#pragma endregion

#pragma region Desktop Family
#line 5358 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
#pragma endregion

#pragma region Application Family
#line 5373 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
#pragma endregion

#pragma region Desktop Family




#pragma endregion

#pragma region Application Family





BOOL
__stdcall
ReplaceFileA(
               LPCSTR lpReplacedFileName,
               LPCSTR lpReplacementFileName,
               LPCSTR lpBackupFileName,
               DWORD dwReplaceFlags,
               LPVOID lpExclude,
               LPVOID lpReserved
    );

BOOL
__stdcall
ReplaceFileW(
               LPCWSTR lpReplacedFileName,
               LPCWSTR lpReplacementFileName,
               LPCWSTR lpBackupFileName,
               DWORD dwReplaceFlags,
               LPVOID lpExclude,
               LPVOID lpReserved
    );








#pragma endregion

#pragma region Desktop Family or OneCore Family








BOOL
__stdcall
CreateHardLinkA(
               LPCSTR lpFileName,
               LPCSTR lpExistingFileName,
               LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );

BOOL
__stdcall
CreateHardLinkW(
               LPCWSTR lpFileName,
               LPCWSTR lpExistingFileName,
               LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
#line 5452 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
#pragma endregion

#pragma region Desktop Family
#line 5515 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
HANDLE
__stdcall
CreateNamedPipeA(
             LPCSTR lpName,
             DWORD dwOpenMode,
             DWORD dwPipeMode,
             DWORD nMaxInstances,
             DWORD nOutBufferSize,
             DWORD nInBufferSize,
             DWORD nDefaultTimeOut,
             LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );





BOOL
__stdcall
GetNamedPipeHandleStateA(
              HANDLE hNamedPipe,
              LPDWORD lpState,
              LPDWORD lpCurInstances,
              LPDWORD lpMaxCollectionCount,
              LPDWORD lpCollectDataTimeout,
                                       LPSTR lpUserName,
              DWORD nMaxUserNameSize
    );

BOOL
__stdcall
GetNamedPipeHandleStateW(
              HANDLE hNamedPipe,
              LPDWORD lpState,
              LPDWORD lpCurInstances,
              LPDWORD lpMaxCollectionCount,
              LPDWORD lpCollectDataTimeout,
                                       LPWSTR lpUserName,
              DWORD nMaxUserNameSize
    );







BOOL
__stdcall
CallNamedPipeA(
          LPCSTR lpNamedPipeName,
                                        LPVOID lpInBuffer,
          DWORD nInBufferSize,
                                                            LPVOID lpOutBuffer,
          DWORD nOutBufferSize,
          LPDWORD lpBytesRead,
          DWORD nTimeOut
    );

BOOL
__stdcall
CallNamedPipeW(
          LPCWSTR lpNamedPipeName,
                                        LPVOID lpInBuffer,
          DWORD nInBufferSize,
                                                            LPVOID lpOutBuffer,
          DWORD nOutBufferSize,
          LPDWORD lpBytesRead,
          DWORD nTimeOut
    );
#line 5642 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
BOOL
__stdcall
SetVolumeLabelA(
             LPCSTR lpRootPathName,
             LPCSTR lpVolumeName
    );

BOOL
__stdcall
SetVolumeLabelW(
             LPCWSTR lpRootPathName,
             LPCWSTR lpVolumeName
    );







void
__stdcall
SetFileApisToOEM( void );


void
__stdcall
SetFileApisToANSI( void );
#line 5704 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
BOOL
__stdcall
ClearEventLogA (
             HANDLE hEventLog,
             LPCSTR lpBackupFileName
    );

BOOL
__stdcall
ClearEventLogW (
             HANDLE hEventLog,
             LPCWSTR lpBackupFileName
    );







BOOL
__stdcall
BackupEventLogA (
         HANDLE hEventLog,
         LPCSTR lpBackupFileName
    );

BOOL
__stdcall
BackupEventLogW (
         HANDLE hEventLog,
         LPCWSTR lpBackupFileName
    );







BOOL
__stdcall
CloseEventLog (
         HANDLE hEventLog
    );


BOOL
__stdcall
DeregisterEventSource (
         HANDLE hEventLog
    );


BOOL
__stdcall
NotifyChangeEventLog(
         HANDLE hEventLog,
         HANDLE hEvent
    );


BOOL
__stdcall
GetNumberOfEventLogRecords (
          HANDLE hEventLog,
          PDWORD NumberOfRecords
    );


BOOL
__stdcall
GetOldestEventLogRecord (
          HANDLE hEventLog,
          PDWORD OldestRecord
    );


HANDLE
__stdcall
OpenEventLogA (
             LPCSTR lpUNCServerName,
             LPCSTR lpSourceName
    );

HANDLE
__stdcall
OpenEventLogW (
             LPCWSTR lpUNCServerName,
             LPCWSTR lpSourceName
    );







HANDLE
__stdcall
RegisterEventSourceA (
             LPCSTR lpUNCServerName,
             LPCSTR lpSourceName
    );

HANDLE
__stdcall
RegisterEventSourceW (
             LPCWSTR lpUNCServerName,
             LPCWSTR lpSourceName
    );







HANDLE
__stdcall
OpenBackupEventLogA (
             LPCSTR lpUNCServerName,
             LPCSTR lpFileName
    );

HANDLE
__stdcall
OpenBackupEventLogW (
             LPCWSTR lpUNCServerName,
             LPCWSTR lpFileName
    );







BOOL
__stdcall
ReadEventLogA (
          HANDLE hEventLog,
          DWORD dwReadFlags,
          DWORD dwRecordOffset,
                                                              LPVOID lpBuffer,
          DWORD nNumberOfBytesToRead,
          DWORD *pnBytesRead,
          DWORD *pnMinNumberOfBytesNeeded
    );

BOOL
__stdcall
ReadEventLogW (
          HANDLE hEventLog,
          DWORD dwReadFlags,
          DWORD dwRecordOffset,
                                                              LPVOID lpBuffer,
          DWORD nNumberOfBytesToRead,
          DWORD *pnBytesRead,
          DWORD *pnMinNumberOfBytesNeeded
    );







BOOL
__stdcall
ReportEventA (
             HANDLE hEventLog,
             WORD wType,
             WORD wCategory,
             DWORD dwEventID,
             PSID lpUserSid,
             WORD wNumStrings,
             DWORD dwDataSize,
                                LPCSTR *lpStrings,
                                     LPVOID lpRawData
    );

BOOL
__stdcall
ReportEventW (
             HANDLE hEventLog,
             WORD wType,
             WORD wCategory,
             DWORD dwEventID,
             PSID lpUserSid,
             WORD wNumStrings,
             DWORD dwDataSize,
                                LPCWSTR *lpStrings,
                                     LPVOID lpRawData
    );
#line 5908 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
typedef struct _EVENTLOG_FULL_INFORMATION
{
    DWORD dwFull;
}
EVENTLOG_FULL_INFORMATION, *LPEVENTLOG_FULL_INFORMATION;


BOOL
__stdcall
GetEventLogInformation (
          HANDLE hEventLog,
          DWORD dwInfoLevel,
                                                      LPVOID lpBuffer,
          DWORD cbBufSize,
          LPDWORD pcbBytesNeeded
    );
#line 5981 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
BOOL
__stdcall
AccessCheckAndAuditAlarmA (
             LPCSTR SubsystemName,
             LPVOID HandleId,
             LPSTR ObjectTypeName,
             LPSTR ObjectName,
             PSECURITY_DESCRIPTOR SecurityDescriptor,
             DWORD DesiredAccess,
             PGENERIC_MAPPING GenericMapping,
             BOOL ObjectCreation,
             LPDWORD GrantedAccess,
             LPBOOL AccessStatus,
             LPBOOL pfGenerateOnClose
    );







BOOL
__stdcall
AccessCheckByTypeAndAuditAlarmA (
             LPCSTR SubsystemName,
             LPVOID HandleId,
             LPCSTR ObjectTypeName,
             LPCSTR ObjectName,
             PSECURITY_DESCRIPTOR SecurityDescriptor,
             PSID PrincipalSelfSid,
             DWORD DesiredAccess,
             AUDIT_EVENT_TYPE AuditType,
             DWORD Flags,
                                              POBJECT_TYPE_LIST ObjectTypeList,
             DWORD ObjectTypeListLength,
             PGENERIC_MAPPING GenericMapping,
             BOOL ObjectCreation,
             LPDWORD GrantedAccess,
             LPBOOL AccessStatus,
             LPBOOL pfGenerateOnClose
    );





BOOL
__stdcall
AccessCheckByTypeResultListAndAuditAlarmA (
             LPCSTR SubsystemName,
             LPVOID HandleId,
             LPCSTR ObjectTypeName,
             LPCSTR ObjectName,
             PSECURITY_DESCRIPTOR SecurityDescriptor,
             PSID PrincipalSelfSid,
             DWORD DesiredAccess,
             AUDIT_EVENT_TYPE AuditType,
             DWORD Flags,
                                              POBJECT_TYPE_LIST ObjectTypeList,
             DWORD ObjectTypeListLength,
             PGENERIC_MAPPING GenericMapping,
             BOOL ObjectCreation,
                                             LPDWORD GrantedAccess,
                                             LPDWORD AccessStatusList,
             LPBOOL pfGenerateOnClose
    );





BOOL
__stdcall
AccessCheckByTypeResultListAndAuditAlarmByHandleA (
             LPCSTR SubsystemName,
             LPVOID HandleId,
             HANDLE ClientToken,
             LPCSTR ObjectTypeName,
             LPCSTR ObjectName,
             PSECURITY_DESCRIPTOR SecurityDescriptor,
             PSID PrincipalSelfSid,
             DWORD DesiredAccess,
             AUDIT_EVENT_TYPE AuditType,
             DWORD Flags,
                                              POBJECT_TYPE_LIST ObjectTypeList,
             DWORD ObjectTypeListLength,
             PGENERIC_MAPPING GenericMapping,
             BOOL ObjectCreation,
                                             LPDWORD GrantedAccess,
                                             LPDWORD AccessStatusList,
             LPBOOL pfGenerateOnClose
    );






BOOL
__stdcall
ObjectOpenAuditAlarmA (
             LPCSTR SubsystemName,
             LPVOID HandleId,
             LPSTR ObjectTypeName,
             LPSTR ObjectName,
             PSECURITY_DESCRIPTOR pSecurityDescriptor,
             HANDLE ClientToken,
             DWORD DesiredAccess,
             DWORD GrantedAccess,
             PPRIVILEGE_SET Privileges,
             BOOL ObjectCreation,
             BOOL AccessGranted,
             LPBOOL GenerateOnClose
    );





BOOL
__stdcall
ObjectPrivilegeAuditAlarmA (
         LPCSTR SubsystemName,
         LPVOID HandleId,
         HANDLE ClientToken,
         DWORD DesiredAccess,
         PPRIVILEGE_SET Privileges,
         BOOL AccessGranted
    );





BOOL
__stdcall
ObjectCloseAuditAlarmA (
         LPCSTR SubsystemName,
         LPVOID HandleId,
         BOOL GenerateOnClose
    );





BOOL
__stdcall
ObjectDeleteAuditAlarmA (
         LPCSTR SubsystemName,
         LPVOID HandleId,
         BOOL GenerateOnClose
    );





BOOL
__stdcall
PrivilegedServiceAuditAlarmA (
         LPCSTR SubsystemName,
         LPCSTR ServiceName,
         HANDLE ClientToken,
         PPRIVILEGE_SET Privileges,
         BOOL AccessGranted
    );
#line 6170 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
BOOL
__stdcall
SetFileSecurityA (
         LPCSTR lpFileName,
         SECURITY_INFORMATION SecurityInformation,
         PSECURITY_DESCRIPTOR pSecurityDescriptor
    );





BOOL
__stdcall
GetFileSecurityA (
          LPCSTR lpFileName,
          SECURITY_INFORMATION RequestedInformation,
                                                         PSECURITY_DESCRIPTOR pSecurityDescriptor,
          DWORD nLength,
          LPDWORD lpnLengthNeeded
    );





#pragma endregion

#pragma region Desktop Family or OneCore Family




BOOL
__stdcall
ReadDirectoryChangesW(
                HANDLE hDirectory,
                                                           LPVOID lpBuffer,
                DWORD nBufferLength,
                BOOL bWatchSubtree,
                DWORD dwNotifyFilter,
                LPDWORD lpBytesReturned,
                LPOVERLAPPED lpOverlapped,
                LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
    );



#pragma endregion

#pragma region Desktop Family
#line 6242 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
BOOL
__stdcall
IsBadReadPtr(
             const void *lp,
             UINT_PTR ucb
    );


BOOL
__stdcall
IsBadWritePtr(
             LPVOID lp,
             UINT_PTR ucb
    );


BOOL
__stdcall
IsBadHugeReadPtr(
             const void *lp,
             UINT_PTR ucb
    );


BOOL
__stdcall
IsBadHugeWritePtr(
             LPVOID lp,
             UINT_PTR ucb
    );


BOOL
__stdcall
IsBadCodePtr(
             FARPROC lpfn
    );


BOOL
__stdcall
IsBadStringPtrA(
             LPCSTR lpsz,
             UINT_PTR ucchMax
    );

BOOL
__stdcall
IsBadStringPtrW(
             LPCWSTR lpsz,
             UINT_PTR ucchMax
    );







#pragma endregion

#pragma region Desktop Family or OneCore Family



 BOOL
__stdcall
LookupAccountSidA(
             LPCSTR lpSystemName,
         PSID Sid,
                                                LPSTR Name,
             LPDWORD cchName,
                                                                                LPSTR ReferencedDomainName,
            LPDWORD cchReferencedDomainName,
          PSID_NAME_USE peUse
    );

                           BOOL
__stdcall
LookupAccountSidW(
             LPCWSTR lpSystemName,
         PSID Sid,
                                                LPWSTR Name,
             LPDWORD cchName,
                                                                                LPWSTR ReferencedDomainName,
            LPDWORD cchReferencedDomainName,
          PSID_NAME_USE peUse
    );







                           BOOL
__stdcall
LookupAccountNameA(
             LPCSTR lpSystemName,
             LPCSTR lpAccountName,
                                              PSID Sid,
             LPDWORD cbSid,
                                                                                LPSTR ReferencedDomainName,
             LPDWORD cchReferencedDomainName,
             PSID_NAME_USE peUse
    );

                           BOOL
__stdcall
LookupAccountNameW(
             LPCWSTR lpSystemName,
             LPCWSTR lpAccountName,
                                              PSID Sid,
             LPDWORD cbSid,
                                                                                LPWSTR ReferencedDomainName,
             LPDWORD cchReferencedDomainName,
             PSID_NAME_USE peUse
    );







#pragma endregion

#pragma region Desktop Family
#line 6455 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family



BOOL
__stdcall
LookupPrivilegeValueA(
             LPCSTR lpSystemName,
             LPCSTR lpName,
             PLUID lpLuid
    );

BOOL
__stdcall
LookupPrivilegeValueW(
             LPCWSTR lpSystemName,
             LPCWSTR lpName,
             PLUID lpLuid
    );







                           BOOL
__stdcall
LookupPrivilegeNameA(
             LPCSTR lpSystemName,
             PLUID lpLuid,
                                                LPSTR lpName,
             LPDWORD cchName
    );

                           BOOL
__stdcall
LookupPrivilegeNameW(
             LPCWSTR lpSystemName,
             PLUID lpLuid,
                                                LPWSTR lpName,
             LPDWORD cchName
    );







                           BOOL
__stdcall
LookupPrivilegeDisplayNameA(
             LPCSTR lpSystemName,
             LPCSTR lpName,
                                                              LPSTR lpDisplayName,
             LPDWORD cchDisplayName,
             LPDWORD lpLanguageId
    );

                           BOOL
__stdcall
LookupPrivilegeDisplayNameW(
             LPCWSTR lpSystemName,
             LPCWSTR lpName,
                                                              LPWSTR lpDisplayName,
             LPDWORD cchDisplayName,
             LPDWORD lpLanguageId
    );







#pragma endregion

#pragma region Desktop Family



BOOL
__stdcall
BuildCommDCBA(
          LPCSTR lpDef,
          LPDCB lpDCB
    );

BOOL
__stdcall
BuildCommDCBW(
          LPCWSTR lpDef,
          LPDCB lpDCB
    );







BOOL
__stdcall
BuildCommDCBAndTimeoutsA(
          LPCSTR lpDef,
          LPDCB lpDCB,
          LPCOMMTIMEOUTS lpCommTimeouts
    );

BOOL
__stdcall
BuildCommDCBAndTimeoutsW(
          LPCWSTR lpDef,
          LPDCB lpDCB,
          LPCOMMTIMEOUTS lpCommTimeouts
    );







BOOL
__stdcall
CommConfigDialogA(
             LPCSTR lpszName,
             HWND hWnd,
             LPCOMMCONFIG lpCC
    );

BOOL
__stdcall
CommConfigDialogW(
             LPCWSTR lpszName,
             HWND hWnd,
             LPCOMMCONFIG lpCC
    );







BOOL
__stdcall
GetDefaultCommConfigA(
            LPCSTR lpszName,
                                                LPCOMMCONFIG lpCC,
            LPDWORD lpdwSize
    );

BOOL
__stdcall
GetDefaultCommConfigW(
            LPCWSTR lpszName,
                                                LPCOMMCONFIG lpCC,
            LPDWORD lpdwSize
    );







BOOL
__stdcall
SetDefaultCommConfigA(
         LPCSTR lpszName,
                             LPCOMMCONFIG lpCC,
         DWORD dwSize
    );

BOOL
__stdcall
SetDefaultCommConfigW(
         LPCWSTR lpszName,
                             LPCOMMCONFIG lpCC,
         DWORD dwSize
    );
#line 6654 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
BOOL
__stdcall
GetComputerNameA (
                                            LPSTR lpBuffer,
            LPDWORD nSize
    );


BOOL
__stdcall
GetComputerNameW (
                                            LPWSTR lpBuffer,
            LPDWORD nSize
    );







BOOL
__stdcall
SetComputerNameA (
         LPCSTR lpComputerName
    );

BOOL
__stdcall
SetComputerNameW (
         LPCWSTR lpComputerName
    );
#line 6696 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
BOOL
__stdcall
SetComputerNameExA (
         COMPUTER_NAME_FORMAT NameType,
         LPCSTR lpBuffer
    );







BOOL
__stdcall
DnsHostnameToComputerNameA (
            LPCSTR Hostname,
                                            LPSTR ComputerName,
            LPDWORD nSize
    );


BOOL
__stdcall
DnsHostnameToComputerNameW (
            LPCWSTR Hostname,
                                            LPWSTR ComputerName,
            LPDWORD nSize
    );
#line 6734 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
BOOL
__stdcall
GetUserNameA (
                                                LPSTR lpBuffer,
            LPDWORD pcbBuffer
    );

BOOL
__stdcall
GetUserNameW (
                                                LPWSTR lpBuffer,
            LPDWORD pcbBuffer
    );
#line 6782 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
BOOL
__stdcall
LogonUserA (
                LPCSTR lpszUsername,
                LPCSTR lpszDomain,
                LPCSTR lpszPassword,
                DWORD dwLogonType,
                DWORD dwLogonProvider,
             PHANDLE phToken
    );

BOOL
__stdcall
LogonUserW (
                LPCWSTR lpszUsername,
                LPCWSTR lpszDomain,
                LPCWSTR lpszPassword,
                DWORD dwLogonType,
                DWORD dwLogonProvider,
             PHANDLE phToken
    );







BOOL
__stdcall
LogonUserExA (
                    LPCSTR lpszUsername,
                    LPCSTR lpszDomain,
                    LPCSTR lpszPassword,
                    DWORD dwLogonType,
                    DWORD dwLogonProvider,
                 PHANDLE phToken,
                 PSID *ppLogonSid,
                                                          PVOID *ppProfileBuffer,
                    LPDWORD pdwProfileLength,
                    PQUOTA_LIMITS pQuotaLimits
    );

BOOL
__stdcall
LogonUserExW (
                    LPCWSTR lpszUsername,
                    LPCWSTR lpszDomain,
                    LPCWSTR lpszPassword,
                    DWORD dwLogonType,
                    DWORD dwLogonProvider,
                 PHANDLE phToken,
                 PSID *ppLogonSid,
                                                          PVOID *ppProfileBuffer,
                    LPDWORD pdwProfileLength,
                    PQUOTA_LIMITS pQuotaLimits
    );







#pragma endregion






#pragma region Desktop Family



BOOL
__stdcall
CreateProcessAsUserA (
                HANDLE hToken,
                LPCSTR lpApplicationName,
                LPSTR lpCommandLine,
                LPSECURITY_ATTRIBUTES lpProcessAttributes,
                LPSECURITY_ATTRIBUTES lpThreadAttributes,
                BOOL bInheritHandles,
                DWORD dwCreationFlags,
                LPVOID lpEnvironment,
                LPCSTR lpCurrentDirectory,
                LPSTARTUPINFOA lpStartupInfo,
                LPPROCESS_INFORMATION lpProcessInformation
    );
#line 6887 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
                      BOOL
__stdcall
CreateProcessWithLogonW(
                LPCWSTR lpUsername,
                LPCWSTR lpDomain,
                LPCWSTR lpPassword,
                DWORD dwLogonFlags,
                LPCWSTR lpApplicationName,
                LPWSTR lpCommandLine,
                DWORD dwCreationFlags,
                LPVOID lpEnvironment,
                LPCWSTR lpCurrentDirectory,
                LPSTARTUPINFOW lpStartupInfo,
                LPPROCESS_INFORMATION lpProcessInformation
      );


                      BOOL
__stdcall
CreateProcessWithTokenW(
                HANDLE hToken,
                DWORD dwLogonFlags,
                LPCWSTR lpApplicationName,
                LPWSTR lpCommandLine,
                DWORD dwCreationFlags,
                LPVOID lpEnvironment,
                LPCWSTR lpCurrentDirectory,
                LPSTARTUPINFOW lpStartupInfo,
                LPPROCESS_INFORMATION lpProcessInformation
      );




BOOL
__stdcall
IsTokenUntrusted(
         HANDLE TokenHandle
    );
#line 6934 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
BOOL
__stdcall
RegisterWaitForSingleObject(
             PHANDLE phNewWaitObject,
                HANDLE hObject,
                WAITORTIMERCALLBACK Callback,
                PVOID Context,
                ULONG dwMilliseconds,
                ULONG dwFlags
    );



BOOL
__stdcall
UnregisterWait(
         HANDLE WaitHandle
    );


BOOL
__stdcall
BindIoCompletionCallback (
         HANDLE FileHandle,
         LPOVERLAPPED_COMPLETION_ROUTINE Function,
         ULONG Flags
    );


HANDLE
__stdcall
SetTimerQueueTimer(
             HANDLE TimerQueue,
             WAITORTIMERCALLBACK Callback,
             PVOID Parameter,
             DWORD DueTime,
             DWORD Period,
             BOOL PreferIo
    );



BOOL
__stdcall
CancelTimerQueueTimer(
             HANDLE TimerQueue,
             HANDLE Timer
    );



BOOL
__stdcall
DeleteTimerQueue(
         HANDLE TimerQueue
    );
#line 7182 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
typedef struct tagHW_PROFILE_INFOA {
    DWORD dwDockInfo;
    CHAR szHwProfileGuid[39];
    CHAR szHwProfileName[80];
} HW_PROFILE_INFOA, *LPHW_PROFILE_INFOA;
typedef struct tagHW_PROFILE_INFOW {
    DWORD dwDockInfo;
    WCHAR szHwProfileGuid[39];
    WCHAR szHwProfileName[80];
} HW_PROFILE_INFOW, *LPHW_PROFILE_INFOW;

typedef HW_PROFILE_INFOW HW_PROFILE_INFO;
typedef LPHW_PROFILE_INFOW LPHW_PROFILE_INFO;







BOOL
__stdcall
GetCurrentHwProfileA (
          LPHW_PROFILE_INFOA lpHwProfileInfo
    );

BOOL
__stdcall
GetCurrentHwProfileW (
          LPHW_PROFILE_INFOW lpHwProfileInfo
    );
#line 7221 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
BOOL
__stdcall
VerifyVersionInfoA(
            LPOSVERSIONINFOEXA lpVersionInformation,
            DWORD dwTypeMask,
            DWORDLONG dwlConditionMask
    );

BOOL
__stdcall
VerifyVersionInfoW(
            LPOSVERSIONINFOEXW lpVersionInformation,
            DWORD dwTypeMask,
            DWORDLONG dwlConditionMask
    );








#pragma endregion






#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winerror.h"
#line 10 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winerror.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 26980 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winerror.h"
__inline HRESULT HRESULT_FROM_WIN32(unsigned long x) { return (HRESULT)(x) <= 0 ? (HRESULT)(x) : (HRESULT) (((x) & 0x0000FFFF) | (7 << 16) | 0x80000000);}
#line 56951 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winerror.h"
#pragma option pop
#line 7250 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"

#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\timezoneapi.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 45 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\timezoneapi.h"
#pragma region Application Family or OneCore Family







typedef struct _TIME_ZONE_INFORMATION {
    LONG Bias;
    WCHAR StandardName[ 32 ];
    SYSTEMTIME StandardDate;
    LONG StandardBias;
    WCHAR DaylightName[ 32 ];
    SYSTEMTIME DaylightDate;
    LONG DaylightBias;
} TIME_ZONE_INFORMATION, *PTIME_ZONE_INFORMATION, *LPTIME_ZONE_INFORMATION;

typedef struct _TIME_DYNAMIC_ZONE_INFORMATION {
    LONG Bias;
    WCHAR StandardName[ 32 ];
    SYSTEMTIME StandardDate;
    LONG StandardBias;
    WCHAR DaylightName[ 32 ];
    SYSTEMTIME DaylightDate;
    LONG DaylightBias;
    WCHAR TimeZoneKeyName[ 128 ];
    BOOLEAN DynamicDaylightTimeDisabled;
} DYNAMIC_TIME_ZONE_INFORMATION, *PDYNAMIC_TIME_ZONE_INFORMATION;



BOOL
__stdcall
SystemTimeToTzSpecificLocalTime(
             const TIME_ZONE_INFORMATION * lpTimeZoneInformation,
         const SYSTEMTIME * lpUniversalTime,
          LPSYSTEMTIME lpLocalTime
    );




BOOL
__stdcall
TzSpecificLocalTimeToSystemTime(
             const TIME_ZONE_INFORMATION * lpTimeZoneInformation,
         const SYSTEMTIME * lpLocalTime,
          LPSYSTEMTIME lpUniversalTime
    );




BOOL
__stdcall
FileTimeToSystemTime(
         const FILETIME * lpFileTime,
          LPSYSTEMTIME lpSystemTime
    );




BOOL
__stdcall
SystemTimeToFileTime(
         const SYSTEMTIME * lpSystemTime,
          LPFILETIME lpFileTime
    );




DWORD
__stdcall
GetTimeZoneInformation(
          LPTIME_ZONE_INFORMATION lpTimeZoneInformation
    );



#pragma endregion

#pragma region Desktop Family or OneCore Family




BOOL
__stdcall
SetTimeZoneInformation(
         const TIME_ZONE_INFORMATION * lpTimeZoneInformation
    );
#line 155 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\timezoneapi.h"
#pragma endregion

#pragma region Application Family or OneCore Family
#line 241 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\timezoneapi.h"
#pragma endregion
#line 251 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\timezoneapi.h"
#pragma option pop
#line 7251 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"


#pragma region Desktop Family
#line 7286 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
typedef struct _SYSTEM_POWER_STATUS {
    BYTE ACLineStatus;
    BYTE BatteryFlag;
    BYTE BatteryLifePercent;
    BYTE SystemStatusFlag;
    DWORD BatteryLifeTime;
    DWORD BatteryFullLifeTime;
} SYSTEM_POWER_STATUS, *LPSYSTEM_POWER_STATUS;


BOOL
__stdcall
GetSystemPowerStatus(
          LPSYSTEM_POWER_STATUS lpSystemPowerStatus
    );


BOOL
__stdcall
SetSystemPowerState(
         BOOL fSuspend,
         BOOL fForce
    );
#line 7318 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
BOOL
__stdcall
MapUserPhysicalPagesScatter(
                              PVOID *VirtualAddresses,
         ULONG_PTR NumberOfPages,
                                  PULONG_PTR PageArray
    );


#pragma endregion

#pragma region Desktop Family




HANDLE
__stdcall
CreateJobObjectA(
             LPSECURITY_ATTRIBUTES lpJobAttributes,
             LPCSTR lpName
    );


HANDLE
__stdcall
CreateJobObjectW(
             LPSECURITY_ATTRIBUTES lpJobAttributes,
             LPCWSTR lpName
    );
#line 7356 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
HANDLE
__stdcall
OpenJobObjectA(
         DWORD dwDesiredAccess,
         BOOL bInheritHandle,
         LPCSTR lpName
    );


HANDLE
__stdcall
OpenJobObjectW(
         DWORD dwDesiredAccess,
         BOOL bInheritHandle,
         LPCWSTR lpName
    );







BOOL
__stdcall
AssignProcessToJobObject(
         HANDLE hJob,
         HANDLE hProcess
    );


BOOL
__stdcall
TerminateJobObject(
         HANDLE hJob,
         UINT uExitCode
    );


BOOL
__stdcall
QueryInformationJobObject(
              HANDLE hJob,
              JOBOBJECTINFOCLASS JobObjectInformationClass,
                                                                         LPVOID lpJobObjectInformation,
              DWORD cbJobObjectInformationLength,
              LPDWORD lpReturnLength
    );


BOOL
__stdcall
SetInformationJobObject(
         HANDLE hJob,
         JOBOBJECTINFOCLASS JobObjectInformationClass,
                                                   LPVOID lpJobObjectInformation,
         DWORD cbJobObjectInformationLength
    );


#pragma endregion

#pragma region Desktop Family



BOOL
__stdcall
CreateJobSet (
         ULONG NumJob,
                       PJOB_SET_ARRAY UserJobSet,
         ULONG Flags);


HANDLE
__stdcall
FindFirstVolumeA(
                                  LPSTR lpszVolumeName,
         DWORD cchBufferLength
    );





BOOL
__stdcall
FindNextVolumeA(
            HANDLE hFindVolume,
                                  LPSTR lpszVolumeName,
            DWORD cchBufferLength
    );





HANDLE
__stdcall
FindFirstVolumeMountPointA(
         LPCSTR lpszRootPathName,
                                  LPSTR lpszVolumeMountPoint,
         DWORD cchBufferLength
    );

HANDLE
__stdcall
FindFirstVolumeMountPointW(
         LPCWSTR lpszRootPathName,
                                  LPWSTR lpszVolumeMountPoint,
         DWORD cchBufferLength
    );







BOOL
__stdcall
FindNextVolumeMountPointA(
         HANDLE hFindVolumeMountPoint,
                                  LPSTR lpszVolumeMountPoint,
         DWORD cchBufferLength
    );

BOOL
__stdcall
FindNextVolumeMountPointW(
         HANDLE hFindVolumeMountPoint,
                                  LPWSTR lpszVolumeMountPoint,
         DWORD cchBufferLength
    );







BOOL
__stdcall
FindVolumeMountPointClose(
         HANDLE hFindVolumeMountPoint
    );


BOOL
__stdcall
SetVolumeMountPointA(
         LPCSTR lpszVolumeMountPoint,
         LPCSTR lpszVolumeName
    );

BOOL
__stdcall
SetVolumeMountPointW(
         LPCWSTR lpszVolumeMountPoint,
         LPCWSTR lpszVolumeName
    );







BOOL
__stdcall
DeleteVolumeMountPointA(
         LPCSTR lpszVolumeMountPoint
    );





BOOL
__stdcall
GetVolumeNameForVolumeMountPointA(
         LPCSTR lpszVolumeMountPoint,
                                  LPSTR lpszVolumeName,
         DWORD cchBufferLength
    );





BOOL
__stdcall
GetVolumePathNameA(
         LPCSTR lpszFileName,
                                  LPSTR lpszVolumePathName,
         DWORD cchBufferLength
    );
#line 7562 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
BOOL
__stdcall
GetVolumePathNamesForVolumeNameA(
          LPCSTR lpszVolumeName,
                                                                                          LPCH lpszVolumePathNames,
          DWORD cchBufferLength,
          PDWORD lpcchReturnLength
    );
#line 7588 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
typedef struct tagACTCTXA {
    ULONG cbSize;
    DWORD dwFlags;
    LPCSTR lpSource;
    USHORT wProcessorArchitecture;
    LANGID wLangId;
    LPCSTR lpAssemblyDirectory;
    LPCSTR lpResourceName;
    LPCSTR lpApplicationName;
    HMODULE hModule;
} ACTCTXA, *PACTCTXA;
typedef struct tagACTCTXW {
    ULONG cbSize;
    DWORD dwFlags;
    LPCWSTR lpSource;
    USHORT wProcessorArchitecture;
    LANGID wLangId;
    LPCWSTR lpAssemblyDirectory;
    LPCWSTR lpResourceName;
    LPCWSTR lpApplicationName;
    HMODULE hModule;
} ACTCTXW, *PACTCTXW;

typedef ACTCTXW ACTCTX;
typedef PACTCTXW PACTCTX;





typedef const ACTCTXA *PCACTCTXA;
typedef const ACTCTXW *PCACTCTXW;

typedef PCACTCTXW PCACTCTX;







HANDLE
__stdcall
CreateActCtxA(
         PCACTCTXA pActCtx
    );

HANDLE
__stdcall
CreateActCtxW(
         PCACTCTXW pActCtx
    );







void
__stdcall
AddRefActCtx(
            HANDLE hActCtx
    );



void
__stdcall
ReleaseActCtx(
            HANDLE hActCtx
    );


BOOL
__stdcall
ZombifyActCtx(
            HANDLE hActCtx
    );




BOOL
__stdcall
ActivateActCtx(
                HANDLE hActCtx,
            ULONG_PTR *lpCookie
    );






BOOL
__stdcall
DeactivateActCtx(
         DWORD dwFlags,
         ULONG_PTR ulCookie
    );


BOOL
__stdcall
GetCurrentActCtx(
             HANDLE *lphActCtx);


typedef struct tagACTCTX_SECTION_KEYED_DATA_2600 {
    ULONG cbSize;
    ULONG ulDataFormatVersion;
    PVOID lpData;
    ULONG ulLength;
    PVOID lpSectionGlobalData;
    ULONG ulSectionGlobalDataLength;
    PVOID lpSectionBase;
    ULONG ulSectionTotalLength;
    HANDLE hActCtx;
    ULONG ulAssemblyRosterIndex;
} ACTCTX_SECTION_KEYED_DATA_2600, *PACTCTX_SECTION_KEYED_DATA_2600;
typedef const ACTCTX_SECTION_KEYED_DATA_2600 * PCACTCTX_SECTION_KEYED_DATA_2600;

typedef struct tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA {
    PVOID lpInformation;
    PVOID lpSectionBase;
    ULONG ulSectionLength;
    PVOID lpSectionGlobalDataBase;
    ULONG ulSectionGlobalDataLength;
} ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA, *PACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA;
typedef const ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA *PCACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA;

typedef struct tagACTCTX_SECTION_KEYED_DATA {
    ULONG cbSize;
    ULONG ulDataFormatVersion;
    PVOID lpData;
    ULONG ulLength;
    PVOID lpSectionGlobalData;
    ULONG ulSectionGlobalDataLength;
    PVOID lpSectionBase;
    ULONG ulSectionTotalLength;
    HANDLE hActCtx;
    ULONG ulAssemblyRosterIndex;

    ULONG ulFlags;
    ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA AssemblyMetadata;
} ACTCTX_SECTION_KEYED_DATA, *PACTCTX_SECTION_KEYED_DATA;
typedef const ACTCTX_SECTION_KEYED_DATA * PCACTCTX_SECTION_KEYED_DATA;
#line 7745 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
BOOL
__stdcall
FindActCtxSectionStringA(
               DWORD dwFlags,
               const GUID *lpExtensionGuid,
               ULONG ulSectionId,
               LPCSTR lpStringToFind,
               PACTCTX_SECTION_KEYED_DATA ReturnedData
    );


BOOL
__stdcall
FindActCtxSectionStringW(
               DWORD dwFlags,
               const GUID *lpExtensionGuid,
               ULONG ulSectionId,
               LPCWSTR lpStringToFind,
               PACTCTX_SECTION_KEYED_DATA ReturnedData
    );







BOOL
__stdcall
FindActCtxSectionGuid(
               DWORD dwFlags,
               const GUID *lpExtensionGuid,
               ULONG ulSectionId,
               const GUID *lpGuidToFind,
               PACTCTX_SECTION_KEYED_DATA ReturnedData
    );





typedef struct _ACTIVATION_CONTEXT_BASIC_INFORMATION {
    HANDLE hActCtx;
    DWORD dwFlags;
} ACTIVATION_CONTEXT_BASIC_INFORMATION, *PACTIVATION_CONTEXT_BASIC_INFORMATION;

typedef const struct _ACTIVATION_CONTEXT_BASIC_INFORMATION *PCACTIVATION_CONTEXT_BASIC_INFORMATION;
#line 7835 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
BOOL
__stdcall
QueryActCtxW(
              DWORD dwFlags,
              HANDLE hActCtx,
              PVOID pvSubInstance,
              ULONG ulInfoClass,
                                                               PVOID pvBuffer,
              SIZE_T cbBuffer,
              SIZE_T *pcbWrittenOrRequired
    );

typedef BOOL (__stdcall * PQUERYACTCTXW_FUNC)(
              DWORD dwFlags,
              HANDLE hActCtx,
              PVOID pvSubInstance,
              ULONG ulInfoClass,
                                                               PVOID pvBuffer,
              SIZE_T cbBuffer,
              SIZE_T *pcbWrittenOrRequired
    );







DWORD
__stdcall
WTSGetActiveConsoleSessionId(
    void
    );
#line 7926 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
BOOL
__stdcall
GetNumaProcessorNode(
          UCHAR Processor,
          PUCHAR NodeNumber
    );
#line 7958 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
BOOL
__stdcall
GetNumaNodeProcessorMask(
          UCHAR Node,
          PULONGLONG ProcessorMask
    );


BOOL
__stdcall
GetNumaAvailableMemoryNode(
          UCHAR Node,
          PULONGLONG AvailableBytes
    );
#line 8012 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
typedef DWORD (__stdcall *APPLICATION_RECOVERY_CALLBACK)(PVOID pvParameter);
#line 8110 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
#pragma endregion
#line 8430 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
#pragma region Desktop Family or OneCore Family
#line 8468 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
#pragma endregion

#pragma region Desktop Family
#line 8552 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
#pragma endregion



#pragma region Desktop Family or OneCore Family




BOOL
__stdcall
CopyContext(
            PCONTEXT Destination,
         DWORD ContextFlags,
         PCONTEXT Source
    );


#pragma endregion

#pragma region Application Family or OneCore Family




BOOL
__stdcall
InitializeContext(
                                           PVOID Buffer,
         DWORD ContextFlags,
          PCONTEXT* Context,
            PDWORD ContextLength
    );

#pragma endregion



#pragma region Application Family or OneCore Family



DWORD64
__stdcall
GetEnabledXStateFeatures(
    void
    );



BOOL
__stdcall
GetXStateFeaturesMask(
         PCONTEXT Context,
          PDWORD64 FeatureMask
    );



PVOID
__stdcall
LocateXStateFeature(
         PCONTEXT Context,
         DWORD FeatureId,
              PDWORD Length
    );


#pragma endregion

#pragma region Desktop Family or OneCore Family




BOOL
__stdcall
SetXStateFeaturesMask(
            PCONTEXT Context,
         DWORD64 FeatureMask
    );


#pragma endregion
#line 9005 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winbase.h"
#pragma option pop
#line 200 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\windows.h"

#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wingdi.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 290 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wingdi.h"
#pragma region Desktop Family



typedef struct _DRAWPATRECT {
        POINT ptPosition;
        POINT ptSize;
        WORD wStyle;
        WORD wPattern;
} DRAWPATRECT, *PDRAWPATRECT;



#pragma endregion
#line 419 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wingdi.h"
#pragma region Desktop Family






typedef struct _PSINJECTDATA {

    DWORD DataBytes;
    WORD InjectionPoint;
    WORD PageNumber;



} PSINJECTDATA, *PPSINJECTDATA;


#pragma endregion
#line 507 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wingdi.h"
#pragma region Desktop Family






typedef struct _PSFEATURE_OUTPUT {

    BOOL bPageIndependent;
    BOOL bSetPageDevice;

} PSFEATURE_OUTPUT, *PPSFEATURE_OUTPUT;





typedef struct _PSFEATURE_CUSTPAPER {

    LONG lOrientation;
    LONG lWidth;
    LONG lHeight;
    LONG lWidthOffset;
    LONG lHeightOffset;

} PSFEATURE_CUSTPAPER, *PPSFEATURE_CUSTPAPER;


#pragma endregion
#line 588 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wingdi.h"
#pragma region Application Family


typedef struct tagXFORM
  {
    FLOAT eM11;
    FLOAT eM12;
    FLOAT eM21;
    FLOAT eM22;
    FLOAT eDx;
    FLOAT eDy;
  } XFORM, *PXFORM, *LPXFORM;


typedef struct tagBITMAP
  {
    LONG bmType;
    LONG bmWidth;
    LONG bmHeight;
    LONG bmWidthBytes;
    WORD bmPlanes;
    WORD bmBitsPixel;
    LPVOID bmBits;
  } BITMAP, *PBITMAP, *NPBITMAP, *LPBITMAP;


#pragma endregion


#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\pshpack1.h"
#line 26 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\pshpack1.h"
#pragma pack(push,1)
#line 616 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wingdi.h"


#pragma region Application Family


typedef struct tagRGBTRIPLE {
        BYTE rgbtBlue;
        BYTE rgbtGreen;
        BYTE rgbtRed;
} RGBTRIPLE, *PRGBTRIPLE, *NPRGBTRIPLE, *LPRGBTRIPLE;


#pragma endregion


#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/poppack.h"
#line 29 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/poppack.h"
#pragma pack(pop)
#line 630 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wingdi.h"


#pragma region Application Family


typedef struct tagRGBQUAD {
        BYTE rgbBlue;
        BYTE rgbGreen;
        BYTE rgbRed;
        BYTE rgbReserved;
} RGBQUAD;


#pragma endregion

#pragma region Desktop Family


typedef RGBQUAD * LPRGBQUAD;


#pragma endregion
#line 670 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wingdi.h"
#pragma region Application Family


typedef LONG LCSCSTYPE;



typedef LONG LCSGAMUTMATCH;
#line 705 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wingdi.h"
typedef long FXPT16DOT16, *LPFXPT16DOT16;
typedef long FXPT2DOT30, *LPFXPT2DOT30;




typedef struct tagCIEXYZ
{
        FXPT2DOT30 ciexyzX;
        FXPT2DOT30 ciexyzY;
        FXPT2DOT30 ciexyzZ;
} CIEXYZ;


#pragma endregion

#pragma region Desktop Family


typedef CIEXYZ *LPCIEXYZ;


#pragma endregion

#pragma region Application Family


typedef struct tagICEXYZTRIPLE
{
        CIEXYZ ciexyzRed;
        CIEXYZ ciexyzGreen;
        CIEXYZ ciexyzBlue;
} CIEXYZTRIPLE;


#pragma endregion

#pragma region Desktop Family


typedef CIEXYZTRIPLE *LPCIEXYZTRIPLE;


#pragma endregion

#pragma region Application Family







typedef struct tagLOGCOLORSPACEA {
    DWORD lcsSignature;
    DWORD lcsVersion;
    DWORD lcsSize;
    LCSCSTYPE lcsCSType;
    LCSGAMUTMATCH lcsIntent;
    CIEXYZTRIPLE lcsEndpoints;
    DWORD lcsGammaRed;
    DWORD lcsGammaGreen;
    DWORD lcsGammaBlue;
    CHAR lcsFilename[260];
} LOGCOLORSPACEA, *LPLOGCOLORSPACEA;
typedef struct tagLOGCOLORSPACEW {
    DWORD lcsSignature;
    DWORD lcsVersion;
    DWORD lcsSize;
    LCSCSTYPE lcsCSType;
    LCSGAMUTMATCH lcsIntent;
    CIEXYZTRIPLE lcsEndpoints;
    DWORD lcsGammaRed;
    DWORD lcsGammaGreen;
    DWORD lcsGammaBlue;
    WCHAR lcsFilename[260];
} LOGCOLORSPACEW, *LPLOGCOLORSPACEW;

typedef LOGCOLORSPACEW LOGCOLORSPACE;
typedef LPLOGCOLORSPACEW LPLOGCOLORSPACE;






#pragma endregion



#pragma region Desktop Family



typedef struct tagBITMAPCOREHEADER {
        DWORD bcSize;
        WORD bcWidth;
        WORD bcHeight;
        WORD bcPlanes;
        WORD bcBitCount;
} BITMAPCOREHEADER, *LPBITMAPCOREHEADER, *PBITMAPCOREHEADER;


#pragma endregion

#pragma region Application Family


typedef struct tagBITMAPINFOHEADER{
        DWORD biSize;
        LONG biWidth;
        LONG biHeight;
        WORD biPlanes;
        WORD biBitCount;
        DWORD biCompression;
        DWORD biSizeImage;
        LONG biXPelsPerMeter;
        LONG biYPelsPerMeter;
        DWORD biClrUsed;
        DWORD biClrImportant;
} BITMAPINFOHEADER, *LPBITMAPINFOHEADER, *PBITMAPINFOHEADER;


#pragma endregion



#pragma region Desktop Family


typedef struct {
        DWORD bV4Size;
        LONG bV4Width;
        LONG bV4Height;
        WORD bV4Planes;
        WORD bV4BitCount;
        DWORD bV4V4Compression;
        DWORD bV4SizeImage;
        LONG bV4XPelsPerMeter;
        LONG bV4YPelsPerMeter;
        DWORD bV4ClrUsed;
        DWORD bV4ClrImportant;
        DWORD bV4RedMask;
        DWORD bV4GreenMask;
        DWORD bV4BlueMask;
        DWORD bV4AlphaMask;
        DWORD bV4CSType;
        CIEXYZTRIPLE bV4Endpoints;
        DWORD bV4GammaRed;
        DWORD bV4GammaGreen;
        DWORD bV4GammaBlue;
} BITMAPV4HEADER, *LPBITMAPV4HEADER, *PBITMAPV4HEADER;


#pragma endregion




#pragma region Desktop Family

typedef struct {
        DWORD bV5Size;
        LONG bV5Width;
        LONG bV5Height;
        WORD bV5Planes;
        WORD bV5BitCount;
        DWORD bV5Compression;
        DWORD bV5SizeImage;
        LONG bV5XPelsPerMeter;
        LONG bV5YPelsPerMeter;
        DWORD bV5ClrUsed;
        DWORD bV5ClrImportant;
        DWORD bV5RedMask;
        DWORD bV5GreenMask;
        DWORD bV5BlueMask;
        DWORD bV5AlphaMask;
        DWORD bV5CSType;
        CIEXYZTRIPLE bV5Endpoints;
        DWORD bV5GammaRed;
        DWORD bV5GammaGreen;
        DWORD bV5GammaBlue;
        DWORD bV5Intent;
        DWORD bV5ProfileData;
        DWORD bV5ProfileSize;
        DWORD bV5Reserved;
} BITMAPV5HEADER, *LPBITMAPV5HEADER, *PBITMAPV5HEADER;


#pragma endregion
#line 911 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wingdi.h"
#pragma region Application Family


typedef struct tagBITMAPINFO {
    BITMAPINFOHEADER bmiHeader;
    RGBQUAD bmiColors[1];
} BITMAPINFO, *LPBITMAPINFO, *PBITMAPINFO;


#pragma endregion

#pragma region Desktop Family


typedef struct tagBITMAPCOREINFO {
    BITMAPCOREHEADER bmciHeader;
    RGBTRIPLE bmciColors[1];
} BITMAPCOREINFO, *LPBITMAPCOREINFO, *PBITMAPCOREINFO;


#pragma endregion


#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/pshpack2.h"
#line 26 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/pshpack2.h"
#pragma pack(push,2)
#line 933 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wingdi.h"


#pragma region Desktop Family


typedef struct tagBITMAPFILEHEADER {
        WORD bfType;
        DWORD bfSize;
        WORD bfReserved1;
        WORD bfReserved2;
        DWORD bfOffBits;
} BITMAPFILEHEADER, *LPBITMAPFILEHEADER, *PBITMAPFILEHEADER;


#pragma endregion


#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/poppack.h"
#line 29 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/poppack.h"
#pragma pack(pop)
#line 949 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wingdi.h"







#pragma region Application Family


typedef struct tagFONTSIGNATURE
{
    DWORD fsUsb[4];
    DWORD fsCsb[2];
} FONTSIGNATURE, *PFONTSIGNATURE, *LPFONTSIGNATURE;


#pragma endregion

#pragma region Desktop Family


typedef struct tagCHARSETINFO
{
    UINT ciCharset;
    UINT ciACP;
    FONTSIGNATURE fs;
} CHARSETINFO, *PCHARSETINFO, *NPCHARSETINFO, *LPCHARSETINFO;


#pragma endregion








#pragma region Application Family


typedef struct tagLOCALESIGNATURE
{
    DWORD lsUsb[4];
    DWORD lsCsbDefault[2];
    DWORD lsCsbSupported[2];
} LOCALESIGNATURE, *PLOCALESIGNATURE, *LPLOCALESIGNATURE;


#pragma endregion






#pragma region Application Family




typedef struct tagHANDLETABLE
  {
    HGDIOBJ objectHandle[1];
  } HANDLETABLE, *PHANDLETABLE, *LPHANDLETABLE;

typedef struct tagMETARECORD
  {
    DWORD rdSize;
    WORD rdFunction;
    WORD rdParm[1];
  } METARECORD;


#pragma endregion

#pragma region Desktop Family


typedef struct tagMETARECORD *PMETARECORD;


#pragma endregion

#pragma region Application Family


typedef struct tagMETARECORD *LPMETARECORD;

typedef struct tagMETAFILEPICT
  {
    LONG mm;
    LONG xExt;
    LONG yExt;
    HMETAFILE hMF;
  } METAFILEPICT, *LPMETAFILEPICT;


#pragma endregion


#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/pshpack2.h"
#line 26 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/pshpack2.h"
#pragma pack(push,2)
#line 1050 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wingdi.h"


#pragma region Desktop Family


typedef struct tagMETAHEADER
{
    WORD mtType;
    WORD mtHeaderSize;
    WORD mtVersion;
    DWORD mtSize;
    WORD mtNoObjects;
    DWORD mtMaxRecord;
    WORD mtNoParameters;
} METAHEADER;
typedef struct tagMETAHEADER *PMETAHEADER;
typedef struct tagMETAHEADER *LPMETAHEADER;


#pragma endregion


#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/poppack.h"
#line 29 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/poppack.h"
#pragma pack(pop)
#line 1071 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wingdi.h"


#pragma region Application Family



typedef struct tagENHMETARECORD
{
    DWORD iType;
    DWORD nSize;
    DWORD dParm[1];
} ENHMETARECORD, *PENHMETARECORD, *LPENHMETARECORD;

typedef struct tagENHMETAHEADER
{
    DWORD iType;
    DWORD nSize;

    RECTL rclBounds;
    RECTL rclFrame;
    DWORD dSignature;
    DWORD nVersion;
    DWORD nBytes;
    DWORD nRecords;
    WORD nHandles;

    WORD sReserved;
    DWORD nDescription;

    DWORD offDescription;

    DWORD nPalEntries;
    SIZEL szlDevice;
    SIZEL szlMillimeters;

    DWORD cbPixelFormat;

    DWORD offPixelFormat;

    DWORD bOpenGL;



    SIZEL szlMicrometers;


} ENHMETAHEADER, *PENHMETAHEADER, *LPENHMETAHEADER;


#pragma endregion
#line 1132 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wingdi.h"
#pragma region Desktop Family






 typedef WCHAR BCHAR;





#pragma endregion




#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/pshpack4.h"
#line 26 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/pshpack4.h"
#pragma pack(push,4)
#line 1149 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wingdi.h"


#pragma region Application Family


typedef struct tagTEXTMETRICA
{
    LONG tmHeight;
    LONG tmAscent;
    LONG tmDescent;
    LONG tmInternalLeading;
    LONG tmExternalLeading;
    LONG tmAveCharWidth;
    LONG tmMaxCharWidth;
    LONG tmWeight;
    LONG tmOverhang;
    LONG tmDigitizedAspectX;
    LONG tmDigitizedAspectY;
    BYTE tmFirstChar;
    BYTE tmLastChar;
    BYTE tmDefaultChar;
    BYTE tmBreakChar;
    BYTE tmItalic;
    BYTE tmUnderlined;
    BYTE tmStruckOut;
    BYTE tmPitchAndFamily;
    BYTE tmCharSet;
} TEXTMETRICA, *PTEXTMETRICA, *NPTEXTMETRICA, *LPTEXTMETRICA;
typedef struct tagTEXTMETRICW
{
    LONG tmHeight;
    LONG tmAscent;
    LONG tmDescent;
    LONG tmInternalLeading;
    LONG tmExternalLeading;
    LONG tmAveCharWidth;
    LONG tmMaxCharWidth;
    LONG tmWeight;
    LONG tmOverhang;
    LONG tmDigitizedAspectX;
    LONG tmDigitizedAspectY;
    WCHAR tmFirstChar;
    WCHAR tmLastChar;
    WCHAR tmDefaultChar;
    WCHAR tmBreakChar;
    BYTE tmItalic;
    BYTE tmUnderlined;
    BYTE tmStruckOut;
    BYTE tmPitchAndFamily;
    BYTE tmCharSet;
} TEXTMETRICW, *PTEXTMETRICW, *NPTEXTMETRICW, *LPTEXTMETRICW;

typedef TEXTMETRICW TEXTMETRIC;
typedef PTEXTMETRICW PTEXTMETRIC;
typedef NPTEXTMETRICW NPTEXTMETRIC;
typedef LPTEXTMETRICW LPTEXTMETRIC;








#pragma endregion


#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/poppack.h"
#line 29 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/poppack.h"
#pragma pack(pop)
#line 1215 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wingdi.h"
#line 1232 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wingdi.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/pshpack4.h"
#line 26 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/pshpack4.h"
#pragma pack(push,4)
#line 1232 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wingdi.h"


#pragma region Desktop Family


typedef struct tagNEWTEXTMETRICA
{
    LONG tmHeight;
    LONG tmAscent;
    LONG tmDescent;
    LONG tmInternalLeading;
    LONG tmExternalLeading;
    LONG tmAveCharWidth;
    LONG tmMaxCharWidth;
    LONG tmWeight;
    LONG tmOverhang;
    LONG tmDigitizedAspectX;
    LONG tmDigitizedAspectY;
    BYTE tmFirstChar;
    BYTE tmLastChar;
    BYTE tmDefaultChar;
    BYTE tmBreakChar;
    BYTE tmItalic;
    BYTE tmUnderlined;
    BYTE tmStruckOut;
    BYTE tmPitchAndFamily;
    BYTE tmCharSet;
    DWORD ntmFlags;
    UINT ntmSizeEM;
    UINT ntmCellHeight;
    UINT ntmAvgWidth;
} NEWTEXTMETRICA, *PNEWTEXTMETRICA, *NPNEWTEXTMETRICA, *LPNEWTEXTMETRICA;
typedef struct tagNEWTEXTMETRICW
{
    LONG tmHeight;
    LONG tmAscent;
    LONG tmDescent;
    LONG tmInternalLeading;
    LONG tmExternalLeading;
    LONG tmAveCharWidth;
    LONG tmMaxCharWidth;
    LONG tmWeight;
    LONG tmOverhang;
    LONG tmDigitizedAspectX;
    LONG tmDigitizedAspectY;
    WCHAR tmFirstChar;
    WCHAR tmLastChar;
    WCHAR tmDefaultChar;
    WCHAR tmBreakChar;
    BYTE tmItalic;
    BYTE tmUnderlined;
    BYTE tmStruckOut;
    BYTE tmPitchAndFamily;
    BYTE tmCharSet;
    DWORD ntmFlags;
    UINT ntmSizeEM;
    UINT ntmCellHeight;
    UINT ntmAvgWidth;
} NEWTEXTMETRICW, *PNEWTEXTMETRICW, *NPNEWTEXTMETRICW, *LPNEWTEXTMETRICW;

typedef NEWTEXTMETRICW NEWTEXTMETRIC;
typedef PNEWTEXTMETRICW PNEWTEXTMETRIC;
typedef NPNEWTEXTMETRICW NPNEWTEXTMETRIC;
typedef LPNEWTEXTMETRICW LPNEWTEXTMETRIC;








#pragma endregion


#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/poppack.h"
#line 29 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/poppack.h"
#pragma pack(pop)
#line 1306 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wingdi.h"




#pragma region Desktop Family


typedef struct tagNEWTEXTMETRICEXA
{
    NEWTEXTMETRICA ntmTm;
    FONTSIGNATURE ntmFontSig;
}NEWTEXTMETRICEXA;
typedef struct tagNEWTEXTMETRICEXW
{
    NEWTEXTMETRICW ntmTm;
    FONTSIGNATURE ntmFontSig;
}NEWTEXTMETRICEXW;

typedef NEWTEXTMETRICEXW NEWTEXTMETRICEX;





#pragma endregion






#pragma region Desktop Family


typedef struct tagPELARRAY
  {
    LONG paXCount;
    LONG paYCount;
    LONG paXExt;
    LONG paYExt;
    BYTE paRGBs;
  } PELARRAY, *PPELARRAY, *NPPELARRAY, *LPPELARRAY;


#pragma endregion

#pragma region Application Family



typedef struct tagLOGBRUSH
  {
    UINT lbStyle;
    COLORREF lbColor;
    ULONG_PTR lbHatch;
  } LOGBRUSH, *PLOGBRUSH, *NPLOGBRUSH, *LPLOGBRUSH;

typedef struct tagLOGBRUSH32
  {
    UINT lbStyle;
    COLORREF lbColor;
    ULONG lbHatch;
  } LOGBRUSH32, *PLOGBRUSH32, *NPLOGBRUSH32, *LPLOGBRUSH32;


#pragma endregion

#pragma region Desktop Family


typedef LOGBRUSH PATTERN;
typedef PATTERN *PPATTERN;
typedef PATTERN *NPPATTERN;
typedef PATTERN *LPPATTERN;


#pragma endregion

#pragma region Application Family



typedef struct tagLOGPEN
  {
    UINT lopnStyle;
    POINT lopnWidth;
    COLORREF lopnColor;
  } LOGPEN, *PLOGPEN, *NPLOGPEN, *LPLOGPEN;


#pragma endregion

#pragma region Desktop Family


typedef struct tagEXTLOGPEN {
    DWORD elpPenStyle;
    DWORD elpWidth;
    UINT elpBrushStyle;
    COLORREF elpColor;
    ULONG_PTR elpHatch;
    DWORD elpNumEntries;
    DWORD elpStyleEntry[1];
} EXTLOGPEN, *PEXTLOGPEN, *NPEXTLOGPEN, *LPEXTLOGPEN;


#pragma endregion

#pragma region Application Family


typedef struct tagEXTLOGPEN32 {
    DWORD elpPenStyle;
    DWORD elpWidth;
    UINT elpBrushStyle;
    COLORREF elpColor;
    ULONG elpHatch;
    DWORD elpNumEntries;
    DWORD elpStyleEntry[1];
} EXTLOGPEN32, *PEXTLOGPEN32, *NPEXTLOGPEN32, *LPEXTLOGPEN32;



typedef struct tagPALETTEENTRY {
    BYTE peRed;
    BYTE peGreen;
    BYTE peBlue;
    BYTE peFlags;
} PALETTEENTRY, *PPALETTEENTRY, *LPPALETTEENTRY;





typedef struct tagLOGPALETTE {
    WORD palVersion;
    WORD palNumEntries;
                                    PALETTEENTRY palPalEntry[1];
} LOGPALETTE, *PLOGPALETTE, *NPLOGPALETTE, *LPLOGPALETTE;






typedef struct tagLOGFONTA
{
    LONG lfHeight;
    LONG lfWidth;
    LONG lfEscapement;
    LONG lfOrientation;
    LONG lfWeight;
    BYTE lfItalic;
    BYTE lfUnderline;
    BYTE lfStrikeOut;
    BYTE lfCharSet;
    BYTE lfOutPrecision;
    BYTE lfClipPrecision;
    BYTE lfQuality;
    BYTE lfPitchAndFamily;
    CHAR lfFaceName[32];
} LOGFONTA, *PLOGFONTA, *NPLOGFONTA, *LPLOGFONTA;
typedef struct tagLOGFONTW
{
    LONG lfHeight;
    LONG lfWidth;
    LONG lfEscapement;
    LONG lfOrientation;
    LONG lfWeight;
    BYTE lfItalic;
    BYTE lfUnderline;
    BYTE lfStrikeOut;
    BYTE lfCharSet;
    BYTE lfOutPrecision;
    BYTE lfClipPrecision;
    BYTE lfQuality;
    BYTE lfPitchAndFamily;
    WCHAR lfFaceName[32];
} LOGFONTW, *PLOGFONTW, *NPLOGFONTW, *LPLOGFONTW;

typedef LOGFONTW LOGFONT;
typedef PLOGFONTW PLOGFONT;
typedef NPLOGFONTW NPLOGFONT;
typedef LPLOGFONTW LPLOGFONT;








#pragma endregion



#pragma region Desktop Family



typedef struct tagENUMLOGFONTA
{
    LOGFONTA elfLogFont;
    BYTE elfFullName[64];
    BYTE elfStyle[32];
} ENUMLOGFONTA, * LPENUMLOGFONTA;

typedef struct tagENUMLOGFONTW
{
    LOGFONTW elfLogFont;
    WCHAR elfFullName[64];
    WCHAR elfStyle[32];
} ENUMLOGFONTW, * LPENUMLOGFONTW;

typedef ENUMLOGFONTW ENUMLOGFONT;
typedef LPENUMLOGFONTW LPENUMLOGFONT;






typedef struct tagENUMLOGFONTEXA
{
    LOGFONTA elfLogFont;
    BYTE elfFullName[64];
    BYTE elfStyle[32];
    BYTE elfScript[32];
} ENUMLOGFONTEXA, *LPENUMLOGFONTEXA;
typedef struct tagENUMLOGFONTEXW
{
    LOGFONTW elfLogFont;
    WCHAR elfFullName[64];
    WCHAR elfStyle[32];
    WCHAR elfScript[32];
} ENUMLOGFONTEXW, *LPENUMLOGFONTEXW;

typedef ENUMLOGFONTEXW ENUMLOGFONTEX;
typedef LPENUMLOGFONTEXW LPENUMLOGFONTEX;







#pragma endregion
#line 1681 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wingdi.h"
#pragma region Application Family


typedef struct tagPANOSE
{
    BYTE bFamilyType;
    BYTE bSerifStyle;
    BYTE bWeight;
    BYTE bProportion;
    BYTE bContrast;
    BYTE bStrokeVariation;
    BYTE bArmStyle;
    BYTE bLetterform;
    BYTE bMidline;
    BYTE bXHeight;
} PANOSE, * LPPANOSE;
#line 1810 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wingdi.h"
typedef struct tagEXTLOGFONTA {
    LOGFONTA elfLogFont;
    BYTE elfFullName[64];
    BYTE elfStyle[32];
    DWORD elfVersion;
    DWORD elfStyleSize;
    DWORD elfMatch;
    DWORD elfReserved;
    BYTE elfVendorId[4];
    DWORD elfCulture;
    PANOSE elfPanose;
} EXTLOGFONTA, *PEXTLOGFONTA, *NPEXTLOGFONTA, *LPEXTLOGFONTA;
typedef struct tagEXTLOGFONTW {
    LOGFONTW elfLogFont;
    WCHAR elfFullName[64];
    WCHAR elfStyle[32];
    DWORD elfVersion;
    DWORD elfStyleSize;
    DWORD elfMatch;
    DWORD elfReserved;
    BYTE elfVendorId[4];
    DWORD elfCulture;
    PANOSE elfPanose;
} EXTLOGFONTW, *PEXTLOGFONTW, *NPEXTLOGFONTW, *LPEXTLOGFONTW;

typedef EXTLOGFONTW EXTLOGFONT;
typedef PEXTLOGFONTW PEXTLOGFONT;
typedef NPEXTLOGFONTW NPEXTLOGFONT;
typedef LPEXTLOGFONTW LPEXTLOGFONT;








#pragma endregion
#line 2192 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wingdi.h"
#pragma region Application Family



typedef struct _devicemodeA {
    BYTE dmDeviceName[32];
    WORD dmSpecVersion;
    WORD dmDriverVersion;
    WORD dmSize;
    WORD dmDriverExtra;
    DWORD dmFields;
    union {

      struct {
        short dmOrientation;
        short dmPaperSize;
        short dmPaperLength;
        short dmPaperWidth;
        short dmScale;
        short dmCopies;
        short dmDefaultSource;
        short dmPrintQuality;
      } ;

      struct {
        POINTL dmPosition;
        DWORD dmDisplayOrientation;
        DWORD dmDisplayFixedOutput;
      } ;
    } ;
    short dmColor;
    short dmDuplex;
    short dmYResolution;
    short dmTTOption;
    short dmCollate;
    BYTE dmFormName[32];
    WORD dmLogPixels;
    DWORD dmBitsPerPel;
    DWORD dmPelsWidth;
    DWORD dmPelsHeight;
    union {
        DWORD dmDisplayFlags;
        DWORD dmNup;
    } ;
    DWORD dmDisplayFrequency;

    DWORD dmICMMethod;
    DWORD dmICMIntent;
    DWORD dmMediaType;
    DWORD dmDitherType;
    DWORD dmReserved1;
    DWORD dmReserved2;

    DWORD dmPanningWidth;
    DWORD dmPanningHeight;


} DEVMODEA, *PDEVMODEA, *NPDEVMODEA, *LPDEVMODEA;
typedef struct _devicemodeW {
    WCHAR dmDeviceName[32];
    WORD dmSpecVersion;
    WORD dmDriverVersion;
    WORD dmSize;
    WORD dmDriverExtra;
    DWORD dmFields;
    union {

      struct {
        short dmOrientation;
        short dmPaperSize;
        short dmPaperLength;
        short dmPaperWidth;
        short dmScale;
        short dmCopies;
        short dmDefaultSource;
        short dmPrintQuality;
      } ;

      struct {
        POINTL dmPosition;
        DWORD dmDisplayOrientation;
        DWORD dmDisplayFixedOutput;
      } ;
    } ;
    short dmColor;
    short dmDuplex;
    short dmYResolution;
    short dmTTOption;
    short dmCollate;
    WCHAR dmFormName[32];
    WORD dmLogPixels;
    DWORD dmBitsPerPel;
    DWORD dmPelsWidth;
    DWORD dmPelsHeight;
    union {
        DWORD dmDisplayFlags;
        DWORD dmNup;
    } ;
    DWORD dmDisplayFrequency;

    DWORD dmICMMethod;
    DWORD dmICMIntent;
    DWORD dmMediaType;
    DWORD dmDitherType;
    DWORD dmReserved1;
    DWORD dmReserved2;

    DWORD dmPanningWidth;
    DWORD dmPanningHeight;


} DEVMODEW, *PDEVMODEW, *NPDEVMODEW, *LPDEVMODEW;

typedef DEVMODEW DEVMODE;
typedef PDEVMODEW PDEVMODE;
typedef NPDEVMODEW NPDEVMODE;
typedef LPDEVMODEW LPDEVMODE;
#line 2426 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wingdi.h"
#pragma endregion
#line 2728 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wingdi.h"
#pragma region Application Family


typedef struct _DISPLAY_DEVICEA {
    DWORD cb;
    CHAR DeviceName[32];
    CHAR DeviceString[128];
    DWORD StateFlags;
    CHAR DeviceID[128];
    CHAR DeviceKey[128];
} DISPLAY_DEVICEA, *PDISPLAY_DEVICEA, *LPDISPLAY_DEVICEA;
typedef struct _DISPLAY_DEVICEW {
    DWORD cb;
    WCHAR DeviceName[32];
    WCHAR DeviceString[128];
    DWORD StateFlags;
    WCHAR DeviceID[128];
    WCHAR DeviceKey[128];
} DISPLAY_DEVICEW, *PDISPLAY_DEVICEW, *LPDISPLAY_DEVICEW;

typedef DISPLAY_DEVICEW DISPLAY_DEVICE;
typedef PDISPLAY_DEVICEW PDISPLAY_DEVICE;
typedef LPDISPLAY_DEVICEW LPDISPLAY_DEVICE;







#pragma endregion
#line 3180 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wingdi.h"
#pragma region Application Family


typedef struct _RGNDATAHEADER {
    DWORD dwSize;
    DWORD iType;
    DWORD nCount;
    DWORD nRgnSize;
    RECT rcBound;
} RGNDATAHEADER, *PRGNDATAHEADER;

typedef struct _RGNDATA {
    RGNDATAHEADER rdh;
    char Buffer[1];
} RGNDATA, *PRGNDATA, *NPRGNDATA, *LPRGNDATA;


#pragma endregion






#pragma region Desktop Family


typedef struct _ABC {
    int abcA;
    UINT abcB;
    int abcC;
} ABC, *PABC, *NPABC, *LPABC;

typedef struct _ABCFLOAT {
    FLOAT abcfA;
    FLOAT abcfB;
    FLOAT abcfC;
} ABCFLOAT, *PABCFLOAT, *NPABCFLOAT, *LPABCFLOAT;


#pragma endregion







#pragma region Desktop Family


typedef struct _OUTLINETEXTMETRICA {
    UINT otmSize;
    TEXTMETRICA otmTextMetrics;
    BYTE otmFiller;
    PANOSE otmPanoseNumber;
    UINT otmfsSelection;
    UINT otmfsType;
     int otmsCharSlopeRise;
     int otmsCharSlopeRun;
     int otmItalicAngle;
    UINT otmEMSquare;
     int otmAscent;
     int otmDescent;
    UINT otmLineGap;
    UINT otmsCapEmHeight;
    UINT otmsXHeight;
    RECT otmrcFontBox;
     int otmMacAscent;
     int otmMacDescent;
    UINT otmMacLineGap;
    UINT otmusMinimumPPEM;
    POINT otmptSubscriptSize;
    POINT otmptSubscriptOffset;
    POINT otmptSuperscriptSize;
    POINT otmptSuperscriptOffset;
    UINT otmsStrikeoutSize;
     int otmsStrikeoutPosition;
     int otmsUnderscoreSize;
     int otmsUnderscorePosition;
    PSTR otmpFamilyName;
    PSTR otmpFaceName;
    PSTR otmpStyleName;
    PSTR otmpFullName;
} OUTLINETEXTMETRICA, *POUTLINETEXTMETRICA, *NPOUTLINETEXTMETRICA, *LPOUTLINETEXTMETRICA;
typedef struct _OUTLINETEXTMETRICW {
    UINT otmSize;
    TEXTMETRICW otmTextMetrics;
    BYTE otmFiller;
    PANOSE otmPanoseNumber;
    UINT otmfsSelection;
    UINT otmfsType;
     int otmsCharSlopeRise;
     int otmsCharSlopeRun;
     int otmItalicAngle;
    UINT otmEMSquare;
     int otmAscent;
     int otmDescent;
    UINT otmLineGap;
    UINT otmsCapEmHeight;
    UINT otmsXHeight;
    RECT otmrcFontBox;
     int otmMacAscent;
     int otmMacDescent;
    UINT otmMacLineGap;
    UINT otmusMinimumPPEM;
    POINT otmptSubscriptSize;
    POINT otmptSubscriptOffset;
    POINT otmptSuperscriptSize;
    POINT otmptSuperscriptOffset;
    UINT otmsStrikeoutSize;
     int otmsStrikeoutPosition;
     int otmsUnderscoreSize;
     int otmsUnderscorePosition;
    PSTR otmpFamilyName;
    PSTR otmpFaceName;
    PSTR otmpStyleName;
    PSTR otmpFullName;
} OUTLINETEXTMETRICW, *POUTLINETEXTMETRICW, *NPOUTLINETEXTMETRICW, *LPOUTLINETEXTMETRICW;

typedef OUTLINETEXTMETRICW OUTLINETEXTMETRIC;
typedef POUTLINETEXTMETRICW POUTLINETEXTMETRIC;
typedef NPOUTLINETEXTMETRICW NPOUTLINETEXTMETRIC;
typedef LPOUTLINETEXTMETRICW LPOUTLINETEXTMETRIC;








#pragma endregion







#pragma region Application Family


typedef struct tagPOLYTEXTA
{
    int x;
    int y;
    UINT n;
    LPCSTR lpstr;
    UINT uiFlags;
    RECT rcl;
    int *pdx;
} POLYTEXTA, *PPOLYTEXTA, *NPPOLYTEXTA, *LPPOLYTEXTA;
typedef struct tagPOLYTEXTW
{
    int x;
    int y;
    UINT n;
    LPCWSTR lpstr;
    UINT uiFlags;
    RECT rcl;
    int *pdx;
} POLYTEXTW, *PPOLYTEXTW, *NPPOLYTEXTW, *LPPOLYTEXTW;

typedef POLYTEXTW POLYTEXT;
typedef PPOLYTEXTW PPOLYTEXT;
typedef NPPOLYTEXTW NPPOLYTEXT;
typedef LPPOLYTEXTW LPPOLYTEXT;








#pragma endregion

#pragma region Desktop Family


typedef struct _FIXED {

    WORD fract;
    short value;




} FIXED;


typedef struct _MAT2 {
     FIXED eM11;
     FIXED eM12;
     FIXED eM21;
     FIXED eM22;
} MAT2, *LPMAT2;



typedef struct _GLYPHMETRICS {
    UINT gmBlackBoxX;
    UINT gmBlackBoxY;
    POINT gmptGlyphOrigin;
    short gmCellIncX;
    short gmCellIncY;
} GLYPHMETRICS, *LPGLYPHMETRICS;


#pragma endregion
#line 3416 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wingdi.h"
#pragma region Desktop Family


typedef struct tagPOINTFX
{
    FIXED x;
    FIXED y;
} POINTFX, * LPPOINTFX;

typedef struct tagTTPOLYCURVE
{
    WORD wType;
    WORD cpfx;
    POINTFX apfx[1];
} TTPOLYCURVE, * LPTTPOLYCURVE;

typedef struct tagTTPOLYGONHEADER
{
    DWORD cb;
    DWORD dwType;
    POINTFX pfxStart;
} TTPOLYGONHEADER, * LPTTPOLYGONHEADER;


#pragma endregion
#line 3486 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wingdi.h"
#pragma region Desktop Family


typedef struct tagGCP_RESULTSA
    {
    DWORD lStructSize;
    LPSTR lpOutString;
    UINT *lpOrder;
    int *lpDx;
    int *lpCaretPos;
    LPSTR lpClass;
    LPWSTR lpGlyphs;
    UINT nGlyphs;
    int nMaxFit;
    } GCP_RESULTSA, * LPGCP_RESULTSA;
typedef struct tagGCP_RESULTSW
    {
    DWORD lStructSize;
    LPWSTR lpOutString;
    UINT *lpOrder;
    int *lpDx;
    int *lpCaretPos;
    LPSTR lpClass;
    LPWSTR lpGlyphs;
    UINT nGlyphs;
    int nMaxFit;
    } GCP_RESULTSW, * LPGCP_RESULTSW;

typedef GCP_RESULTSW GCP_RESULTS;
typedef LPGCP_RESULTSW LPGCP_RESULTS;






#pragma endregion


#pragma region Desktop Family


typedef struct _RASTERIZER_STATUS {
    short nSize;
    short wFlags;
    short nLanguageID;
} RASTERIZER_STATUS, *LPRASTERIZER_STATUS;


#pragma endregion





#pragma region Application Family



typedef struct tagPIXELFORMATDESCRIPTOR
{
    WORD nSize;
    WORD nVersion;
    DWORD dwFlags;
    BYTE iPixelType;
    BYTE cColorBits;
    BYTE cRedBits;
    BYTE cRedShift;
    BYTE cGreenBits;
    BYTE cGreenShift;
    BYTE cBlueBits;
    BYTE cBlueShift;
    BYTE cAlphaBits;
    BYTE cAlphaShift;
    BYTE cAccumBits;
    BYTE cAccumRedBits;
    BYTE cAccumGreenBits;
    BYTE cAccumBlueBits;
    BYTE cAccumAlphaBits;
    BYTE cDepthBits;
    BYTE cStencilBits;
    BYTE cAuxBuffers;
    BYTE iLayerType;
    BYTE bReserved;
    DWORD dwLayerMask;
    DWORD dwVisibleMask;
    DWORD dwDamageMask;
} PIXELFORMATDESCRIPTOR, *PPIXELFORMATDESCRIPTOR, *LPPIXELFORMATDESCRIPTOR;


#pragma endregion
#line 3611 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wingdi.h"
#pragma region Desktop Family





typedef int (__stdcall* OLDFONTENUMPROCA)(const LOGFONTA *, const TEXTMETRICA *, DWORD, LPARAM);
typedef int (__stdcall* OLDFONTENUMPROCW)(const LOGFONTW *, const TEXTMETRICW *, DWORD, LPARAM);
#line 3634 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wingdi.h"
typedef OLDFONTENUMPROCA FONTENUMPROCA;
typedef OLDFONTENUMPROCW FONTENUMPROCW;

typedef FONTENUMPROCW FONTENUMPROC;




typedef int (__stdcall* GOBJENUMPROC)(LPVOID, LPARAM);
typedef void (__stdcall* LINEDDAPROC)(int, int, LPARAM);
#line 3658 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wingdi.h"
#pragma endregion



#pragma region Desktop Family


 int __stdcall AddFontResourceA( LPCSTR);
          int __stdcall AddFontResourceW( LPCWSTR);






           BOOL __stdcall AnimatePalette( HPALETTE hPal, UINT iStartIndex, UINT cEntries, const PALETTEENTRY * ppe);
           BOOL __stdcall Arc( HDC hdc, int x1, int y1, int x2, int y2, int x3, int y3, int x4, int y4);
           BOOL __stdcall BitBlt( HDC hdc, int x, int y, int cx, int cy, HDC hdcSrc, int x1, int y1, DWORD rop);
          BOOL __stdcall CancelDC( HDC hdc);
           BOOL __stdcall Chord( HDC hdc, int x1, int y1, int x2, int y2, int x3, int y3, int x4, int y4);
          int __stdcall ChoosePixelFormat( HDC hdc, const PIXELFORMATDESCRIPTOR *ppfd);
          HMETAFILE __stdcall CloseMetaFile( HDC hdc);
          int __stdcall CombineRgn( HRGN hrgnDst, HRGN hrgnSrc1, HRGN hrgnSrc2, int iMode);
          HMETAFILE __stdcall CopyMetaFileA( HMETAFILE, LPCSTR);
          HMETAFILE __stdcall CopyMetaFileW( HMETAFILE, LPCWSTR);





           HBITMAP __stdcall CreateBitmap( int nWidth, int nHeight, UINT nPlanes, UINT nBitCount, const void *lpBits);
           HBITMAP __stdcall CreateBitmapIndirect( const BITMAP *pbm);
           HBRUSH __stdcall CreateBrushIndirect( const LOGBRUSH *plbrush);
          HBITMAP __stdcall CreateCompatibleBitmap( HDC hdc, int cx, int cy);
          HBITMAP __stdcall CreateDiscardableBitmap( HDC hdc, int cx, int cy);
          HDC __stdcall CreateCompatibleDC( HDC hdc);
          HDC __stdcall CreateDCA( LPCSTR pwszDriver, LPCSTR pwszDevice, LPCSTR pszPort, const DEVMODEA * pdm);
          HDC __stdcall CreateDCW( LPCWSTR pwszDriver, LPCWSTR pwszDevice, LPCWSTR pszPort, const DEVMODEW * pdm);





          HBITMAP __stdcall CreateDIBitmap( HDC hdc, const BITMAPINFOHEADER *pbmih, DWORD flInit, const void *pjBits, const BITMAPINFO *pbmi, UINT iUsage);
          HBRUSH __stdcall CreateDIBPatternBrush( HGLOBAL h, UINT iUsage);
           HBRUSH __stdcall CreateDIBPatternBrushPt( const void *lpPackedDIB, UINT iUsage);
          HRGN __stdcall CreateEllipticRgn( int x1, int y1, int x2, int y2);
          HRGN __stdcall CreateEllipticRgnIndirect( const RECT *lprect);
           HFONT __stdcall CreateFontIndirectA( const LOGFONTA *lplf);
           HFONT __stdcall CreateFontIndirectW( const LOGFONTW *lplf);





          HFONT __stdcall CreateFontA( int cHeight, int cWidth, int cEscapement, int cOrientation, int cWeight, DWORD bItalic,
                                  DWORD bUnderline, DWORD bStrikeOut, DWORD iCharSet, DWORD iOutPrecision, DWORD iClipPrecision,
                                  DWORD iQuality, DWORD iPitchAndFamily, LPCSTR pszFaceName);
          HFONT __stdcall CreateFontW( int cHeight, int cWidth, int cEscapement, int cOrientation, int cWeight, DWORD bItalic,
                                  DWORD bUnderline, DWORD bStrikeOut, DWORD iCharSet, DWORD iOutPrecision, DWORD iClipPrecision,
                                  DWORD iQuality, DWORD iPitchAndFamily, LPCWSTR pszFaceName);






          HBRUSH __stdcall CreateHatchBrush( int iHatch, COLORREF color);
          HDC __stdcall CreateICA( LPCSTR pszDriver, LPCSTR pszDevice, LPCSTR pszPort, const DEVMODEA * pdm);
          HDC __stdcall CreateICW( LPCWSTR pszDriver, LPCWSTR pszDevice, LPCWSTR pszPort, const DEVMODEW * pdm);





          HDC __stdcall CreateMetaFileA( LPCSTR pszFile);
          HDC __stdcall CreateMetaFileW( LPCWSTR pszFile);





           HPALETTE __stdcall CreatePalette( const LOGPALETTE * plpal);
          HPEN __stdcall CreatePen( int iStyle, int cWidth, COLORREF color);
           HPEN __stdcall CreatePenIndirect( const LOGPEN *plpen);
          HRGN __stdcall CreatePolyPolygonRgn( const POINT *pptl,
                                                                  const INT *pc,
                                                     int cPoly,
                                                     int iMode);
           HBRUSH __stdcall CreatePatternBrush( HBITMAP hbm);
          HRGN __stdcall CreateRectRgn( int x1, int y1, int x2, int y2);
          HRGN __stdcall CreateRectRgnIndirect( const RECT *lprect);
          HRGN __stdcall CreateRoundRectRgn( int x1, int y1, int x2, int y2, int w, int h);
          BOOL __stdcall CreateScalableFontResourceA( DWORD fdwHidden, LPCSTR lpszFont, LPCSTR lpszFile, LPCSTR lpszPath);
          BOOL __stdcall CreateScalableFontResourceW( DWORD fdwHidden, LPCWSTR lpszFont, LPCWSTR lpszFile, LPCWSTR lpszPath);





          HBRUSH __stdcall CreateSolidBrush( COLORREF color);

          BOOL __stdcall DeleteDC( HDC hdc);
          BOOL __stdcall DeleteMetaFile( HMETAFILE hmf);
           BOOL __stdcall DeleteObject( HGDIOBJ ho);
          int __stdcall DescribePixelFormat( HDC hdc,
                                                 int iPixelFormat,
                                                 UINT nBytes,
                                                                           LPPIXELFORMATDESCRIPTOR ppfd);





typedef UINT (__stdcall* LPFNDEVMODE)(HWND, HMODULE, LPDEVMODE, LPSTR, LPSTR, LPDEVMODE, LPSTR, UINT);

typedef DWORD (__stdcall* LPFNDEVCAPS)(LPSTR, LPSTR, UINT, LPSTR, LPDEVMODE);


#pragma endregion
#line 3856 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wingdi.h"
#pragma region Desktop Family



int
__stdcall
DeviceCapabilitiesA(
                        LPCSTR pDevice,
                        LPCSTR pPort,
                        WORD fwCapability,
                                         LPSTR pOutput,
                        const DEVMODEA *pDevMode
    );

int
__stdcall
DeviceCapabilitiesW(
                        LPCWSTR pDevice,
                        LPCWSTR pPort,
                        WORD fwCapability,
                                         LPWSTR pOutput,
                        const DEVMODEW *pDevMode
    );






          int __stdcall DrawEscape( HDC hdc,
                                         int iEscape,
                                         int cjIn,
                                                               LPCSTR lpIn);

           BOOL __stdcall Ellipse( HDC hdc, int left, int top, int right, int bottom);


          int __stdcall EnumFontFamiliesExA( HDC hdc, LPLOGFONTA lpLogfont, FONTENUMPROCA lpProc, LPARAM lParam, DWORD dwFlags);
          int __stdcall EnumFontFamiliesExW( HDC hdc, LPLOGFONTW lpLogfont, FONTENUMPROCW lpProc, LPARAM lParam, DWORD dwFlags);







          int __stdcall EnumFontFamiliesA( HDC hdc, LPCSTR lpLogfont, FONTENUMPROCA lpProc, LPARAM lParam);
          int __stdcall EnumFontFamiliesW( HDC hdc, LPCWSTR lpLogfont, FONTENUMPROCW lpProc, LPARAM lParam);





          int __stdcall EnumFontsA( HDC hdc, LPCSTR lpLogfont, FONTENUMPROCA lpProc, LPARAM lParam);
          int __stdcall EnumFontsW( HDC hdc, LPCWSTR lpLogfont, FONTENUMPROCW lpProc, LPARAM lParam);







          int __stdcall EnumObjects( HDC hdc, int nType, GOBJENUMPROC lpFunc, LPARAM lParam);





          BOOL __stdcall EqualRgn( HRGN hrgn1, HRGN hrgn2);
           int __stdcall Escape( HDC hdc,
                                     int iEscape,
                                     int cjIn,
                                                           LPCSTR pvIn,
                                          LPVOID pvOut);
          int __stdcall ExtEscape( HDC hdc,
                                         int iEscape,
                                         int cjInput,
                                                                  LPCSTR lpInData,
                                         int cjOutput,
                                                                     LPSTR lpOutData);
           int __stdcall ExcludeClipRect( HDC hdc, int left, int top, int right, int bottom);
           HRGN __stdcall ExtCreateRegion( const XFORM * lpx, DWORD nCount, const RGNDATA * lpData);
           BOOL __stdcall ExtFloodFill( HDC hdc, int x, int y, COLORREF color, UINT type);
           BOOL __stdcall FillRgn( HDC hdc, HRGN hrgn, HBRUSH hbr);
           BOOL __stdcall FloodFill( HDC hdc, int x, int y, COLORREF color);
           BOOL __stdcall FrameRgn( HDC hdc, HRGN hrgn, HBRUSH hbr, int w, int h);
          int __stdcall GetROP2( HDC hdc);
          BOOL __stdcall GetAspectRatioFilterEx( HDC hdc, LPSIZE lpsize);
          COLORREF __stdcall GetBkColor( HDC hdc);


          COLORREF __stdcall GetDCBrushColor( HDC hdc);
          COLORREF __stdcall GetDCPenColor( HDC hdc);



int
__stdcall
GetBkMode(
         HDC hdc
    );


LONG
__stdcall
GetBitmapBits(
         HBITMAP hbit,
         LONG cb,
                           LPVOID lpvBits
    );

          BOOL __stdcall GetBitmapDimensionEx( HBITMAP hbit, LPSIZE lpsize);
          UINT __stdcall GetBoundsRect( HDC hdc, LPRECT lprect, UINT flags);

          BOOL __stdcall GetBrushOrgEx( HDC hdc, LPPOINT lppt);

          BOOL __stdcall GetCharWidthA( HDC hdc, UINT iFirst, UINT iLast, LPINT lpBuffer);
          BOOL __stdcall GetCharWidthW( HDC hdc, UINT iFirst, UINT iLast, LPINT lpBuffer);





          BOOL __stdcall GetCharWidth32A( HDC hdc, UINT iFirst, UINT iLast, LPINT lpBuffer);
          BOOL __stdcall GetCharWidth32W( HDC hdc, UINT iFirst, UINT iLast, LPINT lpBuffer);





          BOOL __stdcall GetCharWidthFloatA( HDC hdc, UINT iFirst, UINT iLast, PFLOAT lpBuffer);
          BOOL __stdcall GetCharWidthFloatW( HDC hdc, UINT iFirst, UINT iLast, PFLOAT lpBuffer);






          BOOL __stdcall GetCharABCWidthsA( HDC hdc,
                                                 UINT wFirst,
                                                 UINT wLast,
                                                                             LPABC lpABC);
          BOOL __stdcall GetCharABCWidthsW( HDC hdc,
                                                 UINT wFirst,
                                                 UINT wLast,
                                                                             LPABC lpABC);






          BOOL __stdcall GetCharABCWidthsFloatA( HDC hdc, UINT iFirst, UINT iLast, LPABCFLOAT lpABC);
          BOOL __stdcall GetCharABCWidthsFloatW( HDC hdc, UINT iFirst, UINT iLast, LPABCFLOAT lpABC);





          int __stdcall GetClipBox( HDC hdc, LPRECT lprect);
          int __stdcall GetClipRgn( HDC hdc, HRGN hrgn);
          int __stdcall GetMetaRgn( HDC hdc, HRGN hrgn);
          HGDIOBJ __stdcall GetCurrentObject( HDC hdc, UINT type);
          BOOL __stdcall GetCurrentPositionEx( HDC hdc, LPPOINT lppt);
          int __stdcall GetDeviceCaps( HDC hdc, int index);
          int __stdcall GetDIBits( HDC hdc, HBITMAP hbm, UINT start, UINT cLines,
              LPVOID lpvBits, LPBITMAPINFO lpbmi, UINT usage);


          DWORD __stdcall GetFontData ( HDC hdc,
                                             DWORD dwTable,
                                             DWORD dwOffset,
                                                                                    PVOID pvBuffer,
                                             DWORD cjBuffer
                                        );

          DWORD __stdcall GetGlyphOutlineA( HDC hdc,
                                                 UINT uChar,
                                                 UINT fuFormat,
                                                  LPGLYPHMETRICS lpgm,
                                                 DWORD cjBuffer,
                                                                             LPVOID pvBuffer,
                                                 const MAT2 *lpmat2
                                        );
          DWORD __stdcall GetGlyphOutlineW( HDC hdc,
                                                 UINT uChar,
                                                 UINT fuFormat,
                                                  LPGLYPHMETRICS lpgm,
                                                 DWORD cjBuffer,
                                                                             LPVOID pvBuffer,
                                                 const MAT2 *lpmat2
                                        );






          int __stdcall GetGraphicsMode( HDC hdc);
          int __stdcall GetMapMode( HDC hdc);
          UINT __stdcall GetMetaFileBitsEx( HMETAFILE hMF, UINT cbBuffer, LPVOID lpData);
          HMETAFILE __stdcall GetMetaFileA( LPCSTR lpName);
          HMETAFILE __stdcall GetMetaFileW( LPCWSTR lpName);





          COLORREF __stdcall GetNearestColor( HDC hdc, COLORREF color);
          UINT __stdcall GetNearestPaletteIndex( HPALETTE h, COLORREF color);
          DWORD __stdcall GetObjectType( HGDIOBJ h);



          UINT __stdcall GetOutlineTextMetricsA( HDC hdc,
                                                     UINT cjCopy,
                                                                               LPOUTLINETEXTMETRICA potm);
          UINT __stdcall GetOutlineTextMetricsW( HDC hdc,
                                                     UINT cjCopy,
                                                                               LPOUTLINETEXTMETRICW potm);
#line 4085 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wingdi.h"
          UINT __stdcall GetPaletteEntries( HPALETTE hpal,
                                                 UINT iStart,
                                                 UINT cEntries,
                                                                                 LPPALETTEENTRY pPalEntries);
          COLORREF __stdcall GetPixel( HDC hdc, int x, int y);
          int __stdcall GetPixelFormat( HDC hdc);
          int __stdcall GetPolyFillMode( HDC hdc);
          BOOL __stdcall GetRasterizerCaps( LPRASTERIZER_STATUS lpraststat,
                                                 UINT cjBytes);

          int __stdcall GetRandomRgn ( HDC hdc, HRGN hrgn, INT i);
          DWORD __stdcall GetRegionData( HRGN hrgn,
                                             DWORD nCount,
                                                                                  LPRGNDATA lpRgnData);
          int __stdcall GetRgnBox( HRGN hrgn, LPRECT lprc);
          HGDIOBJ __stdcall GetStockObject( int i);
          int __stdcall GetStretchBltMode( HDC hdc);

UINT
__stdcall
GetSystemPaletteEntries(
         HDC hdc,
         UINT iStart,
         UINT cEntries,
                               LPPALETTEENTRY pPalEntries
    );

          UINT __stdcall GetSystemPaletteUse( HDC hdc);
          int __stdcall GetTextCharacterExtra( HDC hdc);
          UINT __stdcall GetTextAlign( HDC hdc);
          COLORREF __stdcall GetTextColor( HDC hdc);


BOOL
__stdcall
GetTextExtentPointA(
         HDC hdc,
                  LPCSTR lpString,
         int c,
          LPSIZE lpsz
    );

BOOL
__stdcall
GetTextExtentPointW(
         HDC hdc,
                  LPCWSTR lpString,
         int c,
          LPSIZE lpsz
    );







BOOL
__stdcall
GetTextExtentPoint32A(
         HDC hdc,
                  LPCSTR lpString,
         int c,
          LPSIZE psizl
    );

BOOL
__stdcall
GetTextExtentPoint32W(
         HDC hdc,
                  LPCWSTR lpString,
         int c,
          LPSIZE psizl
    );







BOOL
__stdcall
GetTextExtentExPointA(
         HDC hdc,
                          LPCSTR lpszString,
         int cchString,
         int nMaxExtent,
              LPINT lpnFit,
                                             LPINT lpnDx,
          LPSIZE lpSize
    );

BOOL
__stdcall
GetTextExtentExPointW(
         HDC hdc,
                          LPCWSTR lpszString,
         int cchString,
         int nMaxExtent,
              LPINT lpnFit,
                                             LPINT lpnDx,
          LPSIZE lpSize
    );







          int __stdcall GetTextCharset( HDC hdc);
          int __stdcall GetTextCharsetInfo( HDC hdc, LPFONTSIGNATURE lpSig, DWORD dwFlags);
          BOOL __stdcall TranslateCharsetInfo( DWORD *lpSrc, LPCHARSETINFO lpCs, DWORD dwFlags);
          DWORD __stdcall GetFontLanguageInfo( HDC hdc);
          DWORD __stdcall GetCharacterPlacementA( HDC hdc, LPCSTR lpString, int nCount, int nMexExtent, LPGCP_RESULTSA lpResults, DWORD dwFlags);
          DWORD __stdcall GetCharacterPlacementW( HDC hdc, LPCWSTR lpString, int nCount, int nMexExtent, LPGCP_RESULTSW lpResults, DWORD dwFlags);








#pragma endregion



#pragma region Desktop Family


typedef struct tagWCRANGE
{
    WCHAR wcLow;
    USHORT cGlyphs;
} WCRANGE, *PWCRANGE, *LPWCRANGE;


typedef struct tagGLYPHSET
{
    DWORD cbThis;
    DWORD flAccel;
    DWORD cGlyphsSupported;
    DWORD cRanges;
    WCRANGE ranges[1];
} GLYPHSET, *PGLYPHSET, *LPGLYPHSET;
#line 4241 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wingdi.h"
          DWORD __stdcall GetFontUnicodeRanges( HDC hdc, LPGLYPHSET lpgs);
          DWORD __stdcall GetGlyphIndicesA( HDC hdc, LPCSTR lpstr, int c, LPWORD pgi, DWORD fl);
          DWORD __stdcall GetGlyphIndicesW( HDC hdc, LPCWSTR lpstr, int c, LPWORD pgi, DWORD fl);





          BOOL __stdcall GetTextExtentPointI( HDC hdc, LPWORD pgiIn, int cgi, LPSIZE psize);
          BOOL __stdcall GetTextExtentExPointI ( HDC hdc,
                                                                       LPWORD lpwszString,
                                                     int cwchString,
                                                     int nMaxExtent,
                                                          LPINT lpnFit,
                                                                                         LPINT lpnDx,
                                                      LPSIZE lpSize
                                                );

          BOOL __stdcall GetCharWidthI( HDC hdc,
                                             UINT giFirst,
                                             UINT cgi,
                                                            LPWORD pgi,
                                                          LPINT piWidths
                                        );

          BOOL __stdcall GetCharABCWidthsI( HDC hdc,
                                                 UINT giFirst,
                                                 UINT cgi,
                                                                LPWORD pgi,
                                                              LPABC pabc
                                        );
#line 4280 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wingdi.h"
typedef struct tagDESIGNVECTOR
{
    DWORD dvReserved;
    DWORD dvNumAxes;
    LONG dvValues[16];
} DESIGNVECTOR, *PDESIGNVECTOR, *LPDESIGNVECTOR;

          int __stdcall AddFontResourceExA( LPCSTR name, DWORD fl, PVOID res);
          int __stdcall AddFontResourceExW( LPCWSTR name, DWORD fl, PVOID res);





          BOOL __stdcall RemoveFontResourceExA( LPCSTR name, DWORD fl, PVOID pdv);
          BOOL __stdcall RemoveFontResourceExW( LPCWSTR name, DWORD fl, PVOID pdv);





          HANDLE __stdcall AddFontMemResourceEx( PVOID pFileView,
                                                     DWORD cjSize,
                                                           PVOID pvResrved,
                                                     DWORD* pNumFonts);

          BOOL __stdcall RemoveFontMemResourceEx( HANDLE h);
#line 4316 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wingdi.h"
typedef struct tagAXISINFOA
{
    LONG axMinValue;
    LONG axMaxValue;
    BYTE axAxisName[16];
} AXISINFOA, *PAXISINFOA, *LPAXISINFOA;
typedef struct tagAXISINFOW
{
    LONG axMinValue;
    LONG axMaxValue;
    WCHAR axAxisName[16];
} AXISINFOW, *PAXISINFOW, *LPAXISINFOW;

typedef AXISINFOW AXISINFO;
typedef PAXISINFOW PAXISINFO;
typedef LPAXISINFOW LPAXISINFO;






typedef struct tagAXESLISTA
{
    DWORD axlReserved;
    DWORD axlNumAxes;
    AXISINFOA axlAxisInfo[16];
} AXESLISTA, *PAXESLISTA, *LPAXESLISTA;
typedef struct tagAXESLISTW
{
    DWORD axlReserved;
    DWORD axlNumAxes;
    AXISINFOW axlAxisInfo[16];
} AXESLISTW, *PAXESLISTW, *LPAXESLISTW;

typedef AXESLISTW AXESLIST;
typedef PAXESLISTW PAXESLIST;
typedef LPAXESLISTW LPAXESLIST;
#line 4364 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wingdi.h"
typedef struct tagENUMLOGFONTEXDVA
{
    ENUMLOGFONTEXA elfEnumLogfontEx;
    DESIGNVECTOR elfDesignVector;
} ENUMLOGFONTEXDVA, *PENUMLOGFONTEXDVA, *LPENUMLOGFONTEXDVA;
typedef struct tagENUMLOGFONTEXDVW
{
    ENUMLOGFONTEXW elfEnumLogfontEx;
    DESIGNVECTOR elfDesignVector;
} ENUMLOGFONTEXDVW, *PENUMLOGFONTEXDVW, *LPENUMLOGFONTEXDVW;

typedef ENUMLOGFONTEXDVW ENUMLOGFONTEXDV;
typedef PENUMLOGFONTEXDVW PENUMLOGFONTEXDV;
typedef LPENUMLOGFONTEXDVW LPENUMLOGFONTEXDV;






          HFONT __stdcall CreateFontIndirectExA( const ENUMLOGFONTEXDVA *);
          HFONT __stdcall CreateFontIndirectExW( const ENUMLOGFONTEXDVW *);







typedef struct tagENUMTEXTMETRICA
{
    NEWTEXTMETRICEXA etmNewTextMetricEx;
    AXESLISTA etmAxesList;
} ENUMTEXTMETRICA, *PENUMTEXTMETRICA, *LPENUMTEXTMETRICA;
typedef struct tagENUMTEXTMETRICW
{
    NEWTEXTMETRICEXW etmNewTextMetricEx;
    AXESLISTW etmAxesList;
} ENUMTEXTMETRICW, *PENUMTEXTMETRICW, *LPENUMTEXTMETRICW;

typedef ENUMTEXTMETRICW ENUMTEXTMETRIC;
typedef PENUMTEXTMETRICW PENUMTEXTMETRIC;
typedef LPENUMTEXTMETRICW LPENUMTEXTMETRIC;








#pragma endregion



#pragma region Desktop Family


 BOOL __stdcall GetViewportExtEx( HDC hdc, LPSIZE lpsize);
          BOOL __stdcall GetViewportOrgEx( HDC hdc, LPPOINT lppoint);
          BOOL __stdcall GetWindowExtEx( HDC hdc, LPSIZE lpsize);
          BOOL __stdcall GetWindowOrgEx( HDC hdc, LPPOINT lppoint);

           int __stdcall IntersectClipRect( HDC hdc, int left, int top, int right, int bottom);
           BOOL __stdcall InvertRgn( HDC hdc, HRGN hrgn);
          BOOL __stdcall LineDDA( int xStart, int yStart, int xEnd, int yEnd, LINEDDAPROC lpProc, LPARAM data);
           BOOL __stdcall LineTo( HDC hdc, int x, int y);
          BOOL __stdcall MaskBlt( HDC hdcDest, int xDest, int yDest, int width, int height,
                   HDC hdcSrc, int xSrc, int ySrc, HBITMAP hbmMask, int xMask, int yMask, DWORD rop);
          BOOL __stdcall PlgBlt( HDC hdcDest, const POINT * lpPoint, HDC hdcSrc, int xSrc, int ySrc, int width,
                          int height, HBITMAP hbmMask, int xMask, int yMask);

           int __stdcall OffsetClipRgn( HDC hdc, int x, int y);
          int __stdcall OffsetRgn( HRGN hrgn, int x, int y);
           BOOL __stdcall PatBlt( HDC hdc, int x, int y, int w, int h, DWORD rop);
           BOOL __stdcall Pie( HDC hdc, int left, int top, int right, int bottom, int xr1, int yr1, int xr2, int yr2);
          BOOL __stdcall PlayMetaFile( HDC hdc, HMETAFILE hmf);
           BOOL __stdcall PaintRgn( HDC hdc, HRGN hrgn);
           BOOL __stdcall PolyPolygon( HDC hdc, const POINT *apt, const INT *asz, int csz);
          BOOL __stdcall PtInRegion( HRGN hrgn, int x, int y);
          BOOL __stdcall PtVisible( HDC hdc, int x, int y);
          BOOL __stdcall RectInRegion( HRGN hrgn, const RECT * lprect);
          BOOL __stdcall RectVisible( HDC hdc, const RECT * lprect);
           BOOL __stdcall Rectangle( HDC hdc, int left, int top, int right, int bottom);
           BOOL __stdcall RestoreDC( HDC hdc, int nSavedDC);
           HDC __stdcall ResetDCA( HDC hdc, const DEVMODEA * lpdm);
           HDC __stdcall ResetDCW( HDC hdc, const DEVMODEW * lpdm);





           UINT __stdcall RealizePalette( HDC hdc);
          BOOL __stdcall RemoveFontResourceA( LPCSTR lpFileName);
          BOOL __stdcall RemoveFontResourceW( LPCWSTR lpFileName);





           BOOL __stdcall RoundRect( HDC hdc, int left, int top, int right, int bottom, int width, int height);
           BOOL __stdcall ResizePalette( HPALETTE hpal, UINT n);

           int __stdcall SaveDC( HDC hdc);
           int __stdcall SelectClipRgn( HDC hdc, HRGN hrgn);
          int __stdcall ExtSelectClipRgn( HDC hdc, HRGN hrgn, int mode);
          int __stdcall SetMetaRgn( HDC hdc);
           HGDIOBJ __stdcall SelectObject( HDC hdc, HGDIOBJ h);
           HPALETTE __stdcall SelectPalette( HDC hdc, HPALETTE hPal, BOOL bForceBkgd);
           COLORREF __stdcall SetBkColor( HDC hdc, COLORREF color);


          COLORREF __stdcall SetDCBrushColor( HDC hdc, COLORREF color);
          COLORREF __stdcall SetDCPenColor( HDC hdc, COLORREF color);


           int __stdcall SetBkMode( HDC hdc, int mode);


LONG __stdcall
SetBitmapBits(
         HBITMAP hbm,
         DWORD cb,
                         const void *pvBits);

          UINT __stdcall SetBoundsRect( HDC hdc, const RECT * lprect, UINT flags);
          int __stdcall SetDIBits( HDC hdc, HBITMAP hbm, UINT start, UINT cLines, const void *lpBits, const BITMAPINFO * lpbmi, UINT ColorUse);
           int __stdcall SetDIBitsToDevice( HDC hdc, int xDest, int yDest, DWORD w, DWORD h, int xSrc,
             int ySrc, UINT StartScan, UINT cLines, const void * lpvBits, const BITMAPINFO * lpbmi, UINT ColorUse);
           DWORD __stdcall SetMapperFlags( HDC hdc, DWORD flags);
          int __stdcall SetGraphicsMode( HDC hdc, int iMode);
           int __stdcall SetMapMode( HDC hdc, int iMode);


           DWORD __stdcall SetLayout( HDC hdc, DWORD l);
          DWORD __stdcall GetLayout( HDC hdc);


          HMETAFILE __stdcall SetMetaFileBitsEx( UINT cbBuffer, const BYTE *lpData);
           UINT __stdcall SetPaletteEntries( HPALETTE hpal,
                                                 UINT iStart,
                                                 UINT cEntries,
                                                                 const PALETTEENTRY *pPalEntries);
           COLORREF __stdcall SetPixel( HDC hdc, int x, int y, COLORREF color);
          BOOL __stdcall SetPixelV( HDC hdc, int x, int y, COLORREF color);
          BOOL __stdcall SetPixelFormat( HDC hdc, int format, const PIXELFORMATDESCRIPTOR * ppfd);
           int __stdcall SetPolyFillMode( HDC hdc, int mode);
           BOOL __stdcall StretchBlt( HDC hdcDest, int xDest, int yDest, int wDest, int hDest, HDC hdcSrc, int xSrc, int ySrc, int wSrc, int hSrc, DWORD rop);
          BOOL __stdcall SetRectRgn( HRGN hrgn, int left, int top, int right, int bottom);
           int __stdcall StretchDIBits( HDC hdc, int xDest, int yDest, int DestWidth, int DestHeight, int xSrc, int ySrc, int SrcWidth, int SrcHeight,
                 const void * lpBits, const BITMAPINFO * lpbmi, UINT iUsage, DWORD rop);
           int __stdcall SetROP2( HDC hdc, int rop2);
           int __stdcall SetStretchBltMode( HDC hdc, int mode);
          UINT __stdcall SetSystemPaletteUse( HDC hdc, UINT use);
           int __stdcall SetTextCharacterExtra( HDC hdc, int extra);
           COLORREF __stdcall SetTextColor( HDC hdc, COLORREF color);
           UINT __stdcall SetTextAlign( HDC hdc, UINT align);
           BOOL __stdcall SetTextJustification( HDC hdc, int extra, int count);
          BOOL __stdcall UpdateColors( HDC hdc);


#pragma endregion
#line 4570 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wingdi.h"
#pragma region Application Family


typedef USHORT COLOR16;

typedef struct _TRIVERTEX
{
    LONG x;
    LONG y;
    COLOR16 Red;
    COLOR16 Green;
    COLOR16 Blue;
    COLOR16 Alpha;
}TRIVERTEX,*PTRIVERTEX,*LPTRIVERTEX;


#pragma endregion

#pragma region Desktop Family


typedef struct _GRADIENT_TRIANGLE
{
    ULONG Vertex1;
    ULONG Vertex2;
    ULONG Vertex3;
} GRADIENT_TRIANGLE,*PGRADIENT_TRIANGLE,*LPGRADIENT_TRIANGLE;

typedef struct _GRADIENT_RECT
{
    ULONG UpperLeft;
    ULONG LowerRight;
}GRADIENT_RECT,*PGRADIENT_RECT,*LPGRADIENT_RECT;


#pragma endregion

#pragma region Application Family


typedef struct _BLENDFUNCTION
{
    BYTE BlendOp;
    BYTE BlendFlags;
    BYTE SourceConstantAlpha;
    BYTE AlphaFormat;
}BLENDFUNCTION,*PBLENDFUNCTION;


#pragma endregion

#pragma region Desktop Family
#line 4637 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wingdi.h"
 BOOL __stdcall AlphaBlend(
         HDC hdcDest,
         int xoriginDest,
         int yoriginDest,
         int wDest,
         int hDest,
         HDC hdcSrc,
         int xoriginSrc,
         int yoriginSrc,
         int wSrc,
         int hSrc,
         BLENDFUNCTION ftn);

          BOOL __stdcall TransparentBlt(
         HDC hdcDest,
         int xoriginDest,
         int yoriginDest,
         int wDest,
         int hDest,
         HDC hdcSrc,
         int xoriginSrc,
         int yoriginSrc,
         int wSrc,
         int hSrc,
         UINT crTransparent);
#line 4674 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wingdi.h"
BOOL
__stdcall
GradientFill(
         HDC hdc,
                        PTRIVERTEX pVertex,
         ULONG nVertex,
         PVOID pMesh,
         ULONG nMesh,
         ULONG ulMode
    );


#pragma endregion



#pragma region Desktop Family





 BOOL __stdcall GdiAlphaBlend( HDC hdcDest, int xoriginDest, int yoriginDest, int wDest, int hDest, HDC hdcSrc, int xoriginSrc, int yoriginSrc, int wSrc, int hSrc, BLENDFUNCTION ftn);

          BOOL __stdcall GdiTransparentBlt( HDC hdcDest, int xoriginDest, int yoriginDest, int wDest, int hDest, HDC hdcSrc,
                                                int xoriginSrc, int yoriginSrc, int wSrc, int hSrc, UINT crTransparent);

          BOOL __stdcall GdiGradientFill( HDC hdc,
                                                            PTRIVERTEX pVertex,
                                             ULONG nVertex,
                                             PVOID pMesh,
                                             ULONG nCount,
                                             ULONG ulMode);







          BOOL __stdcall PlayMetaFileRecord( HDC hdc,
                                                               LPHANDLETABLE lpHandleTable,
                                                 LPMETARECORD lpMR,
                                                 UINT noObjs);

typedef int (__stdcall* MFENUMPROC)( HDC hdc, HANDLETABLE * lpht, METARECORD * lpMR, int nObj, LPARAM param);
          BOOL __stdcall EnumMetaFile( HDC hdc, HMETAFILE hmf, MFENUMPROC proc, LPARAM param);

typedef int (__stdcall* ENHMFENUMPROC)( HDC hdc, HANDLETABLE * lpht, const ENHMETARECORD * lpmr, int nHandles, LPARAM data);



          HENHMETAFILE __stdcall CloseEnhMetaFile( HDC hdc);
          HENHMETAFILE __stdcall CopyEnhMetaFileA( HENHMETAFILE hEnh, LPCSTR lpFileName);
          HENHMETAFILE __stdcall CopyEnhMetaFileW( HENHMETAFILE hEnh, LPCWSTR lpFileName);





          HDC __stdcall CreateEnhMetaFileA( HDC hdc, LPCSTR lpFilename, const RECT *lprc, LPCSTR lpDesc);
          HDC __stdcall CreateEnhMetaFileW( HDC hdc, LPCWSTR lpFilename, const RECT *lprc, LPCWSTR lpDesc);





          BOOL __stdcall DeleteEnhMetaFile( HENHMETAFILE hmf);
          BOOL __stdcall EnumEnhMetaFile( HDC hdc, HENHMETAFILE hmf, ENHMFENUMPROC proc,
                                                 LPVOID param, const RECT * lpRect);
          HENHMETAFILE __stdcall GetEnhMetaFileA( LPCSTR lpName);
          HENHMETAFILE __stdcall GetEnhMetaFileW( LPCWSTR lpName);





          UINT __stdcall GetEnhMetaFileBits( HENHMETAFILE hEMF,
                                                 UINT nSize,
                                                                          LPBYTE lpData);
          UINT __stdcall GetEnhMetaFileDescriptionA( HENHMETAFILE hemf,
                                                         UINT cchBuffer,
                                                                                LPSTR lpDescription);
          UINT __stdcall GetEnhMetaFileDescriptionW( HENHMETAFILE hemf,
                                                         UINT cchBuffer,
                                                                                LPWSTR lpDescription);





          UINT __stdcall GetEnhMetaFileHeader( HENHMETAFILE hemf,
                                                     UINT nSize,
                                                                              LPENHMETAHEADER lpEnhMetaHeader);
          UINT __stdcall GetEnhMetaFilePaletteEntries( HENHMETAFILE hemf,
                                                         UINT nNumEntries,
                                                                                  LPPALETTEENTRY lpPaletteEntries);

          UINT __stdcall GetEnhMetaFilePixelFormat( HENHMETAFILE hemf,
                                                         UINT cbBuffer,
                                                                                     PIXELFORMATDESCRIPTOR *ppfd);
          UINT __stdcall GetWinMetaFileBits( HENHMETAFILE hemf,
                                                 UINT cbData16,
                                                                             LPBYTE pData16,
                                                 INT iMapMode,
                                                 HDC hdcRef);
          BOOL __stdcall PlayEnhMetaFile( HDC hdc, HENHMETAFILE hmf, const RECT * lprect);
          BOOL __stdcall PlayEnhMetaFileRecord( HDC hdc,
                                                                LPHANDLETABLE pht,
                                                     const ENHMETARECORD *pmr,
                                                     UINT cht);

          HENHMETAFILE __stdcall SetEnhMetaFileBits( UINT nSize,
                                                                            const BYTE * pb);

          HENHMETAFILE __stdcall SetWinMetaFileBits( UINT nSize,
                                                                            const BYTE *lpMeta16Data,
                                                             HDC hdcRef,
                                                             const METAFILEPICT *lpMFP);
          BOOL __stdcall GdiComment( HDC hdc, UINT nSize, const BYTE *lpData);





          BOOL __stdcall GetTextMetricsA( HDC hdc, LPTEXTMETRICA lptm);
          BOOL __stdcall GetTextMetricsW( HDC hdc, LPTEXTMETRICW lptm);
#line 4831 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wingdi.h"
typedef struct tagDIBSECTION {
    BITMAP dsBm;
    BITMAPINFOHEADER dsBmih;
    DWORD dsBitfields[3];
    HANDLE dshSection;
    DWORD dsOffset;
} DIBSECTION, *LPDIBSECTION, *PDIBSECTION;


          BOOL __stdcall AngleArc( HDC hdc, int x, int y, DWORD r, FLOAT StartAngle, FLOAT SweepAngle);
          BOOL __stdcall PolyPolyline( HDC hdc, const POINT *apt, const DWORD *asz, DWORD csz);
          BOOL __stdcall GetWorldTransform( HDC hdc, LPXFORM lpxf);
          BOOL __stdcall SetWorldTransform( HDC hdc, const XFORM * lpxf);
          BOOL __stdcall ModifyWorldTransform( HDC hdc, const XFORM * lpxf, DWORD mode);
          BOOL __stdcall CombineTransform( LPXFORM lpxfOut, const XFORM *lpxf1, const XFORM *lpxf2);






                                    HBITMAP __stdcall CreateDIBSection(
                    HDC hdc,
                    const BITMAPINFO *pbmi,
                    UINT usage,


                    void **ppvBits,
                    HANDLE hSection,
                    DWORD offset);



          UINT __stdcall GetDIBColorTable( HDC hdc,
                                             UINT iStart,
                                             UINT cEntries,
                                                                         RGBQUAD *prgbq);
          UINT __stdcall SetDIBColorTable( HDC hdc,
                                             UINT iStart,
                                             UINT cEntries,
                                                             const RGBQUAD *prgbq);
#line 4908 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wingdi.h"
typedef struct tagCOLORADJUSTMENT {
    WORD caSize;
    WORD caFlags;
    WORD caIlluminantIndex;
    WORD caRedGamma;
    WORD caGreenGamma;
    WORD caBlueGamma;
    WORD caReferenceBlack;
    WORD caReferenceWhite;
    SHORT caContrast;
    SHORT caBrightness;
    SHORT caColorfulness;
    SHORT caRedGreenTint;
} COLORADJUSTMENT, *PCOLORADJUSTMENT, *LPCOLORADJUSTMENT;

          BOOL __stdcall SetColorAdjustment( HDC hdc, const COLORADJUSTMENT *lpca);
          BOOL __stdcall GetColorAdjustment( HDC hdc, LPCOLORADJUSTMENT lpca);
          HPALETTE __stdcall CreateHalftonePalette( HDC hdc);


typedef BOOL (__stdcall* ABORTPROC)( HDC, int);




typedef struct _DOCINFOA {
    int cbSize;
    LPCSTR lpszDocName;
    LPCSTR lpszOutput;

    LPCSTR lpszDatatype;
    DWORD fwType;

} DOCINFOA, *LPDOCINFOA;
typedef struct _DOCINFOW {
    int cbSize;
    LPCWSTR lpszDocName;
    LPCWSTR lpszOutput;

    LPCWSTR lpszDatatype;
    DWORD fwType;

} DOCINFOW, *LPDOCINFOW;

typedef DOCINFOW DOCINFO;
typedef LPDOCINFOW LPDOCINFO;
#line 4964 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wingdi.h"
           int __stdcall StartDocA( HDC hdc, const DOCINFOA *lpdi);
           int __stdcall StartDocW( HDC hdc, const DOCINFOW *lpdi);





           int __stdcall EndDoc( HDC hdc);
           int __stdcall StartPage( HDC hdc);
           int __stdcall EndPage( HDC hdc);
           int __stdcall AbortDoc( HDC hdc);
          int __stdcall SetAbortProc( HDC hdc, ABORTPROC proc);

          BOOL __stdcall AbortPath( HDC hdc);
          BOOL __stdcall ArcTo( HDC hdc, int left, int top, int right, int bottom, int xr1, int yr1, int xr2, int yr2);
          BOOL __stdcall BeginPath( HDC hdc);
          BOOL __stdcall CloseFigure( HDC hdc);
          BOOL __stdcall EndPath( HDC hdc);
          BOOL __stdcall FillPath( HDC hdc);
          BOOL __stdcall FlattenPath( HDC hdc);
          int __stdcall GetPath( HDC hdc, LPPOINT apt, LPBYTE aj, int cpt);
          HRGN __stdcall PathToRegion( HDC hdc);
          BOOL __stdcall PolyDraw( HDC hdc, const POINT * apt, const BYTE * aj, int cpt);
          BOOL __stdcall SelectClipPath( HDC hdc, int mode);
          int __stdcall SetArcDirection( HDC hdc, int dir);
          BOOL __stdcall SetMiterLimit( HDC hdc, FLOAT limit, PFLOAT old);
          BOOL __stdcall StrokeAndFillPath( HDC hdc);
          BOOL __stdcall StrokePath( HDC hdc);
          BOOL __stdcall WidenPath( HDC hdc);
          HPEN __stdcall ExtCreatePen( DWORD iPenStyle,
                                         DWORD cWidth,
                                         const LOGBRUSH *plbrush,
                                         DWORD cStyle,
                                                           const DWORD *pstyle);
          BOOL __stdcall GetMiterLimit( HDC hdc, PFLOAT plimit);
          int __stdcall GetArcDirection( HDC hdc);

          int __stdcall GetObjectA( HANDLE h, int c, LPVOID pv);
          int __stdcall GetObjectW( HANDLE h, int c, LPVOID pv);
#line 5031 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wingdi.h"
           BOOL __stdcall MoveToEx( HDC hdc, int x, int y, LPPOINT lppt);
           BOOL __stdcall TextOutA( HDC hdc, int x, int y, LPCSTR lpString, int c);
           BOOL __stdcall TextOutW( HDC hdc, int x, int y, LPCWSTR lpString, int c);





           BOOL __stdcall ExtTextOutA( HDC hdc, int x, int y, UINT options, const RECT * lprect, LPCSTR lpString, UINT c, const INT * lpDx);
           BOOL __stdcall ExtTextOutW( HDC hdc, int x, int y, UINT options, const RECT * lprect, LPCWSTR lpString, UINT c, const INT * lpDx);





          BOOL __stdcall PolyTextOutA( HDC hdc, const POLYTEXTA * ppt, int nstrings);
          BOOL __stdcall PolyTextOutW( HDC hdc, const POLYTEXTW * ppt, int nstrings);






          HRGN __stdcall CreatePolygonRgn( const POINT *pptl,
                                                 int cPoint,
                                                 int iMode);
          BOOL __stdcall DPtoLP( HDC hdc, LPPOINT lppt, int c);
          BOOL __stdcall LPtoDP( HDC hdc, LPPOINT lppt, int c);
           BOOL __stdcall Polygon( HDC hdc, const POINT *apt, int cpt);
           BOOL __stdcall Polyline( HDC hdc, const POINT *apt, int cpt);

          BOOL __stdcall PolyBezier( HDC hdc, const POINT * apt, DWORD cpt);
          BOOL __stdcall PolyBezierTo( HDC hdc, const POINT * apt, DWORD cpt);
          BOOL __stdcall PolylineTo( HDC hdc, const POINT * apt, DWORD cpt);

           BOOL __stdcall SetViewportExtEx( HDC hdc, int x, int y, LPSIZE lpsz);
           BOOL __stdcall SetViewportOrgEx( HDC hdc, int x, int y, LPPOINT lppt);
           BOOL __stdcall SetWindowExtEx( HDC hdc, int x, int y, LPSIZE lpsz);
           BOOL __stdcall SetWindowOrgEx( HDC hdc, int x, int y, LPPOINT lppt);

           BOOL __stdcall OffsetViewportOrgEx( HDC hdc, int x, int y, LPPOINT lppt);
           BOOL __stdcall OffsetWindowOrgEx( HDC hdc, int x, int y, LPPOINT lppt);
           BOOL __stdcall ScaleViewportExtEx( HDC hdc, int xn, int dx, int yn, int yd, LPSIZE lpsz);
           BOOL __stdcall ScaleWindowExtEx( HDC hdc, int xn, int xd, int yn, int yd, LPSIZE lpsz);
          BOOL __stdcall SetBitmapDimensionEx( HBITMAP hbm, int w, int h, LPSIZE lpsz);
          BOOL __stdcall SetBrushOrgEx( HDC hdc, int x, int y, LPPOINT lppt);
#line 5085 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wingdi.h"
          int __stdcall GetTextFaceA( HDC hdc, int c, LPSTR lpName);
          int __stdcall GetTextFaceW( HDC hdc, int c, LPWSTR lpName);
#line 5095 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wingdi.h"
typedef struct tagKERNINGPAIR {
   WORD wFirst;
   WORD wSecond;
   int iKernAmount;
} KERNINGPAIR, *LPKERNINGPAIR;

          DWORD __stdcall GetKerningPairsA( HDC hdc,
                                                 DWORD nPairs,
                                                                                LPKERNINGPAIR lpKernPair);
          DWORD __stdcall GetKerningPairsW( HDC hdc,
                                                 DWORD nPairs,
                                                                                LPKERNINGPAIR lpKernPair);







          BOOL __stdcall GetDCOrgEx( HDC hdc, LPPOINT lppt);
          BOOL __stdcall FixBrushOrgEx( HDC hdc, int x, int y, LPPOINT ptl);
          BOOL __stdcall UnrealizeObject( HGDIOBJ h);

          BOOL __stdcall GdiFlush(void);
          DWORD __stdcall GdiSetBatchLimit( DWORD dw);
          DWORD __stdcall GdiGetBatchLimit(void);
#line 5129 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wingdi.h"
typedef int (__stdcall* ICMENUMPROCA)(LPSTR, LPARAM);
typedef int (__stdcall* ICMENUMPROCW)(LPWSTR, LPARAM);






          int __stdcall SetICMMode( HDC hdc, int mode);
          BOOL __stdcall CheckColorsInGamut( HDC hdc,
                                                                       LPRGBTRIPLE lpRGBTriple,
                                                                               LPVOID dlpBuffer,
                                                         DWORD nCount);

          HCOLORSPACE __stdcall GetColorSpace( HDC hdc);
          BOOL __stdcall GetLogColorSpaceA( HCOLORSPACE hColorSpace,
                                                                          LPLOGCOLORSPACEA lpBuffer,
                                                     DWORD nSize);
          BOOL __stdcall GetLogColorSpaceW( HCOLORSPACE hColorSpace,
                                                                          LPLOGCOLORSPACEW lpBuffer,
                                                     DWORD nSize);






          HCOLORSPACE __stdcall CreateColorSpaceA( LPLOGCOLORSPACEA lplcs);
          HCOLORSPACE __stdcall CreateColorSpaceW( LPLOGCOLORSPACEW lplcs);





          HCOLORSPACE __stdcall SetColorSpace( HDC hdc, HCOLORSPACE hcs);
          BOOL __stdcall DeleteColorSpace( HCOLORSPACE hcs);
          BOOL __stdcall GetICMProfileA( HDC hdc,
                                                        LPDWORD pBufSize,
                                                                            LPSTR pszFilename);
          BOOL __stdcall GetICMProfileW( HDC hdc,
                                                        LPDWORD pBufSize,
                                                                            LPWSTR pszFilename);






          BOOL __stdcall SetICMProfileA( HDC hdc, LPSTR lpFileName);
          BOOL __stdcall SetICMProfileW( HDC hdc, LPWSTR lpFileName);





          BOOL __stdcall GetDeviceGammaRamp( HDC hdc, LPVOID lpRamp);
          BOOL __stdcall SetDeviceGammaRamp( HDC hdc, LPVOID lpRamp);
          BOOL __stdcall ColorMatchToTarget( HDC hdc, HDC hdcTarget, DWORD action);
          int __stdcall EnumICMProfilesA( HDC hdc, ICMENUMPROCA proc, LPARAM param);
          int __stdcall EnumICMProfilesW( HDC hdc, ICMENUMPROCW proc, LPARAM param);






          BOOL __stdcall UpdateICMRegKeyA( DWORD reserved, LPSTR lpszCMID, LPSTR lpszFileName, UINT command);

          BOOL __stdcall UpdateICMRegKeyW( DWORD reserved, LPWSTR lpszCMID, LPWSTR lpszFileName, UINT command);





#pragma deprecated (UpdateICMRegKeyW)
#pragma deprecated (UpdateICMRegKeyA)




 BOOL __stdcall ColorCorrectPalette( HDC hdc, HPALETTE hPal, DWORD deFirst, DWORD num);
#line 5374 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wingdi.h"
typedef struct tagEMR
{
    DWORD iType;
    DWORD nSize;

} EMR, *PEMR;



typedef struct tagEMRTEXT
{
    POINTL ptlReference;
    DWORD nChars;
    DWORD offString;
    DWORD fOptions;
    RECTL rcl;
    DWORD offDx;

} EMRTEXT, *PEMRTEXT;



typedef struct tagABORTPATH
{
    EMR emr;
} EMRABORTPATH, *PEMRABORTPATH,
  EMRBEGINPATH, *PEMRBEGINPATH,
  EMRENDPATH, *PEMRENDPATH,
  EMRCLOSEFIGURE, *PEMRCLOSEFIGURE,
  EMRFLATTENPATH, *PEMRFLATTENPATH,
  EMRWIDENPATH, *PEMRWIDENPATH,
  EMRSETMETARGN, *PEMRSETMETARGN,
  EMRSAVEDC, *PEMRSAVEDC,
  EMRREALIZEPALETTE, *PEMRREALIZEPALETTE;

typedef struct tagEMRSELECTCLIPPATH
{
    EMR emr;
    DWORD iMode;
} EMRSELECTCLIPPATH, *PEMRSELECTCLIPPATH,
  EMRSETBKMODE, *PEMRSETBKMODE,
  EMRSETMAPMODE, *PEMRSETMAPMODE,

  EMRSETLAYOUT, *PEMRSETLAYOUT,

  EMRSETPOLYFILLMODE, *PEMRSETPOLYFILLMODE,
  EMRSETROP2, *PEMRSETROP2,
  EMRSETSTRETCHBLTMODE, *PEMRSETSTRETCHBLTMODE,
  EMRSETICMMODE, *PEMRSETICMMODE,
  EMRSETTEXTALIGN, *PEMRSETTEXTALIGN;

typedef struct tagEMRSETMITERLIMIT
{
    EMR emr;
    FLOAT eMiterLimit;
} EMRSETMITERLIMIT, *PEMRSETMITERLIMIT;

typedef struct tagEMRRESTOREDC
{
    EMR emr;
    LONG iRelative;
} EMRRESTOREDC, *PEMRRESTOREDC;

typedef struct tagEMRSETARCDIRECTION
{
    EMR emr;
    DWORD iArcDirection;

} EMRSETARCDIRECTION, *PEMRSETARCDIRECTION;

typedef struct tagEMRSETMAPPERFLAGS
{
    EMR emr;
    DWORD dwFlags;
} EMRSETMAPPERFLAGS, *PEMRSETMAPPERFLAGS;

typedef struct tagEMRSETTEXTCOLOR
{
    EMR emr;
    COLORREF crColor;
} EMRSETBKCOLOR, *PEMRSETBKCOLOR,
  EMRSETTEXTCOLOR, *PEMRSETTEXTCOLOR;

typedef struct tagEMRSELECTOBJECT
{
    EMR emr;
    DWORD ihObject;
} EMRSELECTOBJECT, *PEMRSELECTOBJECT,
  EMRDELETEOBJECT, *PEMRDELETEOBJECT;

typedef struct tagEMRSELECTPALETTE
{
    EMR emr;
    DWORD ihPal;
} EMRSELECTPALETTE, *PEMRSELECTPALETTE;

typedef struct tagEMRRESIZEPALETTE
{
    EMR emr;
    DWORD ihPal;
    DWORD cEntries;
} EMRRESIZEPALETTE, *PEMRRESIZEPALETTE;

typedef struct tagEMRSETPALETTEENTRIES
{
    EMR emr;
    DWORD ihPal;
    DWORD iStart;
    DWORD cEntries;
    PALETTEENTRY aPalEntries[1];
} EMRSETPALETTEENTRIES, *PEMRSETPALETTEENTRIES;

typedef struct tagEMRSETCOLORADJUSTMENT
{
    EMR emr;
    COLORADJUSTMENT ColorAdjustment;
} EMRSETCOLORADJUSTMENT, *PEMRSETCOLORADJUSTMENT;

typedef struct tagEMRGDICOMMENT
{
    EMR emr;
    DWORD cbData;
    BYTE Data[1];
} EMRGDICOMMENT, *PEMRGDICOMMENT;

typedef struct tagEMREOF
{
    EMR emr;
    DWORD nPalEntries;
    DWORD offPalEntries;
    DWORD nSizeLast;


} EMREOF, *PEMREOF;

typedef struct tagEMRLINETO
{
    EMR emr;
    POINTL ptl;
} EMRLINETO, *PEMRLINETO,
  EMRMOVETOEX, *PEMRMOVETOEX;

typedef struct tagEMROFFSETCLIPRGN
{
    EMR emr;
    POINTL ptlOffset;
} EMROFFSETCLIPRGN, *PEMROFFSETCLIPRGN;

typedef struct tagEMRFILLPATH
{
    EMR emr;
    RECTL rclBounds;
} EMRFILLPATH, *PEMRFILLPATH,
  EMRSTROKEANDFILLPATH, *PEMRSTROKEANDFILLPATH,
  EMRSTROKEPATH, *PEMRSTROKEPATH;

typedef struct tagEMREXCLUDECLIPRECT
{
    EMR emr;
    RECTL rclClip;
} EMREXCLUDECLIPRECT, *PEMREXCLUDECLIPRECT,
  EMRINTERSECTCLIPRECT, *PEMRINTERSECTCLIPRECT;

typedef struct tagEMRSETVIEWPORTORGEX
{
    EMR emr;
    POINTL ptlOrigin;
} EMRSETVIEWPORTORGEX, *PEMRSETVIEWPORTORGEX,
  EMRSETWINDOWORGEX, *PEMRSETWINDOWORGEX,
  EMRSETBRUSHORGEX, *PEMRSETBRUSHORGEX;

typedef struct tagEMRSETVIEWPORTEXTEX
{
    EMR emr;
    SIZEL szlExtent;
} EMRSETVIEWPORTEXTEX, *PEMRSETVIEWPORTEXTEX,
  EMRSETWINDOWEXTEX, *PEMRSETWINDOWEXTEX;

typedef struct tagEMRSCALEVIEWPORTEXTEX
{
    EMR emr;
    LONG xNum;
    LONG xDenom;
    LONG yNum;
    LONG yDenom;
} EMRSCALEVIEWPORTEXTEX, *PEMRSCALEVIEWPORTEXTEX,
  EMRSCALEWINDOWEXTEX, *PEMRSCALEWINDOWEXTEX;

typedef struct tagEMRSETWORLDTRANSFORM
{
    EMR emr;
    XFORM xform;
} EMRSETWORLDTRANSFORM, *PEMRSETWORLDTRANSFORM;

typedef struct tagEMRMODIFYWORLDTRANSFORM
{
    EMR emr;
    XFORM xform;
    DWORD iMode;
} EMRMODIFYWORLDTRANSFORM, *PEMRMODIFYWORLDTRANSFORM;

typedef struct tagEMRSETPIXELV
{
    EMR emr;
    POINTL ptlPixel;
    COLORREF crColor;
} EMRSETPIXELV, *PEMRSETPIXELV;

typedef struct tagEMREXTFLOODFILL
{
    EMR emr;
    POINTL ptlStart;
    COLORREF crColor;
    DWORD iMode;
} EMREXTFLOODFILL, *PEMREXTFLOODFILL;

typedef struct tagEMRELLIPSE
{
    EMR emr;
    RECTL rclBox;
} EMRELLIPSE, *PEMRELLIPSE,
  EMRRECTANGLE, *PEMRRECTANGLE;


typedef struct tagEMRROUNDRECT
{
    EMR emr;
    RECTL rclBox;
    SIZEL szlCorner;
} EMRROUNDRECT, *PEMRROUNDRECT;

typedef struct tagEMRARC
{
    EMR emr;
    RECTL rclBox;
    POINTL ptlStart;
    POINTL ptlEnd;
} EMRARC, *PEMRARC,
  EMRARCTO, *PEMRARCTO,
  EMRCHORD, *PEMRCHORD,
  EMRPIE, *PEMRPIE;

typedef struct tagEMRANGLEARC
{
    EMR emr;
    POINTL ptlCenter;
    DWORD nRadius;
    FLOAT eStartAngle;
    FLOAT eSweepAngle;
} EMRANGLEARC, *PEMRANGLEARC;

typedef struct tagEMRPOLYLINE
{
    EMR emr;
    RECTL rclBounds;
    DWORD cptl;
    POINTL aptl[1];
} EMRPOLYLINE, *PEMRPOLYLINE,
  EMRPOLYBEZIER, *PEMRPOLYBEZIER,
  EMRPOLYGON, *PEMRPOLYGON,
  EMRPOLYBEZIERTO, *PEMRPOLYBEZIERTO,
  EMRPOLYLINETO, *PEMRPOLYLINETO;

typedef struct tagEMRPOLYLINE16
{
    EMR emr;
    RECTL rclBounds;
    DWORD cpts;
    POINTS apts[1];
} EMRPOLYLINE16, *PEMRPOLYLINE16,
  EMRPOLYBEZIER16, *PEMRPOLYBEZIER16,
  EMRPOLYGON16, *PEMRPOLYGON16,
  EMRPOLYBEZIERTO16, *PEMRPOLYBEZIERTO16,
  EMRPOLYLINETO16, *PEMRPOLYLINETO16;

typedef struct tagEMRPOLYDRAW
{
    EMR emr;
    RECTL rclBounds;
    DWORD cptl;
    POINTL aptl[1];
    BYTE abTypes[1];
} EMRPOLYDRAW, *PEMRPOLYDRAW;

typedef struct tagEMRPOLYDRAW16
{
    EMR emr;
    RECTL rclBounds;
    DWORD cpts;
    POINTS apts[1];
    BYTE abTypes[1];
} EMRPOLYDRAW16, *PEMRPOLYDRAW16;

typedef struct tagEMRPOLYPOLYLINE
{
    EMR emr;
    RECTL rclBounds;
    DWORD nPolys;
    DWORD cptl;
    DWORD aPolyCounts[1];
    POINTL aptl[1];
} EMRPOLYPOLYLINE, *PEMRPOLYPOLYLINE,
  EMRPOLYPOLYGON, *PEMRPOLYPOLYGON;

typedef struct tagEMRPOLYPOLYLINE16
{
    EMR emr;
    RECTL rclBounds;
    DWORD nPolys;
    DWORD cpts;
    DWORD aPolyCounts[1];
    POINTS apts[1];
} EMRPOLYPOLYLINE16, *PEMRPOLYPOLYLINE16,
  EMRPOLYPOLYGON16, *PEMRPOLYPOLYGON16;

typedef struct tagEMRINVERTRGN
{
    EMR emr;
    RECTL rclBounds;
    DWORD cbRgnData;
    BYTE RgnData[1];
} EMRINVERTRGN, *PEMRINVERTRGN,
  EMRPAINTRGN, *PEMRPAINTRGN;

typedef struct tagEMRFILLRGN
{
    EMR emr;
    RECTL rclBounds;
    DWORD cbRgnData;
    DWORD ihBrush;
    BYTE RgnData[1];
} EMRFILLRGN, *PEMRFILLRGN;

typedef struct tagEMRFRAMERGN
{
    EMR emr;
    RECTL rclBounds;
    DWORD cbRgnData;
    DWORD ihBrush;
    SIZEL szlStroke;
    BYTE RgnData[1];
} EMRFRAMERGN, *PEMRFRAMERGN;

typedef struct tagEMREXTSELECTCLIPRGN
{
    EMR emr;
    DWORD cbRgnData;
    DWORD iMode;
    BYTE RgnData[1];
} EMREXTSELECTCLIPRGN, *PEMREXTSELECTCLIPRGN;

typedef struct tagEMREXTTEXTOUTA
{
    EMR emr;
    RECTL rclBounds;
    DWORD iGraphicsMode;
    FLOAT exScale;
    FLOAT eyScale;
    EMRTEXT emrtext;

} EMREXTTEXTOUTA, *PEMREXTTEXTOUTA,
  EMREXTTEXTOUTW, *PEMREXTTEXTOUTW;

typedef struct tagEMRPOLYTEXTOUTA
{
    EMR emr;
    RECTL rclBounds;
    DWORD iGraphicsMode;
    FLOAT exScale;
    FLOAT eyScale;
    LONG cStrings;
    EMRTEXT aemrtext[1];

} EMRPOLYTEXTOUTA, *PEMRPOLYTEXTOUTA,
  EMRPOLYTEXTOUTW, *PEMRPOLYTEXTOUTW;

typedef struct tagEMRBITBLT
{
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG cxDest;
    LONG cyDest;
    DWORD dwRop;
    LONG xSrc;
    LONG ySrc;
    XFORM xformSrc;
    COLORREF crBkColorSrc;
    DWORD iUsageSrc;

    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
} EMRBITBLT, *PEMRBITBLT;

typedef struct tagEMRSTRETCHBLT
{
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG cxDest;
    LONG cyDest;
    DWORD dwRop;
    LONG xSrc;
    LONG ySrc;
    XFORM xformSrc;
    COLORREF crBkColorSrc;
    DWORD iUsageSrc;

    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    LONG cxSrc;
    LONG cySrc;
} EMRSTRETCHBLT, *PEMRSTRETCHBLT;

typedef struct tagEMRMASKBLT
{
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG cxDest;
    LONG cyDest;
    DWORD dwRop;
    LONG xSrc;
    LONG ySrc;
    XFORM xformSrc;
    COLORREF crBkColorSrc;
    DWORD iUsageSrc;

    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    LONG xMask;
    LONG yMask;
    DWORD iUsageMask;
    DWORD offBmiMask;
    DWORD cbBmiMask;
    DWORD offBitsMask;
    DWORD cbBitsMask;
} EMRMASKBLT, *PEMRMASKBLT;

typedef struct tagEMRPLGBLT
{
    EMR emr;
    RECTL rclBounds;
    POINTL aptlDest[3];
    LONG xSrc;
    LONG ySrc;
    LONG cxSrc;
    LONG cySrc;
    XFORM xformSrc;
    COLORREF crBkColorSrc;
    DWORD iUsageSrc;

    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    LONG xMask;
    LONG yMask;
    DWORD iUsageMask;
    DWORD offBmiMask;
    DWORD cbBmiMask;
    DWORD offBitsMask;
    DWORD cbBitsMask;
} EMRPLGBLT, *PEMRPLGBLT;

typedef struct tagEMRSETDIBITSTODEVICE
{
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG xSrc;
    LONG ySrc;
    LONG cxSrc;
    LONG cySrc;
    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    DWORD iUsageSrc;
    DWORD iStartScan;
    DWORD cScans;
} EMRSETDIBITSTODEVICE, *PEMRSETDIBITSTODEVICE;

typedef struct tagEMRSTRETCHDIBITS
{
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG xSrc;
    LONG ySrc;
    LONG cxSrc;
    LONG cySrc;
    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    DWORD iUsageSrc;
    DWORD dwRop;
    LONG cxDest;
    LONG cyDest;
} EMRSTRETCHDIBITS, *PEMRSTRETCHDIBITS;

typedef struct tagEMREXTCREATEFONTINDIRECTW
{
    EMR emr;
    DWORD ihFont;
    EXTLOGFONTW elfw;
} EMREXTCREATEFONTINDIRECTW, *PEMREXTCREATEFONTINDIRECTW;

typedef struct tagEMRCREATEPALETTE
{
    EMR emr;
    DWORD ihPal;
    LOGPALETTE lgpl;

} EMRCREATEPALETTE, *PEMRCREATEPALETTE;

typedef struct tagEMRCREATEPEN
{
    EMR emr;
    DWORD ihPen;
    LOGPEN lopn;
} EMRCREATEPEN, *PEMRCREATEPEN;

typedef struct tagEMREXTCREATEPEN
{
    EMR emr;
    DWORD ihPen;
    DWORD offBmi;
    DWORD cbBmi;


    DWORD offBits;
    DWORD cbBits;
    EXTLOGPEN32 elp;
} EMREXTCREATEPEN, *PEMREXTCREATEPEN;

typedef struct tagEMRCREATEBRUSHINDIRECT
{
    EMR emr;
    DWORD ihBrush;
    LOGBRUSH32 lb;

} EMRCREATEBRUSHINDIRECT, *PEMRCREATEBRUSHINDIRECT;

typedef struct tagEMRCREATEMONOBRUSH
{
    EMR emr;
    DWORD ihBrush;
    DWORD iUsage;
    DWORD offBmi;
    DWORD cbBmi;
    DWORD offBits;
    DWORD cbBits;
} EMRCREATEMONOBRUSH, *PEMRCREATEMONOBRUSH;

typedef struct tagEMRCREATEDIBPATTERNBRUSHPT
{
    EMR emr;
    DWORD ihBrush;
    DWORD iUsage;
    DWORD offBmi;
    DWORD cbBmi;


    DWORD offBits;
    DWORD cbBits;
} EMRCREATEDIBPATTERNBRUSHPT, *PEMRCREATEDIBPATTERNBRUSHPT;

typedef struct tagEMRFORMAT
{
    DWORD dSignature;
    DWORD nVersion;
    DWORD cbData;
    DWORD offData;

} EMRFORMAT, *PEMRFORMAT;



typedef struct tagEMRGLSRECORD
{
    EMR emr;
    DWORD cbData;
    BYTE Data[1];
} EMRGLSRECORD, *PEMRGLSRECORD;

typedef struct tagEMRGLSBOUNDEDRECORD
{
    EMR emr;
    RECTL rclBounds;
    DWORD cbData;
    BYTE Data[1];
} EMRGLSBOUNDEDRECORD, *PEMRGLSBOUNDEDRECORD;

typedef struct tagEMRPIXELFORMAT
{
    EMR emr;
    PIXELFORMATDESCRIPTOR pfd;
} EMRPIXELFORMAT, *PEMRPIXELFORMAT;

typedef struct tagEMRCREATECOLORSPACE
{
    EMR emr;
    DWORD ihCS;
    LOGCOLORSPACEA lcs;
} EMRCREATECOLORSPACE, *PEMRCREATECOLORSPACE;

typedef struct tagEMRSETCOLORSPACE
{
    EMR emr;
    DWORD ihCS;
} EMRSETCOLORSPACE, *PEMRSETCOLORSPACE,
  EMRSELECTCOLORSPACE, *PEMRSELECTCOLORSPACE,
  EMRDELETECOLORSPACE, *PEMRDELETECOLORSPACE;





typedef struct tagEMREXTESCAPE
{
    EMR emr;
    INT iEscape;
    INT cbEscData;
    BYTE EscData[1];
} EMREXTESCAPE, *PEMREXTESCAPE,
  EMRDRAWESCAPE, *PEMRDRAWESCAPE;

typedef struct tagEMRNAMEDESCAPE
{
    EMR emr;
    INT iEscape;
    INT cbDriver;
    INT cbEscData;
    BYTE EscData[1];
} EMRNAMEDESCAPE, *PEMRNAMEDESCAPE;



typedef struct tagEMRSETICMPROFILE
{
    EMR emr;
    DWORD dwFlags;
    DWORD cbName;
    DWORD cbData;
    BYTE Data[1];
} EMRSETICMPROFILE, *PEMRSETICMPROFILE,
  EMRSETICMPROFILEA, *PEMRSETICMPROFILEA,
  EMRSETICMPROFILEW, *PEMRSETICMPROFILEW;



typedef struct tagEMRCREATECOLORSPACEW
{
    EMR emr;
    DWORD ihCS;
    LOGCOLORSPACEW lcs;
    DWORD dwFlags;
    DWORD cbData;
    BYTE Data[1];
} EMRCREATECOLORSPACEW, *PEMRCREATECOLORSPACEW;



typedef struct tagCOLORMATCHTOTARGET
{
    EMR emr;
    DWORD dwAction;
    DWORD dwFlags;
    DWORD cbName;
    DWORD cbData;
    BYTE Data[1];
} EMRCOLORMATCHTOTARGET, *PEMRCOLORMATCHTOTARGET;

typedef struct tagCOLORCORRECTPALETTE
{
    EMR emr;
    DWORD ihPalette;
    DWORD nFirstEntry;
    DWORD nPalEntries;
    DWORD nReserved;
} EMRCOLORCORRECTPALETTE, *PEMRCOLORCORRECTPALETTE;

typedef struct tagEMRALPHABLEND
{
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG cxDest;
    LONG cyDest;
    DWORD dwRop;
    LONG xSrc;
    LONG ySrc;
    XFORM xformSrc;
    COLORREF crBkColorSrc;
    DWORD iUsageSrc;

    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    LONG cxSrc;
    LONG cySrc;
} EMRALPHABLEND, *PEMRALPHABLEND;

typedef struct tagEMRGRADIENTFILL
{
    EMR emr;
    RECTL rclBounds;
    DWORD nVer;
    DWORD nTri;
    ULONG ulMode;
    TRIVERTEX Ver[1];
}EMRGRADIENTFILL,*PEMRGRADIENTFILL;

typedef struct tagEMRTRANSPARENTBLT
{
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG cxDest;
    LONG cyDest;
    DWORD dwRop;
    LONG xSrc;
    LONG ySrc;
    XFORM xformSrc;
    COLORREF crBkColorSrc;
    DWORD iUsageSrc;

    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    LONG cxSrc;
    LONG cySrc;
} EMRTRANSPARENTBLT, *PEMRTRANSPARENTBLT;
#line 6142 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wingdi.h"
          BOOL __stdcall wglCopyContext(HGLRC, HGLRC, UINT);
          HGLRC __stdcall wglCreateContext(HDC);
          HGLRC __stdcall wglCreateLayerContext(HDC, int);
          BOOL __stdcall wglDeleteContext(HGLRC);
          HGLRC __stdcall wglGetCurrentContext(void);
          HDC __stdcall wglGetCurrentDC(void);
          PROC __stdcall wglGetProcAddress(LPCSTR);
          BOOL __stdcall wglMakeCurrent(HDC, HGLRC);
          BOOL __stdcall wglShareLists(HGLRC, HGLRC);
          BOOL __stdcall wglUseFontBitmapsA(HDC, DWORD, DWORD, DWORD);
          BOOL __stdcall wglUseFontBitmapsW(HDC, DWORD, DWORD, DWORD);





          BOOL __stdcall SwapBuffers(HDC);

typedef struct _POINTFLOAT {
    FLOAT x;
    FLOAT y;
} POINTFLOAT, *PPOINTFLOAT;

typedef struct _GLYPHMETRICSFLOAT {
    FLOAT gmfBlackBoxX;
    FLOAT gmfBlackBoxY;
    POINTFLOAT gmfptGlyphOrigin;
    FLOAT gmfCellIncX;
    FLOAT gmfCellIncY;
} GLYPHMETRICSFLOAT, *PGLYPHMETRICSFLOAT, *LPGLYPHMETRICSFLOAT;



          BOOL __stdcall wglUseFontOutlinesA(HDC, DWORD, DWORD, DWORD, FLOAT,
                                           FLOAT, int, LPGLYPHMETRICSFLOAT);
          BOOL __stdcall wglUseFontOutlinesW(HDC, DWORD, DWORD, DWORD, FLOAT,
                                           FLOAT, int, LPGLYPHMETRICSFLOAT);







typedef struct tagLAYERPLANEDESCRIPTOR {
    WORD nSize;
    WORD nVersion;
    DWORD dwFlags;
    BYTE iPixelType;
    BYTE cColorBits;
    BYTE cRedBits;
    BYTE cRedShift;
    BYTE cGreenBits;
    BYTE cGreenShift;
    BYTE cBlueBits;
    BYTE cBlueShift;
    BYTE cAlphaBits;
    BYTE cAlphaShift;
    BYTE cAccumBits;
    BYTE cAccumRedBits;
    BYTE cAccumGreenBits;
    BYTE cAccumBlueBits;
    BYTE cAccumAlphaBits;
    BYTE cDepthBits;
    BYTE cStencilBits;
    BYTE cAuxBuffers;
    BYTE iLayerPlane;
    BYTE bReserved;
    COLORREF crTransparent;
} LAYERPLANEDESCRIPTOR, *PLAYERPLANEDESCRIPTOR, *LPLAYERPLANEDESCRIPTOR;
#line 6261 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wingdi.h"
          BOOL __stdcall wglDescribeLayerPlane(HDC, int, int, UINT,
                                             LPLAYERPLANEDESCRIPTOR);
          int __stdcall wglSetLayerPaletteEntries(HDC, int, int, int,
                                                 const COLORREF *);
          int __stdcall wglGetLayerPaletteEntries(HDC, int, int, int,
                                                 COLORREF *);
          BOOL __stdcall wglRealizeLayerPalette(HDC, int, BOOL);
          BOOL __stdcall wglSwapLayerBuffers(HDC, UINT);



typedef struct _WGLSWAP
{
    HDC hdc;
    UINT uiFlags;
} WGLSWAP, *PWGLSWAP, *LPWGLSWAP;



          DWORD __stdcall wglSwapMultipleBuffers(UINT, const WGLSWAP *);




#pragma endregion



#pragma region Desktop Family




#pragma endregion
#line 6306 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wingdi.h"
#pragma option pop
#line 201 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\windows.h"

#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
#pragma option push -b -a8 -pc -A- -w-pun -w-inl
#line 59 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\stdarg.h"
#line 59 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"



#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\libloaderapi.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 713 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\libloaderapi.h"
#pragma option pop
#line 62 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"





#pragma region Desktop Family


typedef HANDLE HDWP;
typedef void MENUTEMPLATEA;
typedef void MENUTEMPLATEW;

typedef MENUTEMPLATEW MENUTEMPLATE;



typedef PVOID LPMENUTEMPLATEA;
typedef PVOID LPMENUTEMPLATEW;

typedef LPMENUTEMPLATEW LPMENUTEMPLATE;




typedef LRESULT (__stdcall* WNDPROC)(HWND, UINT, WPARAM, LPARAM);


#pragma endregion



#pragma region Application Family or OneCore Family


typedef INT_PTR (__stdcall* DLGPROC)(HWND, UINT, WPARAM, LPARAM);


#pragma endregion

#pragma region Desktop Family


typedef void (__stdcall* TIMERPROC)(HWND, UINT, UINT_PTR, DWORD);
typedef BOOL (__stdcall* GRAYSTRINGPROC)(HDC, LPARAM, int);
typedef BOOL (__stdcall* WNDENUMPROC)(HWND, LPARAM);
typedef LRESULT (__stdcall* HOOKPROC)(int code, WPARAM wParam, LPARAM lParam);
typedef void (__stdcall* SENDASYNCPROC)(HWND, UINT, ULONG_PTR, LRESULT);

typedef BOOL (__stdcall* PROPENUMPROCA)(HWND, LPCSTR, HANDLE);
typedef BOOL (__stdcall* PROPENUMPROCW)(HWND, LPCWSTR, HANDLE);

typedef BOOL (__stdcall* PROPENUMPROCEXA)(HWND, LPSTR, HANDLE, ULONG_PTR);
typedef BOOL (__stdcall* PROPENUMPROCEXW)(HWND, LPWSTR, HANDLE, ULONG_PTR);

typedef int (__stdcall* EDITWORDBREAKPROCA)(LPSTR lpch, int ichCurrent, int cch, int code);
typedef int (__stdcall* EDITWORDBREAKPROCW)(LPWSTR lpch, int ichCurrent, int cch, int code);


typedef BOOL (__stdcall* DRAWSTATEPROC)(HDC hdc, LPARAM lData, WPARAM wData, int cx, int cy);




#pragma endregion
#line 165 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
#pragma region Desktop Family



typedef PROPENUMPROCW PROPENUMPROC;
typedef PROPENUMPROCEXW PROPENUMPROCEX;
typedef EDITWORDBREAKPROCW EDITWORDBREAKPROC;
#line 180 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
typedef BOOL (__stdcall* NAMEENUMPROCA)(LPSTR, LPARAM);
typedef BOOL (__stdcall* NAMEENUMPROCW)(LPWSTR, LPARAM);

typedef NAMEENUMPROCA WINSTAENUMPROCA;
typedef NAMEENUMPROCA DESKTOPENUMPROCA;
typedef NAMEENUMPROCW WINSTAENUMPROCW;
typedef NAMEENUMPROCW DESKTOPENUMPROCW;
#line 202 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
typedef WINSTAENUMPROCW WINSTAENUMPROC;
typedef DESKTOPENUMPROCW DESKTOPENUMPROC;
#line 213 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
#pragma endregion
#line 277 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
#pragma region Desktop Family



int
__stdcall
wvsprintfA(
          LPSTR,
                                LPCSTR,
         va_list arglist);

int
__stdcall
wvsprintfW(
          LPWSTR,
                                LPCWSTR,
         va_list arglist);







int
__cdecl
wsprintfA(
          LPSTR,
                                LPCSTR,
    ...);

int
__cdecl
wsprintfW(
          LPWSTR,
                                LPCWSTR,
    ...);
#line 325 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
#pragma endregion
#line 831 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
#pragma region Desktop Family





typedef struct tagCBT_CREATEWNDA
{
    struct tagCREATESTRUCTA *lpcs;
    HWND hwndInsertAfter;
} CBT_CREATEWNDA, *LPCBT_CREATEWNDA;



typedef struct tagCBT_CREATEWNDW
{
    struct tagCREATESTRUCTW *lpcs;
    HWND hwndInsertAfter;
} CBT_CREATEWNDW, *LPCBT_CREATEWNDW;

typedef CBT_CREATEWNDW CBT_CREATEWND;
typedef LPCBT_CREATEWNDW LPCBT_CREATEWND;
#line 861 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
typedef struct tagCBTACTIVATESTRUCT
{
    BOOL fMouse;
    HWND hWndActive;
} CBTACTIVATESTRUCT, *LPCBTACTIVATESTRUCT;


#pragma endregion



#pragma region Desktop Family





typedef struct tagWTSSESSION_NOTIFICATION
{
    DWORD cbSize;
    DWORD dwSessionId;

} WTSSESSION_NOTIFICATION, *PWTSSESSION_NOTIFICATION;


#pragma endregion
#line 1026 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
#pragma region Desktop Family


typedef struct
{
    HWND hwnd;
    RECT rc;
} SHELLHOOKINFO, *LPSHELLHOOKINFO;




typedef struct tagEVENTMSG {
    UINT message;
    UINT paramL;
    UINT paramH;
    DWORD time;
    HWND hwnd;
} EVENTMSG, *PEVENTMSGMSG, *NPEVENTMSGMSG, *LPEVENTMSGMSG;

typedef struct tagEVENTMSG *PEVENTMSG, *NPEVENTMSG, *LPEVENTMSG;




typedef struct tagCWPSTRUCT {
    LPARAM lParam;
    WPARAM wParam;
    UINT message;
    HWND hwnd;
} CWPSTRUCT, *PCWPSTRUCT, *NPCWPSTRUCT, *LPCWPSTRUCT;





typedef struct tagCWPRETSTRUCT {
    LRESULT lResult;
    LPARAM lParam;
    WPARAM wParam;
    UINT message;
    HWND hwnd;
} CWPRETSTRUCT, *PCWPRETSTRUCT, *NPCWPRETSTRUCT, *LPCWPRETSTRUCT;




#pragma endregion
#line 1090 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
#pragma region Desktop Family





typedef struct tagKBDLLHOOKSTRUCT {
    DWORD vkCode;
    DWORD scanCode;
    DWORD flags;
    DWORD time;
    ULONG_PTR dwExtraInfo;
} KBDLLHOOKSTRUCT, *LPKBDLLHOOKSTRUCT, *PKBDLLHOOKSTRUCT;




typedef struct tagMSLLHOOKSTRUCT {
    POINT pt;
    DWORD mouseData;
    DWORD flags;
    DWORD time;
    ULONG_PTR dwExtraInfo;
} MSLLHOOKSTRUCT, *LPMSLLHOOKSTRUCT, *PMSLLHOOKSTRUCT;


#pragma endregion



#pragma region Desktop Family





typedef struct tagDEBUGHOOKINFO
{
    DWORD idThread;
    DWORD idThreadInstaller;
    LPARAM lParam;
    WPARAM wParam;
    int code;
} DEBUGHOOKINFO, *PDEBUGHOOKINFO, *NPDEBUGHOOKINFO, * LPDEBUGHOOKINFO;




typedef struct tagMOUSEHOOKSTRUCT {
    POINT pt;
    HWND hwnd;
    UINT wHitTestCode;
    ULONG_PTR dwExtraInfo;
} MOUSEHOOKSTRUCT, *LPMOUSEHOOKSTRUCT, *PMOUSEHOOKSTRUCT;
#line 1152 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
typedef struct tagMOUSEHOOKSTRUCTEX
{
    MOUSEHOOKSTRUCT ;
    DWORD mouseData;
} MOUSEHOOKSTRUCTEX, *LPMOUSEHOOKSTRUCTEX, *PMOUSEHOOKSTRUCTEX;







typedef struct tagHARDWAREHOOKSTRUCT {
    HWND hwnd;
    UINT message;
    WPARAM wParam;
    LPARAM lParam;
} HARDWAREHOOKSTRUCT, *LPHARDWAREHOOKSTRUCT, *PHARDWAREHOOKSTRUCT;



#pragma endregion
#line 1212 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
#pragma region Desktop Family



HKL
__stdcall
LoadKeyboardLayoutA(
         LPCSTR pwszKLID,
         UINT Flags);

HKL
__stdcall
LoadKeyboardLayoutW(
         LPCWSTR pwszKLID,
         UINT Flags);
#line 1236 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
HKL
__stdcall
ActivateKeyboardLayout(
         HKL hkl,
         UINT Flags);
#line 1252 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
int
__stdcall
ToUnicodeEx(
         UINT wVirtKey,
         UINT wScanCode,
                          const BYTE *lpKeyState,
                          LPWSTR pwszBuff,
         int cchBuff,
         UINT wFlags,
             HKL dwhkl);



BOOL
__stdcall
UnloadKeyboardLayout(
         HKL hkl);


BOOL
__stdcall
GetKeyboardLayoutNameA(
                                LPSTR pwszKLID);

BOOL
__stdcall
GetKeyboardLayoutNameW(
                                LPWSTR pwszKLID);
#line 1288 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
int
__stdcall
GetKeyboardLayoutList(
         int nBuff,
                                       HKL *lpList);


HKL
__stdcall
GetKeyboardLayout(
         DWORD idThread);





#pragma endregion



#pragma region Desktop Family


typedef struct tagMOUSEMOVEPOINT {
    int x;
    int y;
    DWORD time;
    ULONG_PTR dwExtraInfo;
} MOUSEMOVEPOINT, *PMOUSEMOVEPOINT, * LPMOUSEMOVEPOINT;


#pragma endregion







#pragma region Desktop Family



int
__stdcall
GetMouseMovePointsEx(
         UINT cbSize,
         LPMOUSEMOVEPOINT lppt,
                             LPMOUSEMOVEPOINT lpptBuf,
         int nBufPoints,
         DWORD resolution);


#pragma endregion
#line 1367 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
#pragma region Desktop Family



HDESK
__stdcall
CreateDesktopA(
         LPCSTR lpszDesktop,
               LPCSTR lpszDevice,
               DEVMODEA* pDevmode,
         DWORD dwFlags,
         ACCESS_MASK dwDesiredAccess,
             LPSECURITY_ATTRIBUTES lpsa);

HDESK
__stdcall
CreateDesktopW(
         LPCWSTR lpszDesktop,
               LPCWSTR lpszDevice,
               DEVMODEW* pDevmode,
         DWORD dwFlags,
         ACCESS_MASK dwDesiredAccess,
             LPSECURITY_ATTRIBUTES lpsa);







HDESK
__stdcall
CreateDesktopExA(
         LPCSTR lpszDesktop,
               LPCSTR lpszDevice,
               DEVMODEA* pDevmode,
         DWORD dwFlags,
         ACCESS_MASK dwDesiredAccess,
             LPSECURITY_ATTRIBUTES lpsa,
         ULONG ulHeapSize,
               PVOID pvoid);

HDESK
__stdcall
CreateDesktopExW(
         LPCWSTR lpszDesktop,
               LPCWSTR lpszDevice,
               DEVMODEW* pDevmode,
         DWORD dwFlags,
         ACCESS_MASK dwDesiredAccess,
             LPSECURITY_ATTRIBUTES lpsa,
         ULONG ulHeapSize,
               PVOID pvoid);







#pragma endregion




#pragma region Desktop Family



HDESK
__stdcall
OpenDesktopA(
         LPCSTR lpszDesktop,
         DWORD dwFlags,
         BOOL fInherit,
         ACCESS_MASK dwDesiredAccess);

HDESK
__stdcall
OpenDesktopW(
         LPCWSTR lpszDesktop,
         DWORD dwFlags,
         BOOL fInherit,
         ACCESS_MASK dwDesiredAccess);







HDESK
__stdcall
OpenInputDesktop(
         DWORD dwFlags,
         BOOL fInherit,
         ACCESS_MASK dwDesiredAccess);



BOOL
__stdcall
EnumDesktopsA(
             HWINSTA hwinsta,
         DESKTOPENUMPROCA lpEnumFunc,
         LPARAM lParam);

BOOL
__stdcall
EnumDesktopsW(
             HWINSTA hwinsta,
         DESKTOPENUMPROCW lpEnumFunc,
         LPARAM lParam);







BOOL
__stdcall
EnumDesktopWindows(
             HDESK hDesktop,
         WNDENUMPROC lpfn,
         LPARAM lParam);



BOOL
__stdcall
SwitchDesktop(
         HDESK hDesktop);



BOOL
__stdcall
SetThreadDesktop(
          HDESK hDesktop);


BOOL
__stdcall
CloseDesktop(
         HDESK hDesktop);


HDESK
__stdcall
GetThreadDesktop(
         DWORD dwThreadId);


#pragma endregion
#line 1553 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
#pragma region Desktop Family



HWINSTA
__stdcall
CreateWindowStationA(
             LPCSTR lpwinsta,
         DWORD dwFlags,
         ACCESS_MASK dwDesiredAccess,
             LPSECURITY_ATTRIBUTES lpsa);

HWINSTA
__stdcall
CreateWindowStationW(
             LPCWSTR lpwinsta,
         DWORD dwFlags,
         ACCESS_MASK dwDesiredAccess,
             LPSECURITY_ATTRIBUTES lpsa);







HWINSTA
__stdcall
OpenWindowStationA(
         LPCSTR lpszWinSta,
         BOOL fInherit,
         ACCESS_MASK dwDesiredAccess);

HWINSTA
__stdcall
OpenWindowStationW(
         LPCWSTR lpszWinSta,
         BOOL fInherit,
         ACCESS_MASK dwDesiredAccess);







BOOL
__stdcall
EnumWindowStationsA(
         WINSTAENUMPROCA lpEnumFunc,
         LPARAM lParam);

BOOL
__stdcall
EnumWindowStationsW(
         WINSTAENUMPROCW lpEnumFunc,
         LPARAM lParam);







BOOL
__stdcall
CloseWindowStation(
         HWINSTA hWinSta);


BOOL
__stdcall
SetProcessWindowStation(
         HWINSTA hWinSta);


HWINSTA
__stdcall
GetProcessWindowStation(
    void);


#pragma endregion





#pragma region Desktop Family



BOOL
__stdcall
SetUserObjectSecurity(
         HANDLE hObj,
         PSECURITY_INFORMATION pSIRequested,
         PSECURITY_DESCRIPTOR pSID);


BOOL
__stdcall
GetUserObjectSecurity(
         HANDLE hObj,
         PSECURITY_INFORMATION pSIRequested,
                                    PSECURITY_DESCRIPTOR pSID,
         DWORD nLength,
          LPDWORD lpnLengthNeeded);


#pragma endregion
#line 1674 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
#pragma region Desktop Family


typedef struct tagUSEROBJECTFLAGS {
    BOOL fInherit;
    BOOL fReserved;
    DWORD dwFlags;
} USEROBJECTFLAGS, *PUSEROBJECTFLAGS;


BOOL
__stdcall
GetUserObjectInformationA(
         HANDLE hObj,
         int nIndex,
                                    PVOID pvInfo,
         DWORD nLength,
              LPDWORD lpnLengthNeeded);

BOOL
__stdcall
GetUserObjectInformationW(
         HANDLE hObj,
         int nIndex,
                                    PVOID pvInfo,
         DWORD nLength,
              LPDWORD lpnLengthNeeded);







BOOL
__stdcall
SetUserObjectInformationA(
         HANDLE hObj,
         int nIndex,
                              PVOID pvInfo,
         DWORD nLength);

BOOL
__stdcall
SetUserObjectInformationW(
         HANDLE hObj,
         int nIndex,
                              PVOID pvInfo,
         DWORD nLength);







#pragma endregion



#pragma region Desktop Family



typedef struct tagWNDCLASSEXA {
    UINT cbSize;

    UINT style;
    WNDPROC lpfnWndProc;
    int cbClsExtra;
    int cbWndExtra;
    HINSTANCE hInstance;
    HICON hIcon;
    HCURSOR hCursor;
    HBRUSH hbrBackground;
    LPCSTR lpszMenuName;
    LPCSTR lpszClassName;

    HICON hIconSm;
} WNDCLASSEXA, *PWNDCLASSEXA, *NPWNDCLASSEXA, *LPWNDCLASSEXA;
typedef struct tagWNDCLASSEXW {
    UINT cbSize;

    UINT style;
    WNDPROC lpfnWndProc;
    int cbClsExtra;
    int cbWndExtra;
    HINSTANCE hInstance;
    HICON hIcon;
    HCURSOR hCursor;
    HBRUSH hbrBackground;
    LPCWSTR lpszMenuName;
    LPCWSTR lpszClassName;

    HICON hIconSm;
} WNDCLASSEXW, *PWNDCLASSEXW, *NPWNDCLASSEXW, *LPWNDCLASSEXW;

typedef WNDCLASSEXW WNDCLASSEX;
typedef PWNDCLASSEXW PWNDCLASSEX;
typedef NPWNDCLASSEXW NPWNDCLASSEX;
typedef LPWNDCLASSEXW LPWNDCLASSEX;
#line 1783 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
typedef struct tagWNDCLASSA {
    UINT style;
    WNDPROC lpfnWndProc;
    int cbClsExtra;
    int cbWndExtra;
    HINSTANCE hInstance;
    HICON hIcon;
    HCURSOR hCursor;
    HBRUSH hbrBackground;
    LPCSTR lpszMenuName;
    LPCSTR lpszClassName;
} WNDCLASSA, *PWNDCLASSA, *NPWNDCLASSA, *LPWNDCLASSA;
typedef struct tagWNDCLASSW {
    UINT style;
    WNDPROC lpfnWndProc;
    int cbClsExtra;
    int cbWndExtra;
    HINSTANCE hInstance;
    HICON hIcon;
    HCURSOR hCursor;
    HBRUSH hbrBackground;
    LPCWSTR lpszMenuName;
    LPCWSTR lpszClassName;
} WNDCLASSW, *PWNDCLASSW, *NPWNDCLASSW, *LPWNDCLASSW;

typedef WNDCLASSW WNDCLASS;
typedef PWNDCLASSW PWNDCLASS;
typedef NPWNDCLASSW NPWNDCLASS;
typedef LPWNDCLASSW LPWNDCLASS;
#line 1820 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
BOOL
__stdcall
IsHungAppWindow(
         HWND hwnd);




void
__stdcall
DisableProcessWindowsGhosting(
    void);



#pragma endregion




#pragma region Application Family or OneCore Family





typedef struct tagMSG {
    HWND hwnd;
    UINT message;
    WPARAM wParam;
    LPARAM lParam;
    DWORD time;
    POINT pt;



} MSG, *PMSG, *NPMSG, *LPMSG;


#pragma endregion
#line 1998 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
#pragma region Desktop Family





typedef struct tagMINMAXINFO {
    POINT ptReserved;
    POINT ptMaxSize;
    POINT ptMaxPosition;
    POINT ptMinTrackSize;
    POINT ptMaxTrackSize;
} MINMAXINFO, *PMINMAXINFO, *LPMINMAXINFO;


#pragma endregion
#line 2054 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
#pragma region Desktop Family





typedef struct tagCOPYDATASTRUCT {
    ULONG_PTR dwData;
    DWORD cbData;
                               PVOID lpData;
} COPYDATASTRUCT, *PCOPYDATASTRUCT;


typedef struct tagMDINEXTMENU
{
    HMENU hmenuIn;
    HMENU hmenuNext;
    HWND hwndNext;
} MDINEXTMENU, * PMDINEXTMENU, * LPMDINEXTMENU;



#pragma endregion
#line 2595 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
#pragma region Desktop Family



UINT
__stdcall
RegisterWindowMessageA(
         LPCSTR lpString);

UINT
__stdcall
RegisterWindowMessageW(
         LPCWSTR lpString);







#pragma endregion
#line 2637 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
#pragma region Desktop Family





typedef struct tagWINDOWPOS {
    HWND hwnd;
    HWND hwndInsertAfter;
    int x;
    int y;
    int cx;
    int cy;
    UINT flags;
} WINDOWPOS, *LPWINDOWPOS, *PWINDOWPOS;




typedef struct tagNCCALCSIZE_PARAMS {
    RECT rgrc[3];
    PWINDOWPOS lppos;
} NCCALCSIZE_PARAMS, *LPNCCALCSIZE_PARAMS;


#pragma endregion
#line 2713 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
#pragma region Desktop Family


typedef struct tagTRACKMOUSEEVENT {
    DWORD cbSize;
    DWORD dwFlags;
    HWND hwndTrack;
    DWORD dwHoverTime;
} TRACKMOUSEEVENT, *LPTRACKMOUSEEVENT;


BOOL
__stdcall
TrackMouseEvent(
            LPTRACKMOUSEEVENT lpEventTrack);


#pragma endregion
#line 2931 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
#pragma region Desktop Family



BOOL
__stdcall
DrawEdge(
         HDC hdc,
            LPRECT qrc,
         UINT edge,
         UINT grfFlags);


#pragma endregion
#line 2994 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
#pragma region Desktop Family



BOOL
__stdcall
DrawFrameControl(
         HDC,
            LPRECT,
         UINT,
         UINT);



#pragma endregion
#line 3024 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
#pragma region Desktop Family



BOOL
__stdcall
DrawCaption(
         HWND hwnd,
         HDC hdc,
         const RECT * lprect,
         UINT flags);



#pragma endregion




#pragma region Desktop Family



BOOL
__stdcall
DrawAnimatedRects(
             HWND hwnd,
         int idAni,
         const RECT *lprcFrom,
         const RECT *lprcTo);


#pragma endregion
#line 3126 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
#pragma region Desktop Family


typedef struct tagACCEL {

    BYTE fVirt;
    WORD key;
    WORD cmd;





} ACCEL, *LPACCEL;

typedef struct tagPAINTSTRUCT {
    HDC hdc;
    BOOL fErase;
    RECT rcPaint;
    BOOL fRestore;
    BOOL fIncUpdate;
    BYTE rgbReserved[32];
} PAINTSTRUCT, *PPAINTSTRUCT, *NPPAINTSTRUCT, *LPPAINTSTRUCT;

typedef struct tagCREATESTRUCTA {
    LPVOID lpCreateParams;
    HINSTANCE hInstance;
    HMENU hMenu;
    HWND hwndParent;
    int cy;
    int cx;
    int y;
    int x;
    LONG style;
    LPCSTR lpszName;
    LPCSTR lpszClass;
    DWORD dwExStyle;
} CREATESTRUCTA, *LPCREATESTRUCTA;
typedef struct tagCREATESTRUCTW {
    LPVOID lpCreateParams;
    HINSTANCE hInstance;
    HMENU hMenu;
    HWND hwndParent;
    int cy;
    int cx;
    int y;
    int x;
    LONG style;
    LPCWSTR lpszName;
    LPCWSTR lpszClass;
    DWORD dwExStyle;
} CREATESTRUCTW, *LPCREATESTRUCTW;

typedef CREATESTRUCTW CREATESTRUCT;
typedef LPCREATESTRUCTW LPCREATESTRUCT;





typedef struct tagWINDOWPLACEMENT {
    UINT length;
    UINT flags;
    UINT showCmd;
    POINT ptMinPosition;
    POINT ptMaxPosition;
    RECT rcNormalPosition;



} WINDOWPLACEMENT;
typedef WINDOWPLACEMENT *PWINDOWPLACEMENT, *LPWINDOWPLACEMENT;








#pragma endregion



#pragma region Application Family or OneCore Family


typedef struct tagNMHDR
{
    HWND hwndFrom;
    UINT_PTR idFrom;
    UINT code;
} NMHDR;


#pragma endregion

#pragma region Desktop Family


typedef NMHDR * LPNMHDR;

typedef struct tagSTYLESTRUCT
{
    DWORD styleOld;
    DWORD styleNew;
} STYLESTRUCT, * LPSTYLESTRUCT;


#pragma endregion
#line 3278 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
#pragma region Desktop Family





typedef struct tagMEASUREITEMSTRUCT {
    UINT CtlType;
    UINT CtlID;
    UINT itemID;
    UINT itemWidth;
    UINT itemHeight;
    ULONG_PTR itemData;
} MEASUREITEMSTRUCT, *PMEASUREITEMSTRUCT, *LPMEASUREITEMSTRUCT;




typedef struct tagDRAWITEMSTRUCT {
    UINT CtlType;
    UINT CtlID;
    UINT itemID;
    UINT itemAction;
    UINT itemState;
    HWND hwndItem;
    HDC hDC;
    RECT rcItem;
    ULONG_PTR itemData;
} DRAWITEMSTRUCT, *PDRAWITEMSTRUCT, *LPDRAWITEMSTRUCT;




typedef struct tagDELETEITEMSTRUCT {
    UINT CtlType;
    UINT CtlID;
    UINT itemID;
    HWND hwndItem;
    ULONG_PTR itemData;
} DELETEITEMSTRUCT, *PDELETEITEMSTRUCT, *LPDELETEITEMSTRUCT;




typedef struct tagCOMPAREITEMSTRUCT {
    UINT CtlType;
    UINT CtlID;
    HWND hwndItem;
    UINT itemID1;
    ULONG_PTR itemData1;
    UINT itemID2;
    ULONG_PTR itemData2;
    DWORD dwLocaleId;
} COMPAREITEMSTRUCT, *PCOMPAREITEMSTRUCT, *LPCOMPAREITEMSTRUCT;


#pragma endregion



#pragma region Desktop Family







BOOL
__stdcall
GetMessageA(
          LPMSG lpMsg,
             HWND hWnd,
         UINT wMsgFilterMin,
         UINT wMsgFilterMax);

BOOL
__stdcall
GetMessageW(
          LPMSG lpMsg,
             HWND hWnd,
         UINT wMsgFilterMin,
         UINT wMsgFilterMax);
#line 3393 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
BOOL
__stdcall
TranslateMessage(
         const MSG *lpMsg);


LRESULT
__stdcall
DispatchMessageA(
         const MSG *lpMsg);

LRESULT
__stdcall
DispatchMessageW(
         const MSG *lpMsg);
#line 3433 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
BOOL
__stdcall
SetMessageQueue(
         int cMessagesMax);


BOOL
__stdcall
PeekMessageA(
          LPMSG lpMsg,
             HWND hWnd,
         UINT wMsgFilterMin,
         UINT wMsgFilterMax,
         UINT wRemoveMsg);

BOOL
__stdcall
PeekMessageW(
          LPMSG lpMsg,
             HWND hWnd,
         UINT wMsgFilterMin,
         UINT wMsgFilterMax,
         UINT wRemoveMsg);







#pragma endregion
#line 3481 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
#pragma region Desktop Family



BOOL
__stdcall
RegisterHotKey(
             HWND hWnd,
         int id,
         UINT fsModifiers,
         UINT vk);


BOOL
__stdcall
UnregisterHotKey(
             HWND hWnd,
         int id);


#pragma endregion
#line 3558 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
#pragma region Desktop Family








BOOL
__stdcall
ExitWindowsEx(
         UINT uFlags,
         DWORD dwReason);


BOOL
__stdcall
SwapMouseButton(
         BOOL fSwap);


DWORD
__stdcall
GetMessagePos(
    void);


LONG
__stdcall
GetMessageTime(
    void);


LPARAM
__stdcall
GetMessageExtraInfo(
    void);
#line 3607 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
BOOL
__stdcall
IsWow64Message(
    void);




LPARAM
__stdcall
SetMessageExtraInfo(
         LPARAM lParam);



LRESULT
__stdcall
SendMessageA(
         HWND hWnd,
         UINT Msg,
                                 WPARAM wParam,
                                 LPARAM lParam);

LRESULT
__stdcall
SendMessageW(
         HWND hWnd,
         UINT Msg,
                                 WPARAM wParam,
                                 LPARAM lParam);
#line 3670 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
LRESULT
__stdcall
SendMessageTimeoutA(
         HWND hWnd,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam,
         UINT fuFlags,
         UINT uTimeout,
              PDWORD_PTR lpdwResult);

LRESULT
__stdcall
SendMessageTimeoutW(
         HWND hWnd,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam,
         UINT fuFlags,
         UINT uTimeout,
              PDWORD_PTR lpdwResult);







BOOL
__stdcall
SendNotifyMessageA(
         HWND hWnd,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);

BOOL
__stdcall
SendNotifyMessageW(
         HWND hWnd,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);







BOOL
__stdcall
SendMessageCallbackA(
         HWND hWnd,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam,
         SENDASYNCPROC lpResultCallBack,
         ULONG_PTR dwData);

BOOL
__stdcall
SendMessageCallbackW(
         HWND hWnd,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam,
         SENDASYNCPROC lpResultCallBack,
         ULONG_PTR dwData);







typedef struct {
    UINT cbSize;
    HDESK hdesk;
    HWND hwnd;
    LUID luid;
} BSMINFO, *PBSMINFO;


long
__stdcall
BroadcastSystemMessageExA(
         DWORD flags,
                LPDWORD lpInfo,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam,
              PBSMINFO pbsmInfo);

long
__stdcall
BroadcastSystemMessageExW(
         DWORD flags,
                LPDWORD lpInfo,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam,
              PBSMINFO pbsmInfo);








#pragma endregion



#pragma region Desktop Family




long
__stdcall
BroadcastSystemMessageA(
         DWORD flags,
                LPDWORD lpInfo,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);

long
__stdcall
BroadcastSystemMessageW(
         DWORD flags,
                LPDWORD lpInfo,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);
#line 3827 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
#pragma endregion
#line 3859 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
#pragma region Desktop Family



typedef PVOID HDEVNOTIFY;
typedef HDEVNOTIFY *PHDEVNOTIFY;
#line 3873 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
HDEVNOTIFY
__stdcall
RegisterDeviceNotificationA(
         HANDLE hRecipient,
         LPVOID NotificationFilter,
         DWORD Flags);

HDEVNOTIFY
__stdcall
RegisterDeviceNotificationW(
         HANDLE hRecipient,
         LPVOID NotificationFilter,
         DWORD Flags);







BOOL
__stdcall
UnregisterDeviceNotification(
         HDEVNOTIFY Handle
    );
#line 3946 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
#pragma endregion

#pragma region Desktop Family



BOOL
__stdcall
PostMessageA(
             HWND hWnd,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);

BOOL
__stdcall
PostMessageW(
             HWND hWnd,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);







BOOL
__stdcall
PostThreadMessageA(
         DWORD idThread,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);

BOOL
__stdcall
PostThreadMessageW(
         DWORD idThread,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);







#pragma endregion
#line 4017 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
#pragma region Desktop Family



BOOL
__stdcall
AttachThreadInput(
         DWORD idAttach,
         DWORD idAttachTo,
         BOOL fAttach);



BOOL
__stdcall
ReplyMessage(
         LRESULT lResult);


BOOL
__stdcall
WaitMessage(
    void);






DWORD
__stdcall
WaitForInputIdle(
         HANDLE hProcess,
         DWORD dwMilliseconds);



LRESULT
__stdcall




DefWindowProcA(
         HWND hWnd,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);


LRESULT
__stdcall




DefWindowProcW(
         HWND hWnd,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);







void
__stdcall
PostQuitMessage(
         int nExitCode);




LRESULT
__stdcall
CallWindowProcA(
         WNDPROC lpPrevWndFunc,
         HWND hWnd,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);

LRESULT
__stdcall
CallWindowProcW(
         WNDPROC lpPrevWndFunc,
         HWND hWnd,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);
#line 4145 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
BOOL
__stdcall
InSendMessage(
    void);


#pragma endregion



#pragma region Desktop Family



DWORD
__stdcall
InSendMessageEx(
               LPVOID lpReserved);


#pragma endregion
#line 4178 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
#pragma region Desktop Family



UINT
__stdcall
GetDoubleClickTime(
    void);


BOOL
__stdcall
SetDoubleClickTime(
         UINT);


ATOM
__stdcall
RegisterClassA(
         const WNDCLASSA *lpWndClass);

ATOM
__stdcall
RegisterClassW(
         const WNDCLASSW *lpWndClass);







BOOL
__stdcall
UnregisterClassA(
         LPCSTR lpClassName,
             HINSTANCE hInstance);

BOOL
__stdcall
UnregisterClassW(
         LPCWSTR lpClassName,
             HINSTANCE hInstance);
#line 4229 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
BOOL
__stdcall
GetClassInfoA(
             HINSTANCE hInstance,
         LPCSTR lpClassName,
          LPWNDCLASSA lpWndClass);


BOOL
__stdcall
GetClassInfoW(
             HINSTANCE hInstance,
         LPCWSTR lpClassName,
          LPWNDCLASSW lpWndClass);
#line 4251 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
ATOM
__stdcall
RegisterClassExA(
         const WNDCLASSEXA *);

ATOM
__stdcall
RegisterClassExW(
         const WNDCLASSEXW *);
#line 4268 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
BOOL
__stdcall
GetClassInfoExA(
             HINSTANCE hInstance,
         LPCSTR lpszClass,
          LPWNDCLASSEXA lpwcx);


BOOL
__stdcall
GetClassInfoExW(
             HINSTANCE hInstance,
         LPCWSTR lpszClass,
          LPWNDCLASSEXW lpwcx);
#line 4291 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
#pragma endregion








#pragma region Desktop Family



typedef BOOLEAN (__stdcall * PREGISTERCLASSNAMEW)(LPCWSTR);



HWND
__stdcall
CreateWindowExA(
         DWORD dwExStyle,
             LPCSTR lpClassName,
             LPCSTR lpWindowName,
         DWORD dwStyle,
         int X,
         int Y,
         int nWidth,
         int nHeight,
             HWND hWndParent,
             HMENU hMenu,
             HINSTANCE hInstance,
             LPVOID lpParam);

HWND
__stdcall
CreateWindowExW(
         DWORD dwExStyle,
             LPCWSTR lpClassName,
             LPCWSTR lpWindowName,
         DWORD dwStyle,
         int X,
         int Y,
         int nWidth,
         int nHeight,
             HWND hWndParent,
             HMENU hMenu,
             HINSTANCE hInstance,
             LPVOID lpParam);







#pragma endregion
#line 4362 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
#pragma region Desktop Family




BOOL
__stdcall
IsWindow(
             HWND hWnd);



BOOL
__stdcall
IsMenu(
         HMENU hMenu);


BOOL
__stdcall
IsChild(
         HWND hWndParent,
         HWND hWnd);


BOOL
__stdcall
DestroyWindow(
         HWND hWnd);


BOOL
__stdcall
ShowWindow(
         HWND hWnd,
         int nCmdShow);



BOOL
__stdcall
AnimateWindow(
         HWND hWnd,
         DWORD dwTime,
         DWORD dwFlags);



#pragma endregion




#pragma region Desktop Family



BOOL
__stdcall
UpdateLayeredWindow(
         HWND hWnd,
             HDC hdcDst,
             POINT* pptDst,
             SIZE* psize,
             HDC hdcSrc,
             POINT* pptSrc,
         COLORREF crKey,
             BLENDFUNCTION* pblend,
         DWORD dwFlags);




typedef struct tagUPDATELAYEREDWINDOWINFO
{
    DWORD cbSize;
    HDC hdcDst;
    const POINT* pptDst;
    const SIZE* psize;
    HDC hdcSrc;
    const POINT* pptSrc;
    COLORREF crKey;
    const BLENDFUNCTION* pblend;
    DWORD dwFlags;
    const RECT* prcDirty;
} UPDATELAYEREDWINDOWINFO, *PUPDATELAYEREDWINDOWINFO;



typedef


BOOL
__stdcall
UpdateLayeredWindowIndirect(
         HWND hWnd,
         const UPDATELAYEREDWINDOWINFO* pULWInfo);


#pragma endregion





#pragma region Desktop Family



BOOL
__stdcall
GetLayeredWindowAttributes(
         HWND hwnd,
              COLORREF* pcrKey,
              BYTE* pbAlpha,
              DWORD* pdwFlags);
#line 4487 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
BOOL
__stdcall
PrintWindow(
         HWND hwnd,
         HDC hdcBlt,
         UINT nFlags);


#pragma endregion



#pragma region Desktop Family



BOOL
__stdcall
SetLayeredWindowAttributes(
         HWND hwnd,
         COLORREF crKey,
         BYTE bAlpha,
         DWORD dwFlags);


#pragma endregion
#line 4527 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
#pragma region Desktop Family





BOOL
__stdcall
ShowWindowAsync(
          HWND hWnd,
          int nCmdShow);



BOOL
__stdcall
FlashWindow(
          HWND hWnd,
          BOOL bInvert);


typedef struct {
    UINT cbSize;
    HWND hwnd;
    DWORD dwFlags;
    UINT uCount;
    DWORD dwTimeout;
} FLASHWINFO, *PFLASHWINFO;


BOOL
__stdcall
FlashWindowEx(
         PFLASHWINFO pfwi);
#line 4572 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
BOOL
__stdcall
ShowOwnedPopups(
          HWND hWnd,
          BOOL fShow);


BOOL
__stdcall
OpenIcon(
          HWND hWnd);


BOOL
__stdcall
CloseWindow(
          HWND hWnd);


BOOL
__stdcall
MoveWindow(
         HWND hWnd,
         int X,
         int Y,
         int nWidth,
         int nHeight,
         BOOL bRepaint);


BOOL
__stdcall
SetWindowPos(
         HWND hWnd,
             HWND hWndInsertAfter,
         int X,
         int Y,
         int cx,
         int cy,
         UINT uFlags);


BOOL
__stdcall
GetWindowPlacement(
         HWND hWnd,
            WINDOWPLACEMENT *lpwndpl);


BOOL
__stdcall
SetWindowPlacement(
         HWND hWnd,
         const WINDOWPLACEMENT *lpwndpl);
#line 4649 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
#pragma endregion



#pragma region Desktop Family



HDWP
__stdcall
BeginDeferWindowPos(
         int nNumWindows);


HDWP
__stdcall
DeferWindowPos(
         HDWP hWinPosInfo,
         HWND hWnd,
             HWND hWndInsertAfter,
         int x,
         int y,
         int cx,
         int cy,
         UINT uFlags);



BOOL
__stdcall
EndDeferWindowPos(
         HDWP hWinPosInfo);


#pragma endregion



#pragma region Desktop Family



BOOL
__stdcall
IsWindowVisible(
         HWND hWnd);


BOOL
__stdcall
IsIconic(
         HWND hWnd);


BOOL
__stdcall
AnyPopup(
    void);


BOOL
__stdcall
BringWindowToTop(
         HWND hWnd);


BOOL
__stdcall
IsZoomed(
         HWND hWnd);


#pragma endregion
#line 4759 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/pshpack2.h"
#line 26 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/pshpack2.h"
#pragma pack(push,2)
#line 4759 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"


#pragma region Application Family or OneCore Family





typedef struct {
    DWORD style;
    DWORD dwExtendedStyle;
    WORD cdit;
    short x;
    short y;
    short cx;
    short cy;
} DLGTEMPLATE;


#pragma endregion

#pragma region Desktop Family


typedef DLGTEMPLATE *LPDLGTEMPLATEA;
typedef DLGTEMPLATE *LPDLGTEMPLATEW;

typedef LPDLGTEMPLATEW LPDLGTEMPLATE;





#pragma endregion

#pragma region Application Family or OneCore Family


typedef const DLGTEMPLATE *LPCDLGTEMPLATEA;
typedef const DLGTEMPLATE *LPCDLGTEMPLATEW;

typedef LPCDLGTEMPLATEW LPCDLGTEMPLATE;





#pragma endregion


#pragma region Desktop Family





typedef struct {
    DWORD style;
    DWORD dwExtendedStyle;
    short x;
    short y;
    short cx;
    short cy;
    WORD id;
} DLGITEMTEMPLATE;
typedef DLGITEMTEMPLATE *PDLGITEMTEMPLATEA;
typedef DLGITEMTEMPLATE *PDLGITEMTEMPLATEW;

typedef PDLGITEMTEMPLATEW PDLGITEMTEMPLATE;



typedef DLGITEMTEMPLATE *LPDLGITEMTEMPLATEA;
typedef DLGITEMTEMPLATE *LPDLGITEMTEMPLATEW;

typedef LPDLGITEMTEMPLATEW LPDLGITEMTEMPLATE;





#pragma endregion



#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/poppack.h"
#line 29 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/poppack.h"
#pragma pack(pop)
#line 4843 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"


#pragma region Desktop Family



HWND
__stdcall
CreateDialogParamA(
             HINSTANCE hInstance,
         LPCSTR lpTemplateName,
             HWND hWndParent,
             DLGPROC lpDialogFunc,
         LPARAM dwInitParam);

HWND
__stdcall
CreateDialogParamW(
             HINSTANCE hInstance,
         LPCWSTR lpTemplateName,
             HWND hWndParent,
             DLGPROC lpDialogFunc,
         LPARAM dwInitParam);







HWND
__stdcall
CreateDialogIndirectParamA(
             HINSTANCE hInstance,
         LPCDLGTEMPLATEA lpTemplate,
             HWND hWndParent,
             DLGPROC lpDialogFunc,
         LPARAM dwInitParam);

HWND
__stdcall
CreateDialogIndirectParamW(
             HINSTANCE hInstance,
         LPCDLGTEMPLATEW lpTemplate,
             HWND hWndParent,
             DLGPROC lpDialogFunc,
         LPARAM dwInitParam);
#line 4917 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
INT_PTR
__stdcall
DialogBoxParamA(
             HINSTANCE hInstance,
         LPCSTR lpTemplateName,
             HWND hWndParent,
             DLGPROC lpDialogFunc,
         LPARAM dwInitParam);

INT_PTR
__stdcall
DialogBoxParamW(
             HINSTANCE hInstance,
         LPCWSTR lpTemplateName,
             HWND hWndParent,
             DLGPROC lpDialogFunc,
         LPARAM dwInitParam);







INT_PTR
__stdcall
DialogBoxIndirectParamA(
             HINSTANCE hInstance,
         LPCDLGTEMPLATEA hDialogTemplate,
             HWND hWndParent,
             DLGPROC lpDialogFunc,
         LPARAM dwInitParam);

INT_PTR
__stdcall
DialogBoxIndirectParamW(
             HINSTANCE hInstance,
         LPCDLGTEMPLATEW hDialogTemplate,
             HWND hWndParent,
             DLGPROC lpDialogFunc,
         LPARAM dwInitParam);
#line 4985 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
BOOL
__stdcall
EndDialog(
         HWND hDlg,
         INT_PTR nResult);


HWND
__stdcall
GetDlgItem(
             HWND hDlg,
         int nIDDlgItem);


BOOL
__stdcall
SetDlgItemInt(
         HWND hDlg,
         int nIDDlgItem,
         UINT uValue,
         BOOL bSigned);


UINT
__stdcall
GetDlgItemInt(
         HWND hDlg,
         int nIDDlgItem,
              BOOL *lpTranslated,
         BOOL bSigned);


BOOL
__stdcall
SetDlgItemTextA(
         HWND hDlg,
         int nIDDlgItem,
         LPCSTR lpString);

BOOL
__stdcall
SetDlgItemTextW(
         HWND hDlg,
         int nIDDlgItem,
         LPCWSTR lpString);
#line 5038 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
UINT
__stdcall
GetDlgItemTextA(
         HWND hDlg,
         int nIDDlgItem,
                         LPSTR lpString,
         int cchMax);


UINT
__stdcall
GetDlgItemTextW(
         HWND hDlg,
         int nIDDlgItem,
                         LPWSTR lpString,
         int cchMax);







BOOL
__stdcall
CheckDlgButton(
         HWND hDlg,
         int nIDButton,
         UINT uCheck);


BOOL
__stdcall
CheckRadioButton(
         HWND hDlg,
         int nIDFirstButton,
         int nIDLastButton,
         int nIDCheckButton);


UINT
__stdcall
IsDlgButtonChecked(
         HWND hDlg,
         int nIDButton);


LRESULT
__stdcall
SendDlgItemMessageA(
         HWND hDlg,
         int nIDDlgItem,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);

LRESULT
__stdcall
SendDlgItemMessageW(
         HWND hDlg,
         int nIDDlgItem,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);







HWND
__stdcall
GetNextDlgGroupItem(
         HWND hDlg,
             HWND hCtl,
         BOOL bPrevious);


HWND
__stdcall
GetNextDlgTabItem(
         HWND hDlg,
             HWND hCtl,
         BOOL bPrevious);


int
__stdcall
GetDlgCtrlID(
         HWND hWnd);


long
__stdcall
GetDialogBaseUnits(void);



LRESULT
__stdcall




DefDlgProcA(
         HWND hDlg,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);


LRESULT
__stdcall




DefDlgProcW(
         HWND hDlg,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);








#pragma endregion
#line 5182 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
#pragma region Desktop Family





BOOL
__stdcall
CallMsgFilterA(
         LPMSG lpMsg,
         int nCode);

BOOL
__stdcall
CallMsgFilterW(
         LPMSG lpMsg,
         int nCode);
#line 5214 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
BOOL
__stdcall
OpenClipboard(
             HWND hWndNewOwner);


BOOL
__stdcall
CloseClipboard(
    void);





DWORD
__stdcall
GetClipboardSequenceNumber(
    void);




HWND
__stdcall
GetClipboardOwner(
    void);


HWND
__stdcall
SetClipboardViewer(
         HWND hWndNewViewer);


HWND
__stdcall
GetClipboardViewer(
    void);


BOOL
__stdcall
ChangeClipboardChain(
         HWND hWndRemove,
         HWND hWndNewNext);


HANDLE
__stdcall
SetClipboardData(
         UINT uFormat,
             HANDLE hMem);


HANDLE
__stdcall
GetClipboardData(
         UINT uFormat);


UINT
__stdcall
RegisterClipboardFormatA(
         LPCSTR lpszFormat);

UINT
__stdcall
RegisterClipboardFormatW(
         LPCWSTR lpszFormat);







int
__stdcall
CountClipboardFormats(
    void);


UINT
__stdcall
EnumClipboardFormats(
         UINT format);


int
__stdcall
GetClipboardFormatNameA(
         UINT format,
                              LPSTR lpszFormatName,
         int cchMaxCount);

int
__stdcall
GetClipboardFormatNameW(
         UINT format,
                              LPWSTR lpszFormatName,
         int cchMaxCount);







BOOL
__stdcall
EmptyClipboard(
    void);


BOOL
__stdcall
IsClipboardFormatAvailable(
         UINT format);


int
__stdcall
GetPriorityClipboardFormat(
                         UINT *paFormatPriorityList,
         int cFormats);


HWND
__stdcall
GetOpenClipboardWindow(
    void);
#line 5376 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
BOOL
__stdcall
CharToOemA(
         LPCSTR pSrc,
                                                    LPSTR pDst);

BOOL
__stdcall
CharToOemW(
         LPCWSTR pSrc,
                                                    LPSTR pDst);
#line 5395 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
BOOL
__stdcall
OemToCharA(
         LPCSTR pSrc,
                                                    LPSTR pDst);


BOOL
__stdcall
OemToCharW(
         LPCSTR pSrc,
                                                    LPWSTR pDst);







BOOL
__stdcall
CharToOemBuffA(
         LPCSTR lpszSrc,
                               LPSTR lpszDst,
         DWORD cchDstLength);

BOOL
__stdcall
CharToOemBuffW(
         LPCWSTR lpszSrc,
                               LPSTR lpszDst,
         DWORD cchDstLength);







BOOL
__stdcall
OemToCharBuffA(
         LPCSTR lpszSrc,
                               LPSTR lpszDst,
         DWORD cchDstLength);

BOOL
__stdcall
OemToCharBuffW(
         LPCSTR lpszSrc,
                               LPWSTR lpszDst,
         DWORD cchDstLength);







#pragma endregion

#pragma region Desktop Family or OneCore Family



LPSTR
__stdcall
CharUpperA(
            LPSTR lpsz);

LPWSTR
__stdcall
CharUpperW(
            LPWSTR lpsz);







DWORD
__stdcall
CharUpperBuffA(
                               LPSTR lpsz,
         DWORD cchLength);

DWORD
__stdcall
CharUpperBuffW(
                               LPWSTR lpsz,
         DWORD cchLength);







LPSTR
__stdcall
CharLowerA(
            LPSTR lpsz);

LPWSTR
__stdcall
CharLowerW(
            LPWSTR lpsz);







DWORD
__stdcall
CharLowerBuffA(
                               LPSTR lpsz,
         DWORD cchLength);

DWORD
__stdcall
CharLowerBuffW(
                               LPWSTR lpsz,
         DWORD cchLength);







LPSTR
__stdcall
CharNextA(
         LPCSTR lpsz);

LPWSTR
__stdcall
CharNextW(
         LPCWSTR lpsz);







LPSTR
__stdcall
CharPrevA(
         LPCSTR lpszStart,
         LPCSTR lpszCurrent);

LPWSTR
__stdcall
CharPrevW(
         LPCWSTR lpszStart,
         LPCWSTR lpszCurrent);







#pragma endregion

#pragma region Desktop Family




LPSTR
__stdcall
CharNextExA(
          WORD CodePage,
          LPCSTR lpCurrentChar,
          DWORD dwFlags);


LPSTR
__stdcall
CharPrevExA(
          WORD CodePage,
          LPCSTR lpStart,
          LPCSTR lpCurrentChar,
          DWORD dwFlags);



#pragma endregion
#line 5603 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
#pragma region Desktop or OneCore Family








BOOL
__stdcall
IsCharAlphaA(
         CHAR ch);

BOOL
__stdcall
IsCharAlphaW(
         WCHAR ch);







BOOL
__stdcall
IsCharAlphaNumericA(
         CHAR ch);

BOOL
__stdcall
IsCharAlphaNumericW(
         WCHAR ch);







BOOL
__stdcall
IsCharUpperA(
         CHAR ch);

BOOL
__stdcall
IsCharUpperW(
         WCHAR ch);







BOOL
__stdcall
IsCharLowerA(
         CHAR ch);

BOOL
__stdcall
IsCharLowerW(
         WCHAR ch);
#line 5678 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
#pragma endregion

#pragma region Desktop Family



HWND
__stdcall
SetFocus(
             HWND hWnd);


HWND
__stdcall
GetActiveWindow(
    void);


HWND
__stdcall
GetFocus(
    void);


UINT
__stdcall
GetKBCodePage(
    void);


SHORT
__stdcall
GetKeyState(
         int nVirtKey);


SHORT
__stdcall
GetAsyncKeyState(
         int vKey);



BOOL
__stdcall
GetKeyboardState(
                      PBYTE lpKeyState);


BOOL
__stdcall
SetKeyboardState(
                    LPBYTE lpKeyState);


int
__stdcall
GetKeyNameTextA(
         LONG lParam,
                          LPSTR lpString,
         int cchSize);

int
__stdcall
GetKeyNameTextW(
         LONG lParam,
                          LPWSTR lpString,
         int cchSize);







int
__stdcall
GetKeyboardType(
         int nTypeFlag);


int
__stdcall
ToAscii(
         UINT uVirtKey,
         UINT uScanCode,
                        const BYTE *lpKeyState,
          LPWORD lpChar,
         UINT uFlags);



int
__stdcall
ToAsciiEx(
         UINT uVirtKey,
         UINT uScanCode,
                        const BYTE *lpKeyState,
          LPWORD lpChar,
         UINT uFlags,
             HKL dwhkl);



int
__stdcall
ToUnicode(
         UINT wVirtKey,
         UINT wScanCode,
                              const BYTE *lpKeyState,
                          LPWSTR pwszBuff,
         int cchBuff,
         UINT wFlags);


DWORD
__stdcall
OemKeyScan(
         WORD wOemChar);


SHORT
__stdcall
VkKeyScanA(
         CHAR ch);

SHORT
__stdcall
VkKeyScanW(
         WCHAR ch);
#line 5816 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
SHORT
__stdcall
VkKeyScanExA(
         CHAR ch,
         HKL dwhkl);

SHORT
__stdcall
VkKeyScanExW(
         WCHAR ch,
         HKL dwhkl);
#line 5841 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
void
__stdcall
keybd_event(
         BYTE bVk,
         BYTE bScan,
         DWORD dwFlags,
         ULONG_PTR dwExtraInfo);


#pragma endregion
#line 5871 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
#pragma region Desktop Family



void
__stdcall
mouse_event(
         DWORD dwFlags,
         DWORD dx,
         DWORD dy,
         DWORD dwData,
         ULONG_PTR dwExtraInfo);


#pragma endregion



typedef struct tagMOUSEINPUT {
    LONG dx;
    LONG dy;
    DWORD mouseData;
    DWORD dwFlags;
    DWORD time;
    ULONG_PTR dwExtraInfo;
} MOUSEINPUT, *PMOUSEINPUT, * LPMOUSEINPUT;

typedef struct tagKEYBDINPUT {
    WORD wVk;
    WORD wScan;
    DWORD dwFlags;
    DWORD time;
    ULONG_PTR dwExtraInfo;
} KEYBDINPUT, *PKEYBDINPUT, * LPKEYBDINPUT;

#pragma region Desktop Family


typedef struct tagHARDWAREINPUT {
    DWORD uMsg;
    WORD wParamL;
    WORD wParamH;
} HARDWAREINPUT, *PHARDWAREINPUT, * LPHARDWAREINPUT;





typedef struct tagINPUT {
    DWORD type;

    union
    {
        MOUSEINPUT mi;
        KEYBDINPUT ki;
        HARDWAREINPUT hi;
    } ;
} INPUT, *PINPUT, * LPINPUT;


UINT
__stdcall
SendInput(
         UINT cInputs,
                        LPINPUT pInputs,
         int cbSize);


#pragma endregion
#line 6573 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
#pragma region Desktop Family



#pragma endregion

#pragma region Desktop Family



typedef struct tagLASTINPUTINFO {
    UINT cbSize;
    DWORD dwTime;
} LASTINPUTINFO, * PLASTINPUTINFO;


BOOL
__stdcall
GetLastInputInfo(
          PLASTINPUTINFO plii);



UINT
__stdcall
MapVirtualKeyA(
         UINT uCode,
         UINT uMapType);

UINT
__stdcall
MapVirtualKeyW(
         UINT uCode,
         UINT uMapType);
#line 6615 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
UINT
__stdcall
MapVirtualKeyExA(
         UINT uCode,
         UINT uMapType,
             HKL dwhkl);

UINT
__stdcall
MapVirtualKeyExW(
         UINT uCode,
         UINT uMapType,
             HKL dwhkl);
#line 6644 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
BOOL
__stdcall
GetInputState(
    void);


DWORD
__stdcall
GetQueueStatus(
         UINT flags);



HWND
__stdcall
GetCapture(
    void);


HWND
__stdcall
SetCapture(
         HWND hWnd);


BOOL
__stdcall
ReleaseCapture(
    void);


DWORD
__stdcall
MsgWaitForMultipleObjects(
         DWORD nCount,
                           const HANDLE *pHandles,
         BOOL fWaitAll,
         DWORD dwMilliseconds,
         DWORD dwWakeMask);


DWORD
__stdcall
MsgWaitForMultipleObjectsEx(
         DWORD nCount,
                           const HANDLE *pHandles,
         DWORD dwMilliseconds,
         DWORD dwWakeMask,
         DWORD dwFlags);



#pragma endregion
#line 6764 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
#pragma region Desktop Family







UINT_PTR
__stdcall
SetTimer(
             HWND hWnd,
         UINT_PTR nIDEvent,
         UINT uElapse,
             TIMERPROC lpTimerFunc);
#line 6801 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
BOOL
__stdcall
KillTimer(
             HWND hWnd,
         UINT_PTR uIDEvent);


BOOL
__stdcall
IsWindowUnicode(
         HWND hWnd);


BOOL
__stdcall
EnableWindow(
         HWND hWnd,
         BOOL bEnable);


BOOL
__stdcall
IsWindowEnabled(
         HWND hWnd);


HACCEL
__stdcall
LoadAcceleratorsA(
             HINSTANCE hInstance,
         LPCSTR lpTableName);

HACCEL
__stdcall
LoadAcceleratorsW(
             HINSTANCE hInstance,
         LPCWSTR lpTableName);







HACCEL
__stdcall
CreateAcceleratorTableA(
                       LPACCEL paccel,
         int cAccel);

HACCEL
__stdcall
CreateAcceleratorTableW(
                       LPACCEL paccel,
         int cAccel);







BOOL
__stdcall
DestroyAcceleratorTable(
         HACCEL hAccel);


int
__stdcall
CopyAcceleratorTableA(
         HACCEL hAccelSrc,
                                               LPACCEL lpAccelDst,
         int cAccelEntries);

int
__stdcall
CopyAcceleratorTableW(
         HACCEL hAccelSrc,
                                               LPACCEL lpAccelDst,
         int cAccelEntries);
#line 6891 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
int
__stdcall
TranslateAcceleratorA(
         HWND hWnd,
         HACCEL hAccTable,
         LPMSG lpMsg);

int
__stdcall
TranslateAcceleratorW(
         HWND hWnd,
         HACCEL hAccTable,
         LPMSG lpMsg);
#line 6913 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
#pragma endregion
#line 7110 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
#pragma region Desktop Family



int
__stdcall
GetSystemMetrics(
         int nIndex);



#pragma endregion



#pragma region Desktop Family





HMENU
__stdcall
LoadMenuA(
             HINSTANCE hInstance,
         LPCSTR lpMenuName);

HMENU
__stdcall
LoadMenuW(
             HINSTANCE hInstance,
         LPCWSTR lpMenuName);







HMENU
__stdcall
LoadMenuIndirectA(
         const MENUTEMPLATEA *lpMenuTemplate);

HMENU
__stdcall
LoadMenuIndirectW(
         const MENUTEMPLATEW *lpMenuTemplate);







HMENU
__stdcall
GetMenu(
         HWND hWnd);


BOOL
__stdcall
SetMenu(
         HWND hWnd,
             HMENU hMenu);


BOOL
__stdcall
ChangeMenuA(
         HMENU hMenu,
         UINT cmd,
             LPCSTR lpszNewItem,
         UINT cmdInsert,
         UINT flags);

BOOL
__stdcall
ChangeMenuW(
         HMENU hMenu,
         UINT cmd,
             LPCWSTR lpszNewItem,
         UINT cmdInsert,
         UINT flags);







BOOL
__stdcall
HiliteMenuItem(
         HWND hWnd,
         HMENU hMenu,
         UINT uIDHiliteItem,
         UINT uHilite);


int
__stdcall
GetMenuStringA(
         HMENU hMenu,
         UINT uIDItem,
                             LPSTR lpString,
         int cchMax,
         UINT flags);

int
__stdcall
GetMenuStringW(
         HMENU hMenu,
         UINT uIDItem,
                             LPWSTR lpString,
         int cchMax,
         UINT flags);







UINT
__stdcall
GetMenuState(
         HMENU hMenu,
         UINT uId,
         UINT uFlags);


BOOL
__stdcall
DrawMenuBar(
         HWND hWnd);
#line 7255 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
HMENU
__stdcall
GetSystemMenu(
         HWND hWnd,
         BOOL bRevert);



HMENU
__stdcall
CreateMenu(
    void);


HMENU
__stdcall
CreatePopupMenu(
    void);


BOOL
__stdcall
DestroyMenu(
         HMENU hMenu);


DWORD
__stdcall
CheckMenuItem(
         HMENU hMenu,
         UINT uIDCheckItem,
         UINT uCheck);


BOOL
__stdcall
EnableMenuItem(
         HMENU hMenu,
         UINT uIDEnableItem,
         UINT uEnable);


HMENU
__stdcall
GetSubMenu(
         HMENU hMenu,
         int nPos);


UINT
__stdcall
GetMenuItemID(
         HMENU hMenu,
         int nPos);


int
__stdcall
GetMenuItemCount(
             HMENU hMenu);


BOOL
__stdcall
InsertMenuA(
         HMENU hMenu,
         UINT uPosition,
         UINT uFlags,
         UINT_PTR uIDNewItem,
             LPCSTR lpNewItem);

BOOL
__stdcall
InsertMenuW(
         HMENU hMenu,
         UINT uPosition,
         UINT uFlags,
         UINT_PTR uIDNewItem,
             LPCWSTR lpNewItem);







BOOL
__stdcall
AppendMenuA(
         HMENU hMenu,
         UINT uFlags,
         UINT_PTR uIDNewItem,
             LPCSTR lpNewItem);

BOOL
__stdcall
AppendMenuW(
         HMENU hMenu,
         UINT uFlags,
         UINT_PTR uIDNewItem,
             LPCWSTR lpNewItem);







BOOL
__stdcall
ModifyMenuA(
         HMENU hMnu,
         UINT uPosition,
         UINT uFlags,
         UINT_PTR uIDNewItem,
             LPCSTR lpNewItem);

BOOL
__stdcall
ModifyMenuW(
         HMENU hMnu,
         UINT uPosition,
         UINT uFlags,
         UINT_PTR uIDNewItem,
             LPCWSTR lpNewItem);







BOOL
__stdcall RemoveMenu(
         HMENU hMenu,
         UINT uPosition,
         UINT uFlags);


BOOL
__stdcall
DeleteMenu(
         HMENU hMenu,
         UINT uPosition,
         UINT uFlags);


BOOL
__stdcall
SetMenuItemBitmaps(
         HMENU hMenu,
         UINT uPosition,
         UINT uFlags,
             HBITMAP hBitmapUnchecked,
             HBITMAP hBitmapChecked);


LONG
__stdcall
GetMenuCheckMarkDimensions(
    void);


BOOL
__stdcall
TrackPopupMenu(
         HMENU hMenu,
         UINT uFlags,
         int x,
         int y,
               int nReserved,
         HWND hWnd,
               const RECT *prcRect);
#line 7436 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
typedef struct tagTPMPARAMS
{
    UINT cbSize;
    RECT rcExclude;
} TPMPARAMS;
typedef TPMPARAMS *LPTPMPARAMS;


BOOL
__stdcall
TrackPopupMenuEx(
         HMENU hMenu,
         UINT uFlags,
         int x,
         int y,
         HWND hwnd,
             LPTPMPARAMS lptpm);
#line 7484 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
typedef struct tagMENUINFO
{
    DWORD cbSize;
    DWORD fMask;
    DWORD dwStyle;
    UINT cyMax;
    HBRUSH hbrBack;
    DWORD dwContextHelpID;
    ULONG_PTR dwMenuData;
} MENUINFO, *LPMENUINFO;
typedef MENUINFO const *LPCMENUINFO;


BOOL
__stdcall
GetMenuInfo(
         HMENU,
            LPMENUINFO);


BOOL
__stdcall
SetMenuInfo(
         HMENU,
         LPCMENUINFO);


BOOL
__stdcall
EndMenu(
        void);







typedef struct tagMENUGETOBJECTINFO
{
    DWORD dwFlags;
    UINT uPos;
    HMENU hmenu;
    PVOID riid;
    PVOID pvObj;
} MENUGETOBJECTINFO, * PMENUGETOBJECTINFO;
#line 7572 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
typedef struct tagMENUITEMINFOA
{
    UINT cbSize;
    UINT fMask;
    UINT fType;
    UINT fState;
    UINT wID;
    HMENU hSubMenu;
    HBITMAP hbmpChecked;
    HBITMAP hbmpUnchecked;
    ULONG_PTR dwItemData;
    LPSTR dwTypeData;
    UINT cch;

    HBITMAP hbmpItem;

} MENUITEMINFOA, *LPMENUITEMINFOA;
typedef struct tagMENUITEMINFOW
{
    UINT cbSize;
    UINT fMask;
    UINT fType;
    UINT fState;
    UINT wID;
    HMENU hSubMenu;
    HBITMAP hbmpChecked;
    HBITMAP hbmpUnchecked;
    ULONG_PTR dwItemData;
    LPWSTR dwTypeData;
    UINT cch;

    HBITMAP hbmpItem;

} MENUITEMINFOW, *LPMENUITEMINFOW;

typedef MENUITEMINFOW MENUITEMINFO;
typedef LPMENUITEMINFOW LPMENUITEMINFO;




typedef MENUITEMINFOA const *LPCMENUITEMINFOA;
typedef MENUITEMINFOW const *LPCMENUITEMINFOW;

typedef LPCMENUITEMINFOW LPCMENUITEMINFO;






BOOL
__stdcall
InsertMenuItemA(
         HMENU hmenu,
         UINT item,
         BOOL fByPosition,
         LPCMENUITEMINFOA lpmi);

BOOL
__stdcall
InsertMenuItemW(
         HMENU hmenu,
         UINT item,
         BOOL fByPosition,
         LPCMENUITEMINFOW lpmi);







BOOL
__stdcall
GetMenuItemInfoA(
         HMENU hmenu,
         UINT item,
         BOOL fByPosition,
            LPMENUITEMINFOA lpmii);

BOOL
__stdcall
GetMenuItemInfoW(
         HMENU hmenu,
         UINT item,
         BOOL fByPosition,
            LPMENUITEMINFOW lpmii);







BOOL
__stdcall
SetMenuItemInfoA(
         HMENU hmenu,
         UINT item,
         BOOL fByPositon,
         LPCMENUITEMINFOA lpmii);

BOOL
__stdcall
SetMenuItemInfoW(
         HMENU hmenu,
         UINT item,
         BOOL fByPositon,
         LPCMENUITEMINFOW lpmii);
#line 7693 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
UINT
__stdcall
GetMenuDefaultItem(
         HMENU hMenu,
         UINT fByPos,
         UINT gmdiFlags);


BOOL
__stdcall
SetMenuDefaultItem(
         HMENU hMenu,
         UINT uItem,
         UINT fByPos);


BOOL
__stdcall
GetMenuItemRect(
             HWND hWnd,
         HMENU hMenu,
         UINT uItem,
          LPRECT lprcItem);


int
__stdcall
MenuItemFromPoint(
             HWND hWnd,
         HMENU hMenu,
         POINT ptScreen);
#line 7765 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
#pragma endregion




#pragma region Desktop Family






typedef struct tagDROPSTRUCT
{
    HWND hwndSource;
    HWND hwndSink;
    DWORD wFmt;
    ULONG_PTR dwData;
    POINT ptDrop;
    DWORD dwControlData;
} DROPSTRUCT, *PDROPSTRUCT, *LPDROPSTRUCT;


#pragma endregion
#line 7800 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
#pragma region Desktop Family



DWORD
__stdcall
DragObject(
         HWND hwndParent,
         HWND hwndFrom,
         UINT fmt,
         ULONG_PTR data,
             HCURSOR hcur);


BOOL
__stdcall
DragDetect(
         HWND hwnd,
         POINT pt);


#pragma endregion



#pragma region Desktop Family



BOOL
__stdcall
DrawIcon(
         HDC hDC,
         int X,
         int Y,
         HICON hIcon);


#pragma endregion
#line 7876 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
#pragma region Desktop Family


typedef struct tagDRAWTEXTPARAMS
{
    UINT cbSize;
    int iTabLength;
    int iLeftMargin;
    int iRightMargin;
    UINT uiLengthDrawn;
} DRAWTEXTPARAMS, *LPDRAWTEXTPARAMS;


#pragma endregion




#pragma region Desktop Family
#line 7907 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
int
__stdcall
DrawTextA(
         HDC hdc,


    LPCSTR lpchText,
         int cchText,
            LPRECT lprc,
         UINT format);


int
__stdcall
DrawTextW(
         HDC hdc,


    LPCWSTR lpchText,
         int cchText,
            LPRECT lprc,
         UINT format);
#line 7965 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
int
__stdcall
DrawTextExA(
         HDC hdc,



    LPSTR lpchText,
         int cchText,
            LPRECT lprc,
         UINT format,
             LPDRAWTEXTPARAMS lpdtp);


int
__stdcall
DrawTextExW(
         HDC hdc,



    LPWSTR lpchText,
         int cchText,
            LPRECT lprc,
         UINT format,
             LPDRAWTEXTPARAMS lpdtp);








#pragma endregion



#pragma region Desktop Family



BOOL
__stdcall
GrayStringA(
         HDC hDC,
             HBRUSH hBrush,
             GRAYSTRINGPROC lpOutputFunc,
         LPARAM lpData,
         int nCount,
         int X,
         int Y,
         int nWidth,
         int nHeight);

BOOL
__stdcall
GrayStringW(
         HDC hDC,
             HBRUSH hBrush,
             GRAYSTRINGPROC lpOutputFunc,
         LPARAM lpData,
         int nCount,
         int X,
         int Y,
         int nWidth,
         int nHeight);







#pragma endregion
#line 8061 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
#pragma region Desktop Family



BOOL
__stdcall
DrawStateA(
         HDC hdc,
             HBRUSH hbrFore,
             DRAWSTATEPROC qfnCallBack,
         LPARAM lData,
         WPARAM wData,
         int x,
         int y,
         int cx,
         int cy,
         UINT uFlags);

BOOL
__stdcall
DrawStateW(
         HDC hdc,
             HBRUSH hbrFore,
             DRAWSTATEPROC qfnCallBack,
         LPARAM lData,
         WPARAM wData,
         int x,
         int y,
         int cx,
         int cy,
         UINT uFlags);







#pragma endregion



#pragma region Desktop Family



LONG
__stdcall
TabbedTextOutA(
         HDC hdc,
         int x,
         int y,
                        LPCSTR lpString,
         int chCount,
         int nTabPositions,
                                  const INT *lpnTabStopPositions,
         int nTabOrigin);

LONG
__stdcall
TabbedTextOutW(
         HDC hdc,
         int x,
         int y,
                        LPCWSTR lpString,
         int chCount,
         int nTabPositions,
                                  const INT *lpnTabStopPositions,
         int nTabOrigin);







DWORD
__stdcall
GetTabbedTextExtentA(
         HDC hdc,
                        LPCSTR lpString,
         int chCount,
         int nTabPositions,
                                  const INT *lpnTabStopPositions);

DWORD
__stdcall
GetTabbedTextExtentW(
         HDC hdc,
                        LPCWSTR lpString,
         int chCount,
         int nTabPositions,
                                  const INT *lpnTabStopPositions);







BOOL
__stdcall
UpdateWindow(
         HWND hWnd);


HWND
__stdcall
SetActiveWindow(
         HWND hWnd);



HWND
__stdcall
GetForegroundWindow(
    void);



BOOL
__stdcall
PaintDesktop(
         HDC hdc);


void
__stdcall
SwitchToThisWindow(
         HWND hwnd,
         BOOL fUnknown);




BOOL
__stdcall
SetForegroundWindow(
         HWND hWnd);



BOOL
__stdcall
AllowSetForegroundWindow(
         DWORD dwProcessId);




BOOL
__stdcall
LockSetForegroundWindow(
         UINT uLockCode);







HWND
__stdcall
WindowFromDC(
         HDC hDC);


HDC
__stdcall
GetDC(
             HWND hWnd);


HDC
__stdcall
GetDCEx(
             HWND hWnd,
             HRGN hrgnClip,
         DWORD flags);


#pragma endregion
#line 8261 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
#pragma region Desktop Family



HDC
__stdcall
GetWindowDC(
             HWND hWnd);


int
__stdcall
ReleaseDC(
             HWND hWnd,
         HDC hDC);


HDC
__stdcall
BeginPaint(
         HWND hWnd,
          LPPAINTSTRUCT lpPaint);


BOOL
__stdcall
EndPaint(
         HWND hWnd,
         const PAINTSTRUCT *lpPaint);


BOOL
__stdcall
GetUpdateRect(
         HWND hWnd,
              LPRECT lpRect,
         BOOL bErase);


int
__stdcall
GetUpdateRgn(
         HWND hWnd,
         HRGN hRgn,
         BOOL bErase);


int
__stdcall
SetWindowRgn(
         HWND hWnd,
             HRGN hRgn,
         BOOL bRedraw);


#pragma endregion


#pragma region Desktop Family



int
__stdcall
GetWindowRgn(
         HWND hWnd,
         HRGN hRgn);




int
__stdcall
GetWindowRgnBox(
         HWND hWnd,
          LPRECT lprc);




int
__stdcall
ExcludeUpdateRgn(
         HDC hDC,
         HWND hWnd);


BOOL
__stdcall
InvalidateRect(
             HWND hWnd,
             const RECT *lpRect,
         BOOL bErase);


BOOL
__stdcall
ValidateRect(
             HWND hWnd,
             const RECT *lpRect);


BOOL
__stdcall
InvalidateRgn(
         HWND hWnd,
             HRGN hRgn,
         BOOL bErase);


BOOL
__stdcall
ValidateRgn(
         HWND hWnd,
             HRGN hRgn);



BOOL
__stdcall
RedrawWindow(
             HWND hWnd,
             const RECT *lprcUpdate,
             HRGN hrgnUpdate,
         UINT flags);


#pragma endregion
#line 8411 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
#pragma region Desktop Family







BOOL
__stdcall
LockWindowUpdate(
             HWND hWndLock);


BOOL
__stdcall
ScrollWindow(
         HWND hWnd,
         int XAmount,
         int YAmount,
             const RECT *lpRect,
             const RECT *lpClipRect);


BOOL
__stdcall
ScrollDC(
         HDC hDC,
         int dx,
         int dy,
             const RECT *lprcScroll,
             const RECT *lprcClip,
             HRGN hrgnUpdate,
              LPRECT lprcUpdate);


int
__stdcall
ScrollWindowEx(
         HWND hWnd,
         int dx,
         int dy,
             const RECT *prcScroll,
             const RECT *prcClip,
             HRGN hrgnUpdate,
              LPRECT prcUpdate,
         UINT flags);


#pragma endregion








#pragma region Desktop Family





int
__stdcall
SetScrollPos(
         HWND hWnd,
         int nBar,
         int nPos,
         BOOL bRedraw);


int
__stdcall
GetScrollPos(
         HWND hWnd,
         int nBar);


BOOL
__stdcall
SetScrollRange(
         HWND hWnd,
         int nBar,
         int nMinPos,
         int nMaxPos,
         BOOL bRedraw);


BOOL
__stdcall
GetScrollRange(
         HWND hWnd,
         int nBar,
          LPINT lpMinPos,
          LPINT lpMaxPos);


BOOL
__stdcall
ShowScrollBar(
         HWND hWnd,
         int wBar,
         BOOL bShow);


BOOL
__stdcall
EnableScrollBar(
         HWND hWnd,
         UINT wSBflags,
         UINT wArrows);
#line 8545 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
BOOL
__stdcall
SetPropA(
         HWND hWnd,
         LPCSTR lpString,
             HANDLE hData);

BOOL
__stdcall
SetPropW(
         HWND hWnd,
         LPCWSTR lpString,
             HANDLE hData);







HANDLE
__stdcall
GetPropA(
         HWND hWnd,
         LPCSTR lpString);

HANDLE
__stdcall
GetPropW(
         HWND hWnd,
         LPCWSTR lpString);







HANDLE
__stdcall
RemovePropA(
         HWND hWnd,
         LPCSTR lpString);

HANDLE
__stdcall
RemovePropW(
         HWND hWnd,
         LPCWSTR lpString);







int
__stdcall
EnumPropsExA(
         HWND hWnd,
         PROPENUMPROCEXA lpEnumFunc,
         LPARAM lParam);

int
__stdcall
EnumPropsExW(
         HWND hWnd,
         PROPENUMPROCEXW lpEnumFunc,
         LPARAM lParam);







int
__stdcall
EnumPropsA(
         HWND hWnd,
         PROPENUMPROCA lpEnumFunc);

int
__stdcall
EnumPropsW(
         HWND hWnd,
         PROPENUMPROCW lpEnumFunc);







BOOL
__stdcall
SetWindowTextA(
         HWND hWnd,
             LPCSTR lpString);

BOOL
__stdcall
SetWindowTextW(
         HWND hWnd,
             LPCWSTR lpString);
#line 8658 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
int
__stdcall
GetWindowTextA(
         HWND hWnd,
                            LPSTR lpString,
         int nMaxCount);


int
__stdcall
GetWindowTextW(
         HWND hWnd,
                            LPWSTR lpString,
         int nMaxCount);







int
__stdcall
GetWindowTextLengthA(
         HWND hWnd);

int
__stdcall
GetWindowTextLengthW(
         HWND hWnd);







BOOL
__stdcall
GetClientRect(
         HWND hWnd,
          LPRECT lpRect);


BOOL
__stdcall
GetWindowRect(
         HWND hWnd,
          LPRECT lpRect);


BOOL
__stdcall
AdjustWindowRect(
            LPRECT lpRect,
         DWORD dwStyle,
         BOOL bMenu);


BOOL
__stdcall
AdjustWindowRectEx(
            LPRECT lpRect,
         DWORD dwStyle,
         BOOL bMenu,
         DWORD dwExStyle);



#pragma endregion





#pragma region Desktop Family


typedef struct tagHELPINFO
{
    UINT cbSize;
    int iContextType;
    int iCtrlId;
    HANDLE hItemHandle;
    DWORD_PTR dwContextId;
    POINT MousePos;
} HELPINFO, *LPHELPINFO;


BOOL
__stdcall
SetWindowContextHelpId(
         HWND,
         DWORD);


DWORD
__stdcall
GetWindowContextHelpId(
         HWND);


BOOL
__stdcall
SetMenuContextHelpId(
         HMENU,
         DWORD);


DWORD
__stdcall
GetMenuContextHelpId(
         HMENU);


#pragma endregion
#line 8848 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
#pragma region Desktop Family



int
__stdcall
MessageBoxA(
             HWND hWnd,
             LPCSTR lpText,
             LPCSTR lpCaption,
         UINT uType);

int
__stdcall
MessageBoxW(
             HWND hWnd,
             LPCWSTR lpText,
             LPCWSTR lpCaption,
         UINT uType);
#line 8898 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
int
__stdcall
MessageBoxExA(
             HWND hWnd,
             LPCSTR lpText,
             LPCSTR lpCaption,
         UINT uType,
         WORD wLanguageId);

int
__stdcall
MessageBoxExW(
             HWND hWnd,
             LPCWSTR lpText,
             LPCWSTR lpCaption,
         UINT uType,
         WORD wLanguageId);
#line 8923 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
typedef void (__stdcall *MSGBOXCALLBACK)(LPHELPINFO lpHelpInfo);

typedef struct tagMSGBOXPARAMSA
{
    UINT cbSize;
    HWND hwndOwner;
    HINSTANCE hInstance;
    LPCSTR lpszText;
    LPCSTR lpszCaption;
    DWORD dwStyle;
    LPCSTR lpszIcon;
    DWORD_PTR dwContextHelpId;
    MSGBOXCALLBACK lpfnMsgBoxCallback;
    DWORD dwLanguageId;
} MSGBOXPARAMSA, *PMSGBOXPARAMSA, *LPMSGBOXPARAMSA;
typedef struct tagMSGBOXPARAMSW
{
    UINT cbSize;
    HWND hwndOwner;
    HINSTANCE hInstance;
    LPCWSTR lpszText;
    LPCWSTR lpszCaption;
    DWORD dwStyle;
    LPCWSTR lpszIcon;
    DWORD_PTR dwContextHelpId;
    MSGBOXCALLBACK lpfnMsgBoxCallback;
    DWORD dwLanguageId;
} MSGBOXPARAMSW, *PMSGBOXPARAMSW, *LPMSGBOXPARAMSW;

typedef MSGBOXPARAMSW MSGBOXPARAMS;
typedef PMSGBOXPARAMSW PMSGBOXPARAMS;
typedef LPMSGBOXPARAMSW LPMSGBOXPARAMS;







int
__stdcall
MessageBoxIndirectA(
         const MSGBOXPARAMSA * lpmbp);

int
__stdcall
MessageBoxIndirectW(
         const MSGBOXPARAMSW * lpmbp);
#line 8980 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
#pragma endregion


#pragma region Desktop Family



BOOL
__stdcall
MessageBeep(
         UINT uType);


#pragma endregion



#pragma region Desktop Family




int
__stdcall
ShowCursor(
         BOOL bShow);


BOOL
__stdcall
SetCursorPos(
         int X,
         int Y);
#line 9024 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
HCURSOR
__stdcall
SetCursor(
             HCURSOR hCursor);


BOOL
__stdcall
GetCursorPos(
          LPPOINT lpPoint);
#line 9044 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
BOOL
__stdcall
ClipCursor(
             const RECT *lpRect);



BOOL
__stdcall
GetClipCursor(
          LPRECT lpRect);


HCURSOR
__stdcall
GetCursor(
    void);


BOOL
__stdcall
CreateCaret(
         HWND hWnd,
             HBITMAP hBitmap,
         int nWidth,
         int nHeight);


UINT
__stdcall
GetCaretBlinkTime(
    void);


BOOL
__stdcall
SetCaretBlinkTime(
         UINT uMSeconds);


BOOL
__stdcall
DestroyCaret(
    void);


BOOL
__stdcall
HideCaret(
             HWND hWnd);


BOOL
__stdcall
ShowCaret(
             HWND hWnd);


BOOL
__stdcall
SetCaretPos(
         int X,
         int Y);


BOOL
__stdcall
GetCaretPos(
          LPPOINT lpPoint);


BOOL
__stdcall
ClientToScreen(
         HWND hWnd,
            LPPOINT lpPoint);


BOOL
__stdcall
ScreenToClient(
         HWND hWnd,
            LPPOINT lpPoint);
#line 9163 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
int
__stdcall
MapWindowPoints(
             HWND hWndFrom,
             HWND hWndTo,
                             LPPOINT lpPoints,
         UINT cPoints);


HWND
__stdcall
WindowFromPoint(
         POINT Point);
#line 9186 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
HWND
__stdcall
ChildWindowFromPoint(
         HWND hWndParent,
         POINT Point);


#pragma endregion







#pragma region Desktop Family



HWND
__stdcall
ChildWindowFromPointEx(
         HWND hwnd,
         POINT pt,
         UINT flags);


#pragma endregion
#line 9280 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
#pragma region Desktop Family



DWORD
__stdcall
GetSysColor(
         int nIndex);



HBRUSH
__stdcall
GetSysColorBrush(
         int nIndex);





BOOL
__stdcall
SetSysColors(
         int cElements,
                          const INT * lpaElements,
                          const COLORREF * lpaRgbValues);


#pragma endregion



#pragma region Desktop Family



BOOL
__stdcall
DrawFocusRect(
         HDC hDC,
         const RECT * lprc);


int
__stdcall
FillRect(
         HDC hDC,
         const RECT *lprc,
         HBRUSH hbr);


int
__stdcall
FrameRect(
         HDC hDC,
         const RECT *lprc,
         HBRUSH hbr);


BOOL
__stdcall
InvertRect(
         HDC hDC,
         const RECT *lprc);


BOOL
__stdcall
SetRect(
          LPRECT lprc,
         int xLeft,
         int yTop,
         int xRight,
         int yBottom);


BOOL
__stdcall
SetRectEmpty(
          LPRECT lprc);


BOOL
__stdcall
CopyRect(
          LPRECT lprcDst,
         const RECT *lprcSrc);


BOOL
__stdcall
InflateRect(
            LPRECT lprc,
         int dx,
         int dy);


BOOL
__stdcall
IntersectRect(
          LPRECT lprcDst,
         const RECT *lprcSrc1,
         const RECT *lprcSrc2);


BOOL
__stdcall
UnionRect(
          LPRECT lprcDst,
         const RECT *lprcSrc1,
         const RECT *lprcSrc2);


BOOL
__stdcall
SubtractRect(
          LPRECT lprcDst,
         const RECT *lprcSrc1,
         const RECT *lprcSrc2);


BOOL
__stdcall
OffsetRect(
            LPRECT lprc,
         int dx,
         int dy);


BOOL
__stdcall
IsRectEmpty(
         const RECT *lprc);


BOOL
__stdcall
EqualRect(
         const RECT *lprc1,
         const RECT *lprc2);


BOOL
__stdcall
PtInRect(
         const RECT *lprc,
         POINT pt);




WORD
__stdcall
GetWindowWord(
         HWND hWnd,
         int nIndex);


WORD
__stdcall
SetWindowWord(
         HWND hWnd,
         int nIndex,
         WORD wNewWord);


LONG
__stdcall
GetWindowLongA(
         HWND hWnd,
         int nIndex);

LONG
__stdcall
GetWindowLongW(
         HWND hWnd,
         int nIndex);







LONG
__stdcall
SetWindowLongA(
         HWND hWnd,
         int nIndex,
         LONG dwNewLong);

LONG
__stdcall
SetWindowLongW(
         HWND hWnd,
         int nIndex,
         LONG dwNewLong);
#line 9544 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
WORD
__stdcall
GetClassWord(
         HWND hWnd,
         int nIndex);


WORD
__stdcall
SetClassWord(
         HWND hWnd,
         int nIndex,
         WORD wNewWord);


DWORD
__stdcall
GetClassLongA(
         HWND hWnd,
         int nIndex);

DWORD
__stdcall
GetClassLongW(
         HWND hWnd,
         int nIndex);







DWORD
__stdcall
SetClassLongA(
         HWND hWnd,
         int nIndex,
         LONG dwNewLong);

DWORD
__stdcall
SetClassLongW(
         HWND hWnd,
         int nIndex,
         LONG dwNewLong);
#line 9660 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
BOOL
__stdcall
GetProcessDefaultLayout(
          DWORD *pdwDefaultLayout);


BOOL
__stdcall
SetProcessDefaultLayout(
         DWORD dwDefaultLayout);



HWND
__stdcall
GetDesktopWindow(
    void);



HWND
__stdcall
GetParent(
         HWND hWnd);


HWND
__stdcall
SetParent(
         HWND hWndChild,
             HWND hWndNewParent);


BOOL
__stdcall
EnumChildWindows(
             HWND hWndParent,
         WNDENUMPROC lpEnumFunc,
         LPARAM lParam);



HWND
__stdcall
FindWindowA(
             LPCSTR lpClassName,
             LPCSTR lpWindowName);

HWND
__stdcall
FindWindowW(
             LPCWSTR lpClassName,
             LPCWSTR lpWindowName);
#line 9721 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
HWND
__stdcall
FindWindowExA(
             HWND hWndParent,
             HWND hWndChildAfter,
             LPCSTR lpszClass,
             LPCSTR lpszWindow);

HWND
__stdcall
FindWindowExW(
             HWND hWndParent,
             HWND hWndChildAfter,
             LPCWSTR lpszClass,
             LPCWSTR lpszWindow);







HWND
__stdcall
GetShellWindow(
    void);





BOOL
__stdcall
RegisterShellHookWindow(
         HWND hwnd);


BOOL
__stdcall
DeregisterShellHookWindow(
         HWND hwnd);


BOOL
__stdcall
EnumWindows(
         WNDENUMPROC lpEnumFunc,
         LPARAM lParam);


BOOL
__stdcall
EnumThreadWindows(
         DWORD dwThreadId,
         WNDENUMPROC lpfn,
         LPARAM lParam);





int
__stdcall
GetClassNameA(
         HWND hWnd,
                                       LPSTR lpClassName,
         int nMaxCount
    );

int
__stdcall
GetClassNameW(
         HWND hWnd,
                                       LPWSTR lpClassName,
         int nMaxCount
    );
#line 9828 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
HWND
__stdcall
GetTopWindow(
             HWND hWnd);






DWORD
__stdcall
GetWindowThreadProcessId(
         HWND hWnd,
              LPDWORD lpdwProcessId);



BOOL
__stdcall
IsGUIThread(
         BOOL bConvert);
#line 9858 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
HWND
__stdcall
GetLastActivePopup(
         HWND hWnd);
#line 9880 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
HWND
__stdcall
GetWindow(
         HWND hWnd,
         UINT uCmd);







HHOOK
__stdcall
SetWindowsHookA(
         int nFilterType,
         HOOKPROC pfnFilterProc);

HHOOK
__stdcall
SetWindowsHookW(
         int nFilterType,
         HOOKPROC pfnFilterProc);
#line 9932 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
BOOL
__stdcall
UnhookWindowsHook(
         int nCode,
         HOOKPROC pfnFilterProc);


HHOOK
__stdcall
SetWindowsHookExA(
         int idHook,
         HOOKPROC lpfn,
             HINSTANCE hmod,
         DWORD dwThreadId);

HHOOK
__stdcall
SetWindowsHookExW(
         int idHook,
         HOOKPROC lpfn,
             HINSTANCE hmod,
         DWORD dwThreadId);







BOOL
__stdcall
UnhookWindowsHookEx(
         HHOOK hhk);


LRESULT
__stdcall
CallNextHookEx(
             HHOOK hhk,
         int nCode,
         WPARAM wParam,
         LPARAM lParam);
#line 9988 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
#pragma endregion
#line 10065 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
#pragma region Desktop Family





BOOL
__stdcall
CheckMenuRadioItem(
         HMENU hmenu,
         UINT first,
         UINT last,
         UINT check,
         UINT flags);





typedef struct {
    WORD versionNumber;
    WORD offset;
} MENUITEMTEMPLATEHEADER, *PMENUITEMTEMPLATEHEADER;

typedef struct {
    WORD mtOption;
    WORD mtID;
    WCHAR mtString[1];
} MENUITEMTEMPLATE, *PMENUITEMTEMPLATE;



#pragma endregion
#line 10147 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
#pragma region Desktop Family



HBITMAP
__stdcall
LoadBitmapA(
             HINSTANCE hInstance,
         LPCSTR lpBitmapName);

HBITMAP
__stdcall
LoadBitmapW(
             HINSTANCE hInstance,
         LPCWSTR lpBitmapName);







HCURSOR
__stdcall
LoadCursorA(
             HINSTANCE hInstance,
         LPCSTR lpCursorName);

HCURSOR
__stdcall
LoadCursorW(
             HINSTANCE hInstance,
         LPCWSTR lpCursorName);







HCURSOR
__stdcall
LoadCursorFromFileA(
         LPCSTR lpFileName);

HCURSOR
__stdcall
LoadCursorFromFileW(
         LPCWSTR lpFileName);







HCURSOR
__stdcall
CreateCursor(
             HINSTANCE hInst,
         int xHotSpot,
         int yHotSpot,
         int nWidth,
         int nHeight,
         const void *pvANDPlane,
         const void *pvXORPlane);


BOOL
__stdcall
DestroyCursor(
         HCURSOR hCursor);
#line 10231 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
#pragma endregion
#line 10257 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
#pragma region Desktop Family



BOOL
__stdcall
SetSystemCursor(
         HCURSOR hcur,
         DWORD id);

typedef struct _ICONINFO {
    BOOL fIcon;
    DWORD xHotspot;
    DWORD yHotspot;
    HBITMAP hbmMask;
    HBITMAP hbmColor;
} ICONINFO;
typedef ICONINFO *PICONINFO;


HICON
__stdcall
LoadIconA(
             HINSTANCE hInstance,
         LPCSTR lpIconName);

HICON
__stdcall
LoadIconW(
             HINSTANCE hInstance,
         LPCWSTR lpIconName);
#line 10296 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
UINT
__stdcall
PrivateExtractIconsA(
                         LPCSTR szFileName,
         int nIconIndex,
         int cxIcon,
         int cyIcon,
                             HICON *phicon,
                             UINT *piconid,
         UINT nIcons,
         UINT flags);

UINT
__stdcall
PrivateExtractIconsW(
                         LPCWSTR szFileName,
         int nIconIndex,
         int cxIcon,
         int cyIcon,
                             HICON *phicon,
                             UINT *piconid,
         UINT nIcons,
         UINT flags);







HICON
__stdcall
CreateIcon(
             HINSTANCE hInstance,
         int nWidth,
         int nHeight,
         BYTE cPlanes,
         BYTE cBitsPixel,
         const BYTE *lpbANDbits,
         const BYTE *lpbXORbits);


BOOL
__stdcall
DestroyIcon(
         HICON hIcon);


int
__stdcall
LookupIconIdFromDirectory(
                                       PBYTE presbits,
         BOOL fIcon);



int
__stdcall
LookupIconIdFromDirectoryEx(
                                       PBYTE presbits,
         BOOL fIcon,
         int cxDesired,
         int cyDesired,
         UINT Flags);



HICON
__stdcall
CreateIconFromResource(
                                PBYTE presbits,
         DWORD dwResSize,
         BOOL fIcon,
         DWORD dwVer);



HICON
__stdcall
CreateIconFromResourceEx(
                                PBYTE presbits,
         DWORD dwResSize,
         BOOL fIcon,
         DWORD dwVer,
         int cxDesired,
         int cyDesired,
         UINT Flags);


typedef struct tagCURSORSHAPE
{
    int xHotSpot;
    int yHotSpot;
    int cx;
    int cy;
    int cbWidth;
    BYTE Planes;
    BYTE BitsPixel;
} CURSORSHAPE, *LPCURSORSHAPE;



#pragma endregion
#line 10420 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
#pragma region Desktop Family



HANDLE
__stdcall
LoadImageA(
             HINSTANCE hInst,
         LPCSTR name,
         UINT type,
         int cx,
         int cy,
         UINT fuLoad);

HANDLE
__stdcall
LoadImageW(
             HINSTANCE hInst,
         LPCWSTR name,
         UINT type,
         int cx,
         int cy,
         UINT fuLoad);







HANDLE
__stdcall
CopyImage(
         HANDLE h,
         UINT type,
         int cx,
         int cy,
         UINT flags);
#line 10468 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
           BOOL __stdcall DrawIconEx(
         HDC hdc,
         int xLeft,
         int yTop,
         HICON hIcon,
         int cxWidth,
         int cyWidth,
         UINT istepIfAniCur,
             HBRUSH hbrFlickerFreeDraw,
         UINT diFlags);


#pragma endregion



#pragma region Desktop Family



HICON
__stdcall
CreateIconIndirect(
         PICONINFO piconinfo);


HICON
__stdcall
CopyIcon(
         HICON hIcon);


BOOL
__stdcall
GetIconInfo(
         HICON hIcon,
          PICONINFO piconinfo);
#line 10562 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
#pragma endregion
#line 11042 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
#pragma region Desktop Family
#line 11052 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
BOOL
__stdcall
IsDialogMessageA(
         HWND hDlg,
         LPMSG lpMsg);

BOOL
__stdcall
IsDialogMessageW(
         HWND hDlg,
         LPMSG lpMsg);
#line 11072 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
BOOL
__stdcall
MapDialogRect(
         HWND hDlg,
            LPRECT lpRect);


int
__stdcall
DlgDirListA(
         HWND hDlg,
            LPSTR lpPathSpec,
         int nIDListBox,
         int nIDStaticPath,
         UINT uFileType);

int
__stdcall
DlgDirListW(
         HWND hDlg,
            LPWSTR lpPathSpec,
         int nIDListBox,
         int nIDStaticPath,
         UINT uFileType);







#pragma endregion
#line 11119 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
#pragma region Desktop Family



BOOL
__stdcall
DlgDirSelectExA(
         HWND hwndDlg,
                          LPSTR lpString,
         int chCount,
         int idListBox);

BOOL
__stdcall
DlgDirSelectExW(
         HWND hwndDlg,
                          LPWSTR lpString,
         int chCount,
         int idListBox);







int
__stdcall
DlgDirListComboBoxA(
         HWND hDlg,
            LPSTR lpPathSpec,
         int nIDComboBox,
         int nIDStaticPath,
         UINT uFiletype);

int
__stdcall
DlgDirListComboBoxW(
         HWND hDlg,
            LPWSTR lpPathSpec,
         int nIDComboBox,
         int nIDStaticPath,
         UINT uFiletype);







BOOL
__stdcall
DlgDirSelectComboBoxExA(
         HWND hwndDlg,
                         LPSTR lpString,
         int cchOut,
         int idComboBox);

BOOL
__stdcall
DlgDirSelectComboBoxExW(
         HWND hwndDlg,
                         LPWSTR lpString,
         int cchOut,
         int idComboBox);







#pragma endregion
#line 11535 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
#pragma region Desktop Family


typedef struct tagSCROLLINFO
{
    UINT cbSize;
    UINT fMask;
    int nMin;
    int nMax;
    UINT nPage;
    int nPos;
    int nTrackPos;
} SCROLLINFO, *LPSCROLLINFO;
typedef SCROLLINFO const *LPCSCROLLINFO;


int
__stdcall
SetScrollInfo(
         HWND hwnd,
         int nBar,
         LPCSCROLLINFO lpsi,
         BOOL redraw);


BOOL
__stdcall
GetScrollInfo(
         HWND hwnd,
         int nBar,
            LPSCROLLINFO lpsi);



#pragma endregion
#line 11592 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
#pragma region Desktop Family


typedef struct tagMDICREATESTRUCTA {
    LPCSTR szClass;
    LPCSTR szTitle;
    HANDLE hOwner;
    int x;
    int y;
    int cx;
    int cy;
    DWORD style;
    LPARAM lParam;
} MDICREATESTRUCTA, *LPMDICREATESTRUCTA;
typedef struct tagMDICREATESTRUCTW {
    LPCWSTR szClass;
    LPCWSTR szTitle;
    HANDLE hOwner;
    int x;
    int y;
    int cx;
    int cy;
    DWORD style;
    LPARAM lParam;
} MDICREATESTRUCTW, *LPMDICREATESTRUCTW;

typedef MDICREATESTRUCTW MDICREATESTRUCT;
typedef LPMDICREATESTRUCTW LPMDICREATESTRUCT;





typedef struct tagCLIENTCREATESTRUCT {
    HANDLE hWindowMenu;
    UINT idFirstChild;
} CLIENTCREATESTRUCT, *LPCLIENTCREATESTRUCT;


LRESULT
__stdcall
DefFrameProcA(
         HWND hWnd,
             HWND hWndMDIClient,
         UINT uMsg,
         WPARAM wParam,
         LPARAM lParam);

LRESULT
__stdcall
DefFrameProcW(
         HWND hWnd,
             HWND hWndMDIClient,
         UINT uMsg,
         WPARAM wParam,
         LPARAM lParam);
#line 11656 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
LRESULT
__stdcall




DefMDIChildProcA(
         HWND hWnd,
         UINT uMsg,
         WPARAM wParam,
         LPARAM lParam);


LRESULT
__stdcall




DefMDIChildProcW(
         HWND hWnd,
         UINT uMsg,
         WPARAM wParam,
         LPARAM lParam);
#line 11689 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
BOOL
__stdcall
TranslateMDISysAccel(
         HWND hWndClient,
         LPMSG lpMsg);




UINT
__stdcall
ArrangeIconicWindows(
         HWND hWnd);


HWND
__stdcall
CreateMDIWindowA(
         LPCSTR lpClassName,
         LPCSTR lpWindowName,
         DWORD dwStyle,
         int X,
         int Y,
         int nWidth,
         int nHeight,
             HWND hWndParent,
             HINSTANCE hInstance,
         LPARAM lParam);

HWND
__stdcall
CreateMDIWindowW(
         LPCWSTR lpClassName,
         LPCWSTR lpWindowName,
         DWORD dwStyle,
         int X,
         int Y,
         int nWidth,
         int nHeight,
             HWND hWndParent,
             HINSTANCE hInstance,
         LPARAM lParam);
#line 11739 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
WORD
__stdcall
TileWindows(
             HWND hwndParent,
         UINT wHow,
             const RECT * lpRect,
         UINT cKids,
                          const HWND * lpKids);


WORD
__stdcall CascadeWindows(
             HWND hwndParent,
         UINT wHow,
             const RECT * lpRect,
         UINT cKids,
                          const HWND * lpKids);




#pragma endregion







#pragma region Desktop Family




typedef DWORD HELPPOLY;
typedef struct tagMULTIKEYHELPA {

    DWORD mkSize;



    CHAR mkKeylist;
    CHAR szKeyphrase[1];
} MULTIKEYHELPA, *PMULTIKEYHELPA, *LPMULTIKEYHELPA;
typedef struct tagMULTIKEYHELPW {

    DWORD mkSize;



    WCHAR mkKeylist;
    WCHAR szKeyphrase[1];
} MULTIKEYHELPW, *PMULTIKEYHELPW, *LPMULTIKEYHELPW;

typedef MULTIKEYHELPW MULTIKEYHELP;
typedef PMULTIKEYHELPW PMULTIKEYHELP;
typedef LPMULTIKEYHELPW LPMULTIKEYHELP;






typedef struct tagHELPWININFOA {
    int wStructSize;
    int x;
    int y;
    int dx;
    int dy;
    int wMax;
    CHAR rgchMember[2];
} HELPWININFOA, *PHELPWININFOA, *LPHELPWININFOA;
typedef struct tagHELPWININFOW {
    int wStructSize;
    int x;
    int y;
    int dx;
    int dy;
    int wMax;
    WCHAR rgchMember[2];
} HELPWININFOW, *PHELPWININFOW, *LPHELPWININFOW;

typedef HELPWININFOW HELPWININFO;
typedef PHELPWININFOW PHELPWININFO;
typedef LPHELPWININFOW LPHELPWININFO;
#line 11871 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
BOOL
__stdcall
WinHelpA(
             HWND hWndMain,
             LPCSTR lpszHelp,
         UINT uCommand,
         ULONG_PTR dwData);

BOOL
__stdcall
WinHelpW(
             HWND hWndMain,
             LPCWSTR lpszHelp,
         UINT uCommand,
         ULONG_PTR dwData);
#line 11895 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
#pragma endregion
#line 11911 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
#pragma region Desktop Family




DWORD
__stdcall
GetGuiResources(
         HANDLE hProcess,
         DWORD uiFlags);




#pragma endregion


#pragma region Desktop Family




#pragma endregion
#line 12314 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
#pragma region Desktop Family


typedef struct tagNONCLIENTMETRICSA
{
    UINT cbSize;
    int iBorderWidth;
    int iScrollWidth;
    int iScrollHeight;
    int iCaptionWidth;
    int iCaptionHeight;
    LOGFONTA lfCaptionFont;
    int iSmCaptionWidth;
    int iSmCaptionHeight;
    LOGFONTA lfSmCaptionFont;
    int iMenuWidth;
    int iMenuHeight;
    LOGFONTA lfMenuFont;
    LOGFONTA lfStatusFont;
    LOGFONTA lfMessageFont;



} NONCLIENTMETRICSA, *PNONCLIENTMETRICSA, * LPNONCLIENTMETRICSA;
typedef struct tagNONCLIENTMETRICSW
{
    UINT cbSize;
    int iBorderWidth;
    int iScrollWidth;
    int iScrollHeight;
    int iCaptionWidth;
    int iCaptionHeight;
    LOGFONTW lfCaptionFont;
    int iSmCaptionWidth;
    int iSmCaptionHeight;
    LOGFONTW lfSmCaptionFont;
    int iMenuWidth;
    int iMenuHeight;
    LOGFONTW lfMenuFont;
    LOGFONTW lfStatusFont;
    LOGFONTW lfMessageFont;



} NONCLIENTMETRICSW, *PNONCLIENTMETRICSW, * LPNONCLIENTMETRICSW;

typedef NONCLIENTMETRICSW NONCLIENTMETRICS;
typedef PNONCLIENTMETRICSW PNONCLIENTMETRICS;
typedef LPNONCLIENTMETRICSW LPNONCLIENTMETRICS;







#pragma endregion
#line 12389 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
#pragma region Desktop Family


typedef struct tagMINIMIZEDMETRICS
{
    UINT cbSize;
    int iWidth;
    int iHorzGap;
    int iVertGap;
    int iArrange;
} MINIMIZEDMETRICS, *PMINIMIZEDMETRICS, *LPMINIMIZEDMETRICS;



typedef struct tagICONMETRICSA
{
    UINT cbSize;
    int iHorzSpacing;
    int iVertSpacing;
    int iTitleWrap;
    LOGFONTA lfFont;
} ICONMETRICSA, *PICONMETRICSA, *LPICONMETRICSA;
typedef struct tagICONMETRICSW
{
    UINT cbSize;
    int iHorzSpacing;
    int iVertSpacing;
    int iTitleWrap;
    LOGFONTW lfFont;
} ICONMETRICSW, *PICONMETRICSW, *LPICONMETRICSW;

typedef ICONMETRICSW ICONMETRICS;
typedef PICONMETRICSW PICONMETRICS;
typedef LPICONMETRICSW LPICONMETRICS;
#line 12431 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
typedef struct tagANIMATIONINFO
{
    UINT cbSize;
    int iMinAnimate;
} ANIMATIONINFO, *LPANIMATIONINFO;

typedef struct tagSERIALKEYSA
{
    UINT cbSize;
    DWORD dwFlags;
    LPSTR lpszActivePort;
    LPSTR lpszPort;
    UINT iBaudRate;
    UINT iPortState;
    UINT iActive;
} SERIALKEYSA, *LPSERIALKEYSA;
typedef struct tagSERIALKEYSW
{
    UINT cbSize;
    DWORD dwFlags;
    LPWSTR lpszActivePort;
    LPWSTR lpszPort;
    UINT iBaudRate;
    UINT iPortState;
    UINT iActive;
} SERIALKEYSW, *LPSERIALKEYSW;

typedef SERIALKEYSW SERIALKEYS;
typedef LPSERIALKEYSW LPSERIALKEYS;
#line 12471 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
typedef struct tagHIGHCONTRASTA
{
    UINT cbSize;
    DWORD dwFlags;
    LPSTR lpszDefaultScheme;
} HIGHCONTRASTA, *LPHIGHCONTRASTA;
typedef struct tagHIGHCONTRASTW
{
    UINT cbSize;
    DWORD dwFlags;
    LPWSTR lpszDefaultScheme;
} HIGHCONTRASTW, *LPHIGHCONTRASTW;

typedef HIGHCONTRASTW HIGHCONTRAST;
typedef LPHIGHCONTRASTW LPHIGHCONTRAST;






#pragma endregion
#line 12520 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\tvout.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 20 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\tvout.h"
#pragma region Desktop Family


typedef struct _VIDEOPARAMETERS {
    GUID Guid;
    ULONG dwOffset;
    ULONG dwCommand;
    ULONG dwFlags;
    ULONG dwMode;
    ULONG dwTVStandard;
    ULONG dwAvailableModes;
    ULONG dwAvailableTVStandard;
    ULONG dwFlickerFilter;
    ULONG dwOverScanX;
    ULONG dwOverScanY;
    ULONG dwMaxUnscaledX;
    ULONG dwMaxUnscaledY;
    ULONG dwPositionX;
    ULONG dwPositionY;
    ULONG dwBrightness;
    ULONG dwContrast;
    ULONG dwCPType;
    ULONG dwCPCommand;
    ULONG dwCPStandard;
    ULONG dwCPKey;
    ULONG bCP_APSTriggerBits;
    UCHAR bOEMCopyProtection[256];
} VIDEOPARAMETERS, *PVIDEOPARAMETERS, *LPVIDEOPARAMETERS;
#line 96 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\tvout.h"
#pragma endregion


#pragma option pop
#line 12520 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
#line 12534 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
#pragma region Desktop Family






LONG
__stdcall
ChangeDisplaySettingsA(
             DEVMODEA* lpDevMode,
         DWORD dwFlags);

LONG
__stdcall
ChangeDisplaySettingsW(
             DEVMODEW* lpDevMode,
         DWORD dwFlags);







LONG
__stdcall
ChangeDisplaySettingsExA(
             LPCSTR lpszDeviceName,
             DEVMODEA* lpDevMode,
               HWND hwnd,
         DWORD dwflags,
             LPVOID lParam);

LONG
__stdcall
ChangeDisplaySettingsExW(
             LPCWSTR lpszDeviceName,
             DEVMODEW* lpDevMode,
               HWND hwnd,
         DWORD dwflags,
             LPVOID lParam);
#line 12587 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
BOOL
__stdcall
EnumDisplaySettingsA(
             LPCSTR lpszDeviceName,
         DWORD iModeNum,
            DEVMODEA* lpDevMode);

BOOL
__stdcall
EnumDisplaySettingsW(
             LPCWSTR lpszDeviceName,
         DWORD iModeNum,
            DEVMODEW* lpDevMode);
#line 12609 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
BOOL
__stdcall
EnumDisplaySettingsExA(
             LPCSTR lpszDeviceName,
         DWORD iModeNum,
            DEVMODEA* lpDevMode,
         DWORD dwFlags);

BOOL
__stdcall
EnumDisplaySettingsExW(
             LPCWSTR lpszDeviceName,
         DWORD iModeNum,
            DEVMODEW* lpDevMode,
         DWORD dwFlags);
#line 12635 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
BOOL
__stdcall
EnumDisplayDevicesA(
             LPCSTR lpDevice,
         DWORD iDevNum,
            PDISPLAY_DEVICEA lpDisplayDevice,
         DWORD dwFlags);

BOOL
__stdcall
EnumDisplayDevicesW(
             LPCWSTR lpDevice,
         DWORD iDevNum,
            PDISPLAY_DEVICEW lpDisplayDevice,
         DWORD dwFlags);
#line 12714 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
BOOL
__stdcall
SystemParametersInfoA(
         UINT uiAction,
         UINT uiParam,
                                 PVOID pvParam,
         UINT fWinIni);


BOOL
__stdcall
SystemParametersInfoW(
         UINT uiAction,
         UINT uiParam,
                                 PVOID pvParam,
         UINT fWinIni);








#pragma endregion



#pragma region Desktop Family





typedef struct tagFILTERKEYS
{
    UINT cbSize;
    DWORD dwFlags;
    DWORD iWaitMSec;
    DWORD iDelayMSec;
    DWORD iRepeatMSec;
    DWORD iBounceMSec;
} FILTERKEYS, *LPFILTERKEYS;


#pragma endregion
#line 12772 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
#pragma region Desktop Family


typedef struct tagSTICKYKEYS
{
    UINT cbSize;
    DWORD dwFlags;
} STICKYKEYS, *LPSTICKYKEYS;


#pragma endregion
#line 12815 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
#pragma region Desktop Family


typedef struct tagMOUSEKEYS
{
    UINT cbSize;
    DWORD dwFlags;
    DWORD iMaxSpeed;
    DWORD iTimeToMaxSpeed;
    DWORD iCtrlSpeed;
    DWORD dwReserved1;
    DWORD dwReserved2;
} MOUSEKEYS, *LPMOUSEKEYS;


#pragma endregion
#line 12851 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
#pragma region Desktop Family


typedef struct tagACCESSTIMEOUT
{
    UINT cbSize;
    DWORD dwFlags;
    DWORD iTimeOutMSec;
} ACCESSTIMEOUT, *LPACCESSTIMEOUT;


#pragma endregion
#line 12887 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
#pragma region Desktop Family


typedef struct tagSOUNDSENTRYA
{
    UINT cbSize;
    DWORD dwFlags;
    DWORD iFSTextEffect;
    DWORD iFSTextEffectMSec;
    DWORD iFSTextEffectColorBits;
    DWORD iFSGrafEffect;
    DWORD iFSGrafEffectMSec;
    DWORD iFSGrafEffectColor;
    DWORD iWindowsEffect;
    DWORD iWindowsEffectMSec;
    LPSTR lpszWindowsEffectDLL;
    DWORD iWindowsEffectOrdinal;
} SOUNDSENTRYA, *LPSOUNDSENTRYA;
typedef struct tagSOUNDSENTRYW
{
    UINT cbSize;
    DWORD dwFlags;
    DWORD iFSTextEffect;
    DWORD iFSTextEffectMSec;
    DWORD iFSTextEffectColorBits;
    DWORD iFSGrafEffect;
    DWORD iFSGrafEffectMSec;
    DWORD iFSGrafEffectColor;
    DWORD iWindowsEffect;
    DWORD iWindowsEffectMSec;
    LPWSTR lpszWindowsEffectDLL;
    DWORD iWindowsEffectOrdinal;
} SOUNDSENTRYW, *LPSOUNDSENTRYW;

typedef SOUNDSENTRYW SOUNDSENTRY;
typedef LPSOUNDSENTRYW LPSOUNDSENTRY;






#pragma endregion








#pragma region Desktop Family
#line 12948 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
typedef struct tagTOGGLEKEYS
{
    UINT cbSize;
    DWORD dwFlags;
} TOGGLEKEYS, *LPTOGGLEKEYS;


#pragma endregion
#line 12967 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
#pragma region Desktop Family
#line 12984 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
void
__stdcall
SetDebugErrorLevel(
         DWORD dwLevel);


#pragma endregion
#line 13000 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
#pragma region Desktop Family



void
__stdcall
SetLastErrorEx(
         DWORD dwErrCode,
         DWORD dwType);


int
__stdcall
InternalGetWindowText(
         HWND hWnd,
                                             LPWSTR pString,
         int cchMaxCount);
#line 13030 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
BOOL
__stdcall
CancelShutdown(
    void);


#pragma endregion
#line 13049 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
#pragma region Desktop Family



HMONITOR
__stdcall
MonitorFromPoint(
         POINT pt,
         DWORD dwFlags);


HMONITOR
__stdcall
MonitorFromRect(
         LPCRECT lprc,
         DWORD dwFlags);


HMONITOR
__stdcall
MonitorFromWindow(
         HWND hwnd,
         DWORD dwFlags);


#pragma endregion







#pragma region Desktop Family


typedef struct tagMONITORINFO
{
    DWORD cbSize;
    RECT rcMonitor;
    RECT rcWork;
    DWORD dwFlags;
} MONITORINFO, *LPMONITORINFO;
#line 13110 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
typedef struct tagMONITORINFOEXA
{
    MONITORINFO ;
    CHAR szDevice[32];
} MONITORINFOEXA, *LPMONITORINFOEXA;
typedef struct tagMONITORINFOEXW
{
    MONITORINFO ;
    WCHAR szDevice[32];
} MONITORINFOEXW, *LPMONITORINFOEXW;

typedef MONITORINFOEXW MONITORINFOEX;
typedef LPMONITORINFOEXW LPMONITORINFOEX;







BOOL
__stdcall
GetMonitorInfoA(
         HMONITOR hMonitor,
            LPMONITORINFO lpmi);

BOOL
__stdcall
GetMonitorInfoW(
         HMONITOR hMonitor,
            LPMONITORINFO lpmi);






typedef BOOL (__stdcall* MONITORENUMPROC)(HMONITOR, HDC, LPRECT, LPARAM);


BOOL
__stdcall
EnumDisplayMonitors(
             HDC hdc,
             LPCRECT lprcClip,
         MONITORENUMPROC lpfnEnum,
         LPARAM dwData);


#pragma endregion




#pragma region Desktop Family







void
__stdcall
NotifyWinEvent(
         DWORD event,
         HWND hwnd,
         LONG idObject,
         LONG idChild);

typedef void (__stdcall* WINEVENTPROC)(
    HWINEVENTHOOK hWinEventHook,
    DWORD event,
    HWND hwnd,
    LONG idObject,
    LONG idChild,
    DWORD idEventThread,
    DWORD dwmsEventTime);


HWINEVENTHOOK
__stdcall
SetWinEventHook(
         DWORD eventMin,
         DWORD eventMax,
             HMODULE hmodWinEventProc,
         WINEVENTPROC pfnWinEventProc,
         DWORD idProcess,
         DWORD idThread,
         DWORD dwFlags);



BOOL
__stdcall
IsWinEventHookInstalled(
         DWORD event);



#pragma endregion
#line 13220 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
#pragma region Desktop Family



BOOL
__stdcall
UnhookWinEvent(
         HWINEVENTHOOK hWinEventHook);


#pragma endregion
#line 13838 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
#pragma region Desktop Family


typedef struct tagGUITHREADINFO
{
    DWORD cbSize;
    DWORD flags;
    HWND hwndActive;
    HWND hwndFocus;
    HWND hwndCapture;
    HWND hwndMenuOwner;
    HWND hwndMoveSize;
    HWND hwndCaret;
    RECT rcCaret;
} GUITHREADINFO, *PGUITHREADINFO, * LPGUITHREADINFO;


#pragma endregion
#line 13870 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
#pragma region Desktop Family



BOOL
__stdcall
GetGUIThreadInfo(
         DWORD idThread,
            PGUITHREADINFO pgui);


BOOL
__stdcall
BlockInput(
    BOOL fBlockIt);
#line 13906 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
UINT
__stdcall
GetWindowModuleFileNameA(
         HWND hwnd,
                                            LPSTR pszFileName,
         UINT cchFileNameMax);

UINT
__stdcall
GetWindowModuleFileNameW(
         HWND hwnd,
                                            LPWSTR pszFileName,
         UINT cchFileNameMax);







#pragma endregion
#line 13966 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
#pragma region Desktop Family





typedef struct tagCURSORINFO
{
    DWORD cbSize;
    DWORD flags;
    HCURSOR hCursor;
    POINT ptScreenPos;
} CURSORINFO, *PCURSORINFO, *LPCURSORINFO;







BOOL
__stdcall
GetCursorInfo(
            PCURSORINFO pci);




typedef struct tagWINDOWINFO
{
    DWORD cbSize;
    RECT rcWindow;
    RECT rcClient;
    DWORD dwStyle;
    DWORD dwExStyle;
    DWORD dwWindowStatus;
    UINT cxWindowBorders;
    UINT cyWindowBorders;
    ATOM atomWindowType;
    WORD wCreatorVersion;
} WINDOWINFO, *PWINDOWINFO, *LPWINDOWINFO;




BOOL
__stdcall
GetWindowInfo(
         HWND hwnd,
            PWINDOWINFO pwi);




typedef struct tagTITLEBARINFO
{
    DWORD cbSize;
    RECT rcTitleBar;
    DWORD rgstate[5 + 1];
} TITLEBARINFO, *PTITLEBARINFO, *LPTITLEBARINFO;


BOOL
__stdcall
GetTitleBarInfo(
         HWND hwnd,
            PTITLEBARINFO pti);
#line 14047 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
typedef struct tagMENUBARINFO
{
    DWORD cbSize;
    RECT rcBar;
    HMENU hMenu;
    HWND hwndMenu;
    BOOL fBarFocused:1;
    BOOL fFocused:1;
} MENUBARINFO, *PMENUBARINFO, *LPMENUBARINFO;


BOOL
__stdcall
GetMenuBarInfo(
         HWND hwnd,
         LONG idObject,
         LONG idItem,
            PMENUBARINFO pmbi);




typedef struct tagSCROLLBARINFO
{
    DWORD cbSize;
    RECT rcScrollBar;
    int dxyLineButton;
    int xyThumbTop;
    int xyThumbBottom;
    int reserved;
    DWORD rgstate[5 + 1];
} SCROLLBARINFO, *PSCROLLBARINFO, *LPSCROLLBARINFO;


BOOL
__stdcall
GetScrollBarInfo(
         HWND hwnd,
         LONG idObject,
            PSCROLLBARINFO psbi);




typedef struct tagCOMBOBOXINFO
{
    DWORD cbSize;
    RECT rcItem;
    RECT rcButton;
    DWORD stateButton;
    HWND hwndCombo;
    HWND hwndItem;
    HWND hwndList;
} COMBOBOXINFO, *PCOMBOBOXINFO, *LPCOMBOBOXINFO;


BOOL
__stdcall
GetComboBoxInfo(
         HWND hwndCombo,
            PCOMBOBOXINFO pcbi);


#pragma endregion








#pragma region Desktop Family



HWND
__stdcall
GetAncestor(
         HWND hwnd,
         UINT gaFlags);
#line 14137 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
HWND
__stdcall
RealChildWindowFromPoint(
         HWND hwndParent,
         POINT ptParentClientCoords);







UINT
__stdcall
RealGetWindowClassA(
         HWND hwnd,
                                             LPSTR ptszClassName,
         UINT cchClassNameMax);





UINT
__stdcall
RealGetWindowClassW(
         HWND hwnd,
                                             LPWSTR ptszClassName,
         UINT cchClassNameMax);
#line 14175 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
typedef struct tagALTTABINFO
{
    DWORD cbSize;
    int cItems;
    int cColumns;
    int cRows;
    int iColFocus;
    int iRowFocus;
    int cxItem;
    int cyItem;
    POINT ptStart;
} ALTTABINFO, *PALTTABINFO, *LPALTTABINFO;


BOOL
__stdcall
GetAltTabInfoA(
             HWND hwnd,
         int iItem,
            PALTTABINFO pati,
                                  LPSTR pszItemText,
         UINT cchItemText);

BOOL
__stdcall
GetAltTabInfoW(
             HWND hwnd,
         int iItem,
            PALTTABINFO pati,
                                  LPWSTR pszItemText,
         UINT cchItemText);
#line 14217 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
DWORD
__stdcall
GetListBoxInfo(
         HWND hwnd);


#pragma endregion




#pragma region Desktop Family





BOOL
__stdcall
LockWorkStation(
    void);





BOOL
__stdcall
UserHandleGrantAccess(
         HANDLE hUserHandle,
         HANDLE hJob,
         BOOL bGrant);




#pragma endregion







#pragma region Desktop Family


struct HRAWINPUT__{int unused;}; typedef struct HRAWINPUT__ *HRAWINPUT;


#pragma endregion
#line 14291 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
#pragma region Desktop Family





typedef struct tagRAWINPUTHEADER {
    DWORD dwType;
    DWORD dwSize;
    HANDLE hDevice;
    WPARAM wParam;
} RAWINPUTHEADER, *PRAWINPUTHEADER, *LPRAWINPUTHEADER;


#pragma endregion








#pragma region Desktop Family
#line 14326 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
typedef struct tagRAWMOUSE {



    USHORT usFlags;




    union {
        ULONG ulButtons;
        struct {
            USHORT usButtonFlags;
            USHORT usButtonData;
        } ;
    } ;





    ULONG ulRawButtons;




    LONG lLastX;




    LONG lLastY;




    ULONG ulExtraInformation;

} RAWMOUSE, *PRAWMOUSE, *LPRAWMOUSE;






#pragma endregion
#line 14416 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
#pragma region Desktop Family





typedef struct tagRAWKEYBOARD {



    USHORT MakeCode;





    USHORT Flags;

    USHORT Reserved;




    USHORT VKey;
    UINT Message;




    ULONG ExtraInformation;


} RAWKEYBOARD, *PRAWKEYBOARD, *LPRAWKEYBOARD;


#pragma endregion
#line 14469 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
#pragma region Desktop Family





typedef struct tagRAWHID {
    DWORD dwSizeHid;
    DWORD dwCount;
    BYTE bRawData[1];
} RAWHID, *PRAWHID, *LPRAWHID;


#pragma endregion





#pragma region Desktop Family


typedef struct tagRAWINPUT {
    RAWINPUTHEADER header;
    union {
        RAWMOUSE mouse;
        RAWKEYBOARD keyboard;
        RAWHID hid;
    } data;
} RAWINPUT, *PRAWINPUT, *LPRAWINPUT;


#pragma endregion
#line 14518 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
#pragma region Desktop Family



UINT
__stdcall
GetRawInputData(
         HRAWINPUT hRawInput,
         UINT uiCommand,
                                                LPVOID pData,
            PUINT pcbSize,
         UINT cbSizeHeader);


#pragma endregion








#pragma region Desktop Family


typedef struct tagRID_DEVICE_INFO_MOUSE {
    DWORD dwId;
    DWORD dwNumberOfButtons;
    DWORD dwSampleRate;
    BOOL fHasHorizontalWheel;
} RID_DEVICE_INFO_MOUSE, *PRID_DEVICE_INFO_MOUSE;

typedef struct tagRID_DEVICE_INFO_KEYBOARD {
    DWORD dwType;
    DWORD dwSubType;
    DWORD dwKeyboardMode;
    DWORD dwNumberOfFunctionKeys;
    DWORD dwNumberOfIndicators;
    DWORD dwNumberOfKeysTotal;
} RID_DEVICE_INFO_KEYBOARD, *PRID_DEVICE_INFO_KEYBOARD;

typedef struct tagRID_DEVICE_INFO_HID {
    DWORD dwVendorId;
    DWORD dwProductId;
    DWORD dwVersionNumber;




    USHORT usUsagePage;
    USHORT usUsage;
} RID_DEVICE_INFO_HID, *PRID_DEVICE_INFO_HID;

typedef struct tagRID_DEVICE_INFO {
    DWORD cbSize;
    DWORD dwType;
    union {
        RID_DEVICE_INFO_MOUSE mouse;
        RID_DEVICE_INFO_KEYBOARD keyboard;
        RID_DEVICE_INFO_HID hid;
    } ;
} RID_DEVICE_INFO, *PRID_DEVICE_INFO, *LPRID_DEVICE_INFO;


UINT
__stdcall
GetRawInputDeviceInfoA(
             HANDLE hDevice,
         UINT uiCommand,
                                                     LPVOID pData,
            PUINT pcbSize);

UINT
__stdcall
GetRawInputDeviceInfoW(
             HANDLE hDevice,
         UINT uiCommand,
                                                     LPVOID pData,
            PUINT pcbSize);
#line 14609 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
UINT
__stdcall
GetRawInputBuffer(
                                     PRAWINPUT pData,
            PUINT pcbSize,
         UINT cbSizeHeader);




typedef struct tagRAWINPUTDEVICE {
    USHORT usUsagePage;
    USHORT usUsage;
    DWORD dwFlags;
    HWND hwndTarget;
} RAWINPUTDEVICE, *PRAWINPUTDEVICE, *LPRAWINPUTDEVICE;

typedef const RAWINPUTDEVICE* PCRAWINPUTDEVICE;


#pragma endregion
#line 14661 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
#pragma region Desktop Family



BOOL
__stdcall
RegisterRawInputDevices(
                             PCRAWINPUTDEVICE pRawInputDevices,
         UINT uiNumDevices,
         UINT cbSize);


UINT
__stdcall
GetRegisteredRawInputDevices(
                                      PRAWINPUTDEVICE pRawInputDevices,
            PUINT puiNumDevices,
         UINT cbSize);


typedef struct tagRAWINPUTDEVICELIST {
    HANDLE hDevice;
    DWORD dwType;
} RAWINPUTDEVICELIST, *PRAWINPUTDEVICELIST;


UINT
__stdcall
GetRawInputDeviceList(
                                     PRAWINPUTDEVICELIST pRawInputDeviceList,
            PUINT puiNumDevices,
         UINT cbSize);


LRESULT
__stdcall
DefRawInputProc(
                       PRAWINPUT* paRawInput,
         INT nInput,
         UINT cbSizeHeader);


#pragma endregion
#line 15146 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
#pragma region Desktop Family



BOOL
__stdcall
ShutdownBlockReasonCreate(
         HWND hWnd,
         LPCWSTR pwszReason);


BOOL
__stdcall
ShutdownBlockReasonQuery(
         HWND hWnd,
                                LPWSTR pwszBuff,
            DWORD *pcchBuff);


BOOL
__stdcall
ShutdownBlockReasonDestroy(
         HWND hWnd);


#pragma endregion
#line 15337 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
#pragma region Desktop Family
#line 15362 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winuser.h"
#pragma option pop
#line 202 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\windows.h"


#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnls.h"
#line 18 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnls.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 31 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnls.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\datetimeapi.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 55 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\datetimeapi.h"
#pragma region Desktop Family or OneCore Family





int
__stdcall
GetDateFormatA(
         LCID Locale,
         DWORD dwFlags,
             const SYSTEMTIME * lpDate,
             LPCSTR lpFormat,
                              LPSTR lpDateStr,
         int cchDate
    );



int
__stdcall
GetDateFormatW(
         LCID Locale,
         DWORD dwFlags,
             const SYSTEMTIME * lpDate,
             LPCWSTR lpFormat,
                              LPWSTR lpDateStr,
         int cchDate
    );
#line 94 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\datetimeapi.h"
int
__stdcall
GetTimeFormatA(
         LCID Locale,
         DWORD dwFlags,
             const SYSTEMTIME * lpTime,
             LPCSTR lpFormat,
                              LPSTR lpTimeStr,
         int cchTime
    );



int
__stdcall
GetTimeFormatW(
         LCID Locale,
         DWORD dwFlags,
             const SYSTEMTIME * lpTime,
             LPCWSTR lpFormat,
                              LPWSTR lpTimeStr,
         int cchTime
    );








#pragma endregion








#pragma region Application Family or OneCore Family




int
__stdcall
GetTimeFormatEx(
             LPCWSTR lpLocaleName,
         DWORD dwFlags,
             const SYSTEMTIME * lpTime,
             LPCWSTR lpFormat,
                              LPWSTR lpTimeStr,
         int cchTime
    );



int
__stdcall
GetDateFormatEx(
             LPCWSTR lpLocaleName,
         DWORD dwFlags,
             const SYSTEMTIME * lpDate,
             LPCWSTR lpFormat,
                              LPWSTR lpDateStr,
         int cchDate,
             LPCWSTR lpCalendar
    );



#pragma endregion
#line 176 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\datetimeapi.h"
#pragma region Desktop Family or OneCore Family






int
__stdcall
GetDurationFormatEx(
             LPCWSTR lpLocaleName,
         DWORD dwFlags,
             const SYSTEMTIME * lpDuration,
         ULONGLONG ullDuration,
             LPCWSTR lpFormat,
                                  LPWSTR lpDurationStr,
         int cchDuration
    );



#pragma endregion
#line 218 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\datetimeapi.h"
#pragma option pop
#line 31 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnls.h"

#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\libloaderapi.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 713 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\libloaderapi.h"
#pragma option pop
#line 32 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnls.h"
#line 44 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnls.h"
#pragma region Application Family or OneCore Family
#line 952 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnls.h"
typedef DWORD LGRPID;




typedef DWORD LCTYPE;




typedef DWORD CALTYPE;





typedef DWORD CALID;






typedef struct _cpinfo {
    UINT MaxCharSize;
    BYTE DefaultChar[2];
    BYTE LeadByte[12];
} CPINFO, *LPCPINFO;

typedef struct _cpinfoexA {
    UINT MaxCharSize;
    BYTE DefaultChar[2];
    BYTE LeadByte[12];
    WCHAR UnicodeDefaultChar;
    UINT CodePage;
    CHAR CodePageName[260];
} CPINFOEXA, *LPCPINFOEXA;
typedef struct _cpinfoexW {
    UINT MaxCharSize;
    BYTE DefaultChar[2];
    BYTE LeadByte[12];
    WCHAR UnicodeDefaultChar;
    UINT CodePage;
    WCHAR CodePageName[260];
} CPINFOEXW, *LPCPINFOEXW;

typedef CPINFOEXW CPINFOEX;
typedef LPCPINFOEXW LPCPINFOEX;
#line 1010 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnls.h"
typedef struct _numberfmtA {
    UINT NumDigits;
    UINT LeadingZero;
    UINT Grouping;
    LPSTR lpDecimalSep;
    LPSTR lpThousandSep;
    UINT NegativeOrder;
} NUMBERFMTA, *LPNUMBERFMTA;
typedef struct _numberfmtW {
    UINT NumDigits;
    UINT LeadingZero;
    UINT Grouping;
    LPWSTR lpDecimalSep;
    LPWSTR lpThousandSep;
    UINT NegativeOrder;
} NUMBERFMTW, *LPNUMBERFMTW;

typedef NUMBERFMTW NUMBERFMT;
typedef LPNUMBERFMTW LPNUMBERFMT;
#line 1039 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnls.h"
typedef struct _currencyfmtA {
    UINT NumDigits;
    UINT LeadingZero;
    UINT Grouping;
    LPSTR lpDecimalSep;
    LPSTR lpThousandSep;
    UINT NegativeOrder;
    UINT PositiveOrder;
    LPSTR lpCurrencySymbol;
} CURRENCYFMTA, *LPCURRENCYFMTA;
typedef struct _currencyfmtW {
    UINT NumDigits;
    UINT LeadingZero;
    UINT Grouping;
    LPWSTR lpDecimalSep;
    LPWSTR lpThousandSep;
    UINT NegativeOrder;
    UINT PositiveOrder;
    LPWSTR lpCurrencySymbol;
} CURRENCYFMTW, *LPCURRENCYFMTW;

typedef CURRENCYFMTW CURRENCYFMT;
typedef LPCURRENCYFMTW LPCURRENCYFMT;
#line 1071 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnls.h"
enum SYSNLS_FUNCTION{
    COMPARE_STRING = 0x0001,
};
typedef DWORD NLS_FUNCTION;
#line 1104 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnls.h"
typedef struct _nlsversioninfo{
    DWORD dwNLSVersionInfoSize;
    DWORD dwNLSVersion;
    DWORD dwDefinedVersion;
} NLSVERSIONINFO, *LPNLSVERSIONINFO;





typedef struct _nlsversioninfoex{
    DWORD dwNLSVersionInfoSize;
    DWORD dwNLSVersion;
    DWORD dwDefinedVersion;
    DWORD dwEffectiveId;
    GUID guidCustomVersion;
} NLSVERSIONINFOEX, *LPNLSVERSIONINFOEX;





typedef LONG GEOID;
typedef DWORD GEOTYPE;
typedef DWORD GEOCLASS;







enum SYSGEOTYPE {
    GEO_NATION = 0x0001,
    GEO_LATITUDE = 0x0002,
    GEO_LONGITUDE = 0x0003,
    GEO_ISO2 = 0x0004,
    GEO_ISO3 = 0x0005,
    GEO_RFC1766 = 0x0006,
    GEO_LCID = 0x0007,
    GEO_FRIENDLYNAME= 0x0008,
    GEO_OFFICIALNAME= 0x0009,
    GEO_TIMEZONES = 0x000A,
    GEO_OFFICIALLANGUAGES = 0x000B,
    GEO_ISO_UN_NUMBER = 0x000C,
    GEO_PARENT = 0x000D,
    GEO_DIALINGCODE = 0x000E
};





enum SYSGEOCLASS {
    GEOCLASS_NATION = 16,
    GEOCLASS_REGION = 14,
    GEOCLASS_ALL = 0
};
#line 1198 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnls.h"
typedef BOOL (__stdcall* LANGUAGEGROUP_ENUMPROCA)(LGRPID, LPSTR, LPSTR, DWORD, LONG_PTR);
typedef BOOL (__stdcall* LANGGROUPLOCALE_ENUMPROCA)(LGRPID, LCID, LPSTR, LONG_PTR);
typedef BOOL (__stdcall* UILANGUAGE_ENUMPROCA)(LPSTR, LONG_PTR);
typedef BOOL (__stdcall* CODEPAGE_ENUMPROCA)(LPSTR);
typedef BOOL (__stdcall* DATEFMT_ENUMPROCA)(LPSTR);
typedef BOOL (__stdcall* DATEFMT_ENUMPROCEXA)(LPSTR, CALID);
typedef BOOL (__stdcall* TIMEFMT_ENUMPROCA)(LPSTR);
typedef BOOL (__stdcall* CALINFO_ENUMPROCA)(LPSTR);
typedef BOOL (__stdcall* CALINFO_ENUMPROCEXA)(LPSTR, CALID);
typedef BOOL (__stdcall* LOCALE_ENUMPROCA)(LPSTR);
typedef BOOL (__stdcall* LOCALE_ENUMPROCW)(LPWSTR);

typedef BOOL (__stdcall* LANGUAGEGROUP_ENUMPROCW)(LGRPID, LPWSTR, LPWSTR, DWORD, LONG_PTR);
typedef BOOL (__stdcall* LANGGROUPLOCALE_ENUMPROCW)(LGRPID, LCID, LPWSTR, LONG_PTR);
typedef BOOL (__stdcall* UILANGUAGE_ENUMPROCW)(LPWSTR, LONG_PTR);
typedef BOOL (__stdcall* CODEPAGE_ENUMPROCW)(LPWSTR);
typedef BOOL (__stdcall* DATEFMT_ENUMPROCW)(LPWSTR);
typedef BOOL (__stdcall* DATEFMT_ENUMPROCEXW)(LPWSTR, CALID);
typedef BOOL (__stdcall* TIMEFMT_ENUMPROCW)(LPWSTR);
typedef BOOL (__stdcall* CALINFO_ENUMPROCW)(LPWSTR);
typedef BOOL (__stdcall* CALINFO_ENUMPROCEXW)(LPWSTR, CALID);
typedef BOOL (__stdcall* GEO_ENUMPROC)(GEOID);
#line 1281 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnls.h"
typedef struct _FILEMUIINFO {
    DWORD dwSize;
    DWORD dwVersion;
    DWORD dwFileType;
    BYTE pChecksum[16];
    BYTE pServiceChecksum[16];
    DWORD dwLanguageNameOffset;
    DWORD dwTypeIDMainSize;
    DWORD dwTypeIDMainOffset;
    DWORD dwTypeNameMainOffset;
    DWORD dwTypeIDMUISize;
    DWORD dwTypeIDMUIOffset;
    DWORD dwTypeNameMUIOffset;
    BYTE abBuffer[8];
} FILEMUIINFO, *PFILEMUIINFO;



#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\stringapiset.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 21 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\stringapiset.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnls.h"
#line 21 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\stringapiset.h"
#line 82 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\stringapiset.h"
#pragma region Desktop or OneCore Family




int
__stdcall
CompareStringW(
         LCID Locale,
         DWORD dwCmpFlags,
                               PCNZWCH lpString1,
         int cchCount1,
                               PCNZWCH lpString2,
         int cchCount2
    );






int
__stdcall
FoldStringW(
         DWORD dwMapFlags,
                            LPCWCH lpSrcStr,
         int cchSrc,
                              LPWSTR lpDestStr,
         int cchDest
    );






#pragma endregion

#pragma region Application or OneCore Family




BOOL
__stdcall
GetStringTypeExW(
         LCID Locale,
         DWORD dwInfoType,
                            LPCWCH lpSrcStr,
         int cchSrc,
                         LPWORD lpCharType
    );






BOOL
__stdcall
GetStringTypeW(
         DWORD dwInfoType,
                            LPCWCH lpSrcStr,
         int cchSrc,
          LPWORD lpCharType
    );
#line 158 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\stringapiset.h"
int
__stdcall
MultiByteToWideChar(
         UINT CodePage,
         DWORD dwFlags,
                                 LPCCH lpMultiByteStr,
         int cbMultiByte,
                                             LPWSTR lpWideCharStr,
         int cchWideChar
    );





int
__stdcall
WideCharToMultiByte(
         UINT CodePage,
         DWORD dwFlags,
                                 LPCWCH lpWideCharStr,
         int cchWideChar,
                                                   LPSTR lpMultiByteStr,
         int cbMultiByte,
             LPCCH lpDefaultChar,
              LPBOOL lpUsedDefaultChar
    );



#pragma endregion







#pragma option pop
#line 1298 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnls.h"
#line 1365 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnls.h"
BOOL
__stdcall
IsValidCodePage(
         UINT CodePage);


#pragma endregion

#pragma region Desktop Family or OneCore Family



UINT
__stdcall
GetACP(void);


UINT
__stdcall
GetOEMCP(void);


#pragma endregion

#pragma region Desktop or Pc Family or OneCore Family



BOOL
__stdcall
GetCPInfo(
         UINT CodePage,
          LPCPINFO lpCPInfo);


BOOL
__stdcall
GetCPInfoExA(
         UINT CodePage,
         DWORD dwFlags,
          LPCPINFOEXA lpCPInfoEx);

BOOL
__stdcall
GetCPInfoExW(
         UINT CodePage,
         DWORD dwFlags,
          LPCPINFOEXW lpCPInfoEx);







#pragma endregion

#pragma region Desktop Family








int
__stdcall
CompareStringA(
         LCID Locale,
         DWORD dwCmpFlags,
                          PCNZCH lpString1,
         int cchCount1,
                          PCNZCH lpString2,
         int cchCount2);
#line 1474 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnls.h"
#pragma endregion

#pragma region Desktop or OneCore Family
#line 1498 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnls.h"
int
__stdcall
LCMapStringW(
         LCID Locale,
         DWORD dwMapFlags,
                       LPCWSTR lpSrcStr,
         int cchSrc,
                                               LPWSTR lpDestStr,
         int cchDest);





int
__stdcall
LCMapStringA(
         LCID Locale,
         DWORD dwMapFlags,
                       LPCSTR lpSrcStr,
         int cchSrc,
                                               LPSTR lpDestStr,
         int cchDest);







int
__stdcall
GetLocaleInfoW(
         LCID Locale,
         LCTYPE LCType,
                              LPWSTR lpLCData,
         int cchData);






int
__stdcall
GetLocaleInfoA(
         LCID Locale,
         LCTYPE LCType,
                              LPSTR lpLCData,
         int cchData
    );






BOOL
__stdcall
SetLocaleInfoA(
         LCID Locale,
         LCTYPE LCType,
         LPCSTR lpLCData);

BOOL
__stdcall
SetLocaleInfoW(
         LCID Locale,
         LCTYPE LCType,
         LPCWSTR lpLCData);
#line 1578 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnls.h"
int
__stdcall
GetCalendarInfoA(
         LCID Locale,
         CALID Calendar,
         CALTYPE CalType,
                              LPSTR lpCalData,
         int cchData,
              LPDWORD lpValue);


int
__stdcall
GetCalendarInfoW(
         LCID Locale,
         CALID Calendar,
         CALTYPE CalType,
                              LPWSTR lpCalData,
         int cchData,
              LPDWORD lpValue);







BOOL
__stdcall
SetCalendarInfoA(
         LCID Locale,
         CALID Calendar,
         CALTYPE CalType,
         LPCSTR lpCalData);

BOOL
__stdcall
SetCalendarInfoW(
         LCID Locale,
         CALID Calendar,
         CALTYPE CalType,
         LPCWSTR lpCalData);








#pragma endregion

#pragma region Desktop Family
#line 1659 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnls.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family



BOOL
__stdcall
IsDBCSLeadByte(
         BYTE TestChar
    );


BOOL
__stdcall
IsDBCSLeadByteEx(
         UINT CodePage,
         BYTE TestChar
    );


#pragma endregion

#pragma region Application Family or OneCore Family
#line 1705 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnls.h"
#pragma endregion

#pragma region Desktop Family
#line 1727 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnls.h"
int
__stdcall
GetNumberFormatA(
         LCID Locale,
         DWORD dwFlags,
         LPCSTR lpValue,
             const NUMBERFMTA *lpFormat,
                                LPSTR lpNumberStr,
         int cchNumber);


int
__stdcall
GetNumberFormatW(
         LCID Locale,
         DWORD dwFlags,
         LPCWSTR lpValue,
             const NUMBERFMTW *lpFormat,
                                LPWSTR lpNumberStr,
         int cchNumber);







#pragma endregion

#pragma region Desktop Family or OneCore Family




int
__stdcall
GetCurrencyFormatA(
         LCID Locale,
         DWORD dwFlags,
         LPCSTR lpValue,
             const CURRENCYFMTA *lpFormat,
                                  LPSTR lpCurrencyStr,
         int cchCurrency);


int
__stdcall
GetCurrencyFormatW(
         LCID Locale,
         DWORD dwFlags,
         LPCWSTR lpValue,
             const CURRENCYFMTW *lpFormat,
                                  LPWSTR lpCurrencyStr,
         int cchCurrency);
#line 1789 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnls.h"
BOOL
__stdcall
EnumCalendarInfoA(
         CALINFO_ENUMPROCA lpCalInfoEnumProc,
         LCID Locale,
         CALID Calendar,
         CALTYPE CalType);


BOOL
__stdcall
EnumCalendarInfoW(
         CALINFO_ENUMPROCW lpCalInfoEnumProc,
         LCID Locale,
         CALID Calendar,
         CALTYPE CalType);
#line 1814 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnls.h"
BOOL
__stdcall
EnumCalendarInfoExA(
         CALINFO_ENUMPROCEXA lpCalInfoEnumProcEx,
         LCID Locale,
         CALID Calendar,
         CALTYPE CalType);


BOOL
__stdcall
EnumCalendarInfoExW(
         CALINFO_ENUMPROCEXW lpCalInfoEnumProcEx,
         LCID Locale,
         CALID Calendar,
         CALTYPE CalType);
#line 1839 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnls.h"
BOOL
__stdcall
EnumTimeFormatsA(
         TIMEFMT_ENUMPROCA lpTimeFmtEnumProc,
         LCID Locale,
         DWORD dwFlags);


BOOL
__stdcall
EnumTimeFormatsW(
         TIMEFMT_ENUMPROCW lpTimeFmtEnumProc,
         LCID Locale,
         DWORD dwFlags);
#line 1861 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnls.h"
BOOL
__stdcall
EnumDateFormatsA(
         DATEFMT_ENUMPROCA lpDateFmtEnumProc,
         LCID Locale,
         DWORD dwFlags);


BOOL
__stdcall
EnumDateFormatsW(
         DATEFMT_ENUMPROCW lpDateFmtEnumProc,
         LCID Locale,
         DWORD dwFlags);
#line 1884 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnls.h"
BOOL
__stdcall
EnumDateFormatsExA(
         DATEFMT_ENUMPROCEXA lpDateFmtEnumProcEx,
         LCID Locale,
         DWORD dwFlags);


BOOL
__stdcall
EnumDateFormatsExW(
         DATEFMT_ENUMPROCEXW lpDateFmtEnumProcEx,
         LCID Locale,
         DWORD dwFlags);
#line 1907 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnls.h"
BOOL
__stdcall
IsValidLanguageGroup(
         LGRPID LanguageGroup,
         DWORD dwFlags);




BOOL
__stdcall
GetNLSVersion(
            NLS_FUNCTION Function,
            LCID Locale,
            LPNLSVERSIONINFO lpVersionInformation);


BOOL
__stdcall
IsNLSDefinedString(
         NLS_FUNCTION Function,
         DWORD dwFlags,
         LPNLSVERSIONINFO lpVersionInformation,
                       LPCWSTR lpString,
         INT cchStr);



BOOL
__stdcall
IsValidLocale(
         LCID Locale,
         DWORD dwFlags);


#pragma endregion

#pragma region Application Family or OneCore Family



int
__stdcall
GetGeoInfoA(
         GEOID Location,
         GEOTYPE GeoType,
                              LPSTR lpGeoData,
         int cchData,
         LANGID LangId);

int
__stdcall
GetGeoInfoW(
         GEOID Location,
         GEOTYPE GeoType,
                              LPWSTR lpGeoData,
         int cchData,
         LANGID LangId);






#pragma endregion

#pragma region Desktop or PC Family or OneCore Family



BOOL
__stdcall
EnumSystemGeoID(
         GEOCLASS GeoClass,
         GEOID ParentGeoId,
         GEO_ENUMPROC lpGeoEnumProc);


#pragma endregion


#pragma region Application Family or OneCore Family



GEOID
__stdcall
GetUserGeoID(
         GEOCLASS GeoClass);


#pragma endregion

#pragma region Desktop Family or OneCore Family



BOOL
__stdcall
SetUserGeoID(
         GEOID GeoId);


LCID
__stdcall
ConvertDefaultLocale(
         LCID Locale);


LCID
__stdcall
GetThreadLocale(void);


BOOL
__stdcall
SetThreadLocale(
         LCID Locale
    );


#pragma endregion

#pragma region Desktop Family




LANGID
__stdcall
GetSystemDefaultUILanguage(void);


LANGID
__stdcall
GetUserDefaultUILanguage(void);



#pragma endregion

#pragma region Desktop Family or OneCore Family



LANGID
__stdcall
GetSystemDefaultLangID(void);


LANGID
__stdcall
GetUserDefaultLangID(void);


LCID
__stdcall
GetSystemDefaultLCID(void);


LCID
__stdcall
GetUserDefaultLCID(void);


#pragma endregion

#pragma region Desktop Family




#pragma endregion

#pragma region Desktop Family or OneCore Family



LANGID
__stdcall
SetThreadUILanguage( LANGID LangId);
#line 2119 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnls.h"
#pragma endregion

#pragma region Desktop Family or Phone Family or OneCore Family
#line 2138 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnls.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family
#line 2214 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnls.h"
#pragma endregion

#pragma region Desktop Family
#line 2235 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnls.h"
#pragma endregion






#pragma region Application Family



BOOL
__stdcall
GetStringTypeExA(
                         LCID Locale,
                         DWORD dwInfoType,
                        LPCSTR lpSrcStr,
                         int cchSrc,
                         LPWORD lpCharType);





#pragma endregion

#pragma region Desktop Family
#line 2276 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnls.h"
BOOL
__stdcall
GetStringTypeA(
         LCID Locale,
         DWORD dwInfoType,
                       LPCSTR lpSrcStr,
         int cchSrc,
          LPWORD lpCharType);


int
__stdcall
FoldStringA(
         DWORD dwMapFlags,
                       LPCSTR lpSrcStr,
         int cchSrc,
                              LPSTR lpDestStr,
         int cchDest);





#pragma endregion

#pragma region Desktop Family or OneCore Family





BOOL
__stdcall
EnumSystemLocalesA(
         LOCALE_ENUMPROCA lpLocaleEnumProc,
         DWORD dwFlags);

BOOL
__stdcall
EnumSystemLocalesW(
         LOCALE_ENUMPROCW lpLocaleEnumProc,
         DWORD dwFlags);
#line 2327 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnls.h"
#pragma endregion

#pragma region Desktop Family





BOOL
__stdcall
EnumSystemLanguageGroupsA(
         LANGUAGEGROUP_ENUMPROCA lpLanguageGroupEnumProc,
         DWORD dwFlags,
         LONG_PTR lParam);

BOOL
__stdcall
EnumSystemLanguageGroupsW(
         LANGUAGEGROUP_ENUMPROCW lpLanguageGroupEnumProc,
         DWORD dwFlags,
         LONG_PTR lParam);







BOOL
__stdcall
EnumLanguageGroupLocalesA(
         LANGGROUPLOCALE_ENUMPROCA lpLangGroupLocaleEnumProc,
         LGRPID LanguageGroup,
         DWORD dwFlags,
         LONG_PTR lParam);

BOOL
__stdcall
EnumLanguageGroupLocalesW(
         LANGGROUPLOCALE_ENUMPROCW lpLangGroupLocaleEnumProc,
         LGRPID LanguageGroup,
         DWORD dwFlags,
         LONG_PTR lParam);







BOOL
__stdcall
EnumUILanguagesA(
         UILANGUAGE_ENUMPROCA lpUILanguageEnumProc,
         DWORD dwFlags,
         LONG_PTR lParam);

BOOL
__stdcall
EnumUILanguagesW(
         UILANGUAGE_ENUMPROCW lpUILanguageEnumProc,
         DWORD dwFlags,
         LONG_PTR lParam);








#pragma endregion

#pragma region Desktop or PC Family or OneCore Family



BOOL
__stdcall
EnumSystemCodePagesA(
         CODEPAGE_ENUMPROCA lpCodePageEnumProc,
         DWORD dwFlags);

BOOL
__stdcall
EnumSystemCodePagesW(
         CODEPAGE_ENUMPROCW lpCodePageEnumProc,
         DWORD dwFlags);







#pragma endregion





#pragma region Application Family
#line 2451 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnls.h"
#pragma endregion

#pragma region Application Family or OneCore Family
#line 2472 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnls.h"
#pragma endregion

#pragma region Application Family
#line 2490 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnls.h"
#pragma endregion

#pragma region Application Family or OneCore Family
#line 2508 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnls.h"
#pragma endregion

#pragma region Application Family
#line 2536 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnls.h"
#pragma endregion
#line 2809 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnls.h"
#pragma region Desktop Family




#pragma endregion
#line 2828 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnls.h"
#pragma option pop
#line 204 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\windows.h"



#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wincon.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 43 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wincon.h"
#pragma region Application Family


typedef struct _COORD {
    SHORT X;
    SHORT Y;
} COORD, *PCOORD;


#pragma endregion

#pragma region Desktop Family or OneCore Family


typedef struct _SMALL_RECT {
    SHORT Left;
    SHORT Top;
    SHORT Right;
    SHORT Bottom;
} SMALL_RECT, *PSMALL_RECT;


#pragma endregion

#pragma region Application Family


typedef struct _KEY_EVENT_RECORD {
    BOOL bKeyDown;
    WORD wRepeatCount;
    WORD wVirtualKeyCode;
    WORD wVirtualScanCode;
    union {
        WCHAR UnicodeChar;
        CHAR AsciiChar;
    } uChar;
    DWORD dwControlKeyState;
} KEY_EVENT_RECORD, *PKEY_EVENT_RECORD;
#line 103 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wincon.h"
typedef struct _MOUSE_EVENT_RECORD {
    COORD dwMousePosition;
    DWORD dwButtonState;
    DWORD dwControlKeyState;
    DWORD dwEventFlags;
} MOUSE_EVENT_RECORD, *PMOUSE_EVENT_RECORD;
#line 131 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wincon.h"
typedef struct _WINDOW_BUFFER_SIZE_RECORD {
    COORD dwSize;
} WINDOW_BUFFER_SIZE_RECORD, *PWINDOW_BUFFER_SIZE_RECORD;

typedef struct _MENU_EVENT_RECORD {
    UINT dwCommandId;
} MENU_EVENT_RECORD, *PMENU_EVENT_RECORD;

typedef struct _FOCUS_EVENT_RECORD {
    BOOL bSetFocus;
} FOCUS_EVENT_RECORD, *PFOCUS_EVENT_RECORD;

typedef struct _INPUT_RECORD {
    WORD EventType;
    union {
        KEY_EVENT_RECORD KeyEvent;
        MOUSE_EVENT_RECORD MouseEvent;
        WINDOW_BUFFER_SIZE_RECORD WindowBufferSizeEvent;
        MENU_EVENT_RECORD MenuEvent;
        FOCUS_EVENT_RECORD FocusEvent;
    } Event;
} INPUT_RECORD, *PINPUT_RECORD;


#pragma endregion
#line 167 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wincon.h"
#pragma region Desktop Family or OneCore Family


typedef struct _CHAR_INFO {
    union {
        WCHAR UnicodeChar;
        CHAR AsciiChar;
    } Char;
    WORD Attributes;
} CHAR_INFO, *PCHAR_INFO;


#pragma endregion
#line 203 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wincon.h"
#pragma region Desktop Family or OneCore Family


typedef struct _CONSOLE_SCREEN_BUFFER_INFO {
    COORD dwSize;
    COORD dwCursorPosition;
    WORD wAttributes;
    SMALL_RECT srWindow;
    COORD dwMaximumWindowSize;
} CONSOLE_SCREEN_BUFFER_INFO, *PCONSOLE_SCREEN_BUFFER_INFO;

typedef struct _CONSOLE_SCREEN_BUFFER_INFOEX {
    ULONG cbSize;
    COORD dwSize;
    COORD dwCursorPosition;
    WORD wAttributes;
    SMALL_RECT srWindow;
    COORD dwMaximumWindowSize;
    WORD wPopupAttributes;
    BOOL bFullscreenSupported;
    COLORREF ColorTable[16];
} CONSOLE_SCREEN_BUFFER_INFOEX, *PCONSOLE_SCREEN_BUFFER_INFOEX;

typedef struct _CONSOLE_CURSOR_INFO {
    DWORD dwSize;
    BOOL bVisible;
} CONSOLE_CURSOR_INFO, *PCONSOLE_CURSOR_INFO;

typedef struct _CONSOLE_FONT_INFO {
    DWORD nFont;
    COORD dwFontSize;
} CONSOLE_FONT_INFO, *PCONSOLE_FONT_INFO;


typedef struct _CONSOLE_FONT_INFOEX {
    ULONG cbSize;
    DWORD nFont;
    COORD dwFontSize;
    UINT FontFamily;
    UINT FontWeight;
    WCHAR FaceName[32];
} CONSOLE_FONT_INFOEX, *PCONSOLE_FONT_INFOEX;




typedef struct _CONSOLE_HISTORY_INFO {
    UINT cbSize;
    UINT HistoryBufferSize;
    UINT NumberOfHistoryBuffers;
    DWORD dwFlags;
} CONSOLE_HISTORY_INFO, *PCONSOLE_HISTORY_INFO;


#pragma endregion



#pragma region Desktop Family


typedef struct _CONSOLE_SELECTION_INFO {
    DWORD dwFlags;
    COORD dwSelectionAnchor;
    SMALL_RECT srSelection;
} CONSOLE_SELECTION_INFO, *PCONSOLE_SELECTION_INFO;


#pragma endregion
#line 284 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wincon.h"
#pragma region Application Family






typedef
BOOL
(__stdcall *PHANDLER_ROUTINE)(
         DWORD CtrlType
    );


#pragma endregion
#line 329 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wincon.h"
#pragma region Desktop Family or OneCore Family







BOOL
__stdcall
PeekConsoleInputW(
         HANDLE hConsoleInput,
                          PINPUT_RECORD lpBuffer,
         DWORD nLength,
          LPDWORD lpNumberOfEventsRead
    );





BOOL
__stdcall
WriteConsoleInputA(
         HANDLE hConsoleInput,
                        const INPUT_RECORD *lpBuffer,
         DWORD nLength,
          LPDWORD lpNumberOfEventsWritten
    );

BOOL
__stdcall
WriteConsoleInputW(
         HANDLE hConsoleInput,
                        const INPUT_RECORD *lpBuffer,
         DWORD nLength,
          LPDWORD lpNumberOfEventsWritten
    );







BOOL
__stdcall
ReadConsoleOutputA(
         HANDLE hConsoleOutput,
                                                  PCHAR_INFO lpBuffer,
         COORD dwBufferSize,
         COORD dwBufferCoord,
            PSMALL_RECT lpReadRegion
    );

BOOL
__stdcall
ReadConsoleOutputW(
         HANDLE hConsoleOutput,
                                                  PCHAR_INFO lpBuffer,
         COORD dwBufferSize,
         COORD dwBufferCoord,
            PSMALL_RECT lpReadRegion
    );







BOOL
__stdcall
WriteConsoleOutputA(
         HANDLE hConsoleOutput,
                                                const CHAR_INFO *lpBuffer,
         COORD dwBufferSize,
         COORD dwBufferCoord,
            PSMALL_RECT lpWriteRegion
    );

BOOL
__stdcall
WriteConsoleOutputW(
         HANDLE hConsoleOutput,
                                                const CHAR_INFO *lpBuffer,
         COORD dwBufferSize,
         COORD dwBufferCoord,
            PSMALL_RECT lpWriteRegion
    );







BOOL
__stdcall
ReadConsoleOutputCharacterA(
         HANDLE hConsoleOutput,
                          LPSTR lpCharacter,
         DWORD nLength,
         COORD dwReadCoord,
          LPDWORD lpNumberOfCharsRead
    );

BOOL
__stdcall
ReadConsoleOutputCharacterW(
         HANDLE hConsoleOutput,
                          LPWSTR lpCharacter,
         DWORD nLength,
         COORD dwReadCoord,
          LPDWORD lpNumberOfCharsRead
    );







BOOL
__stdcall
ReadConsoleOutputAttribute(
         HANDLE hConsoleOutput,
                          LPWORD lpAttribute,
         DWORD nLength,
         COORD dwReadCoord,
          LPDWORD lpNumberOfAttrsRead
    );


BOOL
__stdcall
WriteConsoleOutputCharacterA(
         HANDLE hConsoleOutput,
                        LPCSTR lpCharacter,
         DWORD nLength,
         COORD dwWriteCoord,
          LPDWORD lpNumberOfCharsWritten
    );

BOOL
__stdcall
WriteConsoleOutputCharacterW(
         HANDLE hConsoleOutput,
                        LPCWSTR lpCharacter,
         DWORD nLength,
         COORD dwWriteCoord,
          LPDWORD lpNumberOfCharsWritten
    );







BOOL
__stdcall
WriteConsoleOutputAttribute(
         HANDLE hConsoleOutput,
                        const WORD *lpAttribute,
         DWORD nLength,
         COORD dwWriteCoord,
          LPDWORD lpNumberOfAttrsWritten
    );


BOOL
__stdcall
FillConsoleOutputCharacterA(
         HANDLE hConsoleOutput,
         CHAR cCharacter,
         DWORD nLength,
         COORD dwWriteCoord,
          LPDWORD lpNumberOfCharsWritten
    );

BOOL
__stdcall
FillConsoleOutputCharacterW(
         HANDLE hConsoleOutput,
         WCHAR cCharacter,
         DWORD nLength,
         COORD dwWriteCoord,
          LPDWORD lpNumberOfCharsWritten
    );







BOOL
__stdcall
FillConsoleOutputAttribute(
         HANDLE hConsoleOutput,
         WORD wAttribute,
         DWORD nLength,
         COORD dwWriteCoord,
          LPDWORD lpNumberOfAttrsWritten
    );





BOOL
__stdcall
GetConsoleScreenBufferInfo(
         HANDLE hConsoleOutput,
          PCONSOLE_SCREEN_BUFFER_INFO lpConsoleScreenBufferInfo
    );


BOOL
__stdcall
GetConsoleScreenBufferInfoEx(
         HANDLE hConsoleOutput,
            PCONSOLE_SCREEN_BUFFER_INFOEX lpConsoleScreenBufferInfoEx);


BOOL
__stdcall
SetConsoleScreenBufferInfoEx(
         HANDLE hConsoleOutput,
         PCONSOLE_SCREEN_BUFFER_INFOEX lpConsoleScreenBufferInfoEx);


COORD
__stdcall
GetLargestConsoleWindowSize(
         HANDLE hConsoleOutput
    );


BOOL
__stdcall
GetConsoleCursorInfo(
         HANDLE hConsoleOutput,
          PCONSOLE_CURSOR_INFO lpConsoleCursorInfo
    );


#pragma endregion

#pragma region Desktop Family





BOOL
__stdcall
GetCurrentConsoleFont(
         HANDLE hConsoleOutput,
         BOOL bMaximumWindow,
          PCONSOLE_FONT_INFO lpConsoleCurrentFont
    );



BOOL
__stdcall
GetCurrentConsoleFontEx(
         HANDLE hConsoleOutput,
         BOOL bMaximumWindow,
          PCONSOLE_FONT_INFOEX lpConsoleCurrentFontEx);


BOOL
__stdcall
SetCurrentConsoleFontEx(
         HANDLE hConsoleOutput,
         BOOL bMaximumWindow,
         PCONSOLE_FONT_INFOEX lpConsoleCurrentFontEx);



BOOL
__stdcall
GetConsoleHistoryInfo(
          PCONSOLE_HISTORY_INFO lpConsoleHistoryInfo);


BOOL
__stdcall
SetConsoleHistoryInfo(
         PCONSOLE_HISTORY_INFO lpConsoleHistoryInfo);


COORD
__stdcall
GetConsoleFontSize(
         HANDLE hConsoleOutput,
         DWORD nFont
    );


BOOL
__stdcall
GetConsoleSelectionInfo(
          PCONSOLE_SELECTION_INFO lpConsoleSelectionInfo
    );




BOOL
__stdcall
GetNumberOfConsoleMouseButtons(
          LPDWORD lpNumberOfMouseButtons
    );


#pragma endregion

#pragma region Desktop Family or OneCore Family



BOOL
__stdcall
SetConsoleActiveScreenBuffer(
         HANDLE hConsoleOutput
    );


BOOL
__stdcall
FlushConsoleInputBuffer(
         HANDLE hConsoleInput
    );


BOOL
__stdcall
SetConsoleScreenBufferSize(
         HANDLE hConsoleOutput,
         COORD dwSize
    );


BOOL
__stdcall
SetConsoleCursorPosition(
         HANDLE hConsoleOutput,
         COORD dwCursorPosition
    );


BOOL
__stdcall
SetConsoleCursorInfo(
         HANDLE hConsoleOutput,
         const CONSOLE_CURSOR_INFO *lpConsoleCursorInfo
    );


BOOL
__stdcall
ScrollConsoleScreenBufferA(
         HANDLE hConsoleOutput,
         const SMALL_RECT *lpScrollRectangle,
             const SMALL_RECT *lpClipRectangle,
         COORD dwDestinationOrigin,
         const CHAR_INFO *lpFill
    );

BOOL
__stdcall
ScrollConsoleScreenBufferW(
         HANDLE hConsoleOutput,
         const SMALL_RECT *lpScrollRectangle,
             const SMALL_RECT *lpClipRectangle,
         COORD dwDestinationOrigin,
         const CHAR_INFO *lpFill
    );







BOOL
__stdcall
SetConsoleWindowInfo(
         HANDLE hConsoleOutput,
         BOOL bAbsolute,
         const SMALL_RECT *lpConsoleWindow
    );


BOOL
__stdcall
SetConsoleTextAttribute(
         HANDLE hConsoleOutput,
         WORD wAttributes
    );


BOOL
__stdcall
GenerateConsoleCtrlEvent(
         DWORD dwCtrlEvent,
         DWORD dwProcessGroupId);


BOOL
__stdcall
FreeConsole(
    void);



BOOL
__stdcall
AttachConsole(
         DWORD dwProcessId);






DWORD
__stdcall
GetConsoleTitleA(
                        LPSTR lpConsoleTitle,
         DWORD nSize
    );

DWORD
__stdcall
GetConsoleTitleW(
                        LPWSTR lpConsoleTitle,
         DWORD nSize
    );







#pragma endregion

#pragma region Desktop Family
#line 805 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wincon.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family



BOOL
__stdcall
SetConsoleTitleA(
         LPCSTR lpConsoleTitle
    );

BOOL
__stdcall
SetConsoleTitleW(
         LPCWSTR lpConsoleTitle
    );







#pragma endregion

#pragma region Application Family


typedef struct _CONSOLE_READCONSOLE_CONTROL {
    ULONG nLength;
    ULONG nInitialChars;
    ULONG dwCtrlWakeupMask;
    ULONG dwControlKeyState;
} CONSOLE_READCONSOLE_CONTROL, *PCONSOLE_READCONSOLE_CONTROL;


#pragma endregion





#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\consoleapi.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 22 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\consoleapi.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\windows.h"
#line 22 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\consoleapi.h"
#line 43 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\consoleapi.h"
#pragma region Desktop Family or OneCore Family




BOOL
__stdcall
AllocConsole(
    void
    );



UINT
__stdcall
GetConsoleCP(
    void
    );



BOOL
__stdcall
GetConsoleMode(
         HANDLE hConsoleHandle,
          LPDWORD lpMode
    );



UINT
__stdcall
GetConsoleOutputCP(
    void
    );



BOOL
__stdcall
GetNumberOfConsoleInputEvents(
         HANDLE hConsoleInput,
          LPDWORD lpNumberOfEvents
    );



BOOL
__stdcall
PeekConsoleInputA(
         HANDLE hConsoleInput,
                          PINPUT_RECORD lpBuffer,
         DWORD nLength,
          LPDWORD lpNumberOfEventsRead
    );
#line 106 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\consoleapi.h"
BOOL
__stdcall
ReadConsoleA(
         HANDLE hConsoleInput,
                                                                                                    LPVOID lpBuffer,
         DWORD nNumberOfCharsToRead,
                                                      LPDWORD lpNumberOfCharsRead,
             PCONSOLE_READCONSOLE_CONTROL pInputControl
    );



BOOL
__stdcall
ReadConsoleW(
         HANDLE hConsoleInput,
                                                                                                      LPVOID lpBuffer,
         DWORD nNumberOfCharsToRead,
                                                      LPDWORD lpNumberOfCharsRead,
             PCONSOLE_READCONSOLE_CONTROL pInputControl
    );
#line 136 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\consoleapi.h"
BOOL
__stdcall
ReadConsoleInputA(
         HANDLE hConsoleInput,
                                                    PINPUT_RECORD lpBuffer,
         DWORD nLength,
                                         LPDWORD lpNumberOfEventsRead
    );



BOOL
__stdcall
ReadConsoleInputW(
         HANDLE hConsoleInput,
                                                    PINPUT_RECORD lpBuffer,
         DWORD nLength,
                                         LPDWORD lpNumberOfEventsRead
    );
#line 163 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\consoleapi.h"
BOOL
__stdcall
SetConsoleCtrlHandler(
             PHANDLER_ROUTINE HandlerRoutine,
         BOOL Add
    );



BOOL
__stdcall
SetConsoleMode(
         HANDLE hConsoleHandle,
         DWORD dwMode
    );



BOOL
__stdcall
WriteConsoleA(
         HANDLE hConsoleOutput,
                                      const void * lpBuffer,
         DWORD nNumberOfCharsToWrite,
              LPDWORD lpNumberOfCharsWritten,
               LPVOID lpReserved
    );


BOOL
__stdcall
WriteConsoleW(
         HANDLE hConsoleOutput,
                                      const void * lpBuffer,
         DWORD nNumberOfCharsToWrite,
              LPDWORD lpNumberOfCharsWritten,
               LPVOID lpReserved
    );








#pragma endregion






#pragma option pop
#line 847 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wincon.h"



#pragma region Desktop Family or OneCore Family



HANDLE
__stdcall
CreateConsoleScreenBuffer(
         DWORD dwDesiredAccess,
         DWORD dwShareMode,
             const SECURITY_ATTRIBUTES *lpSecurityAttributes,
         DWORD dwFlags,
               LPVOID lpScreenBufferData
    );


BOOL
__stdcall
SetConsoleCP(
         UINT wCodePageID
    );


BOOL
__stdcall
SetConsoleOutputCP(
         UINT wCodePageID
    );


#pragma endregion

#pragma region Desktop Family








BOOL
__stdcall
GetConsoleDisplayMode(
          LPDWORD lpModeFlags);




BOOL
__stdcall
SetConsoleDisplayMode(
         HANDLE hConsoleOutput,
         DWORD dwFlags,
              PCOORD lpNewScreenBufferDimensions);


HWND
__stdcall
GetConsoleWindow(
    void
    );






DWORD
__stdcall
GetConsoleProcessList(
                                 LPDWORD lpdwProcessList,
         DWORD dwProcessCount);






BOOL
__stdcall
AddConsoleAliasA(
         LPSTR Source,
         LPSTR Target,
         LPSTR ExeName);

BOOL
__stdcall
AddConsoleAliasW(
         LPWSTR Source,
         LPWSTR Target,
         LPWSTR ExeName);







DWORD
__stdcall
GetConsoleAliasA(
         LPSTR Source,
                                     LPSTR TargetBuffer,
         DWORD TargetBufferLength,
         LPSTR ExeName);

DWORD
__stdcall
GetConsoleAliasW(
         LPWSTR Source,
                                     LPWSTR TargetBuffer,
         DWORD TargetBufferLength,
         LPWSTR ExeName);







DWORD
__stdcall
GetConsoleAliasesLengthA(
         LPSTR ExeName);

DWORD
__stdcall
GetConsoleAliasesLengthW(
         LPWSTR ExeName);







DWORD
__stdcall
GetConsoleAliasExesLengthA(
    void);

DWORD
__stdcall
GetConsoleAliasExesLengthW(
    void);







DWORD
__stdcall
GetConsoleAliasesA(
                                    LPSTR AliasBuffer,
         DWORD AliasBufferLength,
         LPSTR ExeName);

DWORD
__stdcall
GetConsoleAliasesW(
                                    LPWSTR AliasBuffer,
         DWORD AliasBufferLength,
         LPWSTR ExeName);







DWORD
__stdcall
GetConsoleAliasExesA(
                                      LPSTR ExeNameBuffer,
         DWORD ExeNameBufferLength);

DWORD
__stdcall
GetConsoleAliasExesW(
                                      LPWSTR ExeNameBuffer,
         DWORD ExeNameBufferLength);
#line 1042 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wincon.h"
#pragma endregion
#line 1055 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wincon.h"
#pragma option pop
#line 207 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\windows.h"

#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winver.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 20 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winver.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\verrsrc.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 14 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\verrsrc.h"
#pragma region Application Family or OneCore Family
#line 89 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\verrsrc.h"
#pragma endregion

#pragma region Desktop Family
#line 148 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\verrsrc.h"
typedef struct tagVS_FIXEDFILEINFO
{
    DWORD dwSignature;
    DWORD dwStrucVersion;
    DWORD dwFileVersionMS;
    DWORD dwFileVersionLS;
    DWORD dwProductVersionMS;
    DWORD dwProductVersionLS;
    DWORD dwFileFlagsMask;
    DWORD dwFileFlags;
    DWORD dwFileOS;
    DWORD dwFileType;
    DWORD dwFileSubtype;
    DWORD dwFileDateMS;
    DWORD dwFileDateLS;
} VS_FIXEDFILEINFO;








#pragma endregion

#pragma option pop
#line 20 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winver.h"







#pragma region Desktop Family or OneCore Family







DWORD
__stdcall
VerFindFileA(
                                     DWORD uFlags,
                                     LPCSTR szFileName,
                                     LPCSTR szWinDir,
                                     LPCSTR szAppDir,
                                     LPSTR szCurDir,
                                     PUINT puCurDirLen,
                                     LPSTR szDestDir,
                                     PUINT puDestDirLen
        );
DWORD
__stdcall
VerFindFileW(
                                     DWORD uFlags,
                                     LPCWSTR szFileName,
                                     LPCWSTR szWinDir,
                                     LPCWSTR szAppDir,
                                     LPWSTR szCurDir,
                                     PUINT puCurDirLen,
                                     LPWSTR szDestDir,
                                     PUINT puDestDirLen
        );
#line 68 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winver.h"
#pragma endregion

#pragma region Desktop Family




DWORD
__stdcall
VerInstallFileA(
                                     DWORD uFlags,
                                     LPCSTR szSrcFileName,
                                     LPCSTR szDestFileName,
                                     LPCSTR szSrcDir,
                                     LPCSTR szDestDir,
                                     LPCSTR szCurDir,
                                     LPSTR szTmpFile,
                                     PUINT puTmpFileLen
        );
DWORD
__stdcall
VerInstallFileW(
                                     DWORD uFlags,
                                     LPCWSTR szSrcFileName,
                                     LPCWSTR szDestFileName,
                                     LPCWSTR szSrcDir,
                                     LPCWSTR szDestDir,
                                     LPCWSTR szCurDir,
                                     LPWSTR szTmpFile,
                                     PUINT puTmpFileLen
        );






DWORD
__stdcall
GetFileVersionInfoSizeA(
                    LPCSTR lptstrFilename,
                  LPDWORD lpdwHandle
        );

DWORD
__stdcall
GetFileVersionInfoSizeW(
                    LPCWSTR lptstrFilename,
                  LPDWORD lpdwHandle
        );







BOOL
__stdcall
GetFileVersionInfoA(
                            LPCSTR lptstrFilename,
                            DWORD dwHandle,
                            DWORD dwLen,
                                  LPVOID lpData
        );

BOOL
__stdcall
GetFileVersionInfoW(
                            LPCWSTR lptstrFilename,
                            DWORD dwHandle,
                            DWORD dwLen,
                                  LPVOID lpData
        );
#line 151 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winver.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family




DWORD __stdcall GetFileVersionInfoSizeExA( DWORD dwFlags, LPCSTR lpwstrFilename, LPDWORD lpdwHandle);
DWORD __stdcall GetFileVersionInfoSizeExW( DWORD dwFlags, LPCWSTR lpwstrFilename, LPDWORD lpdwHandle);






BOOL __stdcall GetFileVersionInfoExA( DWORD dwFlags,
                                         LPCSTR lpwstrFilename,
                                               DWORD dwHandle,
                                         DWORD dwLen,
                                                              LPVOID lpData);
BOOL __stdcall GetFileVersionInfoExW( DWORD dwFlags,
                                         LPCWSTR lpwstrFilename,
                                               DWORD dwHandle,
                                         DWORD dwLen,
                                                              LPVOID lpData);
#line 185 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winver.h"
#pragma endregion

#pragma region Desktop Family








#pragma endregion

#pragma region Desktop Family or OneCore Family




DWORD
__stdcall
VerLanguageNameA(
                              DWORD wLang,
                              LPSTR szLang,
                              DWORD cchLang
        );
DWORD
__stdcall
VerLanguageNameW(
                              DWORD wLang,
                              LPWSTR szLang,
                              DWORD cchLang
        );






BOOL
__stdcall
VerQueryValueA(
             LPCVOID pBlock,
             LPCSTR lpSubBlock,
                                                                                 LPVOID * lplpBuffer,
              PUINT puLen
        );
BOOL
__stdcall
VerQueryValueW(
             LPCVOID pBlock,
             LPCWSTR lpSubBlock,
                                                                                 LPVOID * lplpBuffer,
              PUINT puLen
        );
#line 249 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winver.h"
#pragma endregion








#pragma option pop
#line 208 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\windows.h"



#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winreg.h"
#line 18 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winreg.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 61 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winreg.h"
#pragma region Desktop Family or OneCore Family
#line 110 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winreg.h"
typedef ACCESS_MASK REGSAM;
#line 140 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winreg.h"
struct val_context {
    int valuelen;
    LPVOID value_context;
    LPVOID val_buff_ptr;
};

typedef struct val_context *PVALCONTEXT;

typedef struct pvalueA {
    LPSTR pv_valuename;
    int pv_valuelen;
    LPVOID pv_value_context;
    DWORD pv_type;
}PVALUEA, *PPVALUEA;
typedef struct pvalueW {
    LPWSTR pv_valuename;
    int pv_valuelen;
    LPVOID pv_value_context;
    DWORD pv_type;
}PVALUEW, *PPVALUEW;

typedef PVALUEW PVALUE;
typedef PPVALUEW PPVALUE;





typedef
DWORD __cdecl
QUERYHANDLER (LPVOID keycontext, PVALCONTEXT val_list, DWORD num_vals,
          LPVOID outputbuffer, DWORD *total_outlen, DWORD input_blen);

typedef QUERYHANDLER *PQUERYHANDLER;

typedef struct provider_info {
    PQUERYHANDLER pi_R0_1val;
    PQUERYHANDLER pi_R0_allvals;
    PQUERYHANDLER pi_R3_1val;
    PQUERYHANDLER pi_R3_allvals;
    DWORD pi_flags;
    LPVOID pi_key_context;
}REG_PROVIDER;

typedef struct provider_info *PPROVIDER;

typedef struct value_entA {
    LPSTR ve_valuename;
    DWORD ve_valuelen;
    DWORD_PTR ve_valueptr;
    DWORD ve_type;
}VALENTA, *PVALENTA;
typedef struct value_entW {
    LPWSTR ve_valuename;
    DWORD ve_valuelen;
    DWORD_PTR ve_valueptr;
    DWORD ve_type;
}VALENTW, *PVALENTW;

typedef VALENTW VALENT;
typedef PVALENTW PVALENT;
#line 222 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winreg.h"
typedef LONG LSTATUS;


LSTATUS
__stdcall
RegCloseKey(
         HKEY hKey
    );



LSTATUS
__stdcall
RegOverridePredefKey (
         HKEY hKey,
             HKEY hNewHKey
    );


LSTATUS
__stdcall
RegOpenUserClassesRoot(
         HANDLE hToken,
               DWORD dwOptions,
         REGSAM samDesired,
          PHKEY phkResult
    );



LSTATUS
__stdcall
RegOpenCurrentUser(
         REGSAM samDesired,
          PHKEY phkResult
    );



LSTATUS
__stdcall
RegDisablePredefinedCache(
    void
    );


LSTATUS
__stdcall
RegDisablePredefinedCacheEx(
    void
    );



LSTATUS
__stdcall
RegConnectRegistryA (
             LPCSTR lpMachineName,
         HKEY hKey,
          PHKEY phkResult
    );

LSTATUS
__stdcall
RegConnectRegistryW (
             LPCWSTR lpMachineName,
         HKEY hKey,
          PHKEY phkResult
    );







LSTATUS
__stdcall
RegConnectRegistryExA (
             LPCSTR lpMachineName,
         HKEY hKey,
         ULONG Flags,
          PHKEY phkResult
    );

LSTATUS
__stdcall
RegConnectRegistryExW (
             LPCWSTR lpMachineName,
         HKEY hKey,
         ULONG Flags,
          PHKEY phkResult
    );







LSTATUS
__stdcall
RegCreateKeyA (
         HKEY hKey,
             LPCSTR lpSubKey,
          PHKEY phkResult
    );

LSTATUS
__stdcall
RegCreateKeyW (
         HKEY hKey,
             LPCWSTR lpSubKey,
          PHKEY phkResult
    );







LSTATUS
__stdcall
RegCreateKeyExA(
         HKEY hKey,
         LPCSTR lpSubKey,
               DWORD Reserved,
             LPSTR lpClass,
         DWORD dwOptions,
         REGSAM samDesired,
             const LPSECURITY_ATTRIBUTES lpSecurityAttributes,
          PHKEY phkResult,
              LPDWORD lpdwDisposition
    );


LSTATUS
__stdcall
RegCreateKeyExW(
         HKEY hKey,
         LPCWSTR lpSubKey,
               DWORD Reserved,
             LPWSTR lpClass,
         DWORD dwOptions,
         REGSAM samDesired,
             const LPSECURITY_ATTRIBUTES lpSecurityAttributes,
          PHKEY phkResult,
              LPDWORD lpdwDisposition
    );
#line 380 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winreg.h"
LSTATUS
__stdcall
RegCreateKeyTransactedA (
         HKEY hKey,
         LPCSTR lpSubKey,
               DWORD Reserved,
             LPSTR lpClass,
         DWORD dwOptions,
         REGSAM samDesired,
             const LPSECURITY_ATTRIBUTES lpSecurityAttributes,
          PHKEY phkResult,
              LPDWORD lpdwDisposition,
                HANDLE hTransaction,
               PVOID pExtendedParemeter
    );

LSTATUS
__stdcall
RegCreateKeyTransactedW (
         HKEY hKey,
         LPCWSTR lpSubKey,
               DWORD Reserved,
             LPWSTR lpClass,
         DWORD dwOptions,
         REGSAM samDesired,
             const LPSECURITY_ATTRIBUTES lpSecurityAttributes,
          PHKEY phkResult,
              LPDWORD lpdwDisposition,
                HANDLE hTransaction,
               PVOID pExtendedParemeter
    );







LSTATUS
__stdcall
RegDeleteKeyA (
         HKEY hKey,
         LPCSTR lpSubKey
    );

LSTATUS
__stdcall
RegDeleteKeyW (
         HKEY hKey,
         LPCWSTR lpSubKey
    );







LSTATUS
__stdcall
RegDeleteKeyExA(
         HKEY hKey,
         LPCSTR lpSubKey,
         REGSAM samDesired,
               DWORD Reserved
    );


LSTATUS
__stdcall
RegDeleteKeyExW(
         HKEY hKey,
         LPCWSTR lpSubKey,
         REGSAM samDesired,
               DWORD Reserved
    );
#line 464 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winreg.h"
LSTATUS
__stdcall
RegDeleteKeyTransactedA (
         HKEY hKey,
         LPCSTR lpSubKey,
         REGSAM samDesired,
               DWORD Reserved,
                HANDLE hTransaction,
               PVOID pExtendedParameter
    );

LSTATUS
__stdcall
RegDeleteKeyTransactedW (
         HKEY hKey,
         LPCWSTR lpSubKey,
         REGSAM samDesired,
               DWORD Reserved,
                HANDLE hTransaction,
               PVOID pExtendedParameter
    );







LONG
__stdcall
RegDisableReflectionKey (
         HKEY hBase
    );


LONG
__stdcall
RegEnableReflectionKey (
         HKEY hBase
    );


LONG
__stdcall
RegQueryReflectionKey (
         HKEY hBase,
          BOOL *bIsReflectionDisabled
    );


LSTATUS
__stdcall
RegDeleteValueA(
         HKEY hKey,
             LPCSTR lpValueName
    );


LSTATUS
__stdcall
RegDeleteValueW(
         HKEY hKey,
             LPCWSTR lpValueName
    );
#line 536 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winreg.h"
LSTATUS
__stdcall
RegEnumKeyA (
         HKEY hKey,
         DWORD dwIndex,
                              LPSTR lpName,
         DWORD cchName
    );

LSTATUS
__stdcall
RegEnumKeyW (
         HKEY hKey,
         DWORD dwIndex,
                              LPWSTR lpName,
         DWORD cchName
    );







LSTATUS
__stdcall
RegEnumKeyExA(
         HKEY hKey,
         DWORD dwIndex,
                                                    LPSTR lpName,
            LPDWORD lpcchName,
               LPDWORD lpReserved,
                                                     LPSTR lpClass,
                LPDWORD lpcchClass,
              PFILETIME lpftLastWriteTime
    );


LSTATUS
__stdcall
RegEnumKeyExW(
         HKEY hKey,
         DWORD dwIndex,
                                                    LPWSTR lpName,
            LPDWORD lpcchName,
               LPDWORD lpReserved,
                                                     LPWSTR lpClass,
                LPDWORD lpcchClass,
              PFILETIME lpftLastWriteTime
    );
#line 594 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winreg.h"
LSTATUS
__stdcall
RegEnumValueA(
         HKEY hKey,
         DWORD dwIndex,
                                                              LPSTR lpValueName,
            LPDWORD lpcchValueName,
               LPDWORD lpReserved,
              LPDWORD lpType,
                                                                                LPBYTE lpData,
                LPDWORD lpcbData
    );


LSTATUS
__stdcall
RegEnumValueW(
         HKEY hKey,
         DWORD dwIndex,
                                                              LPWSTR lpValueName,
            LPDWORD lpcchValueName,
               LPDWORD lpReserved,
              LPDWORD lpType,
                                                                                LPBYTE lpData,
                LPDWORD lpcbData
    );
#line 628 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winreg.h"
LSTATUS
__stdcall
RegFlushKey(
         HKEY hKey
    );



LSTATUS
__stdcall
RegGetKeySecurity(
         HKEY hKey,
         SECURITY_INFORMATION SecurityInformation,
                                                    PSECURITY_DESCRIPTOR pSecurityDescriptor,
            LPDWORD lpcbSecurityDescriptor
    );



LSTATUS
__stdcall
RegLoadKeyA(
         HKEY hKey,
             LPCSTR lpSubKey,
         LPCSTR lpFile
    );


LSTATUS
__stdcall
RegLoadKeyW(
         HKEY hKey,
             LPCWSTR lpSubKey,
         LPCWSTR lpFile
    );
#line 671 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winreg.h"
LSTATUS
__stdcall
RegNotifyChangeKeyValue(
         HKEY hKey,
         BOOL bWatchSubtree,
         DWORD dwNotifyFilter,
             HANDLE hEvent,
         BOOL fAsynchronous
    );



LSTATUS
__stdcall
RegOpenKeyA (
         HKEY hKey,
             LPCSTR lpSubKey,
          PHKEY phkResult
    );

LSTATUS
__stdcall
RegOpenKeyW (
         HKEY hKey,
             LPCWSTR lpSubKey,
          PHKEY phkResult
    );







LSTATUS
__stdcall
RegOpenKeyExA(
         HKEY hKey,
             LPCSTR lpSubKey,
             DWORD ulOptions,
         REGSAM samDesired,
          PHKEY phkResult
    );


LSTATUS
__stdcall
RegOpenKeyExW(
         HKEY hKey,
             LPCWSTR lpSubKey,
             DWORD ulOptions,
         REGSAM samDesired,
          PHKEY phkResult
    );
#line 733 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winreg.h"
LSTATUS
__stdcall
RegOpenKeyTransactedA (
         HKEY hKey,
             LPCSTR lpSubKey,
             DWORD ulOptions,
         REGSAM samDesired,
          PHKEY phkResult,
                HANDLE hTransaction,
               PVOID pExtendedParemeter
    );

LSTATUS
__stdcall
RegOpenKeyTransactedW (
         HKEY hKey,
             LPCWSTR lpSubKey,
             DWORD ulOptions,
         REGSAM samDesired,
          PHKEY phkResult,
                HANDLE hTransaction,
               PVOID pExtendedParemeter
    );







LSTATUS
__stdcall
RegQueryInfoKeyA(
         HKEY hKey,
                                                      LPSTR lpClass,
                LPDWORD lpcchClass,
               LPDWORD lpReserved,
              LPDWORD lpcSubKeys,
              LPDWORD lpcbMaxSubKeyLen,
              LPDWORD lpcbMaxClassLen,
              LPDWORD lpcValues,
              LPDWORD lpcbMaxValueNameLen,
              LPDWORD lpcbMaxValueLen,
              LPDWORD lpcbSecurityDescriptor,
              PFILETIME lpftLastWriteTime
    );


LSTATUS
__stdcall
RegQueryInfoKeyW(
         HKEY hKey,
                                                      LPWSTR lpClass,
                LPDWORD lpcchClass,
               LPDWORD lpReserved,
              LPDWORD lpcSubKeys,
              LPDWORD lpcbMaxSubKeyLen,
              LPDWORD lpcbMaxClassLen,
              LPDWORD lpcValues,
              LPDWORD lpcbMaxValueNameLen,
              LPDWORD lpcbMaxValueLen,
              LPDWORD lpcbSecurityDescriptor,
              PFILETIME lpftLastWriteTime
    );
#line 805 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winreg.h"
LSTATUS
__stdcall
RegQueryValueA (
         HKEY hKey,
             LPCSTR lpSubKey,
                                                                                LPSTR lpData,
                PLONG lpcbData
    );

LSTATUS
__stdcall
RegQueryValueW (
         HKEY hKey,
             LPCWSTR lpSubKey,
                                                                                LPWSTR lpData,
                PLONG lpcbData
    );
#line 832 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winreg.h"
LSTATUS
__stdcall
RegQueryMultipleValuesA (
         HKEY hKey,
                           PVALENTA val_list,
         DWORD num_vals,
                                                                                    LPSTR lpValueBuf,
                LPDWORD ldwTotsize
    );

LSTATUS
__stdcall
RegQueryMultipleValuesW (
         HKEY hKey,
                           PVALENTW val_list,
         DWORD num_vals,
                                                                                    LPWSTR lpValueBuf,
                LPDWORD ldwTotsize
    );
#line 859 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winreg.h"
LSTATUS
__stdcall
RegQueryValueExA(
         HKEY hKey,
             LPCSTR lpValueName,
               LPDWORD lpReserved,
              LPDWORD lpType,
                                                                                LPBYTE lpData,

                                                 LPDWORD lpcbData
    );


LSTATUS
__stdcall
RegQueryValueExW(
         HKEY hKey,
             LPCWSTR lpValueName,
               LPDWORD lpReserved,
              LPDWORD lpType,
                                                                                LPBYTE lpData,

                                                 LPDWORD lpcbData
    );
#line 891 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winreg.h"
LSTATUS
__stdcall
RegReplaceKeyA (
         HKEY hKey,
             LPCSTR lpSubKey,
         LPCSTR lpNewFile,
         LPCSTR lpOldFile
    );

LSTATUS
__stdcall
RegReplaceKeyW (
         HKEY hKey,
             LPCWSTR lpSubKey,
         LPCWSTR lpNewFile,
         LPCWSTR lpOldFile
    );







LSTATUS
__stdcall
RegRestoreKeyA(
         HKEY hKey,
         LPCSTR lpFile,
         DWORD dwFlags
    );


LSTATUS
__stdcall
RegRestoreKeyW(
         HKEY hKey,
         LPCWSTR lpFile,
         DWORD dwFlags
    );
#line 953 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winreg.h"
LSTATUS
__stdcall
RegSaveKeyA (
         HKEY hKey,
         LPCSTR lpFile,
             const LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );

LSTATUS
__stdcall
RegSaveKeyW (
         HKEY hKey,
         LPCWSTR lpFile,
             const LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );







LSTATUS
__stdcall
RegSetKeySecurity(
         HKEY hKey,
         SECURITY_INFORMATION SecurityInformation,
         PSECURITY_DESCRIPTOR pSecurityDescriptor
    );



LSTATUS
__stdcall
RegSetValueA (
         HKEY hKey,
             LPCSTR lpSubKey,
         DWORD dwType,
                                 LPCSTR lpData,
         DWORD cbData
    );

LSTATUS
__stdcall
RegSetValueW (
         HKEY hKey,
             LPCWSTR lpSubKey,
         DWORD dwType,
                                 LPCWSTR lpData,
         DWORD cbData
    );







LSTATUS
__stdcall
RegSetValueExA(
         HKEY hKey,
             LPCSTR lpValueName,
               DWORD Reserved,
         DWORD dwType,
                                 const BYTE * lpData,
         DWORD cbData
    );


LSTATUS
__stdcall
RegSetValueExW(
         HKEY hKey,
             LPCWSTR lpValueName,
               DWORD Reserved,
         DWORD dwType,
                                 const BYTE * lpData,
         DWORD cbData
    );
#line 1041 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winreg.h"
LSTATUS
__stdcall
RegUnLoadKeyA(
         HKEY hKey,
             LPCSTR lpSubKey
    );


LSTATUS
__stdcall
RegUnLoadKeyW(
         HKEY hKey,
             LPCWSTR lpSubKey
    );
#line 1298 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winreg.h"
BOOL
__stdcall
InitiateSystemShutdownA(
             LPSTR lpMachineName,
             LPSTR lpMessage,
         DWORD dwTimeout,
         BOOL bForceAppsClosed,
         BOOL bRebootAfterShutdown
    );


BOOL
__stdcall
InitiateSystemShutdownW(
             LPWSTR lpMachineName,
             LPWSTR lpMessage,
         DWORD dwTimeout,
         BOOL bForceAppsClosed,
         BOOL bRebootAfterShutdown
    );
#line 1326 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winreg.h"
BOOL
__stdcall
AbortSystemShutdownA(
             LPSTR lpMachineName
    );

BOOL
__stdcall
AbortSystemShutdownW(
             LPWSTR lpMachineName
    );
#line 1347 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winreg.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\reason.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 20 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\reason.h"
#pragma region Desktop Family
#line 125 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\reason.h"
#pragma endregion


#pragma option pop
#line 1347 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winreg.h"
#line 1370 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winreg.h"
BOOL
__stdcall
InitiateSystemShutdownExA(
             LPSTR lpMachineName,
             LPSTR lpMessage,
         DWORD dwTimeout,
         BOOL bForceAppsClosed,
         BOOL bRebootAfterShutdown,
         DWORD dwReason
    );




BOOL
__stdcall
InitiateSystemShutdownExW(
             LPWSTR lpMachineName,
             LPWSTR lpMessage,
         DWORD dwTimeout,
         BOOL bForceAppsClosed,
         BOOL bRebootAfterShutdown,
         DWORD dwReason
    );
#line 1419 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winreg.h"
DWORD
__stdcall
InitiateShutdownA(
             LPSTR lpMachineName,
             LPSTR lpMessage,
             DWORD dwGracePeriod,
             DWORD dwShutdownFlags,
             DWORD dwReason
    );

DWORD
__stdcall
InitiateShutdownW(
             LPWSTR lpMachineName,
             LPWSTR lpMessage,
             DWORD dwGracePeriod,
             DWORD dwShutdownFlags,
             DWORD dwReason
    );







DWORD
__stdcall
CheckForHiberboot(
            PBOOLEAN pHiberboot,
         BOOLEAN bClearFlag
    );


LSTATUS
__stdcall
RegSaveKeyExA(
         HKEY hKey,
         LPCSTR lpFile,
             const LPSECURITY_ATTRIBUTES lpSecurityAttributes,
         DWORD Flags
    );


LSTATUS
__stdcall
RegSaveKeyExW(
         HKEY hKey,
         LPCWSTR lpFile,
             const LPSECURITY_ATTRIBUTES lpSecurityAttributes,
         DWORD Flags
    );
#line 1480 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winreg.h"
#pragma endregion
#line 1492 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winreg.h"
#pragma option pop
#line 211 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\windows.h"



#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnetwk.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 43 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnetwk.h"
#pragma region Desktop Family or System Family
#line 52 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnetwk.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wnnc.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 29 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wnnc.h"
#pragma region Desktop Family or OneCore Family
#line 115 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wnnc.h"
#pragma endregion





#pragma option pop
#line 52 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnetwk.h"
#line 101 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnetwk.h"
typedef struct _NETRESOURCEA {
    DWORD dwScope;
    DWORD dwType;
    DWORD dwDisplayType;
    DWORD dwUsage;
    LPSTR lpLocalName;
    LPSTR lpRemoteName;
    LPSTR lpComment ;
    LPSTR lpProvider;
}NETRESOURCEA, *LPNETRESOURCEA;
typedef struct _NETRESOURCEW {
    DWORD dwScope;
    DWORD dwType;
    DWORD dwDisplayType;
    DWORD dwUsage;
    LPWSTR lpLocalName;
    LPWSTR lpRemoteName;
    LPWSTR lpComment ;
    LPWSTR lpProvider;
}NETRESOURCEW, *LPNETRESOURCEW;

typedef NETRESOURCEW NETRESOURCE;
typedef LPNETRESOURCEW LPNETRESOURCE;
#line 159 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnetwk.h"
DWORD __stdcall
WNetAddConnectionA(
             LPCSTR lpRemoteName,
             LPCSTR lpPassword,
             LPCSTR lpLocalName
    );

DWORD __stdcall
WNetAddConnectionW(
             LPCWSTR lpRemoteName,
             LPCWSTR lpPassword,
             LPCWSTR lpLocalName
    );







DWORD __stdcall
WNetAddConnection2A(
             LPNETRESOURCEA lpNetResource,
             LPCSTR lpPassword,
             LPCSTR lpUserName,
             DWORD dwFlags
    );

DWORD __stdcall
WNetAddConnection2W(
             LPNETRESOURCEW lpNetResource,
             LPCWSTR lpPassword,
             LPCWSTR lpUserName,
             DWORD dwFlags
    );







DWORD __stdcall
WNetAddConnection3A(
             HWND hwndOwner,
             LPNETRESOURCEA lpNetResource,
             LPCSTR lpPassword,
             LPCSTR lpUserName,
             DWORD dwFlags
    );

DWORD __stdcall
WNetAddConnection3W(
             HWND hwndOwner,
             LPNETRESOURCEW lpNetResource,
             LPCWSTR lpPassword,
             LPCWSTR lpUserName,
             DWORD dwFlags
    );







DWORD __stdcall
WNetCancelConnectionA(
         LPCSTR lpName,
         BOOL fForce
    );

DWORD __stdcall
WNetCancelConnectionW(
         LPCWSTR lpName,
         BOOL fForce
    );







DWORD __stdcall
WNetCancelConnection2A(
         LPCSTR lpName,
         DWORD dwFlags,
         BOOL fForce
    );

DWORD __stdcall
WNetCancelConnection2W(
         LPCWSTR lpName,
         DWORD dwFlags,
         BOOL fForce
    );







DWORD __stdcall
WNetGetConnectionA(
         LPCSTR lpLocalName,
                                 LPSTR lpRemoteName,
            LPDWORD lpnLength
    );

DWORD __stdcall
WNetGetConnectionW(
         LPCWSTR lpLocalName,
                                 LPWSTR lpRemoteName,
            LPDWORD lpnLength
    );








#pragma endregion

#pragma region Desktop Family
#line 300 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnetwk.h"
DWORD __stdcall
WNetRestoreConnectionW(
             HWND hWnd,
             LPCWSTR lpDevice
    );




#pragma endregion

#pragma region Desktop Family or System Family




DWORD __stdcall
WNetUseConnectionA(
             HWND hwndOwner,
             LPNETRESOURCEA lpNetResource,
             LPCSTR lpPassword,
             LPCSTR lpUserId,
             DWORD dwFlags,
                                    LPSTR lpAccessName,
                LPDWORD lpBufferSize,
              LPDWORD lpResult
    );

DWORD __stdcall
WNetUseConnectionW(
             HWND hwndOwner,
             LPNETRESOURCEW lpNetResource,
             LPCWSTR lpPassword,
             LPCWSTR lpUserId,
             DWORD dwFlags,
                                    LPWSTR lpAccessName,
                LPDWORD lpBufferSize,
              LPDWORD lpResult
    );
#line 351 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnetwk.h"
DWORD __stdcall
WNetConnectionDialog(
         HWND hwnd,
         DWORD dwType
    );


DWORD __stdcall
WNetDisconnectDialog(
             HWND hwnd,
         DWORD dwType
    );


typedef struct _CONNECTDLGSTRUCTA{
    DWORD cbStructure;
    HWND hwndOwner;
    LPNETRESOURCEA lpConnRes;
    DWORD dwFlags;
    DWORD dwDevNum;
} CONNECTDLGSTRUCTA, *LPCONNECTDLGSTRUCTA;
typedef struct _CONNECTDLGSTRUCTW{
    DWORD cbStructure;
    HWND hwndOwner;
    LPNETRESOURCEW lpConnRes;
    DWORD dwFlags;
    DWORD dwDevNum;
} CONNECTDLGSTRUCTW, *LPCONNECTDLGSTRUCTW;

typedef CONNECTDLGSTRUCTW CONNECTDLGSTRUCT;
typedef LPCONNECTDLGSTRUCTW LPCONNECTDLGSTRUCT;
#line 401 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnetwk.h"
DWORD __stdcall
WNetConnectionDialog1A(
            LPCONNECTDLGSTRUCTA lpConnDlgStruct
    );

DWORD __stdcall
WNetConnectionDialog1W(
            LPCONNECTDLGSTRUCTW lpConnDlgStruct
    );






typedef struct _DISCDLGSTRUCTA{
    DWORD cbStructure;
    HWND hwndOwner;
    LPSTR lpLocalName;
    LPSTR lpRemoteName;
    DWORD dwFlags;
} DISCDLGSTRUCTA, *LPDISCDLGSTRUCTA;
typedef struct _DISCDLGSTRUCTW{
    DWORD cbStructure;
    HWND hwndOwner;
    LPWSTR lpLocalName;
    LPWSTR lpRemoteName;
    DWORD dwFlags;
} DISCDLGSTRUCTW, *LPDISCDLGSTRUCTW;

typedef DISCDLGSTRUCTW DISCDLGSTRUCT;
typedef LPDISCDLGSTRUCTW LPDISCDLGSTRUCT;
#line 442 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnetwk.h"
DWORD __stdcall
WNetDisconnectDialog1A(
         LPDISCDLGSTRUCTA lpConnDlgStruct
    );

DWORD __stdcall
WNetDisconnectDialog1W(
         LPDISCDLGSTRUCTW lpConnDlgStruct
    );
#line 463 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnetwk.h"
DWORD __stdcall
WNetOpenEnumA(
          DWORD dwScope,
          DWORD dwType,
          DWORD dwUsage,
             LPNETRESOURCEA lpNetResource,
          LPHANDLE lphEnum
    );

DWORD __stdcall
WNetOpenEnumW(
          DWORD dwScope,
          DWORD dwType,
          DWORD dwUsage,
             LPNETRESOURCEW lpNetResource,
          LPHANDLE lphEnum
    );







DWORD __stdcall
WNetEnumResourceA(
            HANDLE hEnum,
            LPDWORD lpcCount,
                                      LPVOID lpBuffer,
            LPDWORD lpBufferSize
    );

DWORD __stdcall
WNetEnumResourceW(
            HANDLE hEnum,
            LPDWORD lpcCount,
                                      LPVOID lpBuffer,
            LPDWORD lpBufferSize
    );







DWORD __stdcall
WNetCloseEnum(
         HANDLE hEnum
    );



DWORD __stdcall
WNetGetResourceParentA(
         LPNETRESOURCEA lpNetResource,
                                    LPVOID lpBuffer,
            LPDWORD lpcbBuffer
    );

DWORD __stdcall
WNetGetResourceParentW(
         LPNETRESOURCEW lpNetResource,
                                    LPVOID lpBuffer,
            LPDWORD lpcbBuffer
    );







DWORD __stdcall
WNetGetResourceInformationA(
         LPNETRESOURCEA lpNetResource,
                                    LPVOID lpBuffer,
            LPDWORD lpcbBuffer,
             LPSTR *lplpSystem
    );

DWORD __stdcall
WNetGetResourceInformationW(
         LPNETRESOURCEW lpNetResource,
                                    LPVOID lpBuffer,
            LPDWORD lpcbBuffer,
             LPWSTR *lplpSystem
    );
#line 565 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnetwk.h"
typedef struct _UNIVERSAL_NAME_INFOA {
    LPSTR lpUniversalName;
}UNIVERSAL_NAME_INFOA, *LPUNIVERSAL_NAME_INFOA;
typedef struct _UNIVERSAL_NAME_INFOW {
    LPWSTR lpUniversalName;
}UNIVERSAL_NAME_INFOW, *LPUNIVERSAL_NAME_INFOW;

typedef UNIVERSAL_NAME_INFOW UNIVERSAL_NAME_INFO;
typedef LPUNIVERSAL_NAME_INFOW LPUNIVERSAL_NAME_INFO;





typedef struct _REMOTE_NAME_INFOA {
    LPSTR lpUniversalName;
    LPSTR lpConnectionName;
    LPSTR lpRemainingPath;
}REMOTE_NAME_INFOA, *LPREMOTE_NAME_INFOA;
typedef struct _REMOTE_NAME_INFOW {
    LPWSTR lpUniversalName;
    LPWSTR lpConnectionName;
    LPWSTR lpRemainingPath;
}REMOTE_NAME_INFOW, *LPREMOTE_NAME_INFOW;

typedef REMOTE_NAME_INFOW REMOTE_NAME_INFO;
typedef LPREMOTE_NAME_INFOW LPREMOTE_NAME_INFO;






DWORD __stdcall
WNetGetUniversalNameA(
         LPCSTR lpLocalPath,
         DWORD dwInfoLevel,
                                      LPVOID lpBuffer,
            LPDWORD lpBufferSize
    );

DWORD __stdcall
WNetGetUniversalNameW(
         LPCWSTR lpLocalPath,
         DWORD dwInfoLevel,
                                      LPVOID lpBuffer,
            LPDWORD lpBufferSize
    );
#line 623 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnetwk.h"
DWORD __stdcall
WNetGetUserA(
             LPCSTR lpName,
                             LPSTR lpUserName,
             LPDWORD lpnLength
    );




DWORD __stdcall
WNetGetUserW(
             LPCWSTR lpName,
                             LPWSTR lpUserName,
             LPDWORD lpnLength
    );
#line 661 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnetwk.h"
DWORD __stdcall
WNetGetProviderNameA(
            DWORD dwNetType,
                                LPSTR lpProviderName,
            LPDWORD lpBufferSize
    );

DWORD __stdcall
WNetGetProviderNameW(
            DWORD dwNetType,
                                LPWSTR lpProviderName,
            LPDWORD lpBufferSize
    );






typedef struct _NETINFOSTRUCT{
    DWORD cbStructure;
    DWORD dwProviderVersion;
    DWORD dwStatus;
    DWORD dwCharacteristics;
    ULONG_PTR dwHandle;
    WORD wNetType;
    DWORD dwPrinters;
    DWORD dwDrives;
} NETINFOSTRUCT, *LPNETINFOSTRUCT;






DWORD __stdcall
WNetGetNetworkInformationA(
          LPCSTR lpProvider,
          LPNETINFOSTRUCT lpNetInfoStruct
    );

DWORD __stdcall
WNetGetNetworkInformationW(
          LPCWSTR lpProvider,
          LPNETINFOSTRUCT lpNetInfoStruct
    );
#line 720 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnetwk.h"
DWORD __stdcall
WNetGetLastErrorA(
          LPDWORD lpError,
                                LPSTR lpErrorBuf,
         DWORD nErrorBufSize,
                               LPSTR lpNameBuf,
         DWORD nNameBufSize
    );

DWORD __stdcall
WNetGetLastErrorW(
          LPDWORD lpError,
                                LPWSTR lpErrorBuf,
         DWORD nErrorBufSize,
                               LPWSTR lpNameBuf,
         DWORD nNameBufSize
    );
#line 812 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnetwk.h"
typedef struct _NETCONNECTINFOSTRUCT{
    DWORD cbStructure;
    DWORD dwFlags;
    DWORD dwSpeed;
    DWORD dwDelay;
    DWORD dwOptDataSize;
} NETCONNECTINFOSTRUCT, *LPNETCONNECTINFOSTRUCT;







DWORD __stdcall
MultinetGetConnectionPerformanceA(
          LPNETRESOURCEA lpNetResource,
          LPNETCONNECTINFOSTRUCT lpNetConnectInfoStruct
    );

DWORD __stdcall
MultinetGetConnectionPerformanceW(
          LPNETRESOURCEW lpNetResource,
          LPNETCONNECTINFOSTRUCT lpNetConnectInfoStruct
    );
#line 846 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnetwk.h"
#pragma endregion
#line 860 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winnetwk.h"
#pragma option pop
#line 214 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\windows.h"
#line 267 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\windows.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\stralign.h"
#line 46 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\stralign.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 69 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\stralign.h"
#pragma region Desktop Family
#line 106 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\stralign.h"
__inline
PUWSTR
static

ua_wcscpy(
                                                       PUWSTR Destination,
         PCUWSTR Source
    )
{






    return wcscpy(Destination, Source);

}
#line 686 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\stralign.h"
#pragma endregion





#pragma option pop
#line 267 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\windows.h"
#line 280 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\windows.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winsvc.h"
#line 19 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winsvc.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 45 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winsvc.h"
#pragma region Desktop Family or OneCore Family
#line 359 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winsvc.h"
extern const GUID NETWORK_MANAGER_FIRST_IP_ADDRESS_ARRIVAL_GUID;







extern const GUID NETWORK_MANAGER_LAST_IP_ADDRESS_REMOVAL_GUID;
#line 378 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winsvc.h"
extern const GUID DOMAIN_JOIN_GUID;







extern const GUID DOMAIN_LEAVE_GUID;
#line 398 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winsvc.h"
extern const GUID FIREWALL_PORT_OPEN_GUID;







extern const GUID FIREWALL_PORT_CLOSE_GUID;
#line 418 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winsvc.h"
extern const GUID MACHINE_POLICY_PRESENT_GUID;







extern const GUID USER_POLICY_PRESENT_GUID;
#line 438 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winsvc.h"
extern const GUID RPC_INTERFACE_EVENT_GUID;







extern const GUID NAMED_PIPE_EVENT_GUID;
#line 457 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winsvc.h"
extern const GUID CUSTOM_SYSTEM_STATE_CHANGE_EVENT_GUID;
#line 468 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winsvc.h"
typedef struct
{
    DWORD Data[2];
} SERVICE_TRIGGER_CUSTOM_STATE_ID;

typedef struct _SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM {
    union {
        SERVICE_TRIGGER_CUSTOM_STATE_ID CustomStateId;
        struct {
            DWORD DataOffset;
            BYTE Data[1];
        } s;
    } u;
} SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM, *LPSERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM;
#line 498 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winsvc.h"
typedef struct _SERVICE_DESCRIPTIONA {
    LPSTR lpDescription;
} SERVICE_DESCRIPTIONA, *LPSERVICE_DESCRIPTIONA;



typedef struct _SERVICE_DESCRIPTIONW {
    LPWSTR lpDescription;
} SERVICE_DESCRIPTIONW, *LPSERVICE_DESCRIPTIONW;

typedef SERVICE_DESCRIPTIONW SERVICE_DESCRIPTION;
typedef LPSERVICE_DESCRIPTIONW LPSERVICE_DESCRIPTION;
#line 518 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winsvc.h"
typedef enum _SC_ACTION_TYPE {
        SC_ACTION_NONE = 0,
        SC_ACTION_RESTART = 1,
        SC_ACTION_REBOOT = 2,
        SC_ACTION_RUN_COMMAND = 3
} SC_ACTION_TYPE;

typedef struct _SC_ACTION {
    SC_ACTION_TYPE Type;
    DWORD Delay;
} SC_ACTION, *LPSC_ACTION;

typedef struct _SERVICE_FAILURE_ACTIONSA {
    DWORD dwResetPeriod;
    LPSTR lpRebootMsg;
    LPSTR lpCommand;



    DWORD cActions;



    SC_ACTION * lpsaActions;
} SERVICE_FAILURE_ACTIONSA, *LPSERVICE_FAILURE_ACTIONSA;
typedef struct _SERVICE_FAILURE_ACTIONSW {
    DWORD dwResetPeriod;
    LPWSTR lpRebootMsg;
    LPWSTR lpCommand;



    DWORD cActions;



    SC_ACTION * lpsaActions;
} SERVICE_FAILURE_ACTIONSW, *LPSERVICE_FAILURE_ACTIONSW;

typedef SERVICE_FAILURE_ACTIONSW SERVICE_FAILURE_ACTIONS;
typedef LPSERVICE_FAILURE_ACTIONSW LPSERVICE_FAILURE_ACTIONS;
#line 567 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winsvc.h"
typedef struct _SERVICE_DELAYED_AUTO_START_INFO {
    BOOL fDelayedAutostart;
} SERVICE_DELAYED_AUTO_START_INFO, *LPSERVICE_DELAYED_AUTO_START_INFO;




typedef struct _SERVICE_FAILURE_ACTIONS_FLAG {
    BOOL fFailureActionsOnNonCrashFailures;
} SERVICE_FAILURE_ACTIONS_FLAG, *LPSERVICE_FAILURE_ACTIONS_FLAG;




typedef struct _SERVICE_SID_INFO {
    DWORD dwServiceSidType;
} SERVICE_SID_INFO, *LPSERVICE_SID_INFO;




typedef struct _SERVICE_REQUIRED_PRIVILEGES_INFOA {
    LPSTR pmszRequiredPrivileges;
} SERVICE_REQUIRED_PRIVILEGES_INFOA, *LPSERVICE_REQUIRED_PRIVILEGES_INFOA;



typedef struct _SERVICE_REQUIRED_PRIVILEGES_INFOW {
    LPWSTR pmszRequiredPrivileges;
} SERVICE_REQUIRED_PRIVILEGES_INFOW, *LPSERVICE_REQUIRED_PRIVILEGES_INFOW;

typedef SERVICE_REQUIRED_PRIVILEGES_INFOW SERVICE_REQUIRED_PRIVILEGES_INFO;
typedef LPSERVICE_REQUIRED_PRIVILEGES_INFOW LPSERVICE_REQUIRED_PRIVILEGES_INFO;
#line 608 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winsvc.h"
typedef struct _SERVICE_PRESHUTDOWN_INFO {
    DWORD dwPreshutdownTimeout;
} SERVICE_PRESHUTDOWN_INFO, *LPSERVICE_PRESHUTDOWN_INFO;




typedef struct _SERVICE_TRIGGER_SPECIFIC_DATA_ITEM
{
    DWORD dwDataType;



    DWORD cbData;



    PBYTE pData;
} SERVICE_TRIGGER_SPECIFIC_DATA_ITEM, *PSERVICE_TRIGGER_SPECIFIC_DATA_ITEM;




typedef struct _SERVICE_TRIGGER
{
    DWORD dwTriggerType;
    DWORD dwAction;
    GUID * pTriggerSubtype;






    DWORD cDataItems;



    PSERVICE_TRIGGER_SPECIFIC_DATA_ITEM pDataItems;
} SERVICE_TRIGGER, *PSERVICE_TRIGGER;




typedef struct _SERVICE_TRIGGER_INFO {



    DWORD cTriggers;



    PSERVICE_TRIGGER pTriggers;
    PBYTE pReserved;
} SERVICE_TRIGGER_INFO, *PSERVICE_TRIGGER_INFO;






typedef struct _SERVICE_PREFERRED_NODE_INFO {
    USHORT usPreferredNode;
    BOOLEAN fDelete;
} SERVICE_PREFERRED_NODE_INFO, *LPSERVICE_PREFERRED_NODE_INFO;




typedef struct _SERVICE_TIMECHANGE_INFO {
    LARGE_INTEGER liNewTime;
    LARGE_INTEGER liOldTime;
} SERVICE_TIMECHANGE_INFO, *PSERVICE_TIMECHANGE_INFO;




typedef struct _SERVICE_LAUNCH_PROTECTED_INFO {
    DWORD dwLaunchProtected;
} SERVICE_LAUNCH_PROTECTED_INFO, *PSERVICE_LAUNCH_PROTECTED_INFO;





struct SC_HANDLE__{int unused;}; typedef struct SC_HANDLE__ *SC_HANDLE;
typedef SC_HANDLE *LPSC_HANDLE;

struct SERVICE_STATUS_HANDLE__{int unused;}; typedef struct SERVICE_STATUS_HANDLE__ *SERVICE_STATUS_HANDLE;





typedef enum _SC_STATUS_TYPE {
    SC_STATUS_PROCESS_INFO = 0
} SC_STATUS_TYPE;




typedef enum _SC_ENUM_TYPE {
    SC_ENUM_PROCESS_INFO = 0
} SC_ENUM_TYPE;






typedef struct _SERVICE_STATUS {
    DWORD dwServiceType;
    DWORD dwCurrentState;
    DWORD dwControlsAccepted;
    DWORD dwWin32ExitCode;
    DWORD dwServiceSpecificExitCode;
    DWORD dwCheckPoint;
    DWORD dwWaitHint;
} SERVICE_STATUS, *LPSERVICE_STATUS;

typedef struct _SERVICE_STATUS_PROCESS {
    DWORD dwServiceType;
    DWORD dwCurrentState;
    DWORD dwControlsAccepted;
    DWORD dwWin32ExitCode;
    DWORD dwServiceSpecificExitCode;
    DWORD dwCheckPoint;
    DWORD dwWaitHint;
    DWORD dwProcessId;
    DWORD dwServiceFlags;
} SERVICE_STATUS_PROCESS, *LPSERVICE_STATUS_PROCESS;






typedef struct _ENUM_SERVICE_STATUSA {
    LPSTR lpServiceName;
    LPSTR lpDisplayName;
    SERVICE_STATUS ServiceStatus;
} ENUM_SERVICE_STATUSA, *LPENUM_SERVICE_STATUSA;
typedef struct _ENUM_SERVICE_STATUSW {
    LPWSTR lpServiceName;
    LPWSTR lpDisplayName;
    SERVICE_STATUS ServiceStatus;
} ENUM_SERVICE_STATUSW, *LPENUM_SERVICE_STATUSW;

typedef ENUM_SERVICE_STATUSW ENUM_SERVICE_STATUS;
typedef LPENUM_SERVICE_STATUSW LPENUM_SERVICE_STATUS;





typedef struct _ENUM_SERVICE_STATUS_PROCESSA {
    LPSTR lpServiceName;
    LPSTR lpDisplayName;
    SERVICE_STATUS_PROCESS ServiceStatusProcess;
} ENUM_SERVICE_STATUS_PROCESSA, *LPENUM_SERVICE_STATUS_PROCESSA;
typedef struct _ENUM_SERVICE_STATUS_PROCESSW {
    LPWSTR lpServiceName;
    LPWSTR lpDisplayName;
    SERVICE_STATUS_PROCESS ServiceStatusProcess;
} ENUM_SERVICE_STATUS_PROCESSW, *LPENUM_SERVICE_STATUS_PROCESSW;

typedef ENUM_SERVICE_STATUS_PROCESSW ENUM_SERVICE_STATUS_PROCESS;
typedef LPENUM_SERVICE_STATUS_PROCESSW LPENUM_SERVICE_STATUS_PROCESS;
#line 785 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winsvc.h"
typedef LPVOID SC_LOCK;

typedef struct _QUERY_SERVICE_LOCK_STATUSA {
    DWORD fIsLocked;
    LPSTR lpLockOwner;
    DWORD dwLockDuration;
} QUERY_SERVICE_LOCK_STATUSA, *LPQUERY_SERVICE_LOCK_STATUSA;
typedef struct _QUERY_SERVICE_LOCK_STATUSW {
    DWORD fIsLocked;
    LPWSTR lpLockOwner;
    DWORD dwLockDuration;
} QUERY_SERVICE_LOCK_STATUSW, *LPQUERY_SERVICE_LOCK_STATUSW;

typedef QUERY_SERVICE_LOCK_STATUSW QUERY_SERVICE_LOCK_STATUS;
typedef LPQUERY_SERVICE_LOCK_STATUSW LPQUERY_SERVICE_LOCK_STATUS;
#line 811 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winsvc.h"
typedef struct _QUERY_SERVICE_CONFIGA {
    DWORD dwServiceType;
    DWORD dwStartType;
    DWORD dwErrorControl;
    LPSTR lpBinaryPathName;
    LPSTR lpLoadOrderGroup;
    DWORD dwTagId;
    LPSTR lpDependencies;
    LPSTR lpServiceStartName;
    LPSTR lpDisplayName;
} QUERY_SERVICE_CONFIGA, *LPQUERY_SERVICE_CONFIGA;
typedef struct _QUERY_SERVICE_CONFIGW {
    DWORD dwServiceType;
    DWORD dwStartType;
    DWORD dwErrorControl;
    LPWSTR lpBinaryPathName;
    LPWSTR lpLoadOrderGroup;
    DWORD dwTagId;
    LPWSTR lpDependencies;
    LPWSTR lpServiceStartName;
    LPWSTR lpDisplayName;
} QUERY_SERVICE_CONFIGW, *LPQUERY_SERVICE_CONFIGW;

typedef QUERY_SERVICE_CONFIGW QUERY_SERVICE_CONFIG;
typedef LPQUERY_SERVICE_CONFIGW LPQUERY_SERVICE_CONFIG;
#line 847 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winsvc.h"
typedef void __stdcall SERVICE_MAIN_FUNCTIONW (
    DWORD dwNumServicesArgs,
    LPWSTR *lpServiceArgVectors
    );

typedef void __stdcall SERVICE_MAIN_FUNCTIONA (
    DWORD dwNumServicesArgs,
    LPTSTR *lpServiceArgVectors
    );







typedef void (__stdcall *LPSERVICE_MAIN_FUNCTIONW)(
    DWORD dwNumServicesArgs,
    LPWSTR *lpServiceArgVectors
    );

typedef void (__stdcall *LPSERVICE_MAIN_FUNCTIONA)(
    DWORD dwNumServicesArgs,
    LPSTR *lpServiceArgVectors
    );
#line 884 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winsvc.h"
typedef struct _SERVICE_TABLE_ENTRYA {
    LPSTR lpServiceName;
    LPSERVICE_MAIN_FUNCTIONA lpServiceProc;
}SERVICE_TABLE_ENTRYA, *LPSERVICE_TABLE_ENTRYA;
typedef struct _SERVICE_TABLE_ENTRYW {
    LPWSTR lpServiceName;
    LPSERVICE_MAIN_FUNCTIONW lpServiceProc;
}SERVICE_TABLE_ENTRYW, *LPSERVICE_TABLE_ENTRYW;

typedef SERVICE_TABLE_ENTRYW SERVICE_TABLE_ENTRY;
typedef LPSERVICE_TABLE_ENTRYW LPSERVICE_TABLE_ENTRY;
#line 904 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winsvc.h"
typedef void __stdcall HANDLER_FUNCTION (
    DWORD dwControl
    );

typedef DWORD __stdcall HANDLER_FUNCTION_EX (
    DWORD dwControl,
    DWORD dwEventType,
    LPVOID lpEventData,
    LPVOID lpContext
    );

typedef void (__stdcall *LPHANDLER_FUNCTION)(
    DWORD dwControl
    );

typedef DWORD (__stdcall *LPHANDLER_FUNCTION_EX)(
    DWORD dwControl,
    DWORD dwEventType,
    LPVOID lpEventData,
    LPVOID lpContext
    );




typedef
void
( __stdcall * PFN_SC_NOTIFY_CALLBACK ) (
         PVOID pParameter
    );




typedef struct _SERVICE_NOTIFY_1 {
    DWORD dwVersion;
    PFN_SC_NOTIFY_CALLBACK pfnNotifyCallback;
    PVOID pContext;
    DWORD dwNotificationStatus;
    SERVICE_STATUS_PROCESS ServiceStatus;
} SERVICE_NOTIFY_1, *PSERVICE_NOTIFY_1;

typedef struct _SERVICE_NOTIFY_2A {
    DWORD dwVersion;
    PFN_SC_NOTIFY_CALLBACK pfnNotifyCallback;
    PVOID pContext;
    DWORD dwNotificationStatus;
    SERVICE_STATUS_PROCESS ServiceStatus;
    DWORD dwNotificationTriggered;
    LPSTR pszServiceNames;
} SERVICE_NOTIFY_2A, *PSERVICE_NOTIFY_2A;
typedef struct _SERVICE_NOTIFY_2W {
    DWORD dwVersion;
    PFN_SC_NOTIFY_CALLBACK pfnNotifyCallback;
    PVOID pContext;
    DWORD dwNotificationStatus;
    SERVICE_STATUS_PROCESS ServiceStatus;
    DWORD dwNotificationTriggered;
    LPWSTR pszServiceNames;
} SERVICE_NOTIFY_2W, *PSERVICE_NOTIFY_2W;

typedef SERVICE_NOTIFY_2W SERVICE_NOTIFY_2;
typedef PSERVICE_NOTIFY_2W PSERVICE_NOTIFY_2;





typedef SERVICE_NOTIFY_2A SERVICE_NOTIFYA, *PSERVICE_NOTIFYA;
typedef SERVICE_NOTIFY_2W SERVICE_NOTIFYW, *PSERVICE_NOTIFYW;

typedef SERVICE_NOTIFYW SERVICE_NOTIFY;
typedef PSERVICE_NOTIFYW PSERVICE_NOTIFY;
#line 985 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winsvc.h"
typedef struct _SERVICE_CONTROL_STATUS_REASON_PARAMSA {
    DWORD dwReason;
    LPSTR pszComment;
    SERVICE_STATUS_PROCESS ServiceStatus;
} SERVICE_CONTROL_STATUS_REASON_PARAMSA, *PSERVICE_CONTROL_STATUS_REASON_PARAMSA;



typedef struct _SERVICE_CONTROL_STATUS_REASON_PARAMSW {
    DWORD dwReason;
    LPWSTR pszComment;
    SERVICE_STATUS_PROCESS ServiceStatus;
} SERVICE_CONTROL_STATUS_REASON_PARAMSW, *PSERVICE_CONTROL_STATUS_REASON_PARAMSW;

typedef SERVICE_CONTROL_STATUS_REASON_PARAMSW SERVICE_CONTROL_STATUS_REASON_PARAMS;
typedef PSERVICE_CONTROL_STATUS_REASON_PARAMSW PSERVICE_CONTROL_STATUS_REASON_PARAMS;
#line 1009 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winsvc.h"
typedef struct _SERVICE_START_REASON {
    DWORD dwReason;
} SERVICE_START_REASON, *PSERVICE_START_REASON;






BOOL
__stdcall
ChangeServiceConfigA(
                SC_HANDLE hService,
                DWORD dwServiceType,
                DWORD dwStartType,
                DWORD dwErrorControl,
                LPCSTR lpBinaryPathName,
                LPCSTR lpLoadOrderGroup,
                LPDWORD lpdwTagId,
                LPCSTR lpDependencies,
                LPCSTR lpServiceStartName,
                LPCSTR lpPassword,
                LPCSTR lpDisplayName
    );

BOOL
__stdcall
ChangeServiceConfigW(
                SC_HANDLE hService,
                DWORD dwServiceType,
                DWORD dwStartType,
                DWORD dwErrorControl,
                LPCWSTR lpBinaryPathName,
                LPCWSTR lpLoadOrderGroup,
                LPDWORD lpdwTagId,
                LPCWSTR lpDependencies,
                LPCWSTR lpServiceStartName,
                LPCWSTR lpPassword,
                LPCWSTR lpDisplayName
    );







BOOL
__stdcall
ChangeServiceConfig2A(
                SC_HANDLE hService,
                DWORD dwInfoLevel,
                LPVOID lpInfo
    );

BOOL
__stdcall
ChangeServiceConfig2W(
                SC_HANDLE hService,
                DWORD dwInfoLevel,
                LPVOID lpInfo
    );







BOOL
__stdcall
CloseServiceHandle(
                SC_HANDLE hSCObject
    );


BOOL
__stdcall
ControlService(
                SC_HANDLE hService,
                DWORD dwControl,
                LPSERVICE_STATUS lpServiceStatus
    );



SC_HANDLE
__stdcall
CreateServiceA(
                SC_HANDLE hSCManager,
                LPCSTR lpServiceName,
                LPCSTR lpDisplayName,
                DWORD dwDesiredAccess,
                DWORD dwServiceType,
                DWORD dwStartType,
                DWORD dwErrorControl,
                LPCSTR lpBinaryPathName,
                LPCSTR lpLoadOrderGroup,
                LPDWORD lpdwTagId,
                LPCSTR lpDependencies,
                LPCSTR lpServiceStartName,
                LPCSTR lpPassword
    );


SC_HANDLE
__stdcall
CreateServiceW(
                SC_HANDLE hSCManager,
                LPCWSTR lpServiceName,
                LPCWSTR lpDisplayName,
                DWORD dwDesiredAccess,
                DWORD dwServiceType,
                DWORD dwStartType,
                DWORD dwErrorControl,
                LPCWSTR lpBinaryPathName,
                LPCWSTR lpLoadOrderGroup,
                LPDWORD lpdwTagId,
                LPCWSTR lpDependencies,
                LPCWSTR lpServiceStartName,
                LPCWSTR lpPassword
    );







BOOL
__stdcall
DeleteService(
                SC_HANDLE hService
    );



BOOL
__stdcall
EnumDependentServicesA(
                    SC_HANDLE hService,
                    DWORD dwServiceState,

                    LPENUM_SERVICE_STATUSA lpServices,
                    DWORD cbBufSize,
                    LPDWORD pcbBytesNeeded,
                    LPDWORD lpServicesReturned
    );


BOOL
__stdcall
EnumDependentServicesW(
                    SC_HANDLE hService,
                    DWORD dwServiceState,

                    LPENUM_SERVICE_STATUSW lpServices,
                    DWORD cbBufSize,
                    LPDWORD pcbBytesNeeded,
                    LPDWORD lpServicesReturned
    );







#pragma endregion

#pragma region Desktop Family




BOOL
__stdcall
EnumServicesStatusA(
                    SC_HANDLE hSCManager,
                    DWORD dwServiceType,
                    DWORD dwServiceState,

                    LPENUM_SERVICE_STATUSA lpServices,
                    DWORD cbBufSize,
                    LPDWORD pcbBytesNeeded,
                    LPDWORD lpServicesReturned,
                    LPDWORD lpResumeHandle
    );


BOOL
__stdcall
EnumServicesStatusW(
                    SC_HANDLE hSCManager,
                    DWORD dwServiceType,
                    DWORD dwServiceState,

                    LPENUM_SERVICE_STATUSW lpServices,
                    DWORD cbBufSize,
                    LPDWORD pcbBytesNeeded,
                    LPDWORD lpServicesReturned,
                    LPDWORD lpResumeHandle
    );







#pragma endregion

#pragma region Desktop Family or OneCore Family




BOOL
__stdcall
EnumServicesStatusExA(
                    SC_HANDLE hSCManager,
                    SC_ENUM_TYPE InfoLevel,
                    DWORD dwServiceType,
                    DWORD dwServiceState,

                    LPBYTE lpServices,
                    DWORD cbBufSize,
                    LPDWORD pcbBytesNeeded,
                    LPDWORD lpServicesReturned,
                    LPDWORD lpResumeHandle,
                    LPCSTR pszGroupName
    );


BOOL
__stdcall
EnumServicesStatusExW(
                    SC_HANDLE hSCManager,
                    SC_ENUM_TYPE InfoLevel,
                    DWORD dwServiceType,
                    DWORD dwServiceState,

                    LPBYTE lpServices,
                    DWORD cbBufSize,
                    LPDWORD pcbBytesNeeded,
                    LPDWORD lpServicesReturned,
                    LPDWORD lpResumeHandle,
                    LPCWSTR pszGroupName
    );







#pragma endregion

#pragma region Desktop Family




BOOL
__stdcall
GetServiceKeyNameA(
                    SC_HANDLE hSCManager,
                    LPCSTR lpDisplayName,

                    LPSTR lpServiceName,
                    LPDWORD lpcchBuffer
    );


BOOL
__stdcall
GetServiceKeyNameW(
                    SC_HANDLE hSCManager,
                    LPCWSTR lpDisplayName,

                    LPWSTR lpServiceName,
                    LPDWORD lpcchBuffer
    );







#pragma endregion

#pragma region Desktop Family




BOOL
__stdcall
GetServiceDisplayNameA(
                    SC_HANDLE hSCManager,
                    LPCSTR lpServiceName,

                    LPSTR lpDisplayName,
                    LPDWORD lpcchBuffer
    );


BOOL
__stdcall
GetServiceDisplayNameW(
                    SC_HANDLE hSCManager,
                    LPCWSTR lpServiceName,

                    LPWSTR lpDisplayName,
                    LPDWORD lpcchBuffer
    );







#pragma endregion

#pragma region Desktop Family



SC_LOCK
__stdcall
LockServiceDatabase(
                    SC_HANDLE hSCManager
    );


BOOL
__stdcall
NotifyBootConfigStatus(
                    BOOL BootAcceptable
    );


#pragma endregion

#pragma region Desktop Family or OneCore Family




SC_HANDLE
__stdcall
OpenSCManagerA(
                    LPCSTR lpMachineName,
                    LPCSTR lpDatabaseName,
                    DWORD dwDesiredAccess
    );


SC_HANDLE
__stdcall
OpenSCManagerW(
                    LPCWSTR lpMachineName,
                    LPCWSTR lpDatabaseName,
                    DWORD dwDesiredAccess
    );
#line 1384 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winsvc.h"
SC_HANDLE
__stdcall
OpenServiceA(
                    SC_HANDLE hSCManager,
                    LPCSTR lpServiceName,
                    DWORD dwDesiredAccess
    );


SC_HANDLE
__stdcall
OpenServiceW(
                    SC_HANDLE hSCManager,
                    LPCWSTR lpServiceName,
                    DWORD dwDesiredAccess
    );
#line 1408 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winsvc.h"
BOOL
__stdcall
QueryServiceConfigA(
                    SC_HANDLE hService,

                    LPQUERY_SERVICE_CONFIGA lpServiceConfig,
                    DWORD cbBufSize,
                    LPDWORD pcbBytesNeeded
    );


BOOL
__stdcall
QueryServiceConfigW(
                    SC_HANDLE hService,

                    LPQUERY_SERVICE_CONFIGW lpServiceConfig,
                    DWORD cbBufSize,
                    LPDWORD pcbBytesNeeded
    );
#line 1443 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winsvc.h"
BOOL
__stdcall
QueryServiceConfig2A(
                    SC_HANDLE hService,
                    DWORD dwInfoLevel,

                    LPBYTE lpBuffer,
                    DWORD cbBufSize,
                    LPDWORD pcbBytesNeeded
    );
#line 1462 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winsvc.h"
BOOL
__stdcall
QueryServiceConfig2W(
                    SC_HANDLE hService,
                    DWORD dwInfoLevel,

                    LPBYTE lpBuffer,
                    DWORD cbBufSize,
                    LPDWORD pcbBytesNeeded
    );







#pragma endregion

#pragma region Desktop Family




BOOL
__stdcall
QueryServiceLockStatusA(
                    SC_HANDLE hSCManager,

                    LPQUERY_SERVICE_LOCK_STATUSA lpLockStatus,
                    DWORD cbBufSize,
                    LPDWORD pcbBytesNeeded
    );


BOOL
__stdcall
QueryServiceLockStatusW(
                    SC_HANDLE hSCManager,

                    LPQUERY_SERVICE_LOCK_STATUSW lpLockStatus,
                    DWORD cbBufSize,
                    LPDWORD pcbBytesNeeded
    );







#pragma endregion

#pragma region Desktop Family or OneCore Family




BOOL
__stdcall
QueryServiceObjectSecurity(
                    SC_HANDLE hService,
                    SECURITY_INFORMATION dwSecurityInformation,

                    PSECURITY_DESCRIPTOR lpSecurityDescriptor,
                    DWORD cbBufSize,
                    LPDWORD pcbBytesNeeded
    );



BOOL
__stdcall
QueryServiceStatus(
                    SC_HANDLE hService,
                    LPSERVICE_STATUS lpServiceStatus
    );



BOOL
__stdcall
QueryServiceStatusEx(
                    SC_HANDLE hService,
                    SC_STATUS_TYPE InfoLevel,

                    LPBYTE lpBuffer,
                    DWORD cbBufSize,
                    LPDWORD pcbBytesNeeded
    );



SERVICE_STATUS_HANDLE
__stdcall
RegisterServiceCtrlHandlerA(
            LPCSTR lpServiceName,

            LPHANDLER_FUNCTION lpHandlerProc
    );


SERVICE_STATUS_HANDLE
__stdcall
RegisterServiceCtrlHandlerW(
            LPCWSTR lpServiceName,

            LPHANDLER_FUNCTION lpHandlerProc
    );
#line 1579 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winsvc.h"
SERVICE_STATUS_HANDLE
__stdcall
RegisterServiceCtrlHandlerExA(
            LPCSTR lpServiceName,

            LPHANDLER_FUNCTION_EX lpHandlerProc,
             LPVOID lpContext
    );


SERVICE_STATUS_HANDLE
__stdcall
RegisterServiceCtrlHandlerExW(
            LPCWSTR lpServiceName,

            LPHANDLER_FUNCTION_EX lpHandlerProc,
             LPVOID lpContext
    );







BOOL
__stdcall
SetServiceObjectSecurity(
                SC_HANDLE hService,
                SECURITY_INFORMATION dwSecurityInformation,
                PSECURITY_DESCRIPTOR lpSecurityDescriptor
    );


BOOL
__stdcall
SetServiceStatus(
                SERVICE_STATUS_HANDLE hServiceStatus,
                LPSERVICE_STATUS lpServiceStatus
    );


BOOL
__stdcall
StartServiceCtrlDispatcherA(
         const SERVICE_TABLE_ENTRYA *lpServiceStartTable
    );

BOOL
__stdcall
StartServiceCtrlDispatcherW(
         const SERVICE_TABLE_ENTRYW *lpServiceStartTable
    );
#line 1640 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winsvc.h"
BOOL
__stdcall
StartServiceA(
                    SC_HANDLE hService,
                    DWORD dwNumServiceArgs,

                    LPCSTR *lpServiceArgVectors
    );

BOOL
__stdcall
StartServiceW(
                    SC_HANDLE hService,
                    DWORD dwNumServiceArgs,

                    LPCWSTR *lpServiceArgVectors
    );







#pragma endregion

#pragma region Desktop Family



BOOL
__stdcall
UnlockServiceDatabase(
                    SC_LOCK ScLock
    );


#pragma endregion

#pragma region Desktop Family or OneCore Family
#line 1742 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winsvc.h"
#pragma endregion
#line 1752 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\winsvc.h"
#pragma option pop
#line 280 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\windows.h"





#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\mcx.h"
#line 10 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\mcx.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 22 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\mcx.h"
typedef struct _MODEMDEVCAPS {
    DWORD dwActualSize;
    DWORD dwRequiredSize;
    DWORD dwDevSpecificOffset;
    DWORD dwDevSpecificSize;


    DWORD dwModemProviderVersion;
    DWORD dwModemManufacturerOffset;
    DWORD dwModemManufacturerSize;
    DWORD dwModemModelOffset;
    DWORD dwModemModelSize;
    DWORD dwModemVersionOffset;
    DWORD dwModemVersionSize;


    DWORD dwDialOptions;
    DWORD dwCallSetupFailTimer;
    DWORD dwInactivityTimeout;
    DWORD dwSpeakerVolume;
    DWORD dwSpeakerMode;
    DWORD dwModemOptions;
    DWORD dwMaxDTERate;
    DWORD dwMaxDCERate;


    BYTE abVariablePortion [1];
} MODEMDEVCAPS, *PMODEMDEVCAPS, *LPMODEMDEVCAPS;

typedef struct _MODEMSETTINGS {
    DWORD dwActualSize;
    DWORD dwRequiredSize;
    DWORD dwDevSpecificOffset;
    DWORD dwDevSpecificSize;


    DWORD dwCallSetupFailTimer;
    DWORD dwInactivityTimeout;
    DWORD dwSpeakerVolume;
    DWORD dwSpeakerMode;
    DWORD dwPreferredModemOptions;


    DWORD dwNegotiatedModemOptions;
    DWORD dwNegotiatedDCERate;


    BYTE abVariablePortion [1];
} MODEMSETTINGS, *PMODEMSETTINGS, *LPMODEMSETTINGS;
#line 732 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\mcx.h"
#pragma option pop
#line 285 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\windows.h"




#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\imm.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 28 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\imm.h"
#pragma region Application Family



struct HIMC__{int unused;}; typedef struct HIMC__ *HIMC;
struct HIMCC__{int unused;}; typedef struct HIMCC__ *HIMCC;






#pragma endregion

#pragma region Desktop Family


typedef HKL *LPHKL;
typedef UINT *LPUINT;


#pragma endregion

#pragma region Application Family


typedef struct tagCOMPOSITIONFORM {
    DWORD dwStyle;
    POINT ptCurrentPos;
    RECT rcArea;
} COMPOSITIONFORM, *PCOMPOSITIONFORM, *NPCOMPOSITIONFORM, *LPCOMPOSITIONFORM;


typedef struct tagCANDIDATEFORM {
    DWORD dwIndex;
    DWORD dwStyle;
    POINT ptCurrentPos;
    RECT rcArea;
} CANDIDATEFORM, *PCANDIDATEFORM, *NPCANDIDATEFORM, *LPCANDIDATEFORM;


#pragma endregion



#pragma region Desktop Family


typedef struct tagCANDIDATELIST {
    DWORD dwSize;
    DWORD dwStyle;
    DWORD dwCount;
    DWORD dwSelection;
    DWORD dwPageStart;
    DWORD dwPageSize;
    DWORD dwOffset[1];
} CANDIDATELIST, *PCANDIDATELIST, *NPCANDIDATELIST, *LPCANDIDATELIST;


#pragma endregion


#pragma region Application Family


typedef struct tagREGISTERWORDA {
    LPSTR lpReading;
    LPSTR lpWord;
} REGISTERWORDA, *PREGISTERWORDA, *NPREGISTERWORDA, *LPREGISTERWORDA;
typedef struct tagREGISTERWORDW {
    LPWSTR lpReading;
    LPWSTR lpWord;
} REGISTERWORDW, *PREGISTERWORDW, *NPREGISTERWORDW, *LPREGISTERWORDW;

typedef REGISTERWORDW REGISTERWORD;
typedef PREGISTERWORDW PREGISTERWORD;
typedef NPREGISTERWORDW NPREGISTERWORD;
typedef LPREGISTERWORDW LPREGISTERWORD;








#pragma endregion



#pragma region Desktop Family


typedef struct tagRECONVERTSTRING {
    DWORD dwSize;
    DWORD dwVersion;
    DWORD dwStrLen;
    DWORD dwStrOffset;
    DWORD dwCompStrLen;
    DWORD dwCompStrOffset;
    DWORD dwTargetStrLen;
    DWORD dwTargetStrOffset;
} RECONVERTSTRING, *PRECONVERTSTRING, *NPRECONVERTSTRING, *LPRECONVERTSTRING;


#pragma endregion





#pragma region Application Family


typedef struct tagSTYLEBUFA {
    DWORD dwStyle;
    CHAR szDescription[32];
} STYLEBUFA, *PSTYLEBUFA, *NPSTYLEBUFA, *LPSTYLEBUFA;
typedef struct tagSTYLEBUFW {
    DWORD dwStyle;
    WCHAR szDescription[32];
} STYLEBUFW, *PSTYLEBUFW, *NPSTYLEBUFW, *LPSTYLEBUFW;

typedef STYLEBUFW STYLEBUF;
typedef PSTYLEBUFW PSTYLEBUF;
typedef NPSTYLEBUFW NPSTYLEBUF;
typedef LPSTYLEBUFW LPSTYLEBUF;








#pragma endregion





#pragma region Desktop Family


typedef struct tagIMEMENUITEMINFOA {
    UINT cbSize;
    UINT fType;
    UINT fState;
    UINT wID;
    HBITMAP hbmpChecked;
    HBITMAP hbmpUnchecked;
    DWORD dwItemData;
    CHAR szString[80];
    HBITMAP hbmpItem;
} IMEMENUITEMINFOA, *PIMEMENUITEMINFOA, *NPIMEMENUITEMINFOA, *LPIMEMENUITEMINFOA;
typedef struct tagIMEMENUITEMINFOW {
    UINT cbSize;
    UINT fType;
    UINT fState;
    UINT wID;
    HBITMAP hbmpChecked;
    HBITMAP hbmpUnchecked;
    DWORD dwItemData;
    WCHAR szString[80];
    HBITMAP hbmpItem;
} IMEMENUITEMINFOW, *PIMEMENUITEMINFOW, *NPIMEMENUITEMINFOW, *LPIMEMENUITEMINFOW;

typedef IMEMENUITEMINFOW IMEMENUITEMINFO;
typedef PIMEMENUITEMINFOW PIMEMENUITEMINFO;
typedef NPIMEMENUITEMINFOW NPIMEMENUITEMINFO;
typedef LPIMEMENUITEMINFOW LPIMEMENUITEMINFO;







typedef struct tagIMECHARPOSITION {
    DWORD dwSize;
    DWORD dwCharPos;
    POINT pt;
    UINT cLineHeight;
    RECT rcDocument;
} IMECHARPOSITION, *PIMECHARPOSITION, *NPIMECHARPOSITION, *LPIMECHARPOSITION;

typedef BOOL (__stdcall* IMCENUMPROC)(HIMC, LPARAM);


#pragma endregion







#pragma region Desktop Family


HKL __stdcall ImmInstallIMEA( LPCSTR lpszIMEFileName, LPCSTR lpszLayoutText);
HKL __stdcall ImmInstallIMEW( LPCWSTR lpszIMEFileName, LPCWSTR lpszLayoutText);






HWND __stdcall ImmGetDefaultIMEWnd( HWND);

UINT __stdcall ImmGetDescriptionA( HKL, LPSTR lpszDescription, UINT uBufLen);
UINT __stdcall ImmGetDescriptionW( HKL, LPWSTR lpszDescription, UINT uBufLen);






UINT __stdcall ImmGetIMEFileNameA( HKL, LPSTR lpszFileName, UINT uBufLen);
UINT __stdcall ImmGetIMEFileNameW( HKL, LPWSTR lpszFileName, UINT uBufLen);






DWORD __stdcall ImmGetProperty( HKL, DWORD);

BOOL __stdcall ImmIsIME( HKL);

BOOL __stdcall ImmSimulateHotKey( HWND, DWORD);

HIMC __stdcall ImmCreateContext(void);
BOOL __stdcall ImmDestroyContext( HIMC);
HIMC __stdcall ImmGetContext( HWND);
BOOL __stdcall ImmReleaseContext( HWND, HIMC);
HIMC __stdcall ImmAssociateContext( HWND, HIMC);

BOOL __stdcall ImmAssociateContextEx( HWND, HIMC, DWORD);


LONG __stdcall ImmGetCompositionStringA( HIMC, DWORD, LPVOID lpBuf, DWORD dwBufLen);
LONG __stdcall ImmGetCompositionStringW( HIMC, DWORD, LPVOID lpBuf, DWORD dwBufLen);






BOOL __stdcall ImmSetCompositionStringA( HIMC, DWORD dwIndex, LPVOID lpComp, DWORD dwCompLen, LPVOID lpRead, DWORD dwReadLen);
BOOL __stdcall ImmSetCompositionStringW( HIMC, DWORD dwIndex, LPVOID lpComp, DWORD dwCompLen, LPVOID lpRead, DWORD dwReadLen);






DWORD __stdcall ImmGetCandidateListCountA( HIMC, LPDWORD lpdwListCount);
DWORD __stdcall ImmGetCandidateListCountW( HIMC, LPDWORD lpdwListCount);






DWORD __stdcall ImmGetCandidateListA( HIMC, DWORD deIndex, LPCANDIDATELIST lpCandList, DWORD dwBufLen);
DWORD __stdcall ImmGetCandidateListW( HIMC, DWORD deIndex, LPCANDIDATELIST lpCandList, DWORD dwBufLen);






DWORD __stdcall ImmGetGuideLineA( HIMC, DWORD dwIndex, LPSTR lpBuf, DWORD dwBufLen);
DWORD __stdcall ImmGetGuideLineW( HIMC, DWORD dwIndex, LPWSTR lpBuf, DWORD dwBufLen);






BOOL __stdcall ImmGetConversionStatus( HIMC, LPDWORD lpfdwConversion, LPDWORD lpfdwSentence);
BOOL __stdcall ImmSetConversionStatus( HIMC, DWORD, DWORD);
BOOL __stdcall ImmGetOpenStatus( HIMC);
BOOL __stdcall ImmSetOpenStatus( HIMC, BOOL);


BOOL __stdcall ImmGetCompositionFontA( HIMC, LPLOGFONTA lplf);
BOOL __stdcall ImmGetCompositionFontW( HIMC, LPLOGFONTW lplf);






BOOL __stdcall ImmSetCompositionFontA( HIMC, LPLOGFONTA lplf);
BOOL __stdcall ImmSetCompositionFontW( HIMC, LPLOGFONTW lplf);







BOOL __stdcall ImmConfigureIMEA( HKL, HWND, DWORD, LPVOID);
BOOL __stdcall ImmConfigureIMEW( HKL, HWND, DWORD, LPVOID);






LRESULT __stdcall ImmEscapeA( HKL, HIMC, UINT, LPVOID);
LRESULT __stdcall ImmEscapeW( HKL, HIMC, UINT, LPVOID);






DWORD __stdcall ImmGetConversionListA( HKL, HIMC, LPCSTR lpSrc, LPCANDIDATELIST lpDst, DWORD dwBufLen, UINT uFlag);
DWORD __stdcall ImmGetConversionListW( HKL, HIMC, LPCWSTR lpSrc, LPCANDIDATELIST lpDst, DWORD dwBufLen, UINT uFlag);






BOOL __stdcall ImmNotifyIME( HIMC, DWORD dwAction, DWORD dwIndex, DWORD dwValue);

BOOL __stdcall ImmGetStatusWindowPos( HIMC, LPPOINT lpptPos);
BOOL __stdcall ImmSetStatusWindowPos( HIMC, LPPOINT lpptPos);
BOOL __stdcall ImmGetCompositionWindow( HIMC, LPCOMPOSITIONFORM lpCompForm);
BOOL __stdcall ImmSetCompositionWindow( HIMC, LPCOMPOSITIONFORM lpCompForm);
BOOL __stdcall ImmGetCandidateWindow( HIMC, DWORD, LPCANDIDATEFORM lpCandidate);
BOOL __stdcall ImmSetCandidateWindow( HIMC, LPCANDIDATEFORM lpCandidate);

BOOL __stdcall ImmIsUIMessageA( HWND, UINT, WPARAM, LPARAM);
BOOL __stdcall ImmIsUIMessageW( HWND, UINT, WPARAM, LPARAM);






UINT __stdcall ImmGetVirtualKey( HWND);

typedef int (__stdcall *REGISTERWORDENUMPROCA)( LPCSTR lpszReading, DWORD, LPCSTR lpszString, LPVOID);
typedef int (__stdcall *REGISTERWORDENUMPROCW)( LPCWSTR lpszReading, DWORD, LPCWSTR lpszString, LPVOID);






BOOL __stdcall ImmRegisterWordA( HKL, LPCSTR lpszReading, DWORD, LPCSTR lpszRegister);
BOOL __stdcall ImmRegisterWordW( HKL, LPCWSTR lpszReading, DWORD, LPCWSTR lpszRegister);






BOOL __stdcall ImmUnregisterWordA( HKL, LPCSTR lpszReading, DWORD, LPCSTR lpszUnregister);
BOOL __stdcall ImmUnregisterWordW( HKL, LPCWSTR lpszReading, DWORD, LPCWSTR lpszUnregister);






UINT __stdcall ImmGetRegisterWordStyleA( HKL, UINT nItem, LPSTYLEBUFA lpStyleBuf);
UINT __stdcall ImmGetRegisterWordStyleW( HKL, UINT nItem, LPSTYLEBUFW lpStyleBuf);






UINT __stdcall ImmEnumRegisterWordA( HKL, REGISTERWORDENUMPROCA, LPCSTR lpszReading, DWORD, LPCSTR lpszRegister, LPVOID);
UINT __stdcall ImmEnumRegisterWordW( HKL, REGISTERWORDENUMPROCW, LPCWSTR lpszReading, DWORD, LPCWSTR lpszRegister, LPVOID);







BOOL __stdcall ImmDisableIME( DWORD);
BOOL __stdcall ImmEnumInputContext(DWORD idThread, IMCENUMPROC lpfn, LPARAM lParam);
DWORD __stdcall ImmGetImeMenuItemsA( HIMC, DWORD, DWORD, LPIMEMENUITEMINFOA lpImeParentMenu, LPIMEMENUITEMINFOA lpImeMenu, DWORD dwSize);
DWORD __stdcall ImmGetImeMenuItemsW( HIMC, DWORD, DWORD, LPIMEMENUITEMINFOW lpImeParentMenu, LPIMEMENUITEMINFOW lpImeMenu, DWORD dwSize);






BOOL __stdcall ImmDisableTextFrameService(DWORD idThread);







#pragma endregion
#line 636 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\imm.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\ime_cmodes.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 25 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\ime_cmodes.h"
#pragma option pop
#line 636 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\imm.h"
#line 783 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\imm.h"
#pragma option pop
#line 289 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\windows.h"
#line 310 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\windows.h"
#pragma endregion



#pragma option pop
#line 69 "./win32_platform.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\dinput.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 20 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\dinput.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objbase.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 16 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objbase.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpc.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 75 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpc.h"
typedef void * I_RPC_HANDLE;




typedef long RPC_STATUS;
#line 157 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpc.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcdce.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 35 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcdce.h"
#pragma region Application Family or OneCore Family
#line 64 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcdce.h"
typedef unsigned char * RPC_CSTR;





typedef unsigned short * RPC_WSTR;
typedef const unsigned short * RPC_CWSTR;


typedef I_RPC_HANDLE RPC_BINDING_HANDLE;
typedef RPC_BINDING_HANDLE handle_t;
#line 84 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcdce.h"
typedef GUID UUID;






#pragma endregion

#pragma region Desktop Family or OneCore Family


typedef struct _RPC_BINDING_VECTOR
{
    unsigned long Count;
                        RPC_BINDING_HANDLE BindingH[1];
} RPC_BINDING_VECTOR;




typedef struct _UUID_VECTOR
{
  unsigned long Count;
                      UUID *Uuid[1];
} UUID_VECTOR;





#pragma endregion

#pragma region Application Family or OneCore Family


typedef void * RPC_IF_HANDLE;


#pragma endregion

#pragma region Desktop Family or OneCore Family




typedef struct _RPC_IF_ID
{
    UUID Uuid;
    unsigned short VersMajor;
    unsigned short VersMinor;
} RPC_IF_ID;
#line 215 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcdce.h"
typedef struct _RPC_PROTSEQ_VECTORA
{
    unsigned int Count;
    unsigned char * Protseq[1];
} RPC_PROTSEQ_VECTORA;

typedef struct _RPC_PROTSEQ_VECTORW
{
    unsigned int Count;
    unsigned short * Protseq[1];
} RPC_PROTSEQ_VECTORW;
#line 242 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcdce.h"
typedef struct _RPC_POLICY {
    unsigned int Length ;
    unsigned long EndpointFlags ;
    unsigned long NICFlags ;
    } RPC_POLICY, *PRPC_POLICY ;

typedef void __stdcall
RPC_OBJECT_INQ_FN (
         UUID * ObjectUuid,
          UUID * TypeUuid,
          RPC_STATUS * Status
    );


typedef RPC_STATUS __stdcall
RPC_IF_CALLBACK_FN (
         RPC_IF_HANDLE InterfaceUuid,
         void *Context
    ) ;

typedef void __stdcall
RPC_SECURITY_CALLBACK_FN (
         void *Context
    ) ;


#pragma endregion

#pragma region Application Family or OneCore Family





#pragma endregion

#pragma region Desktop Family or OneCore Family


typedef struct
{
    unsigned int Count;
    unsigned long Stats[1];
} RPC_STATS_VECTOR;






typedef struct
{
  unsigned long Count;
  RPC_IF_ID * IfId[1];
} RPC_IF_ID_VECTOR;




RPC_STATUS
__stdcall
RpcBindingCopy (
         RPC_BINDING_HANDLE SourceBinding,
          RPC_BINDING_HANDLE * DestinationBinding
    );



RPC_STATUS
__stdcall
RpcBindingFree (
            RPC_BINDING_HANDLE * Binding
    );




RPC_STATUS
__stdcall
RpcBindingSetOption (
         RPC_BINDING_HANDLE hBinding,
         unsigned long option,
         ULONG_PTR optionValue
    );




RPC_STATUS
__stdcall
RpcBindingInqOption (
          RPC_BINDING_HANDLE hBinding,
          unsigned long option,
          ULONG_PTR *pOptionValue
    );
#line 346 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcdce.h"
RPC_STATUS
__stdcall
RpcBindingFromStringBindingA (
         RPC_CSTR StringBinding,
          RPC_BINDING_HANDLE * Binding
    );



RPC_STATUS
__stdcall
RpcBindingFromStringBindingW (
         RPC_WSTR StringBinding,
          RPC_BINDING_HANDLE * Binding
    );
#line 384 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcdce.h"
RPC_STATUS
__stdcall
RpcSsGetContextBinding (
         void *ContextHandle,
          RPC_BINDING_HANDLE * Binding
    );




RPC_STATUS
__stdcall
RpcBindingInqObject (
         RPC_BINDING_HANDLE Binding,
          UUID * ObjectUuid
    );




RPC_STATUS
__stdcall
RpcBindingReset (
         RPC_BINDING_HANDLE Binding
    );







RPC_STATUS
__stdcall
RpcBindingSetObject (
         RPC_BINDING_HANDLE Binding,
         UUID * ObjectUuid
    );




RPC_STATUS
__stdcall
RpcMgmtInqDefaultProtectLevel (
          unsigned long AuthnSvc,
          unsigned long *AuthnLevel
    );







RPC_STATUS
__stdcall
RpcBindingToStringBindingA (
         RPC_BINDING_HANDLE Binding,
             RPC_CSTR * StringBinding
    );



RPC_STATUS
__stdcall
RpcBindingToStringBindingW (
         RPC_BINDING_HANDLE Binding,
             RPC_WSTR * StringBinding
    );
#line 475 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcdce.h"
RPC_STATUS
__stdcall
RpcBindingVectorFree (
            RPC_BINDING_VECTOR * * BindingVector
    );
#line 489 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcdce.h"
RPC_STATUS
__stdcall
RpcStringBindingComposeA (
             RPC_CSTR ObjUuid,
             RPC_CSTR ProtSeq,
             RPC_CSTR NetworkAddr,
             RPC_CSTR Endpoint,
             RPC_CSTR Options,
                 RPC_CSTR * StringBinding
    );



RPC_STATUS
__stdcall
RpcStringBindingComposeW (
             RPC_WSTR ObjUuid,
             RPC_WSTR ProtSeq,
             RPC_WSTR NetworkAddr,
             RPC_WSTR Endpoint,
             RPC_WSTR Options,
                 RPC_WSTR * StringBinding
    );
#line 541 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcdce.h"
RPC_STATUS
__stdcall
RpcStringBindingParseA (
         RPC_CSTR StringBinding,
                 RPC_CSTR * ObjUuid,
                 RPC_CSTR * Protseq,
                 RPC_CSTR * NetworkAddr,
                 RPC_CSTR * Endpoint,
                 RPC_CSTR * NetworkOptions
    );



RPC_STATUS
__stdcall
RpcStringBindingParseW (
         RPC_WSTR StringBinding,
                 RPC_WSTR * ObjUuid,
                 RPC_WSTR * Protseq,
                 RPC_WSTR * NetworkAddr,
                 RPC_WSTR * Endpoint,
                 RPC_WSTR * NetworkOptions
    );
#line 594 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcdce.h"
RPC_STATUS
__stdcall
RpcStringFreeA (
            RPC_CSTR * String
    );


RPC_STATUS
__stdcall
RpcStringFreeW (
            RPC_WSTR * String
    );
#line 628 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcdce.h"
RPC_STATUS
__stdcall
RpcIfInqId (
         RPC_IF_HANDLE RpcIfHandle,
          RPC_IF_ID * RpcIfId
    );







RPC_STATUS
__stdcall
RpcNetworkIsProtseqValidA (
         RPC_CSTR Protseq
    );



RPC_STATUS
__stdcall
RpcNetworkIsProtseqValidW (
         RPC_WSTR Protseq
    );
#line 675 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcdce.h"
RPC_STATUS
__stdcall
RpcMgmtInqComTimeout (
         RPC_BINDING_HANDLE Binding,
          unsigned int * Timeout
    );




RPC_STATUS
__stdcall
RpcMgmtSetComTimeout (
         RPC_BINDING_HANDLE Binding,
         unsigned int Timeout
    );




RPC_STATUS
__stdcall
RpcMgmtSetCancelTimeout(
         long Timeout
    );
#line 708 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcdce.h"
RPC_STATUS
__stdcall
RpcNetworkInqProtseqsA (
             RPC_PROTSEQ_VECTORA * * ProtseqVector
    );



RPC_STATUS
__stdcall
RpcNetworkInqProtseqsW (
             RPC_PROTSEQ_VECTORW * * ProtseqVector
    );
#line 742 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcdce.h"
RPC_STATUS
__stdcall
RpcObjectInqType (
         UUID * ObjUuid,
                       UUID * TypeUuid
    );




RPC_STATUS
__stdcall
RpcObjectSetInqFn (
         RPC_OBJECT_INQ_FN * InquiryFn
    );




RPC_STATUS
__stdcall
RpcObjectSetType (
         UUID * ObjUuid,
                      UUID * TypeUuid
    );






RPC_STATUS
__stdcall
RpcProtseqVectorFreeA (
            RPC_PROTSEQ_VECTORA * * ProtseqVector
    );


RPC_STATUS
__stdcall
RpcProtseqVectorFreeW (
            RPC_PROTSEQ_VECTORW * * ProtseqVector
    );
#line 806 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcdce.h"
RPC_STATUS
__stdcall
RpcServerInqBindings (
             RPC_BINDING_VECTOR * * BindingVector
    );




RPC_STATUS
__stdcall
RpcServerInqIf (
         RPC_IF_HANDLE IfSpec,
             UUID * MgrTypeUuid,
             void * * MgrEpv
    );




RPC_STATUS
__stdcall
RpcServerListen (
         unsigned int MinimumCallThreads,
         unsigned int MaxCalls,
         unsigned int DontWait
    );




RPC_STATUS
__stdcall
RpcServerRegisterIf (
         RPC_IF_HANDLE IfSpec,
             UUID * MgrTypeUuid,
             void * MgrEpv
    );




RPC_STATUS
__stdcall
RpcServerRegisterIfEx (
         RPC_IF_HANDLE IfSpec,
             UUID * MgrTypeUuid,
             void * MgrEpv,
         unsigned int Flags,
         unsigned int MaxCalls,
             RPC_IF_CALLBACK_FN *IfCallback
    );



RPC_STATUS
__stdcall
RpcServerRegisterIf2 (
         RPC_IF_HANDLE IfSpec,
             UUID * MgrTypeUuid,
             void * MgrEpv,
         unsigned int Flags,
         unsigned int MaxCalls,
         unsigned int MaxRpcSize,
             RPC_IF_CALLBACK_FN *IfCallbackFn
    );
#line 893 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcdce.h"
RPC_STATUS
__stdcall
RpcServerUnregisterIf (
             RPC_IF_HANDLE IfSpec,
             UUID * MgrTypeUuid,
         unsigned int WaitForCallsToComplete
    );




RPC_STATUS
__stdcall
RpcServerUnregisterIfEx (
             RPC_IF_HANDLE IfSpec,
             UUID * MgrTypeUuid,
         int RundownContextHandles
    );





RPC_STATUS
__stdcall
RpcServerUseAllProtseqs (
         unsigned int MaxCalls,
             void * SecurityDescriptor
    );




RPC_STATUS
__stdcall
RpcServerUseAllProtseqsEx (
         unsigned int MaxCalls,
             void * SecurityDescriptor,
         PRPC_POLICY Policy
    );




RPC_STATUS
__stdcall
RpcServerUseAllProtseqsIf (
         unsigned int MaxCalls,
         RPC_IF_HANDLE IfSpec,
             void * SecurityDescriptor
    );




RPC_STATUS
__stdcall
RpcServerUseAllProtseqsIfEx (
         unsigned int MaxCalls,
         RPC_IF_HANDLE IfSpec,
             void * SecurityDescriptor,
         PRPC_POLICY Policy
    );
#line 964 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcdce.h"
RPC_STATUS
__stdcall
RpcServerUseProtseqA (
         RPC_CSTR Protseq,
         unsigned int MaxCalls,
             void * SecurityDescriptor
    );



RPC_STATUS
__stdcall
RpcServerUseProtseqExA (
         RPC_CSTR Protseq,
         unsigned int MaxCalls,
             void * SecurityDescriptor,
         PRPC_POLICY Policy
    );



RPC_STATUS
__stdcall
RpcServerUseProtseqW (
         RPC_WSTR Protseq,
         unsigned int MaxCalls,
             void * SecurityDescriptor
    );



RPC_STATUS
__stdcall
RpcServerUseProtseqExW (
         RPC_WSTR Protseq,
         unsigned int MaxCalls,
             void * SecurityDescriptor,
         PRPC_POLICY Policy
    );
#line 1041 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcdce.h"
RPC_STATUS
__stdcall
RpcServerUseProtseqEpA (
         RPC_CSTR Protseq,
         unsigned int MaxCalls,
         RPC_CSTR Endpoint,
             void * SecurityDescriptor
    );



RPC_STATUS
__stdcall
RpcServerUseProtseqEpExA (
         RPC_CSTR Protseq,
         unsigned int MaxCalls,
         RPC_CSTR Endpoint,
             void * SecurityDescriptor,
         PRPC_POLICY Policy
    );



RPC_STATUS
__stdcall
RpcServerUseProtseqEpW (
         RPC_WSTR Protseq,
         unsigned int MaxCalls,
         RPC_WSTR Endpoint,
             void * SecurityDescriptor
    );



RPC_STATUS
__stdcall
RpcServerUseProtseqEpExW (
         RPC_WSTR Protseq,
         unsigned int MaxCalls,
         RPC_WSTR Endpoint,
             void * SecurityDescriptor,
         PRPC_POLICY Policy
    );
#line 1124 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcdce.h"
RPC_STATUS
__stdcall
RpcServerUseProtseqIfA (
         RPC_CSTR Protseq,
         unsigned int MaxCalls,
         RPC_IF_HANDLE IfSpec,
             void * SecurityDescriptor
    );



RPC_STATUS
__stdcall
RpcServerUseProtseqIfExA (
         RPC_CSTR Protseq,
         unsigned int MaxCalls,
         RPC_IF_HANDLE IfSpec,
             void * SecurityDescriptor,
         PRPC_POLICY Policy
    );



RPC_STATUS
__stdcall
RpcServerUseProtseqIfW (
         RPC_WSTR Protseq,
         unsigned int MaxCalls,
         RPC_IF_HANDLE IfSpec,
             void * SecurityDescriptor
    );



RPC_STATUS
__stdcall
RpcServerUseProtseqIfExW (
         RPC_WSTR Protseq,
         unsigned int MaxCalls,
         RPC_IF_HANDLE IfSpec,
             void * SecurityDescriptor,
         PRPC_POLICY Policy
    );
#line 1202 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcdce.h"
void
__stdcall
RpcServerYield (
    void
    );



RPC_STATUS
__stdcall
RpcMgmtStatsVectorFree (
            RPC_STATS_VECTOR ** StatsVector
    );




RPC_STATUS
__stdcall
RpcMgmtInqStats (
             RPC_BINDING_HANDLE Binding,
             RPC_STATS_VECTOR ** Statistics
    );




RPC_STATUS
__stdcall
RpcMgmtIsServerListening (
             RPC_BINDING_HANDLE Binding
    );




RPC_STATUS
__stdcall
RpcMgmtStopServerListening (
             RPC_BINDING_HANDLE Binding
    );




RPC_STATUS
__stdcall
RpcMgmtWaitServerListen (
    void
    );




RPC_STATUS
__stdcall
RpcMgmtSetServerStackSize (
         unsigned long ThreadStackSize
    );



void
__stdcall
RpcSsDontSerializeContext (
    void
    );




RPC_STATUS
__stdcall
RpcMgmtEnableIdleCleanup (
    void
    );



RPC_STATUS
__stdcall
RpcMgmtInqIfIds (
             RPC_BINDING_HANDLE Binding,
             RPC_IF_ID_VECTOR * * IfIdVector
    );


RPC_STATUS
__stdcall
RpcIfIdVectorFree (
            RPC_IF_ID_VECTOR * * IfIdVector
    );





RPC_STATUS
__stdcall
RpcMgmtInqServerPrincNameA (
             RPC_BINDING_HANDLE Binding,
         unsigned long AuthnSvc,
             RPC_CSTR * ServerPrincName
    );



RPC_STATUS
__stdcall
RpcMgmtInqServerPrincNameW (
             RPC_BINDING_HANDLE Binding,
         unsigned long AuthnSvc,
             RPC_WSTR * ServerPrincName
    );
#line 1340 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcdce.h"
RPC_STATUS
__stdcall
RpcServerInqDefaultPrincNameA (
         unsigned long AuthnSvc,
             RPC_CSTR * PrincName
    );



RPC_STATUS
__stdcall
RpcServerInqDefaultPrincNameW (
         unsigned long AuthnSvc,
             RPC_WSTR * PrincName
    );
#line 1377 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcdce.h"
RPC_STATUS
__stdcall
RpcEpResolveBinding (
         RPC_BINDING_HANDLE Binding,
         RPC_IF_HANDLE IfSpec
    );







RPC_STATUS
__stdcall
RpcNsBindingInqEntryNameA (
         RPC_BINDING_HANDLE Binding,
         unsigned long EntryNameSyntax,
             RPC_CSTR * EntryName
    );



RPC_STATUS
__stdcall
RpcNsBindingInqEntryNameW (
         RPC_BINDING_HANDLE Binding,
         unsigned long EntryNameSyntax,
             RPC_WSTR * EntryName
    );
#line 1428 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcdce.h"
#pragma endregion

#pragma region Application Family or OneCore Family


typedef void * RPC_AUTH_IDENTITY_HANDLE;
typedef void * RPC_AUTHZ_HANDLE;
#line 1508 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcdce.h"
typedef struct _RPC_SECURITY_QOS {
  unsigned long Version;
  unsigned long Capabilities;
  unsigned long IdentityTracking;
  unsigned long ImpersonationType;
} RPC_SECURITY_QOS, *PRPC_SECURITY_QOS;







typedef struct _SEC_WINNT_AUTH_IDENTITY_W {
                                                   unsigned short *User;
  unsigned long UserLength;
                                                     unsigned short *Domain;
  unsigned long DomainLength;
                                                       unsigned short *Password;
  unsigned long PasswordLength;
  unsigned long Flags;
} SEC_WINNT_AUTH_IDENTITY_W, *PSEC_WINNT_AUTH_IDENTITY_W;





typedef struct _SEC_WINNT_AUTH_IDENTITY_A {
                             unsigned char *User;
  unsigned long UserLength;
                               unsigned char *Domain;
  unsigned long DomainLength;
                                 unsigned char *Password;
  unsigned long PasswordLength;
  unsigned long Flags;
} SEC_WINNT_AUTH_IDENTITY_A, *PSEC_WINNT_AUTH_IDENTITY_A;
#line 1586 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcdce.h"
typedef struct _RPC_HTTP_TRANSPORT_CREDENTIALS_W
{
    SEC_WINNT_AUTH_IDENTITY_W *TransportCredentials;
    unsigned long Flags;
    unsigned long AuthenticationTarget;
    unsigned long NumberOfAuthnSchemes;
    unsigned long *AuthnSchemes;
    unsigned short *ServerCertificateSubject;
} RPC_HTTP_TRANSPORT_CREDENTIALS_W, *PRPC_HTTP_TRANSPORT_CREDENTIALS_W;

typedef struct _RPC_HTTP_TRANSPORT_CREDENTIALS_A
{
    SEC_WINNT_AUTH_IDENTITY_A *TransportCredentials;
    unsigned long Flags;
    unsigned long AuthenticationTarget;
    unsigned long NumberOfAuthnSchemes;
    unsigned long *AuthnSchemes;
    unsigned char *ServerCertificateSubject;
} RPC_HTTP_TRANSPORT_CREDENTIALS_A, *PRPC_HTTP_TRANSPORT_CREDENTIALS_A;
#line 1666 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcdce.h"
typedef struct _RPC_SECURITY_QOS_V2_W {
  unsigned long Version;
  unsigned long Capabilities;
  unsigned long IdentityTracking;
  unsigned long ImpersonationType;
  unsigned long AdditionalSecurityInfoType;
  union
      {
      RPC_HTTP_TRANSPORT_CREDENTIALS_W *HttpCredentials;
      } u;
} RPC_SECURITY_QOS_V2_W, *PRPC_SECURITY_QOS_V2_W;

typedef struct _RPC_SECURITY_QOS_V2_A {
  unsigned long Version;
  unsigned long Capabilities;
  unsigned long IdentityTracking;
  unsigned long ImpersonationType;
  unsigned long AdditionalSecurityInfoType;
  union
      {
      RPC_HTTP_TRANSPORT_CREDENTIALS_A *HttpCredentials;
      } u;
} RPC_SECURITY_QOS_V2_A, *PRPC_SECURITY_QOS_V2_A;
#line 1793 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcdce.h"
#pragma endregion



#pragma region Desktop Family or OneCore Family
#line 2020 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcdce.h"
#pragma endregion
#line 2041 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcdce.h"
#pragma region Desktop Family or OneCore Family
#line 2063 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcdce.h"
typedef RPC_STATUS
(__stdcall * RPC_NEW_HTTP_PROXY_CHANNEL) (
         unsigned short *ServerName,
         unsigned short *ServerPort,
         unsigned char *RemoteUser,
          unsigned short **NewServerName
    );


typedef void
(__stdcall * RPC_HTTP_PROXY_FREE_STRING) (
         RPC_WSTR String
    );


#pragma endregion



#pragma region Application Family or OneCore Family








#pragma endregion

#pragma region Desktop Family or OneCore Family




RPC_STATUS
__stdcall
RpcImpersonateClient (
             RPC_BINDING_HANDLE BindingHandle
    );


RPC_STATUS
__stdcall
RpcImpersonateClient2 (
             RPC_BINDING_HANDLE BindingHandle
    );



RPC_STATUS
__stdcall
RpcRevertToSelfEx (
             RPC_BINDING_HANDLE BindingHandle
    );



RPC_STATUS
__stdcall
RpcRevertToSelf (
    void
    );



RPC_STATUS
__stdcall
RpcImpersonateClientContainer (
             RPC_BINDING_HANDLE BindingHandle
    );



RPC_STATUS
__stdcall
RpcRevertContainerImpersonation (
    void
    );





RPC_STATUS
__stdcall
RpcBindingInqAuthClientA (
             RPC_BINDING_HANDLE ClientBinding,
          RPC_AUTHZ_HANDLE * Privs,
                 RPC_CSTR * ServerPrincName,
              unsigned long * AuthnLevel,
              unsigned long * AuthnSvc,
              unsigned long * AuthzSvc
    );



RPC_STATUS
__stdcall
RpcBindingInqAuthClientW (
             RPC_BINDING_HANDLE ClientBinding,
          RPC_AUTHZ_HANDLE * Privs,
                 RPC_WSTR * ServerPrincName,
              unsigned long * AuthnLevel,
              unsigned long * AuthnSvc,
              unsigned long * AuthzSvc
    );


RPC_STATUS
__stdcall
RpcBindingInqAuthClientExA (
             RPC_BINDING_HANDLE ClientBinding,
          RPC_AUTHZ_HANDLE * Privs,
                 RPC_CSTR * ServerPrincName,
              unsigned long * AuthnLevel,
              unsigned long * AuthnSvc,
              unsigned long * AuthzSvc,
          unsigned long Flags
    );


RPC_STATUS
__stdcall
RpcBindingInqAuthClientExW (
             RPC_BINDING_HANDLE ClientBinding,
          RPC_AUTHZ_HANDLE * Privs,
                 RPC_WSTR * ServerPrincName,
              unsigned long * AuthnLevel,
              unsigned long * AuthnSvc,
              unsigned long * AuthzSvc,
          unsigned long Flags
    );



RPC_STATUS
__stdcall
RpcBindingInqAuthInfoA (
         RPC_BINDING_HANDLE Binding,
                 RPC_CSTR * ServerPrincName,
              unsigned long * AuthnLevel,
              unsigned long * AuthnSvc,
              RPC_AUTH_IDENTITY_HANDLE * AuthIdentity,
              unsigned long * AuthzSvc
    );



RPC_STATUS
__stdcall
RpcBindingInqAuthInfoW (
         RPC_BINDING_HANDLE Binding,
                 RPC_WSTR * ServerPrincName,
              unsigned long * AuthnLevel,
              unsigned long * AuthnSvc,
              RPC_AUTH_IDENTITY_HANDLE * AuthIdentity,
              unsigned long * AuthzSvc
    );



RPC_STATUS
__stdcall
RpcBindingSetAuthInfoA (
         RPC_BINDING_HANDLE Binding,
             RPC_CSTR ServerPrincName,
         unsigned long AuthnLevel,
         unsigned long AuthnSvc,
             RPC_AUTH_IDENTITY_HANDLE AuthIdentity,
         unsigned long AuthzSvc
    );



RPC_STATUS
__stdcall
RpcBindingSetAuthInfoExA (
         RPC_BINDING_HANDLE Binding,
             RPC_CSTR ServerPrincName,
         unsigned long AuthnLevel,
         unsigned long AuthnSvc,
             RPC_AUTH_IDENTITY_HANDLE AuthIdentity,
         unsigned long AuthzSvc,
             RPC_SECURITY_QOS * SecurityQos
    );



RPC_STATUS
__stdcall
RpcBindingSetAuthInfoW (
         RPC_BINDING_HANDLE Binding,
             RPC_WSTR ServerPrincName,
         unsigned long AuthnLevel,
         unsigned long AuthnSvc,
             RPC_AUTH_IDENTITY_HANDLE AuthIdentity,
         unsigned long AuthzSvc
    );



RPC_STATUS
__stdcall
RpcBindingSetAuthInfoExW (
         RPC_BINDING_HANDLE Binding,
             RPC_WSTR ServerPrincName,
         unsigned long AuthnLevel,
         unsigned long AuthnSvc,
             RPC_AUTH_IDENTITY_HANDLE AuthIdentity,
         unsigned long AuthzSvc,
             RPC_SECURITY_QOS * SecurityQOS
    );



RPC_STATUS
__stdcall
RpcBindingInqAuthInfoExA (
         RPC_BINDING_HANDLE Binding,
                 RPC_CSTR * ServerPrincName,
              unsigned long * AuthnLevel,
              unsigned long * AuthnSvc,
              RPC_AUTH_IDENTITY_HANDLE * AuthIdentity,
              unsigned long * AuthzSvc,
          unsigned long RpcQosVersion,
              RPC_SECURITY_QOS *SecurityQOS
    );



RPC_STATUS
__stdcall
RpcBindingInqAuthInfoExW (
         RPC_BINDING_HANDLE Binding,
                 RPC_WSTR * ServerPrincName,
              unsigned long * AuthnLevel,
              unsigned long * AuthnSvc,
              RPC_AUTH_IDENTITY_HANDLE * AuthIdentity,
              unsigned long * AuthzSvc,
         unsigned long RpcQosVersion,
              RPC_SECURITY_QOS * SecurityQOS
    );

typedef void
(__stdcall * RPC_AUTH_KEY_RETRIEVAL_FN) (
         void * Arg,
         RPC_WSTR ServerPrincName,
         unsigned long KeyVer,
             void * * Key,
          RPC_STATUS * Status
    );


RPC_STATUS
__stdcall
RpcServerCompleteSecurityCallback(
         RPC_BINDING_HANDLE BindingHandle,
         RPC_STATUS Status
    );



RPC_STATUS
__stdcall
RpcServerRegisterAuthInfoA (
             RPC_CSTR ServerPrincName,
         unsigned long AuthnSvc,
             RPC_AUTH_KEY_RETRIEVAL_FN GetKeyFn,
             void * Arg
    );



RPC_STATUS
__stdcall
RpcServerRegisterAuthInfoW (
             RPC_WSTR ServerPrincName,
         unsigned long AuthnSvc,
             RPC_AUTH_KEY_RETRIEVAL_FN GetKeyFn,
             void * Arg
    );
#line 2438 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcdce.h"
typedef struct {
    unsigned char * UserName;
    unsigned char * ComputerName;
    unsigned short Privilege;
    unsigned long AuthFlags;
} RPC_CLIENT_INFORMATION1, * PRPC_CLIENT_INFORMATION1;





RPC_STATUS
__stdcall
RpcBindingServerFromClient (
             RPC_BINDING_HANDLE ClientBinding,
          RPC_BINDING_HANDLE * ServerBinding
    );



void
__stdcall
RpcRaiseException (
         RPC_STATUS exception
    );



RPC_STATUS
__stdcall
RpcTestCancel(
    void
    );



RPC_STATUS
__stdcall
RpcServerTestCancel (
             RPC_BINDING_HANDLE BindingHandle
    );



RPC_STATUS
__stdcall
RpcCancelThread(
         void * Thread
    );


RPC_STATUS
__stdcall
RpcCancelThreadEx(
         void * Thread,
         long Timeout
    );




RPC_STATUS
__stdcall
UuidCreate (
          UUID * Uuid
    );



RPC_STATUS
__stdcall
UuidCreateSequential (
          UUID * Uuid
    );






RPC_STATUS
__stdcall
UuidToStringA (
         const UUID * Uuid,
             RPC_CSTR * StringUuid
    );




RPC_STATUS
__stdcall
UuidFromStringA (
             RPC_CSTR StringUuid,
          UUID * Uuid
    );




RPC_STATUS
__stdcall
UuidToStringW (
         const UUID * Uuid,
             RPC_WSTR * StringUuid
    );




RPC_STATUS
__stdcall
UuidFromStringW (
             RPC_WSTR StringUuid,
          UUID * Uuid
    );
#line 2586 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcdce.h"
signed int
__stdcall
UuidCompare (
         UUID * Uuid1,
         UUID * Uuid2,
          RPC_STATUS * Status
    );



RPC_STATUS
__stdcall
UuidCreateNil (
          UUID * NilUuid
    );


int
__stdcall
UuidEqual (
         UUID * Uuid1,
         UUID * Uuid2,
          RPC_STATUS * Status
    );


unsigned short
__stdcall
UuidHash (
         UUID * Uuid,
          RPC_STATUS * Status
    );


int
__stdcall
UuidIsNil (
         UUID * Uuid,
          RPC_STATUS * Status
    );





RPC_STATUS
__stdcall
RpcEpRegisterNoReplaceA (
         RPC_IF_HANDLE IfSpec,
         RPC_BINDING_VECTOR * BindingVector,
             UUID_VECTOR * UuidVector,
             RPC_CSTR Annotation
    );



RPC_STATUS
__stdcall
RpcEpRegisterNoReplaceW (
         RPC_IF_HANDLE IfSpec,
         RPC_BINDING_VECTOR * BindingVector,
             UUID_VECTOR * UuidVector,
             RPC_WSTR Annotation
    );



RPC_STATUS
__stdcall
RpcEpRegisterA (
         RPC_IF_HANDLE IfSpec,
         RPC_BINDING_VECTOR * BindingVector,
             UUID_VECTOR * UuidVector,
             RPC_CSTR Annotation
    );



RPC_STATUS
__stdcall
RpcEpRegisterW (
         RPC_IF_HANDLE IfSpec,
         RPC_BINDING_VECTOR * BindingVector,
             UUID_VECTOR * UuidVector,
             RPC_WSTR Annotation
    );
#line 2708 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcdce.h"
RPC_STATUS
__stdcall
RpcEpUnregister(
         RPC_IF_HANDLE IfSpec,
         RPC_BINDING_VECTOR * BindingVector,
             UUID_VECTOR * UuidVector
    );







RPC_STATUS
__stdcall
DceErrorInqTextA (
         RPC_STATUS RpcStatus,
                                         RPC_CSTR ErrorText
    );



RPC_STATUS
__stdcall
DceErrorInqTextW (
         RPC_STATUS RpcStatus,
                                         RPC_WSTR ErrorText
    );
#line 2756 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcdce.h"
typedef I_RPC_HANDLE * RPC_EP_INQ_HANDLE;
#line 2771 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcdce.h"
RPC_STATUS
__stdcall
RpcMgmtEpEltInqBegin (
                      RPC_BINDING_HANDLE EpBinding,
         unsigned long InquiryType,
             RPC_IF_ID * IfId,
             unsigned long VersOption,
             UUID * ObjectUuid,
          RPC_EP_INQ_HANDLE * InquiryContext
    );



RPC_STATUS
__stdcall
RpcMgmtEpEltInqDone (
            RPC_EP_INQ_HANDLE * InquiryContext
    );





RPC_STATUS
__stdcall
RpcMgmtEpEltInqNextA (
         RPC_EP_INQ_HANDLE InquiryContext,
          RPC_IF_ID * IfId,
              RPC_BINDING_HANDLE * Binding,
              UUID * ObjectUuid,
                 RPC_CSTR * Annotation
    );



RPC_STATUS
__stdcall
RpcMgmtEpEltInqNextW (
         RPC_EP_INQ_HANDLE InquiryContext,
          RPC_IF_ID * IfId,
              RPC_BINDING_HANDLE * Binding,
              UUID * ObjectUuid,
                 RPC_WSTR * Annotation
    );
#line 2838 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcdce.h"
RPC_STATUS
__stdcall
RpcMgmtEpUnregister (
             RPC_BINDING_HANDLE EpBinding,
         RPC_IF_ID * IfId,
         RPC_BINDING_HANDLE Binding,
             UUID * ObjectUuid
    );

typedef int
(__stdcall * RPC_MGMT_AUTHORIZATION_FN) (
         RPC_BINDING_HANDLE ClientBinding,
         unsigned long RequestedMgmtOperation,
          RPC_STATUS * Status
    );
#line 2862 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcdce.h"
RPC_STATUS
__stdcall
RpcMgmtSetAuthorizationFn (
         RPC_MGMT_AUTHORIZATION_FN AuthorizationFn
    );
#line 3097 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcdce.h"
#pragma endregion






#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcdcep.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 37 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcdcep.h"
#pragma region Application Family or OneCore Family


typedef struct _RPC_VERSION {
    unsigned short MajorVersion;
    unsigned short MinorVersion;
} RPC_VERSION;

typedef struct _RPC_SYNTAX_IDENTIFIER {
    GUID SyntaxGUID;
    RPC_VERSION SyntaxVersion;
} RPC_SYNTAX_IDENTIFIER, * PRPC_SYNTAX_IDENTIFIER;

typedef struct _RPC_MESSAGE
{
    RPC_BINDING_HANDLE Handle;
    unsigned long DataRepresentation;
    void * Buffer;
    unsigned int BufferLength;
    unsigned int ProcNum;
    PRPC_SYNTAX_IDENTIFIER TransferSyntax;
    void * RpcInterfaceInformation;
    void * ReservedForRuntime;
    void * ManagerEpv;
    void * ImportContext;
    unsigned long RpcFlags;
} RPC_MESSAGE, * PRPC_MESSAGE;


#pragma endregion

#pragma region Desktop Family or OneCore Family


typedef RPC_STATUS
__stdcall RPC_FORWARD_FUNCTION(
                          UUID * InterfaceId,
                          RPC_VERSION * InterfaceVersion,
                          UUID * ObjectId,
                          unsigned char * Rpcpro,
                          void * * ppDestEndpoint);

enum RPC_ADDRESS_CHANGE_TYPE
{
    PROTOCOL_NOT_LOADED = 1,
    PROTOCOL_LOADED,
    PROTOCOL_ADDRESS_CHANGE
};

typedef void
__stdcall RPC_ADDRESS_CHANGE_FN(
                           void * arg
                        );


#pragma endregion

#pragma region Application Family or OneCore Family
#line 177 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcdcep.h"
typedef
void
(__stdcall * RPC_DISPATCH_FUNCTION) (
           PRPC_MESSAGE Message
    );

typedef struct {
    unsigned int DispatchTableCount;
    RPC_DISPATCH_FUNCTION * DispatchTable;
    LONG_PTR Reserved;
} RPC_DISPATCH_TABLE, * PRPC_DISPATCH_TABLE;

typedef struct _RPC_PROTSEQ_ENDPOINT
{
    unsigned char * RpcProtocolSequence;
    unsigned char * Endpoint;
} RPC_PROTSEQ_ENDPOINT, * PRPC_PROTSEQ_ENDPOINT;
#line 202 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcdcep.h"
typedef struct _RPC_SERVER_INTERFACE
{
    unsigned int Length;
    RPC_SYNTAX_IDENTIFIER InterfaceId;
    RPC_SYNTAX_IDENTIFIER TransferSyntax;
    PRPC_DISPATCH_TABLE DispatchTable;
    unsigned int RpcProtseqEndpointCount;
    PRPC_PROTSEQ_ENDPOINT RpcProtseqEndpoint;
    void *DefaultManagerEpv;
    void const *InterpreterInfo;
    unsigned int Flags ;
} RPC_SERVER_INTERFACE, * PRPC_SERVER_INTERFACE;

typedef struct _RPC_CLIENT_INTERFACE
{
    unsigned int Length;
    RPC_SYNTAX_IDENTIFIER InterfaceId;
    RPC_SYNTAX_IDENTIFIER TransferSyntax;
    PRPC_DISPATCH_TABLE DispatchTable;
    unsigned int RpcProtseqEndpointCount;
    PRPC_PROTSEQ_ENDPOINT RpcProtseqEndpoint;
    ULONG_PTR Reserved;
    void const * InterpreterInfo;
    unsigned int Flags ;
} RPC_CLIENT_INTERFACE, * PRPC_CLIENT_INTERFACE;


#pragma endregion

#pragma region Desktop Family or OneCore Family




RPC_STATUS
__stdcall
I_RpcNegotiateTransferSyntax (
           RPC_MESSAGE * Message
    );




RPC_STATUS
__stdcall
I_RpcGetBuffer (
           RPC_MESSAGE * Message
    );


RPC_STATUS
__stdcall
I_RpcGetBufferWithObject (
           RPC_MESSAGE * Message,
       UUID * ObjectUuid
    );



RPC_STATUS
__stdcall
I_RpcSendReceive (
           RPC_MESSAGE * Message
    );



RPC_STATUS
__stdcall
I_RpcFreeBuffer (
           RPC_MESSAGE * Message
    );



RPC_STATUS
__stdcall
I_RpcSend (
           PRPC_MESSAGE Message
    );



RPC_STATUS
__stdcall
I_RpcReceive (
           PRPC_MESSAGE Message,
       unsigned int Size
    );



RPC_STATUS
__stdcall
I_RpcFreePipeBuffer (
           RPC_MESSAGE * Message
    );



RPC_STATUS
__stdcall
I_RpcReallocPipeBuffer (
         PRPC_MESSAGE Message,
     unsigned int NewSize
    );

typedef void * I_RPC_MUTEX;


void
__stdcall
I_RpcRequestMutex (
           I_RPC_MUTEX * Mutex
    );


void
__stdcall
I_RpcClearMutex (
       I_RPC_MUTEX Mutex
    );


void
__stdcall
I_RpcDeleteMutex (
       I_RPC_MUTEX Mutex
    );


void *
__stdcall
I_RpcAllocate (
       unsigned int Size
    );


void
__stdcall
I_RpcFree (
       void * Object
    );


void
__stdcall
I_RpcClntChkSystemHandleLeak (
       void * CallObj
    );


void
__stdcall
I_RpcSvrChkSystemHandleLeak (
       void * CallObj
    );


void
__stdcall
I_RpcClntSetSystemHandle (
       void* Handle,
       unsigned char Type,
       unsigned long AccessMask,
    void * CallObj
    );


void
__stdcall
I_RpcSvrSetSystemHandle (
       void* Handle,
       unsigned char Type,
       unsigned long AccessMask,
    void * CallObj
    );


void
__stdcall
I_RpcClntGetSystemHandle (
                                              unsigned char** pMemory,
       unsigned char Type,
       unsigned long AccessMask,
    void * CallObj
    );


void
__stdcall
I_RpcSvrGetSystemHandle (
                                              unsigned char** ppMemory,
       unsigned char Type,
       unsigned long AccessMask,
    void * CallObj
    );


void
__stdcall
I_RpcFreeSystemHandle (
         unsigned char Type,
         void* Handle
    );


void
__stdcall
I_RpcPauseExecution (
       unsigned long Milliseconds
    );


RPC_STATUS
__stdcall
I_RpcGetExtendedError (
    void
    );

typedef
void
(__stdcall * PRPC_RUNDOWN) (
    void * AssociationContext
    );



RPC_STATUS
__stdcall
I_RpcMonitorAssociation (
       RPC_BINDING_HANDLE Handle,
       PRPC_RUNDOWN RundownRoutine,
       void * Context
    );



RPC_STATUS
__stdcall
I_RpcStopMonitorAssociation (
       RPC_BINDING_HANDLE Handle
    );


RPC_BINDING_HANDLE
__stdcall
I_RpcGetCurrentCallHandle(
    void
    );



RPC_STATUS
__stdcall
I_RpcGetAssociationContext (
       RPC_BINDING_HANDLE BindingHandle,
        void * * AssociationContext
    );


void *
__stdcall
I_RpcGetServerContextList (
       RPC_BINDING_HANDLE BindingHandle
    );


void
__stdcall
I_RpcSetServerContextList (
       RPC_BINDING_HANDLE BindingHandle,
        void * ServerContextList
    );


RPC_STATUS
__stdcall
I_RpcNsInterfaceExported (
       unsigned long EntryNameSyntax,
       unsigned short *EntryName,
       RPC_SERVER_INTERFACE * RpcInterfaceInformation
    );


RPC_STATUS
__stdcall
I_RpcNsInterfaceUnexported (
       unsigned long EntryNameSyntax,
       unsigned short *EntryName,
       RPC_SERVER_INTERFACE * RpcInterfaceInformation
    );


RPC_STATUS
__stdcall
I_RpcBindingToStaticStringBindingW (
       RPC_BINDING_HANDLE Binding,
        unsigned short **StringBinding
    );


RPC_STATUS
__stdcall
I_RpcBindingInqSecurityContext (
       RPC_BINDING_HANDLE Binding,
        void **SecurityContextHandle
    );
#line 531 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcdcep.h"
RPC_STATUS
__stdcall
I_RpcBindingInqWireIdForSnego (
         RPC_BINDING_HANDLE Binding,
          unsigned char * WireId
    );
#line 551 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcdcep.h"
RPC_STATUS
__stdcall
I_RpcBindingInqLocalClientPID (
       RPC_BINDING_HANDLE Binding,
        unsigned long *Pid
    );


RPC_STATUS
__stdcall
I_RpcBindingHandleToAsyncHandle (
       RPC_BINDING_HANDLE Binding,
        void **AsyncHandle
    );






RPC_STATUS
__stdcall
I_RpcNsBindingSetEntryNameW (
         RPC_BINDING_HANDLE Binding,
         unsigned long EntryNameSyntax,
         RPC_WSTR EntryName
    );



RPC_STATUS
__stdcall
I_RpcNsBindingSetEntryNameA (
         RPC_BINDING_HANDLE Binding,
         unsigned long EntryNameSyntax,
         RPC_CSTR EntryName
    );


RPC_STATUS
__stdcall
I_RpcServerUseProtseqEp2A (
             RPC_CSTR NetworkAddress,
         RPC_CSTR Protseq,
         unsigned int MaxCalls,
         RPC_CSTR Endpoint,
             void * SecurityDescriptor,
         void * Policy
    );


RPC_STATUS
__stdcall
I_RpcServerUseProtseqEp2W (
             RPC_WSTR NetworkAddress,
         RPC_WSTR Protseq,
         unsigned int MaxCalls,
         RPC_WSTR Endpoint,
             void * SecurityDescriptor,
         void * Policy
    );


RPC_STATUS
__stdcall
I_RpcServerUseProtseq2W (
             RPC_WSTR NetworkAddress,
         RPC_WSTR Protseq,
         unsigned int MaxCalls,
             void * SecurityDescriptor,
         void * Policy
    );


RPC_STATUS
__stdcall
I_RpcServerUseProtseq2A (
             RPC_CSTR NetworkAddress,
         RPC_CSTR Protseq,
         unsigned int MaxCalls,
             void * SecurityDescriptor,
         void * Policy
    );
#line 682 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcdcep.h"
RPC_STATUS
__stdcall
I_RpcServerStartService (
         RPC_WSTR Protseq,
         RPC_WSTR Endpoint,
         RPC_IF_HANDLE IfSpec
    );





RPC_STATUS
__stdcall
I_RpcBindingInqDynamicEndpointW (
         RPC_BINDING_HANDLE Binding,
                              RPC_WSTR *DynamicEndpoint
    );



RPC_STATUS
__stdcall
I_RpcBindingInqDynamicEndpointA (
         RPC_BINDING_HANDLE Binding,
                              RPC_CSTR *DynamicEndpoint
    );
#line 731 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcdcep.h"
RPC_STATUS
__stdcall
I_RpcServerCheckClientRestriction (
       RPC_BINDING_HANDLE Context
    );
#line 745 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcdcep.h"
RPC_STATUS
__stdcall
I_RpcBindingInqTransportType (
       RPC_BINDING_HANDLE Binding,
        unsigned int * Type
    );

typedef struct _RPC_TRANSFER_SYNTAX
{
    UUID Uuid;
    unsigned short VersMajor;
    unsigned short VersMinor;
} RPC_TRANSFER_SYNTAX;



RPC_STATUS
__stdcall
I_RpcIfInqTransferSyntaxes (
       RPC_IF_HANDLE RpcIfHandle,
        RPC_TRANSFER_SYNTAX * TransferSyntaxes,
       unsigned int TransferSyntaxSize,
        unsigned int * TransferSyntaxCount
    );



RPC_STATUS
__stdcall
I_UuidCreate (
        UUID * Uuid
    );


void
__stdcall
I_RpcUninitializeNdrOle (
    void
    );



RPC_STATUS
__stdcall
I_RpcBindingCopy (
       RPC_BINDING_HANDLE SourceBinding,
        RPC_BINDING_HANDLE * DestinationBinding
    );


RPC_STATUS
__stdcall
I_RpcBindingIsClientLocal (
                RPC_BINDING_HANDLE BindingHandle,
        unsigned int * ClientLocalFlag
    );


RPC_STATUS
__stdcall
I_RpcBindingInqConnId (
       RPC_BINDING_HANDLE Binding,
        void **ConnId,
        int *pfFirstCall
    );


RPC_STATUS
__stdcall
I_RpcBindingCreateNP (
         RPC_WSTR ServerName,
         RPC_WSTR ServiceName,
         RPC_WSTR NetworkOptions,
          RPC_BINDING_HANDLE *Binding
    );


void
__stdcall
I_RpcSsDontSerializeContext (
    void
    );



RPC_STATUS
__stdcall
I_RpcLaunchDatagramReceiveThread(
    void * pAddress
    );



RPC_STATUS
__stdcall
I_RpcServerRegisterForwardFunction (
       RPC_FORWARD_FUNCTION * pForwardFunction
    );

RPC_ADDRESS_CHANGE_FN * __stdcall
I_RpcServerInqAddressChangeFn(
    void
    );

RPC_STATUS __stdcall
I_RpcServerSetAddressChangeFn(
       RPC_ADDRESS_CHANGE_FN * pAddressChangeFn
    );
#line 862 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcdcep.h"
RPC_STATUS
__stdcall
I_RpcServerInqLocalConnAddress (
       RPC_BINDING_HANDLE Binding,
           void *Buffer,
           unsigned long *BufferSize,
        unsigned long *AddressFormat
    );


RPC_STATUS
__stdcall
I_RpcServerInqRemoteConnAddress (
       RPC_BINDING_HANDLE Binding,
           void *Buffer,
           unsigned long *BufferSize,
        unsigned long *AddressFormat
    );


void
__stdcall
I_RpcSessionStrictContextHandle (
    void
    );


RPC_STATUS
__stdcall
I_RpcTurnOnEEInfoPropagation (
    void
    );




RPC_STATUS
__stdcall
I_RpcConnectionInqSockBuffSize(
      unsigned long * RecvBuffSize,
      unsigned long * SendBuffSize
  );



RPC_STATUS
__stdcall
I_RpcConnectionSetSockBuffSize(
      unsigned long RecvBuffSize,
      unsigned long SendBuffSize
   );

typedef
void
(*RPCLT_PDU_FILTER_FUNC) (
       void *Buffer,
       unsigned int BufferLength,
       int fDatagram
    );

typedef
void
(__cdecl *RPC_SETFILTER_FUNC) (
       RPCLT_PDU_FILTER_FUNC pfnFilter
    );




RPC_STATUS
__stdcall
I_RpcServerStartListening(
    void * hWnd
    );



RPC_STATUS
__stdcall
I_RpcServerStopListening(
    void
    );

typedef RPC_STATUS (*RPC_BLOCKING_FN) (
       void * hWnd,
       void * Context,
                void * hSyncEvent
    );



RPC_STATUS
__stdcall
I_RpcBindingSetAsync(
       RPC_BINDING_HANDLE Binding,
       RPC_BLOCKING_FN BlockingFn,
       unsigned long ServerTid
    );



RPC_STATUS
__stdcall
I_RpcSetThreadParams(
       int fClientFree,
                void *Context,
                void * hWndClient
    );


unsigned int
__stdcall
I_RpcWindowProc(
       void * hWnd,
       unsigned int Message,
       unsigned int wParam,
       unsigned long lParam
    );



RPC_STATUS
__stdcall
I_RpcServerUnregisterEndpointA (
         RPC_CSTR Protseq,
         RPC_CSTR Endpoint
    );



RPC_STATUS
__stdcall
I_RpcServerUnregisterEndpointW (
         RPC_WSTR Protseq,
         RPC_WSTR Endpoint
    );
#line 1007 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcdcep.h"
RPC_STATUS
__stdcall
I_RpcServerInqTransportType(
        unsigned int * Type
    );


long
__stdcall
I_RpcMapWin32Status (
       RPC_STATUS Status
    );
#line 1058 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcdcep.h"
typedef RPC_STATUS
(__stdcall *I_RpcProxyIsValidMachineFn)
        (
             RPC_WSTR Machine,
             RPC_WSTR DotMachine,
             unsigned long PortNumber
        );

typedef RPC_STATUS
(__stdcall *I_RpcProxyGetClientAddressFn)
        (
           void *Context,
            char *Buffer,
            unsigned long *BufferLength
        );

typedef RPC_STATUS
(__stdcall *I_RpcProxyGetConnectionTimeoutFn)
        (
            unsigned long *ConnectionTimeout
        );
#line 1184 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcdcep.h"
typedef struct tagI_RpcProxyCallbackInterface
{
    I_RpcProxyIsValidMachineFn IsValidMachineFn;
    I_RpcProxyGetClientAddressFn GetClientAddressFn;
    I_RpcProxyGetConnectionTimeoutFn GetConnectionTimeoutFn;
} I_RpcProxyCallbackInterface;


RPC_STATUS
__stdcall
I_RpcProxyNewConnection (
       unsigned long ConnectionType,
       unsigned short *ServerAddress,
       unsigned short *ServerPort,
       void *ConnectionParameter,
       I_RpcProxyCallbackInterface *ProxyCallbackInterface
    );
#line 1299 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcdcep.h"
#pragma endregion
#line 1316 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcdcep.h"
#pragma option pop
#line 3103 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcdce.h"







#pragma option pop
#line 157 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpc.h"


#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcnsi.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 26 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcnsi.h"
#pragma region Desktop Family


typedef void * RPC_NS_HANDLE;
#line 45 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcnsi.h"
         RPC_STATUS __stdcall
RpcNsBindingExportA(
         unsigned long EntryNameSyntax,
             RPC_CSTR EntryName,
             RPC_IF_HANDLE IfSpec,
             RPC_BINDING_VECTOR *BindingVec,
             UUID_VECTOR *ObjectUuidVec
    );


         RPC_STATUS __stdcall
RpcNsBindingUnexportA(
         unsigned long EntryNameSyntax,
             RPC_CSTR EntryName,
             RPC_IF_HANDLE IfSpec,
             UUID_VECTOR *ObjectUuidVec
    );



         RPC_STATUS __stdcall
RpcNsBindingExportW(
         unsigned long EntryNameSyntax,
             RPC_WSTR EntryName,
             RPC_IF_HANDLE IfSpec,
             RPC_BINDING_VECTOR *BindingVec,
             UUID_VECTOR *ObjectUuidVec
    );

         RPC_STATUS __stdcall
RpcNsBindingUnexportW(
         unsigned long EntryNameSyntax,
             RPC_WSTR EntryName,
             RPC_IF_HANDLE IfSpec,
             UUID_VECTOR *ObjectUuidVec
    );





RPC_STATUS __stdcall
RpcNsBindingExportPnPA(
         unsigned long EntryNameSyntax,
             RPC_CSTR EntryName,
             RPC_IF_HANDLE IfSpec,
             UUID_VECTOR *ObjectVector
    );

RPC_STATUS __stdcall
RpcNsBindingUnexportPnPA(
         unsigned long EntryNameSyntax,
             RPC_CSTR EntryName,
             RPC_IF_HANDLE IfSpec,
             UUID_VECTOR *ObjectVector
    );



RPC_STATUS __stdcall
RpcNsBindingExportPnPW(
         unsigned long EntryNameSyntax,
             RPC_WSTR EntryName,
             RPC_IF_HANDLE IfSpec,
             UUID_VECTOR *ObjectVector
    );

RPC_STATUS __stdcall
RpcNsBindingUnexportPnPW(
         unsigned long EntryNameSyntax,
             RPC_WSTR EntryName,
             RPC_IF_HANDLE IfSpec,
             UUID_VECTOR *ObjectVector
    );





         RPC_STATUS __stdcall
RpcNsBindingLookupBeginA(
         unsigned long EntryNameSyntax,
             RPC_CSTR EntryName,
             RPC_IF_HANDLE IfSpec,
             UUID *ObjUuid,
         unsigned long BindingMaxCount,
          RPC_NS_HANDLE *LookupContext
    );



         RPC_STATUS __stdcall
RpcNsBindingLookupBeginW(
         unsigned long EntryNameSyntax,
             RPC_WSTR EntryName,
             RPC_IF_HANDLE IfSpec,
             UUID *ObjUuid,
         unsigned long BindingMaxCount,
          RPC_NS_HANDLE *LookupContext
    );


         RPC_STATUS __stdcall
RpcNsBindingLookupNext(
        RPC_NS_HANDLE LookupContext,
        RPC_BINDING_VECTOR * * BindingVec
    );

         RPC_STATUS __stdcall
RpcNsBindingLookupDone(
           RPC_NS_HANDLE * LookupContext
    );



         RPC_STATUS __stdcall
RpcNsGroupDeleteA(
         unsigned long GroupNameSyntax,
             RPC_CSTR GroupName
    );

         RPC_STATUS __stdcall
RpcNsGroupMbrAddA(
         unsigned long GroupNameSyntax,
         RPC_CSTR GroupName,
         unsigned long MemberNameSyntax,
         RPC_CSTR MemberName
    );

         RPC_STATUS __stdcall
RpcNsGroupMbrRemoveA(
         unsigned long GroupNameSyntax,
         RPC_CSTR GroupName,
         unsigned long MemberNameSyntax,
         RPC_CSTR MemberName
    );

         RPC_STATUS __stdcall
RpcNsGroupMbrInqBeginA(
         unsigned long GroupNameSyntax,
         RPC_CSTR GroupName,
         unsigned long MemberNameSyntax,
          RPC_NS_HANDLE *InquiryContext
    );

         RPC_STATUS __stdcall
RpcNsGroupMbrInqNextA(
            RPC_NS_HANDLE InquiryContext,
             RPC_CSTR *MemberName
    );



         RPC_STATUS __stdcall
RpcNsGroupDeleteW(
         unsigned long GroupNameSyntax,
             RPC_WSTR GroupName
    );

         RPC_STATUS __stdcall
RpcNsGroupMbrAddW(
         unsigned long GroupNameSyntax,
         RPC_WSTR GroupName,
         unsigned long MemberNameSyntax,
         RPC_WSTR MemberName
    );

         RPC_STATUS __stdcall
RpcNsGroupMbrRemoveW(
         unsigned long GroupNameSyntax,
         RPC_WSTR GroupName,
         unsigned long MemberNameSyntax,
         RPC_WSTR MemberName
    );

         RPC_STATUS __stdcall
RpcNsGroupMbrInqBeginW(
         unsigned long GroupNameSyntax,
         RPC_WSTR GroupName,
         unsigned long MemberNameSyntax,
          RPC_NS_HANDLE *InquiryContext
    );

         RPC_STATUS __stdcall
RpcNsGroupMbrInqNextW(
            RPC_NS_HANDLE InquiryContext,
             RPC_WSTR *MemberName
    );



         RPC_STATUS __stdcall
RpcNsGroupMbrInqDone(
           RPC_NS_HANDLE * InquiryContext
    );



         RPC_STATUS __stdcall
RpcNsProfileDeleteA(
         unsigned long ProfileNameSyntax,
         RPC_CSTR ProfileName
    );

         RPC_STATUS __stdcall
RpcNsProfileEltAddA(
         unsigned long ProfileNameSyntax,
         RPC_CSTR ProfileName,
             RPC_IF_ID *IfId,
         unsigned long MemberNameSyntax,
         RPC_CSTR MemberName,
         unsigned long Priority,
             RPC_CSTR Annotation
    );

         RPC_STATUS __stdcall
RpcNsProfileEltRemoveA(
         unsigned long ProfileNameSyntax,
         RPC_CSTR ProfileName,
             RPC_IF_ID *IfId,
         unsigned long MemberNameSyntax,
         RPC_CSTR MemberName
    );

         RPC_STATUS __stdcall
RpcNsProfileEltInqBeginA(
         unsigned long ProfileNameSyntax,
         RPC_CSTR ProfileName,
         unsigned long InquiryType,
             RPC_IF_ID *IfId,
         unsigned long VersOption,
         unsigned long MemberNameSyntax,
             RPC_CSTR MemberName,
          RPC_NS_HANDLE *InquiryContext
    );

         RPC_STATUS __stdcall
RpcNsProfileEltInqNextA(
         RPC_NS_HANDLE InquiryContext,
              RPC_IF_ID *IfId,
          RPC_CSTR *MemberName,
          unsigned long *Priority,
          RPC_CSTR *Annotation
    );



         RPC_STATUS __stdcall
RpcNsProfileDeleteW(
         unsigned long ProfileNameSyntax,
         RPC_WSTR ProfileName
    );

         RPC_STATUS __stdcall
RpcNsProfileEltAddW(
         unsigned long ProfileNameSyntax,
         RPC_WSTR ProfileName,
             RPC_IF_ID *IfId,
         unsigned long MemberNameSyntax,
         RPC_WSTR MemberName,
         unsigned long Priority,
             RPC_WSTR Annotation
    );

         RPC_STATUS __stdcall
RpcNsProfileEltRemoveW(
         unsigned long ProfileNameSyntax,
         RPC_WSTR ProfileName,
             RPC_IF_ID *IfId,
         unsigned long MemberNameSyntax,
         RPC_WSTR MemberName
    );

         RPC_STATUS __stdcall
RpcNsProfileEltInqBeginW(
         unsigned long ProfileNameSyntax,
         RPC_WSTR ProfileName,
         unsigned long InquiryType,
             RPC_IF_ID *IfId,
         unsigned long VersOption,
         unsigned long MemberNameSyntax,
             RPC_WSTR MemberName,
          RPC_NS_HANDLE *InquiryContext
    );

         RPC_STATUS __stdcall
RpcNsProfileEltInqNextW(
         RPC_NS_HANDLE InquiryContext,
              RPC_IF_ID *IfId,
          RPC_WSTR *MemberName,
          unsigned long *Priority,
          RPC_WSTR *Annotation
    );



         RPC_STATUS __stdcall
RpcNsProfileEltInqDone(
           RPC_NS_HANDLE * InquiryContext
    );



         RPC_STATUS __stdcall
RpcNsEntryObjectInqBeginA(
         unsigned long EntryNameSyntax,
         RPC_CSTR EntryName,
          RPC_NS_HANDLE *InquiryContext
    );



         RPC_STATUS __stdcall
RpcNsEntryObjectInqBeginW(
         unsigned long EntryNameSyntax,
         RPC_WSTR EntryName,
          RPC_NS_HANDLE *InquiryContext
    );



         RPC_STATUS __stdcall
RpcNsEntryObjectInqNext(
        RPC_NS_HANDLE InquiryContext,
        UUID * ObjUuid
    );

         RPC_STATUS __stdcall
RpcNsEntryObjectInqDone(
           RPC_NS_HANDLE * InquiryContext
    );



         RPC_STATUS __stdcall
RpcNsEntryExpandNameA(
         unsigned long EntryNameSyntax,
         RPC_CSTR EntryName,
          RPC_CSTR *ExpandedName
    );

         RPC_STATUS __stdcall
RpcNsMgmtBindingUnexportA(
         unsigned long EntryNameSyntax,
         RPC_CSTR EntryName,
             RPC_IF_ID *IfId,
         unsigned long VersOption,
             UUID_VECTOR *ObjectUuidVec
    );

         RPC_STATUS __stdcall
RpcNsMgmtEntryCreateA(
         unsigned long EntryNameSyntax,
         RPC_CSTR EntryName
    );

         RPC_STATUS __stdcall
RpcNsMgmtEntryDeleteA(
         unsigned long EntryNameSyntax,
         RPC_CSTR EntryName
    );

         RPC_STATUS __stdcall
RpcNsMgmtEntryInqIfIdsA(
         unsigned long EntryNameSyntax,
         RPC_CSTR EntryName,
          RPC_IF_ID_VECTOR * *IfIdVec
    );

         RPC_STATUS __stdcall
RpcNsMgmtHandleSetExpAge(
       RPC_NS_HANDLE NsHandle,
       unsigned long ExpirationAge
    );

         RPC_STATUS __stdcall
RpcNsMgmtInqExpAge(
        unsigned long * ExpirationAge
    );

         RPC_STATUS __stdcall
RpcNsMgmtSetExpAge(
       unsigned long ExpirationAge
    );



         RPC_STATUS __stdcall
RpcNsEntryExpandNameW(
         unsigned long EntryNameSyntax,
         RPC_WSTR EntryName,
          RPC_WSTR *ExpandedName
    );

         RPC_STATUS __stdcall
RpcNsMgmtBindingUnexportW(
         unsigned long EntryNameSyntax,
         RPC_WSTR EntryName,
             RPC_IF_ID *IfId,
         unsigned long VersOption,
             UUID_VECTOR *ObjectUuidVec
    );

         RPC_STATUS __stdcall
RpcNsMgmtEntryCreateW(
         unsigned long EntryNameSyntax,
         RPC_WSTR EntryName
    );

         RPC_STATUS __stdcall
RpcNsMgmtEntryDeleteW(
         unsigned long EntryNameSyntax,
         RPC_WSTR EntryName
    );

         RPC_STATUS __stdcall
RpcNsMgmtEntryInqIfIdsW(
         unsigned long EntryNameSyntax,
         RPC_WSTR EntryName,
          RPC_IF_ID_VECTOR * *IfIdVec
    );





         RPC_STATUS __stdcall
RpcNsBindingImportBeginA(
         unsigned long EntryNameSyntax,
             RPC_CSTR EntryName,
             RPC_IF_HANDLE IfSpec,
             UUID *ObjUuid,
          RPC_NS_HANDLE *ImportContext
    );



         RPC_STATUS __stdcall
RpcNsBindingImportBeginW(
         unsigned long EntryNameSyntax,
             RPC_WSTR EntryName,
             RPC_IF_HANDLE IfSpec,
             UUID *ObjUuid,
          RPC_NS_HANDLE *ImportContext
    );



         RPC_STATUS __stdcall
RpcNsBindingImportNext(
       RPC_NS_HANDLE ImportContext,
        RPC_BINDING_HANDLE * Binding
    );

         RPC_STATUS __stdcall
RpcNsBindingImportDone(
           RPC_NS_HANDLE * ImportContext
    );

         RPC_STATUS __stdcall
RpcNsBindingSelect(
           RPC_BINDING_VECTOR * BindingVec,
        RPC_BINDING_HANDLE * Binding
    );
#line 562 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcnsi.h"
#pragma endregion


#pragma option pop
#line 159 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpc.h"


#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcnterr.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 30 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcnterr.h"
#pragma region Desktop Family or OneCore Family
#line 555 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcnterr.h"
#pragma endregion






#pragma option pop
#line 161 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpc.h"
#line 213 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpc.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcasync.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 34 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcasync.h"
#pragma region Desktop Family or OneCore Family
#line 58 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcasync.h"
typedef
enum _RPC_NOTIFICATION_TYPES
{
    RpcNotificationTypeNone,
    RpcNotificationTypeEvent,

    RpcNotificationTypeApc,
    RpcNotificationTypeIoc,
    RpcNotificationTypeHwnd,

    RpcNotificationTypeCallback
} RPC_NOTIFICATION_TYPES;
#line 83 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcasync.h"
typedef
enum _RPC_ASYNC_EVENT {
    RpcCallComplete,
    RpcSendComplete,
    RpcReceiveComplete,
    RpcClientDisconnect
    } RPC_ASYNC_EVENT;


struct _RPC_ASYNC_STATE;

typedef void __stdcall
RPCNOTIFICATION_ROUTINE (
                  struct _RPC_ASYNC_STATE *pAsync,
                  void *Context,
                  RPC_ASYNC_EVENT Event);
typedef RPCNOTIFICATION_ROUTINE *PFN_RPCNOTIFICATION_ROUTINE;

typedef union _RPC_ASYNC_NOTIFICATION_INFO {




    struct {
        PFN_RPCNOTIFICATION_ROUTINE NotificationRoutine;
        HANDLE hThread;
        } APC;







    struct {
        HANDLE hIOPort;
        DWORD dwNumberOfBytesTransferred;
        DWORD_PTR dwCompletionKey;
        LPOVERLAPPED lpOverlapped;
        } IOC;






    struct {
        HWND hWnd;
        UINT Msg;
        } HWND;
#line 142 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcasync.h"
    HANDLE hEvent;
#line 155 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcasync.h"
    PFN_RPCNOTIFICATION_ROUTINE NotificationRoutine;
} RPC_ASYNC_NOTIFICATION_INFO, *PRPC_ASYNC_NOTIFICATION_INFO;

typedef struct _RPC_ASYNC_STATE {
    unsigned int Size;
    unsigned long Signature;
    long Lock;
    unsigned long Flags;
    void *StubInfo;
    void *UserInfo;
    void *RuntimeInfo;
    RPC_ASYNC_EVENT Event;

    RPC_NOTIFICATION_TYPES NotificationType;
    RPC_ASYNC_NOTIFICATION_INFO u;

    LONG_PTR Reserved[4];
    } RPC_ASYNC_STATE, *PRPC_ASYNC_STATE;
#line 182 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcasync.h"
RPC_STATUS
__stdcall
RpcAsyncInitializeHandle (
                             PRPC_ASYNC_STATE pAsync,
         unsigned int Size
    );




RPC_STATUS
__stdcall
RpcAsyncRegisterInfo (
         PRPC_ASYNC_STATE pAsync
    ) ;




RPC_STATUS
__stdcall
RpcAsyncGetCallStatus (
         PRPC_ASYNC_STATE pAsync
    ) ;



RPC_STATUS
__stdcall
RpcAsyncCompleteCall (
            PRPC_ASYNC_STATE pAsync,
              void *Reply
    ) ;



RPC_STATUS
__stdcall
RpcAsyncAbortCall (
            PRPC_ASYNC_STATE pAsync,
         unsigned long ExceptionCode
    ) ;



RPC_STATUS
__stdcall
RpcAsyncCancelCall (
            PRPC_ASYNC_STATE pAsync,
         BOOL fAbort
    ) ;






typedef enum tagExtendedErrorParamTypes
{
    eeptAnsiString = 1,
    eeptUnicodeString,
    eeptLongVal,
    eeptShortVal,
    eeptPointerVal,
    eeptNone,
    eeptBinary
} ExtendedErrorParamTypes;




typedef struct tagBinaryParam
{
    void *Buffer;
    short Size;
} BinaryParam;

typedef struct tagRPC_EE_INFO_PARAM
{
    ExtendedErrorParamTypes ParameterType;
    union
        {
        LPSTR AnsiString;
        LPWSTR UnicodeString;
        long LVal;
        short SVal;
        ULONGLONG PVal;
        BinaryParam BVal;
        } u;
} RPC_EE_INFO_PARAM;
#line 282 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcasync.h"
typedef struct tagRPC_EXTENDED_ERROR_INFO
{
    ULONG Version;
    LPWSTR ComputerName;
    ULONG ProcessID;
    union
        {

        SYSTEMTIME SystemTime;
        FILETIME FileTime;



        } u;
    ULONG GeneratingComponent;
    ULONG Status;
    USHORT DetectionLocation;
    USHORT Flags;
    int NumberOfParameters;
    RPC_EE_INFO_PARAM Parameters[4];
} RPC_EXTENDED_ERROR_INFO;

typedef struct tagRPC_ERROR_ENUM_HANDLE
{
    ULONG Signature;
    void *CurrentPos;
    void *Head;
} RPC_ERROR_ENUM_HANDLE;


RPC_STATUS
__stdcall
RpcErrorStartEnumeration (
          RPC_ERROR_ENUM_HANDLE *EnumHandle
    );


RPC_STATUS
__stdcall
RpcErrorGetNextRecord (
         RPC_ERROR_ENUM_HANDLE *EnumHandle,
         BOOL CopyStrings,
          RPC_EXTENDED_ERROR_INFO *ErrorInfo
    );


RPC_STATUS
__stdcall
RpcErrorEndEnumeration (
            RPC_ERROR_ENUM_HANDLE *EnumHandle
    );


RPC_STATUS
__stdcall
RpcErrorResetEnumeration (
            RPC_ERROR_ENUM_HANDLE *EnumHandle
    );


RPC_STATUS
__stdcall
RpcErrorGetNumberOfRecords (
         RPC_ERROR_ENUM_HANDLE *EnumHandle,
          int *Records
    );


RPC_STATUS
__stdcall
RpcErrorSaveErrorInfo (
         RPC_ERROR_ENUM_HANDLE *EnumHandle,
                                          PVOID *ErrorBlob,
          size_t *BlobSize
    );


RPC_STATUS
__stdcall
RpcErrorLoadErrorInfo (
                               PVOID ErrorBlob,
         size_t BlobSize,
          RPC_ERROR_ENUM_HANDLE *EnumHandle
    );


RPC_STATUS
__stdcall
RpcErrorAddRecord (
         RPC_EXTENDED_ERROR_INFO *ErrorInfo
    );


void
__stdcall
RpcErrorClearInformation (
    void
    );






RPC_STATUS
__stdcall
RpcAsyncCleanupThread (
         DWORD dwTimeout
    );


RPC_STATUS
__stdcall
RpcGetAuthorizationContextForClient (
             RPC_BINDING_HANDLE ClientBinding,
         BOOL ImpersonateOnReturn,
             PVOID Reserved1,
             PLARGE_INTEGER pExpirationTime,
         LUID Reserved2,
         DWORD Reserved3,
             PVOID Reserved4,
          PVOID *pAuthzClientContext
    );


RPC_STATUS
__stdcall
RpcFreeAuthorizationContext (
            PVOID *pAuthzClientContext
    );


RPC_STATUS
__stdcall
RpcSsContextLockExclusive (
             RPC_BINDING_HANDLE ServerBindingHandle,
         PVOID UserContext
    );


RPC_STATUS
__stdcall
RpcSsContextLockShared (
         RPC_BINDING_HANDLE ServerBindingHandle,
         PVOID UserContext
    );
#line 468 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcasync.h"
typedef struct tagRPC_CALL_ATTRIBUTES_V1_W
{
    unsigned int Version;
    unsigned long Flags;
    unsigned long ServerPrincipalNameBufferLength;
    unsigned short *ServerPrincipalName;
    unsigned long ClientPrincipalNameBufferLength;
    unsigned short *ClientPrincipalName;
    unsigned long AuthenticationLevel;
    unsigned long AuthenticationService;
    BOOL NullSession;
} RPC_CALL_ATTRIBUTES_V1_W;

typedef struct tagRPC_CALL_ATTRIBUTES_V1_A
{
    unsigned int Version;
    unsigned long Flags;
    unsigned long ServerPrincipalNameBufferLength;
    unsigned char *ServerPrincipalName;
    unsigned long ClientPrincipalNameBufferLength;
    unsigned char *ClientPrincipalName;
    unsigned long AuthenticationLevel;
    unsigned long AuthenticationService;
    BOOL NullSession;
} RPC_CALL_ATTRIBUTES_V1_A;
#line 613 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcasync.h"
RPC_STATUS
__stdcall
RpcServerInqCallAttributesW (
             RPC_BINDING_HANDLE ClientBinding,
            void *RpcCallAttributes
    );


RPC_STATUS
__stdcall
RpcServerInqCallAttributesA (
             RPC_BINDING_HANDLE ClientBinding,
            void *RpcCallAttributes
    );
#line 653 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcasync.h"
typedef RPC_CALL_ATTRIBUTES_V1_W RPC_CALL_ATTRIBUTES;
#line 712 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcasync.h"
RPC_STATUS __stdcall
I_RpcAsyncSetHandle (
          PRPC_MESSAGE Message,
          PRPC_ASYNC_STATE pAsync
    );


RPC_STATUS __stdcall
I_RpcAsyncAbortCall (
         PRPC_ASYNC_STATE pAsync,
         unsigned long ExceptionCode
    ) ;


int
__stdcall
I_RpcExceptionFilter (
         unsigned long ExceptionCode
    );
#line 752 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcasync.h"
#pragma endregion
#line 764 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcasync.h"
#pragma option pop
#line 213 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpc.h"
#line 227 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpc.h"
#pragma option pop
#line 16 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objbase.h"

#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcndr.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 48 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcndr.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/pshpack8.h"
#line 26 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/pshpack8.h"
#pragma pack(push,8)
#line 48 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcndr.h"



#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcnsip.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 30 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcnsip.h"
#pragma region Desktop Family


typedef struct
{
   RPC_NS_HANDLE LookupContext;
   RPC_BINDING_HANDLE ProposedHandle;
   RPC_BINDING_VECTOR * Bindings;

} RPC_IMPORT_CONTEXT_P, * PRPC_IMPORT_CONTEXT_P;





RPC_STATUS
__stdcall
I_RpcNsGetBuffer(
       PRPC_MESSAGE Message
    );


RPC_STATUS
__stdcall
I_RpcNsSendReceive(
       PRPC_MESSAGE Message,
        RPC_BINDING_HANDLE * Handle
    );



void
__stdcall
I_RpcNsRaiseException(
       PRPC_MESSAGE Message,
       RPC_STATUS Status
    );


RPC_STATUS
__stdcall
I_RpcReBindBuffer(
       PRPC_MESSAGE Message
    );


RPC_STATUS
__stdcall
I_NsServerBindSearch(
    void
    );


RPC_STATUS
__stdcall
I_NsClientBindSearch(
    void
    );


void
__stdcall
I_NsClientBindDone(
    void
    );


#pragma endregion






#pragma option pop
#line 51 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcndr.h"



#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcsal.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 332 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcsal.h"
#pragma option pop
#line 54 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcndr.h"






#pragma region Application Family or OneCore Family
#line 197 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcndr.h"
typedef unsigned char byte;
typedef byte cs_byte;
typedef unsigned char boolean;
#line 244 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcndr.h"
void * __stdcall MIDL_user_allocate( size_t size);
void __stdcall MIDL_user_free( void * );



void * __stdcall I_RpcDefaultAllocate(
         handle_t bh, size_t size, void * (* RealAlloc)(size_t) );

void __stdcall I_RpcDefaultFree(
         handle_t bh, void *, void (*RealFree)(void *) );
#line 279 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcndr.h"
typedef void * NDR_CCONTEXT;

typedef struct
    {
    void * pad[2];
    void * userContext;
    } * NDR_SCONTEXT;





typedef void (__stdcall * NDR_RUNDOWN)(void * context);

typedef void (__stdcall * NDR_NOTIFY_ROUTINE)(void);

typedef void (__stdcall * NDR_NOTIFY2_ROUTINE)(boolean flag);

typedef struct _SCONTEXT_QUEUE {
    unsigned long NumberOfObjects;
    NDR_SCONTEXT * ArrayOfObjects;
    } SCONTEXT_QUEUE, * PSCONTEXT_QUEUE;


RPC_BINDING_HANDLE
__stdcall
NDRCContextBinding (
         NDR_CCONTEXT CContext
    );


void
__stdcall
NDRCContextMarshall (
              NDR_CCONTEXT CContext,
          void *pBuff
    );


void
__stdcall
NDRCContextUnmarshall (
                NDR_CCONTEXT * pCContext,
          RPC_BINDING_HANDLE hBinding,
          void * pBuff,
          unsigned long DataRepresentation
    );


void
__stdcall
NDRCContextUnmarshall2 (
                NDR_CCONTEXT * pCContext,
          RPC_BINDING_HANDLE hBinding,
          void * pBuff,
          unsigned long DataRepresentation
    );


void
__stdcall
NDRSContextMarshall (
          NDR_SCONTEXT CContext,
          void * pBuff,
          NDR_RUNDOWN userRunDownIn
    );


NDR_SCONTEXT
__stdcall
NDRSContextUnmarshall (
          void * pBuff,
          unsigned long DataRepresentation
    );


void
__stdcall
NDRSContextMarshallEx (
          RPC_BINDING_HANDLE BindingHandle,
          NDR_SCONTEXT CContext,
          void * pBuff,
          NDR_RUNDOWN userRunDownIn
    );


void
__stdcall
NDRSContextMarshall2 (
          RPC_BINDING_HANDLE BindingHandle,
          NDR_SCONTEXT CContext,
          void * pBuff,
          NDR_RUNDOWN userRunDownIn,
              void * CtxGuard,
         unsigned long Flags
    );


NDR_SCONTEXT
__stdcall
NDRSContextUnmarshallEx (
          RPC_BINDING_HANDLE BindingHandle,
          void * pBuff,
          unsigned long DataRepresentation
    );


NDR_SCONTEXT
__stdcall
NDRSContextUnmarshall2(
          RPC_BINDING_HANDLE BindingHandle,
              void * pBuff,
          unsigned long DataRepresentation,
              void * CtxGuard,
         unsigned long Flags
    );


void
__stdcall
RpcSsDestroyClientContext (
         void * * ContextHandle
    );
#line 472 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcndr.h"
typedef unsigned long error_status_t;
#line 555 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcndr.h"
struct _MIDL_STUB_MESSAGE;
struct _MIDL_STUB_DESC;
struct _FULL_PTR_XLAT_TABLES;

typedef unsigned char * RPC_BUFPTR;
typedef unsigned long RPC_LENGTH;


typedef void (__stdcall * EXPR_EVAL)( struct _MIDL_STUB_MESSAGE * );

typedef const unsigned char * PFORMAT_STRING;




typedef struct
    {
    long Dimension;


    unsigned long * BufferConformanceMark;
    unsigned long * BufferVarianceMark;


    unsigned long * MaxCountArray;
    unsigned long * OffsetArray;
    unsigned long * ActualCountArray;
    } ARRAY_INFO, *PARRAY_INFO;


typedef struct _NDR_ASYNC_MESSAGE * PNDR_ASYNC_MESSAGE;
typedef struct _NDR_CORRELATION_INFO *PNDR_CORRELATION_INFO;





typedef const unsigned char * PFORMAT_STRING;
typedef struct _MIDL_SYNTAX_INFO MIDL_SYNTAX_INFO, *PMIDL_SYNTAX_INFO;

struct NDR_ALLOC_ALL_NODES_CONTEXT;
struct NDR_POINTER_QUEUE_STATE;
struct _NDR_PROC_CONTEXT;

typedef struct _MIDL_STUB_MESSAGE
    {

    PRPC_MESSAGE RpcMsg;


    unsigned char * Buffer;





    unsigned char * BufferStart;
    unsigned char * BufferEnd;
#line 621 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcndr.h"
    unsigned char * BufferMark;


    unsigned long BufferLength;


    unsigned long MemorySize;


    unsigned char * Memory;


    unsigned char IsClient;
    unsigned char Pad;
    unsigned short uFlags2;


    int ReuseBuffer;


    struct NDR_ALLOC_ALL_NODES_CONTEXT *pAllocAllNodesContext;
    struct NDR_POINTER_QUEUE_STATE *pPointerQueueState;






    int IgnoreEmbeddedPointers;





    unsigned char * PointerBufferMark;




    unsigned char CorrDespIncrement;

    unsigned char uFlags;
    unsigned short UniquePtrCount;





    ULONG_PTR MaxCount;





    unsigned long Offset;





    unsigned long ActualCount;


    void * ( __stdcall * pfnAllocate)( size_t );
    void ( __stdcall * pfnFree)(void *);







    unsigned char * StackTop;





    unsigned char * pPresentedType;
    unsigned char * pTransmitType;
#line 710 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcndr.h"
    handle_t SavedHandle;




    const struct _MIDL_STUB_DESC * StubDesc;




    struct _FULL_PTR_XLAT_TABLES * FullPtrXlatTables;
    unsigned long FullPtrRefId;

    unsigned long PointerLength;

    int fInDontFree :1;
    int fDontCallFreeInst :1;
    int fUnused1 :1;
    int fHasReturn :1;
    int fHasExtensions :1;
    int fHasNewCorrDesc :1;
    int fIsIn :1;
    int fIsOut :1;
    int fIsOicf :1;
    int fBufferValid :1;
    int fHasMemoryValidateCallback: 1;
    int fInFree :1;
    int fNeedMCCP :1;
    int fUnused2 :3;
    int fUnused3 :16;


    unsigned long dwDestContext;
    void * pvDestContext;

    NDR_SCONTEXT * SavedContextHandles;

    long ParamNumber;

    struct IRpcChannelBuffer * pRpcChannelBuffer;

    PARRAY_INFO pArrayInfo;
    unsigned long * SizePtrCountArray;
    unsigned long * SizePtrOffsetArray;
    unsigned long * SizePtrLengthArray;




    void * pArgQueue;

    unsigned long dwStubPhase;

    void * LowStackMark;




    PNDR_ASYNC_MESSAGE pAsyncMsg;
    PNDR_CORRELATION_INFO pCorrInfo;
    unsigned char * pCorrMemory;

    void * pMemoryList;
#line 783 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcndr.h"
    INT_PTR pCSInfo;

    unsigned char * ConformanceMark;
    unsigned char * VarianceMark;

    INT_PTR Unused;

    struct _NDR_PROC_CONTEXT * pContext;
#line 802 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcndr.h"
    void * ContextHandleHash;
    void * pUserMarshalList;
    INT_PTR Reserved51_3;
    INT_PTR Reserved51_4;
    INT_PTR Reserved51_5;





    } MIDL_STUB_MESSAGE, *PMIDL_STUB_MESSAGE;


typedef struct _MIDL_STUB_MESSAGE MIDL_STUB_MESSAGE, *PMIDL_STUB_MESSAGE;




typedef void *
        ( __stdcall * GENERIC_BINDING_ROUTINE)
        (void *);
typedef void
        ( __stdcall * GENERIC_UNBIND_ROUTINE)
        (void *, unsigned char *);

typedef struct _GENERIC_BINDING_ROUTINE_PAIR
    {
    GENERIC_BINDING_ROUTINE pfnBind;
    GENERIC_UNBIND_ROUTINE pfnUnbind;
    } GENERIC_BINDING_ROUTINE_PAIR, *PGENERIC_BINDING_ROUTINE_PAIR;

typedef struct __GENERIC_BINDING_INFO
    {
    void * pObj;
    unsigned int Size;
    GENERIC_BINDING_ROUTINE pfnBind;
    GENERIC_UNBIND_ROUTINE pfnUnbind;
    } GENERIC_BINDING_INFO, *PGENERIC_BINDING_INFO;
#line 851 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcndr.h"
typedef void ( __stdcall * XMIT_HELPER_ROUTINE)
    ( PMIDL_STUB_MESSAGE );

typedef struct _XMIT_ROUTINE_QUINTUPLE
    {
    XMIT_HELPER_ROUTINE pfnTranslateToXmit;
    XMIT_HELPER_ROUTINE pfnTranslateFromXmit;
    XMIT_HELPER_ROUTINE pfnFreeXmit;
    XMIT_HELPER_ROUTINE pfnFreeInst;
    } XMIT_ROUTINE_QUINTUPLE, *PXMIT_ROUTINE_QUINTUPLE;

typedef unsigned long
( __stdcall * USER_MARSHAL_SIZING_ROUTINE)
    (unsigned long *,
     unsigned long,
     void * );

typedef unsigned char *
( __stdcall * USER_MARSHAL_MARSHALLING_ROUTINE)
    (unsigned long *,
     unsigned char * ,
     void * );

typedef unsigned char *
( __stdcall * USER_MARSHAL_UNMARSHALLING_ROUTINE)
    (unsigned long *,
     unsigned char *,
     void * );

typedef void ( __stdcall * USER_MARSHAL_FREEING_ROUTINE)
    (unsigned long *,
     void * );

typedef struct _USER_MARSHAL_ROUTINE_QUADRUPLE
    {
    USER_MARSHAL_SIZING_ROUTINE pfnBufferSize;
    USER_MARSHAL_MARSHALLING_ROUTINE pfnMarshall;
    USER_MARSHAL_UNMARSHALLING_ROUTINE pfnUnmarshall;
    USER_MARSHAL_FREEING_ROUTINE pfnFree;
    } USER_MARSHAL_ROUTINE_QUADRUPLE;



typedef enum _USER_MARSHAL_CB_TYPE
{
    USER_MARSHAL_CB_BUFFER_SIZE,
    USER_MARSHAL_CB_MARSHALL,
    USER_MARSHAL_CB_UNMARSHALL,
    USER_MARSHAL_CB_FREE
} USER_MARSHAL_CB_TYPE;

typedef struct _USER_MARSHAL_CB
{
    unsigned long Flags;
    PMIDL_STUB_MESSAGE pStubMsg;
    PFORMAT_STRING pReserve;
    unsigned long Signature;
    USER_MARSHAL_CB_TYPE CBType;
    PFORMAT_STRING pFormat;
    PFORMAT_STRING pTypeFormat;
} USER_MARSHAL_CB;
#line 921 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcndr.h"
typedef struct _MALLOC_FREE_STRUCT
    {
    void * ( __stdcall * pfnAllocate)(size_t);
    void ( __stdcall * pfnFree)(void *);
    } MALLOC_FREE_STRUCT;

typedef struct _COMM_FAULT_OFFSETS
    {
    short CommOffset;
    short FaultOffset;
    } COMM_FAULT_OFFSETS;





typedef enum _IDL_CS_CONVERT
    {
    IDL_CS_NO_CONVERT,
    IDL_CS_IN_PLACE_CONVERT,
    IDL_CS_NEW_BUFFER_CONVERT
    } IDL_CS_CONVERT;

typedef void
( __stdcall * CS_TYPE_NET_SIZE_ROUTINE)
    (RPC_BINDING_HANDLE hBinding,
     unsigned long ulNetworkCodeSet,
     unsigned long ulLocalBufferSize,
     IDL_CS_CONVERT * conversionType,
     unsigned long * pulNetworkBufferSize,
     error_status_t * pStatus);

typedef void
( __stdcall * CS_TYPE_LOCAL_SIZE_ROUTINE)
    (RPC_BINDING_HANDLE hBinding,
     unsigned long ulNetworkCodeSet,
     unsigned long ulNetworkBufferSize,
     IDL_CS_CONVERT * conversionType,
     unsigned long * pulLocalBufferSize,
     error_status_t * pStatus);

typedef void
( __stdcall * CS_TYPE_TO_NETCS_ROUTINE)
    (RPC_BINDING_HANDLE hBinding,
     unsigned long ulNetworkCodeSet,
     void * pLocalData,
     unsigned long ulLocalDataLength,
     byte * pNetworkData,
     unsigned long * pulNetworkDataLength,
     error_status_t * pStatus);

typedef void
( __stdcall * CS_TYPE_FROM_NETCS_ROUTINE)
    (RPC_BINDING_HANDLE hBinding,
     unsigned long ulNetworkCodeSet,
     byte * pNetworkData,
     unsigned long ulNetworkDataLength,
     unsigned long ulLocalBufferSize,
     void * pLocalData,
     unsigned long * pulLocalDataLength,
     error_status_t * pStatus);

typedef void
( __stdcall * CS_TAG_GETTING_ROUTINE)
    (RPC_BINDING_HANDLE hBinding,
     int fServerSide,
     unsigned long * pulSendingTag,
     unsigned long * pulDesiredReceivingTag,
     unsigned long * pulReceivingTag,
     error_status_t * pStatus);

void __stdcall
RpcCsGetTags(
     RPC_BINDING_HANDLE hBinding,
     int fServerSide,
     unsigned long * pulSendingTag,
     unsigned long * pulDesiredReceivingTag,
     unsigned long * pulReceivingTag,
     error_status_t * pStatus);

typedef struct _NDR_CS_SIZE_CONVERT_ROUTINES
    {
    CS_TYPE_NET_SIZE_ROUTINE pfnNetSize;
    CS_TYPE_TO_NETCS_ROUTINE pfnToNetCs;
    CS_TYPE_LOCAL_SIZE_ROUTINE pfnLocalSize;
    CS_TYPE_FROM_NETCS_ROUTINE pfnFromNetCs;
    } NDR_CS_SIZE_CONVERT_ROUTINES;

typedef struct _NDR_CS_ROUTINES
    {
    NDR_CS_SIZE_CONVERT_ROUTINES *pSizeConvertRoutines;
    CS_TAG_GETTING_ROUTINE *pTagGettingRoutines;
    } NDR_CS_ROUTINES;

typedef struct _NDR_EXPR_DESC
{
    const unsigned short * pOffset;
    PFORMAT_STRING pFormatExpr;
} NDR_EXPR_DESC;




typedef struct _MIDL_STUB_DESC
    {
    void * RpcInterfaceInformation;

    void * ( __stdcall * pfnAllocate)(size_t);
    void ( __stdcall * pfnFree)(void *);

    union
        {
        handle_t * pAutoHandle;
        handle_t * pPrimitiveHandle;
        PGENERIC_BINDING_INFO pGenericBindingInfo;
        } IMPLICIT_HANDLE_INFO;

    const NDR_RUNDOWN * apfnNdrRundownRoutines;
    const GENERIC_BINDING_ROUTINE_PAIR * aGenericBindingRoutinePairs;
    const EXPR_EVAL * apfnExprEval;
    const XMIT_ROUTINE_QUINTUPLE * aXmitQuintuple;

    const unsigned char * pFormatTypes;

    int fCheckBounds;


    unsigned long Version;

    MALLOC_FREE_STRUCT * pMallocFreeStruct;

    long MIDLVersion;

    const COMM_FAULT_OFFSETS * CommFaultOffsets;


    const USER_MARSHAL_ROUTINE_QUADRUPLE * aUserMarshalQuadruple;


    const NDR_NOTIFY_ROUTINE * NotifyRoutineTable;





    ULONG_PTR mFlags;


    const NDR_CS_ROUTINES * CsRoutineTables;

    void * ProxyServerInfo;
    const NDR_EXPR_DESC * pExprInfo;



    } MIDL_STUB_DESC;


typedef const MIDL_STUB_DESC * PMIDL_STUB_DESC;

typedef void * PMIDL_XMIT_TYPE;
#line 1110 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcndr.h"
typedef void ( __stdcall * STUB_THUNK)( PMIDL_STUB_MESSAGE );


typedef long ( __stdcall * SERVER_ROUTINE)();







typedef struct _MIDL_METHOD_PROPERTY
{
    unsigned long Id;
    ULONG_PTR Value;
} MIDL_METHOD_PROPERTY, *PMIDL_METHOD_PROPERTY;

typedef struct _MIDL_METHOD_PROPERTY_MAP
{
    unsigned long Count;
    const MIDL_METHOD_PROPERTY *Properties;
} MIDL_METHOD_PROPERTY_MAP, *PMIDL_METHOD_PROPERTY_MAP;

typedef struct _MIDL_INTERFACE_METHOD_PROPERTIES
{
    unsigned short MethodCount;
    const MIDL_METHOD_PROPERTY_MAP* const *MethodProperties;
} MIDL_INTERFACE_METHOD_PROPERTIES;




typedef struct _MIDL_SERVER_INFO_
    {
    PMIDL_STUB_DESC pStubDesc;
    const SERVER_ROUTINE * DispatchTable;
    PFORMAT_STRING ProcString;
    const unsigned short * FmtStringOffset;
    const STUB_THUNK * ThunkTable;
    PRPC_SYNTAX_IDENTIFIER pTransferSyntax;
    ULONG_PTR nCount;
    PMIDL_SYNTAX_INFO pSyntaxInfo;
    } MIDL_SERVER_INFO, *PMIDL_SERVER_INFO;






typedef struct _MIDL_STUBLESS_PROXY_INFO
    {
    PMIDL_STUB_DESC pStubDesc;
    PFORMAT_STRING ProcFormatString;
    const unsigned short * FormatStringOffset;
    PRPC_SYNTAX_IDENTIFIER pTransferSyntax;
    ULONG_PTR nCount;
    PMIDL_SYNTAX_INFO pSyntaxInfo;
    } MIDL_STUBLESS_PROXY_INFO;

typedef MIDL_STUBLESS_PROXY_INFO * PMIDL_STUBLESS_PROXY_INFO;




typedef struct _MIDL_SYNTAX_INFO
{
RPC_SYNTAX_IDENTIFIER TransferSyntax;
RPC_DISPATCH_TABLE * DispatchTable;
PFORMAT_STRING ProcString;
const unsigned short * FmtStringOffset;
PFORMAT_STRING TypeString;
const void * aUserMarshalQuadruple;
const MIDL_INTERFACE_METHOD_PROPERTIES *pMethodProperties;
ULONG_PTR pReserved2;
} MIDL_SYNTAX_INFO, *PMIDL_SYNTAX_INFO;

typedef unsigned short * PARAM_OFFSETTABLE, *PPARAM_OFFSETTABLE;





typedef union _CLIENT_CALL_RETURN
    {
    void * Pointer;
    LONG_PTR Simple;
    } CLIENT_CALL_RETURN;


typedef enum
        {
        XLAT_SERVER = 1,
        XLAT_CLIENT
        } XLAT_SIDE;

typedef struct _FULL_PTR_XLAT_TABLES
{
    void * RefIdToPointer;
    void * PointerToRefId;
    unsigned long NextRefId;
    XLAT_SIDE XlatSide;
} FULL_PTR_XLAT_TABLES, *PFULL_PTR_XLAT_TABLES;





typedef enum _system_handle_t
{
    SYSTEM_HANDLE_FILE = 0,
    SYSTEM_HANDLE_SEMAPHORE = 1,
    SYSTEM_HANDLE_EVENT = 2,
    SYSTEM_HANDLE_MUTEX = 3,
    SYSTEM_HANDLE_PROCESS = 4,
    SYSTEM_HANDLE_TOKEN = 5,
    SYSTEM_HANDLE_SECTION = 6,
    SYSTEM_HANDLE_REG_KEY = 7,
    SYSTEM_HANDLE_THREAD = 8,
    SYSTEM_HANDLE_COMPOSITION_OBJECT = 9,
    SYSTEM_HANDLE_SOCKET = 10,
    SYSTEM_HANDLE_JOB = 11,
    SYSTEM_HANDLE_INVALID = 0xFF,
} system_handle_t;





enum {
    MidlInterceptionInfoVersionOne = 1
};

enum {
    MidlWinrtTypeSerializationInfoVersionOne = 1
};



typedef struct _MIDL_INTERCEPTION_INFO
{
    unsigned long Version;
    PFORMAT_STRING ProcString;
    const unsigned short *ProcFormatOffsetTable;
    unsigned long ProcCount;
    PFORMAT_STRING TypeString;
} MIDL_INTERCEPTION_INFO, *PMIDL_INTERCEPTION_INFO;

typedef struct _MIDL_WINRT_TYPE_SERIALIZATION_INFO
{
    unsigned long Version;
    PFORMAT_STRING TypeFormatString;
    unsigned short FormatStringSize;
    unsigned short TypeOffset;
    PMIDL_STUB_DESC StubDesc;
} MIDL_WINRT_TYPE_SERIALIZATION_INFO, *PMIDL_WINRT_TYPE_SERIALIZATION_INFO;





RPC_STATUS __stdcall
NdrClientGetSupportedSyntaxes(
         RPC_CLIENT_INTERFACE * pInf,
          unsigned long * pCount,
          MIDL_SYNTAX_INFO ** pArr );


RPC_STATUS __stdcall
NdrServerGetSupportedSyntaxes(
         RPC_SERVER_INTERFACE * pInf,
          unsigned long * pCount,
          MIDL_SYNTAX_INFO ** pArr,
          unsigned long * pPreferSyntaxIndex);
#line 1292 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcndr.h"
void
__stdcall
NdrSimpleTypeMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    unsigned char FormatChar
    );


unsigned char *
__stdcall
NdrPointerMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );


unsigned char *
__stdcall
NdrCsArrayMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );


unsigned char *
__stdcall
NdrCsTagMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );




unsigned char *
__stdcall
NdrSimpleStructMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );


unsigned char *
__stdcall
NdrConformantStructMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );


unsigned char *
__stdcall
NdrConformantVaryingStructMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );


unsigned char *
__stdcall
NdrComplexStructMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );




unsigned char *
__stdcall
NdrFixedArrayMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );


unsigned char *
__stdcall
NdrConformantArrayMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );


unsigned char *
__stdcall
NdrConformantVaryingArrayMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );


unsigned char *
__stdcall
NdrVaryingArrayMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );


unsigned char *
__stdcall
NdrComplexArrayMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );




unsigned char *
__stdcall
NdrNonConformantStringMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );


unsigned char *
__stdcall
NdrConformantStringMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );




unsigned char *
__stdcall
NdrEncapsulatedUnionMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );


unsigned char *
__stdcall
NdrNonEncapsulatedUnionMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );




unsigned char *
__stdcall
NdrByteCountPointerMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );




unsigned char *
__stdcall
NdrXmitOrRepAsMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );




unsigned char *
__stdcall
NdrUserMarshalMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );




unsigned char *
__stdcall
NdrInterfacePointerMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );




void
__stdcall
NdrClientContextMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    NDR_CCONTEXT ContextHandle,
    int fCheck
    );


void
__stdcall
NdrServerContextMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    NDR_SCONTEXT ContextHandle,
    NDR_RUNDOWN RundownRoutine
    );


void
__stdcall
NdrServerContextNewMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    NDR_SCONTEXT ContextHandle,
    NDR_RUNDOWN RundownRoutine,
    PFORMAT_STRING pFormat
    );






void
__stdcall
NdrSimpleTypeUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    unsigned char FormatChar
    );


unsigned char *
__stdcall
NdrCsArrayUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char ** ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );


unsigned char *
__stdcall
NdrCsTagUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char ** ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );


unsigned char *
__stdcall
NdrRangeUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char ** ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );


void
__stdcall
NdrCorrelationInitialize(
    PMIDL_STUB_MESSAGE pStubMsg,
    void * pMemory,
    unsigned long CacheSize,
    unsigned long flags
    );


void
__stdcall
NdrCorrelationPass(
    PMIDL_STUB_MESSAGE pStubMsg
    );


void
__stdcall
NdrCorrelationFree(
    PMIDL_STUB_MESSAGE pStubMsg
    );


unsigned char *
__stdcall
NdrPointerUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );




unsigned char *
__stdcall
NdrSimpleStructUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );


unsigned char *
__stdcall
NdrConformantStructUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );


unsigned char *
__stdcall
NdrConformantVaryingStructUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );


unsigned char *
__stdcall
NdrComplexStructUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );




unsigned char *
__stdcall
NdrFixedArrayUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );


unsigned char *
__stdcall
NdrConformantArrayUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );


unsigned char *
__stdcall
NdrConformantVaryingArrayUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );


unsigned char *
__stdcall
NdrVaryingArrayUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );


unsigned char *
__stdcall
NdrComplexArrayUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );




unsigned char *
__stdcall
NdrNonConformantStringUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );


unsigned char *
__stdcall
NdrConformantStringUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );




unsigned char *
__stdcall
NdrEncapsulatedUnionUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );


unsigned char *
__stdcall
NdrNonEncapsulatedUnionUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );




unsigned char *
__stdcall
NdrByteCountPointerUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );




unsigned char *
__stdcall
NdrXmitOrRepAsUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );




unsigned char *
__stdcall
NdrUserMarshalUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );




unsigned char *
__stdcall
NdrInterfacePointerUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );




void
__stdcall
NdrClientContextUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    NDR_CCONTEXT * pContextHandle,
    RPC_BINDING_HANDLE BindHandle
    );


NDR_SCONTEXT
__stdcall
NdrServerContextUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg
    );




NDR_SCONTEXT
__stdcall
NdrContextHandleInitialize(
          PMIDL_STUB_MESSAGE pStubMsg,
                                   PFORMAT_STRING pFormat
    );


NDR_SCONTEXT
__stdcall
NdrServerContextNewUnmarshall(
          PMIDL_STUB_MESSAGE pStubMsg,
                                   PFORMAT_STRING pFormat
    );






void
__stdcall
NdrPointerBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );


void
__stdcall
NdrCsArrayBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );


void
__stdcall
NdrCsTagBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );




void
__stdcall
NdrSimpleStructBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );


void
__stdcall
NdrConformantStructBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );


void
__stdcall
NdrConformantVaryingStructBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );


void
__stdcall
NdrComplexStructBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );




void
__stdcall
NdrFixedArrayBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );


void
__stdcall
NdrConformantArrayBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );


void
__stdcall
NdrConformantVaryingArrayBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );


void
__stdcall
NdrVaryingArrayBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );


void
__stdcall
NdrComplexArrayBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );




void
__stdcall
NdrConformantStringBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );


void
__stdcall
NdrNonConformantStringBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );




void
__stdcall
NdrEncapsulatedUnionBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );


void
__stdcall
NdrNonEncapsulatedUnionBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );




void
__stdcall
NdrByteCountPointerBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );




void
__stdcall
NdrXmitOrRepAsBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );




void
__stdcall
NdrUserMarshalBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );




void
__stdcall
NdrInterfacePointerBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );




void
__stdcall
NdrContextHandleSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );






unsigned long
__stdcall
NdrPointerMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );


unsigned long
__stdcall
NdrContextHandleMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );





unsigned long
__stdcall
NdrCsArrayMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );


unsigned long
__stdcall
NdrCsTagMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );




unsigned long
__stdcall
NdrSimpleStructMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );


unsigned long
__stdcall
NdrConformantStructMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );


unsigned long
__stdcall
NdrConformantVaryingStructMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );


unsigned long
__stdcall
NdrComplexStructMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );




unsigned long
__stdcall
NdrFixedArrayMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );


unsigned long
__stdcall
NdrConformantArrayMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );


unsigned long
__stdcall
NdrConformantVaryingArrayMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );


unsigned long
__stdcall
NdrVaryingArrayMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );


unsigned long
__stdcall
NdrComplexArrayMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );




unsigned long
__stdcall
NdrConformantStringMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );


unsigned long
__stdcall
NdrNonConformantStringMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );




unsigned long
__stdcall
NdrEncapsulatedUnionMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );


unsigned long
__stdcall
NdrNonEncapsulatedUnionMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );




unsigned long
__stdcall
NdrXmitOrRepAsMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );




unsigned long
__stdcall
NdrUserMarshalMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );




unsigned long
__stdcall
NdrInterfacePointerMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );






void
__stdcall
NdrPointerFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );


void
__stdcall
NdrCsArrayFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );




void
__stdcall
NdrSimpleStructFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );


void
__stdcall
NdrConformantStructFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );


void
__stdcall
NdrConformantVaryingStructFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );


void
__stdcall
NdrComplexStructFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );




void
__stdcall
NdrFixedArrayFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );


void
__stdcall
NdrConformantArrayFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );


void
__stdcall
NdrConformantVaryingArrayFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );


void
__stdcall
NdrVaryingArrayFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );


void
__stdcall
NdrComplexArrayFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );




void
__stdcall
NdrEncapsulatedUnionFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );


void
__stdcall
NdrNonEncapsulatedUnionFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );




void
__stdcall
NdrByteCountPointerFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );




void
__stdcall
NdrXmitOrRepAsFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );




void
__stdcall
NdrUserMarshalFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );




void
__stdcall
NdrInterfacePointerFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );






void
__stdcall
NdrConvert2(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat,
    long NumberParams
    );


void
__stdcall
NdrConvert(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );
#line 2423 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcndr.h"
unsigned char *
__stdcall
NdrUserMarshalSimpleTypeConvert(
    unsigned long * pFlags,
    unsigned char * pBuffer,
    unsigned char FormatChar
    );






void
__stdcall
NdrClientInitializeNew(
    PRPC_MESSAGE pRpcMsg,
    PMIDL_STUB_MESSAGE pStubMsg,
    PMIDL_STUB_DESC pStubDescriptor,
    unsigned int ProcNum
    );


unsigned char *
__stdcall
NdrServerInitializeNew(
    PRPC_MESSAGE pRpcMsg,
    PMIDL_STUB_MESSAGE pStubMsg,
    PMIDL_STUB_DESC pStubDescriptor
    );


void
__stdcall
NdrServerInitializePartial(
    PRPC_MESSAGE pRpcMsg,
    PMIDL_STUB_MESSAGE pStubMsg,
    PMIDL_STUB_DESC pStubDescriptor,
    unsigned long RequestedBufferSize
    );


void
__stdcall
NdrClientInitialize(
    PRPC_MESSAGE pRpcMsg,
    PMIDL_STUB_MESSAGE pStubMsg,
    PMIDL_STUB_DESC pStubDescriptor,
    unsigned int ProcNum
    );


unsigned char *
__stdcall
NdrServerInitialize(
    PRPC_MESSAGE pRpcMsg,
    PMIDL_STUB_MESSAGE pStubMsg,
    PMIDL_STUB_DESC pStubDescriptor
    );


unsigned char *
__stdcall
NdrServerInitializeUnmarshall (
    PMIDL_STUB_MESSAGE pStubMsg,
    PMIDL_STUB_DESC pStubDescriptor,
    PRPC_MESSAGE pRpcMsg
    );


void
__stdcall
NdrServerInitializeMarshall (
    PRPC_MESSAGE pRpcMsg,
    PMIDL_STUB_MESSAGE pStubMsg
    );


unsigned char *
__stdcall
NdrGetBuffer(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned long BufferLength,
    RPC_BINDING_HANDLE Handle
    );


unsigned char *
__stdcall
NdrNsGetBuffer(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned long BufferLength,
    RPC_BINDING_HANDLE Handle
    );


unsigned char *
__stdcall
NdrSendReceive(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pBufferEnd
    );


unsigned char *
__stdcall
NdrNsSendReceive(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pBufferEnd,
    RPC_BINDING_HANDLE * pAutoHandle
    );


void
__stdcall
NdrFreeBuffer(
    PMIDL_STUB_MESSAGE pStubMsg
    );


RPC_STATUS
__stdcall
NdrGetDcomProtocolVersion(
    PMIDL_STUB_MESSAGE pStubMsg,
    RPC_VERSION * pVersion );
#line 2557 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcndr.h"
CLIENT_CALL_RETURN __cdecl
NdrClientCall2(
    PMIDL_STUB_DESC pStubDescriptor,
    PFORMAT_STRING pFormat,
    ...
    );

CLIENT_CALL_RETURN __cdecl
NdrClientCall(
    PMIDL_STUB_DESC pStubDescriptor,
    PFORMAT_STRING pFormat,
    ...
    );

CLIENT_CALL_RETURN __cdecl
NdrAsyncClientCall(
    PMIDL_STUB_DESC pStubDescriptor,
    PFORMAT_STRING pFormat,
    ...
    );



CLIENT_CALL_RETURN __cdecl
NdrClientCall4(
    PMIDL_STUB_DESC pStubDescriptor,
    PFORMAT_STRING pFormat,
    ...
    );

CLIENT_CALL_RETURN __cdecl
NdrAsyncClientCall2(
    PMIDL_STUB_DESC pStubDescriptor,
    PFORMAT_STRING pFormat,
    ...
    );




#pragma endregion

#pragma region Desktop Family or OneCore Family


CLIENT_CALL_RETURN __cdecl
NdrDcomAsyncClientCall(
    PMIDL_STUB_DESC pStubDescriptor,
    PFORMAT_STRING pFormat,
    ...
    );


#pragma endregion

#pragma region Application Family or OneCore Family



typedef enum {
    STUB_UNMARSHAL,
    STUB_CALL_SERVER,
    STUB_MARSHAL,
    STUB_CALL_SERVER_NO_HRESULT
}STUB_PHASE;

typedef enum {
    PROXY_CALCSIZE,
    PROXY_GETBUFFER,
    PROXY_MARSHAL,
    PROXY_SENDRECEIVE,
    PROXY_UNMARSHAL
}PROXY_PHASE;

struct IRpcStubBuffer;




void
__stdcall
NdrAsyncServerCall(
    PRPC_MESSAGE pRpcMsg
    );



long
__stdcall
NdrAsyncStubCall(
    struct IRpcStubBuffer * pThis,
    struct IRpcChannelBuffer * pChannel,
    PRPC_MESSAGE pRpcMsg,
    unsigned long * pdwStubPhase
    );


#pragma endregion

#pragma region Desktop Family or OneCore Family




long
__stdcall
NdrDcomAsyncStubCall(
    struct IRpcStubBuffer * pThis,
    struct IRpcChannelBuffer * pChannel,
    PRPC_MESSAGE pRpcMsg,
    unsigned long * pdwStubPhase
    );


#pragma endregion

#pragma region Application Family or OneCore Family



long
__stdcall
NdrStubCall2(
    void * pThis,
    void * pChannel,
    PRPC_MESSAGE pRpcMsg,
    unsigned long * pdwStubPhase
    );


void
__stdcall
NdrServerCall2(
    PRPC_MESSAGE pRpcMsg
    );


long
__stdcall
NdrStubCall (
    void * pThis,
    void * pChannel,
    PRPC_MESSAGE pRpcMsg,
    unsigned long * pdwStubPhase
    );


void
__stdcall
NdrServerCall(
    PRPC_MESSAGE pRpcMsg
    );


int
__stdcall
NdrServerUnmarshall(
    void * pChannel,
    PRPC_MESSAGE pRpcMsg,
    PMIDL_STUB_MESSAGE pStubMsg,
    PMIDL_STUB_DESC pStubDescriptor,
    PFORMAT_STRING pFormat,
    void * pParamList
    );


void
__stdcall
NdrServerMarshall(
    void * pThis,
    void * pChannel,
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );




RPC_STATUS
__stdcall
NdrMapCommAndFaultStatus(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned long * pCommStatus,
    unsigned long * pFaultStatus,
    RPC_STATUS Status
    );







typedef void * RPC_SS_THREAD_HANDLE;

typedef void * __stdcall
RPC_CLIENT_ALLOC (
         size_t Size
    );

typedef void __stdcall
RPC_CLIENT_FREE (
         void * Ptr
    );






void *
__stdcall
RpcSsAllocate (
         size_t Size
    );


void
__stdcall
RpcSsDisableAllocate (
    void
    );


void
__stdcall
RpcSsEnableAllocate (
    void
    );


void
__stdcall
RpcSsFree (
         void * NodeToFree
    );


RPC_SS_THREAD_HANDLE
__stdcall
RpcSsGetThreadHandle (
    void
    );


void
__stdcall
RpcSsSetClientAllocFree (
         RPC_CLIENT_ALLOC * ClientAlloc,
         RPC_CLIENT_FREE * ClientFree
    );


void
__stdcall
RpcSsSetThreadHandle (
         RPC_SS_THREAD_HANDLE Id
    );


void
__stdcall
RpcSsSwapClientAllocFree (
         RPC_CLIENT_ALLOC * ClientAlloc,
         RPC_CLIENT_FREE * ClientFree,
          RPC_CLIENT_ALLOC * * OldClientAlloc,
          RPC_CLIENT_FREE * * OldClientFree
    );






void *
__stdcall
RpcSmAllocate (
          size_t Size,
          RPC_STATUS * pStatus
    );


RPC_STATUS
__stdcall
RpcSmClientFree (
          void * pNodeToFree
    );


RPC_STATUS
__stdcall
RpcSmDestroyClientContext (
         void * * ContextHandle
    );


RPC_STATUS
__stdcall
RpcSmDisableAllocate (
    void
    );


RPC_STATUS
__stdcall
RpcSmEnableAllocate (
    void
    );


RPC_STATUS
__stdcall
RpcSmFree (
         void * NodeToFree
    );


RPC_SS_THREAD_HANDLE
__stdcall
RpcSmGetThreadHandle (
          RPC_STATUS * pStatus
    );


RPC_STATUS
__stdcall
RpcSmSetClientAllocFree (
         RPC_CLIENT_ALLOC * ClientAlloc,
         RPC_CLIENT_FREE * ClientFree
    );


RPC_STATUS
__stdcall
RpcSmSetThreadHandle (
         RPC_SS_THREAD_HANDLE Id
    );


RPC_STATUS
__stdcall
RpcSmSwapClientAllocFree (
         RPC_CLIENT_ALLOC * ClientAlloc,
         RPC_CLIENT_FREE * ClientFree,
          RPC_CLIENT_ALLOC * * OldClientAlloc,
          RPC_CLIENT_FREE * * OldClientFree
    );






void
__stdcall
NdrRpcSsEnableAllocate(
    PMIDL_STUB_MESSAGE pMessage );


void
__stdcall
NdrRpcSsDisableAllocate(
    PMIDL_STUB_MESSAGE pMessage );


void
__stdcall
NdrRpcSmSetClientToOsf(
    PMIDL_STUB_MESSAGE pMessage );


void *
__stdcall
NdrRpcSmClientAllocate (
         size_t Size
    );


void
__stdcall
NdrRpcSmClientFree (
         void * NodeToFree
    );


void *
__stdcall
NdrRpcSsDefaultAllocate (
         size_t Size
    );


void
__stdcall
NdrRpcSsDefaultFree (
         void * NodeToFree
    );
#line 2964 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcndr.h"
PFULL_PTR_XLAT_TABLES
__stdcall
NdrFullPointerXlatInit(
    unsigned long NumberOfPointers,
    XLAT_SIDE XlatSide
    );


void
__stdcall
NdrFullPointerXlatFree(
    PFULL_PTR_XLAT_TABLES pXlatTables
    );



void *
__stdcall
NdrAllocate(
    PMIDL_STUB_MESSAGE pStubMsg,
    size_t Len
    );


void
__stdcall
NdrClearOutParameters(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat,
    void * ArgAddr
    );







void *
__stdcall
NdrOleAllocate (
         size_t Size
    );


void
__stdcall
NdrOleFree (
         void * NodeToFree
    );
#line 3062 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcndr.h"
typedef struct _NDR_USER_MARSHAL_INFO_LEVEL1
{
    void * Buffer;
    unsigned long BufferSize;
    void *(__stdcall * pfnAllocate)(size_t);
    void (__stdcall * pfnFree)(void *);
    struct IRpcChannelBuffer * pRpcChannelBuffer;
    ULONG_PTR Reserved[5];
} NDR_USER_MARSHAL_INFO_LEVEL1;
#line 3079 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcndr.h"
typedef struct _NDR_USER_MARSHAL_INFO
{
    unsigned long InformationLevel;
    union {
        NDR_USER_MARSHAL_INFO_LEVEL1 Level1;
    } ;
} NDR_USER_MARSHAL_INFO;
#line 3096 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcndr.h"
RPC_STATUS
__stdcall
NdrGetUserMarshalInfo (
         unsigned long * pFlags,
         unsigned long InformationLevel,
          NDR_USER_MARSHAL_INFO * pMarshalInfo
    );




RPC_STATUS __stdcall
NdrCreateServerInterfaceFromStub(
                 struct IRpcStubBuffer* pStub,
                    RPC_SERVER_INTERFACE *pServerIf );




CLIENT_CALL_RETURN __cdecl
NdrClientCall3(
    MIDL_STUBLESS_PROXY_INFO *pProxyInfo,
    unsigned long nProcNum,
    void * pReturnValue,
    ...
    );

CLIENT_CALL_RETURN __cdecl
Ndr64AsyncClientCall(
    MIDL_STUBLESS_PROXY_INFO *pProxyInfo,
    unsigned long nProcNum,
    void * pReturnValue,
    ...
    );


#pragma endregion

#pragma region Desktop Family or OneCore Family


CLIENT_CALL_RETURN __cdecl
Ndr64DcomAsyncClientCall(
    MIDL_STUBLESS_PROXY_INFO *pProxyInfo,
    unsigned long nProcNum,
    void * pReturnValue,
    ...
    );


void
__stdcall
Ndr64AsyncServerCall(
    PRPC_MESSAGE pRpcMsg
    );


#pragma endregion

#pragma region Application Family or OneCore Family


struct IRpcStubBuffer;


void
__stdcall
Ndr64AsyncServerCall64(
    PRPC_MESSAGE pRpcMsg
    );


void
__stdcall
Ndr64AsyncServerCallAll(
    PRPC_MESSAGE pRpcMsg
    );


long
__stdcall
Ndr64AsyncStubCall(
    struct IRpcStubBuffer * pThis,
    struct IRpcChannelBuffer * pChannel,
    PRPC_MESSAGE pRpcMsg,
    unsigned long * pdwStubPhase
    );


#pragma endregion

#pragma region Desktop Family or OneCore Family




long
__stdcall
Ndr64DcomAsyncStubCall(
    struct IRpcStubBuffer * pThis,
    struct IRpcChannelBuffer * pChannel,
    PRPC_MESSAGE pRpcMsg,
    unsigned long * pdwStubPhase
    );


#pragma endregion

#pragma region Application Family or OneCore Family



long
__stdcall
NdrStubCall3 (
    void * pThis,
    void * pChannel,
    PRPC_MESSAGE pRpcMsg,
    unsigned long * pdwStubPhase
    );


void
__stdcall
NdrServerCallAll(
    PRPC_MESSAGE pRpcMsg
    );


void
__stdcall
NdrServerCallNdr64(
    PRPC_MESSAGE pRpcMsg
    );



void
__stdcall
NdrServerCall3(
    PRPC_MESSAGE pRpcMsg
    );




void
__stdcall
NdrPartialIgnoreClientMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    void * pMemory
    );


void
__stdcall
NdrPartialIgnoreServerUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    void ** ppMemory
    );


void
__stdcall
NdrPartialIgnoreClientBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    void * pMemory
    );


void
__stdcall
NdrPartialIgnoreServerInitialize(
    PMIDL_STUB_MESSAGE pStubMsg,
    void ** ppMemory,
    PFORMAT_STRING pFormat
    );


void __stdcall
RpcUserFree( handle_t AsyncHandle, void * pBuffer );


#pragma endregion






#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/poppack.h"
#line 29 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/poppack.h"
#pragma pack(pop)
#line 3285 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcndr.h"







#pragma option pop
#line 17 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objbase.h"
#line 27 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objbase.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/pshpack8.h"
#line 26 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/pshpack8.h"
#pragma pack(push,8)
#line 27 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objbase.h"

#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\combaseapi.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 35 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\combaseapi.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpc.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 227 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpc.h"
#pragma option pop
#line 35 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\combaseapi.h"

#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcndr.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 3292 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcndr.h"
#pragma option pop
#line 36 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\combaseapi.h"
#line 67 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\combaseapi.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/pshpack8.h"
#line 26 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/pshpack8.h"
#pragma pack(push,8)
#line 67 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\combaseapi.h"
#line 90 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\combaseapi.h"
#pragma region Application or OneCore Family
#line 333 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\combaseapi.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\stdlib.h"
#line 21 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\stdlib.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\_stddef.h"
#line 21 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\stdlib.h"
#line 56 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\stdlib.h"
#pragma pack(push, 1)





typedef struct {
        int quot;
        int rem;
} div_t;




typedef struct {
        long quot;
        long rem;
} ldiv_t;




typedef struct {
        long long quot;
        long long rem;
} lldiv_t;
#line 105 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\stdlib.h"
typedef void (__cdecl * atexit_t)(void);
#line 120 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\stdlib.h"
typedef void (__cdecl *constraint_handler_t)(const char * __msg,
            void * __ptr,
            errno_t __error);

constraint_handler_t __cdecl set_constraint_handler_s(constraint_handler_t __handler);
void __cdecl abort_handler_s(const char * __msg,
     void * __ptr,
     errno_t __error);
void __cdecl ignore_handler_s(const char * __msg,
      void * __ptr,
      errno_t __error);

errno_t __cdecl getenv_s(size_t * len, char * value,
        rsize_t maxsize, const char * name);
errno_t __cdecl wgetenv_s(size_t * len, wchar_t * value,
         rsize_t maxsize, const wchar_t * name);



void __cdecl __declspec(noreturn) abort(void);
#line 155 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\stdlib.h"
int __cdecl abs(int __x);


int __cdecl atexit(void (__cdecl * __func)(void));
double __cdecl atof(const char * __s);
int __cdecl atoi(const char * __s);
long __cdecl atol(const char * __s);
void * __cdecl calloc(size_t __nitems, size_t __size);
div_t __cdecl div(int __numer, int __denom);
void __cdecl __declspec(noreturn) exit(int __status);
void __cdecl free(void * __block);
char * __cdecl getenv(const char * __name);
long __cdecl labs(long __x);
long long __cdecl llabs(long long __x);
ldiv_t __cdecl ldiv(long __numer, long __denom);
lldiv_t __cdecl lldiv(long long __numer, long long __denom);
void * __cdecl malloc(size_t __size);
int __cdecl mblen(const char * __s, size_t __n);
size_t __cdecl mbstowcs(wchar_t *__pwcs, const char * __s,
                                     size_t __n);
size_t __cdecl _mbstrlen(const char *__s);
int __cdecl mbtowc(wchar_t *__pwc, const char * __s, size_t __n);
int __cdecl mbtowc_cp(wchar_t *__pwc, const char * __s, size_t __n, const unsigned _codepage);
int __cdecl rand(void);



void * __cdecl realloc(void * __block, size_t __size);
void __cdecl srand(unsigned __seed);

float __cdecl strtof(const char * __s, char * *__endptr);

double __cdecl strtod(const char * __s, char * *__endptr);
long __cdecl strtol(const char * __s, char * *__endptr, int __radix);
long long __cdecl strtoll(const char * __s, char * *__endptr, int __radix);

long double __cdecl _strtold(const char * __s, char * *__endptr);

long double __cdecl strtold(const char * __s, char * *__endptr);
unsigned long __cdecl strtoul(const char * __s, char * *__endptr, int __radix);
unsigned long long __cdecl strtoull(const char * __s, char * *__endptr, int __radix);
int __cdecl system(const char * __command);

size_t __cdecl wcstombs(char * __s, const wchar_t *__pwcs,size_t __n);
int __cdecl wctomb(char * __s, wchar_t __wc);
int __cdecl wctomb_cp(char * __s, wchar_t __wc, const unsigned _codepage);
double __cdecl _wtof(const wchar_t * __s);
int __cdecl _wtoi(const wchar_t * __s);
long __cdecl _wtol(const wchar_t * __s);
long double __cdecl _wtold(const wchar_t * __s);

float __cdecl wcstof(const wchar_t * __s, wchar_t * *__endptr);

double __cdecl wcstod(const wchar_t * __s, wchar_t * *__endptr);
long double __cdecl wcstold(const wchar_t * __s, wchar_t * *__endptr);
long __cdecl wcstol(const wchar_t * __s, wchar_t * *__endptr, int __radix);
long long __cdecl wcstoll(const wchar_t * __s, wchar_t * *__endptr, int __radix);

long double __cdecl _wcstold(const wchar_t * __s, wchar_t * *__endptr);

unsigned long __cdecl wcstoul(const wchar_t * __s, wchar_t * *__endptr, int __radix);
unsigned long long __cdecl wcstoull(const wchar_t * __s, wchar_t * *__endptr, int __radix);
int __cdecl _wsystem(const wchar_t * __command);
wchar_t * __cdecl _itow(int __value, wchar_t *__string, int __radix);
wchar_t * __cdecl _ltow(long __value, wchar_t *__string, int __radix);
wchar_t * __cdecl _ultow(unsigned long __value, wchar_t *__string, int __radix);



__int64 __cdecl _atoi64(const char * __s);
char * __cdecl _i64toa(__int64 __value, char *__strP, int __radix);
char * __cdecl _ui64toa(unsigned __int64 __value, char *__strP, int __radix);
__int64 __cdecl _wtoi64(const wchar_t * __s);
wchar_t * __cdecl _i64tow(__int64 __value, wchar_t *__strP, int __radix);
wchar_t * __cdecl _ui64tow(unsigned __int64 __value, wchar_t *__strP, int __radix);

char * __cdecl ltoa(long __value, char * __string, int __radix);
char * __cdecl ecvt(double __value, int __ndig, int * __dec, int * __sign);
char * __cdecl fcvt(double __value, int __ndig, int * __dec, int * __sign);
char * __cdecl gcvt(double __value, int __ndec, char * __buf);




extern int __cdecl __mb_cur_max;
#line 253 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\stdlib.h"
void __cdecl _seterrormode(int __mode);



extern char ** __cdecl _environ;
extern wchar_t ** __cdecl _wenviron;
extern int __cdecl _fileinfo;
extern int __cdecl _fmode;
extern unsigned char __cdecl _osmajor;
extern unsigned char __cdecl _osminor;
extern unsigned char __cdecl _osmode;
extern unsigned int __cdecl _osversion;
extern int __cdecl _cmdline_escapes;

extern char * __cdecl _sys_errlist[];
extern int __cdecl _sys_nerr;
#line 304 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\stdlib.h"
long double __cdecl _atold(const char * __s);

unsigned char __cdecl _crotl(unsigned char __value, int __count);
unsigned char __cdecl _crotr(unsigned char __value, int __count);

char * __cdecl _ecvt(double __value, int __ndig, int * __dec,
                                     int * __sign);
void __cdecl __declspec(noreturn) _exit(int __status);
char * __cdecl _fcvt(double __value, int __ndig, int * __dec,
                                     int * __sign);
char * __cdecl _fullpath(char * __buf, const char * __path,
                                     size_t __maxlen);
char * __cdecl _gcvt(double __value, int __ndec,
                                     char * __buf);
char * __cdecl itoa(int __value, char * __string,
                                     int __radix);
long __cdecl _lrand(void);
unsigned long __cdecl _lrotl(unsigned long __val, int __count);
unsigned long __cdecl _lrotr(unsigned long __val, int __count);

char * __cdecl _ltoa(long __value, char * __string,
                                     int __radix);
void __cdecl _makepath(char * __path,
                                     const char * __drive,
                                     const char * __dir,
                                     const char * __name,
                                     const char * __ext );
int __cdecl putenv(const char * __name);

unsigned short __cdecl _rotl(unsigned short __value, int __count);
unsigned short __cdecl _rotr(unsigned short __value, int __count);

void __cdecl _searchenv(const char * __file,
                                     const char * __varname,
                                     char *__pathname);
void __cdecl _searchstr(const char * __file,
                                     const char * __ipath,
                                     char *__pathname);
void __cdecl _splitpath(const char * __path,
                                     char * __drive,
                                     char * __dir,
                                     char * __name,
                                     char * __ext );


void __cdecl swab(const char * __from, char * __to, ssize_t __nbytes);


char * __cdecl ultoa(unsigned long __value, char * __string,
                                     int __radix);
void __cdecl perror(const char * __s);

void __cdecl _wperror(const wchar_t * __s);
wchar_t * __cdecl _wfullpath(wchar_t * __buf,const wchar_t * __path,
                                     size_t __maxlen);
void __cdecl _wmakepath(wchar_t * __path,
                                     const wchar_t * __drive,
                                     const wchar_t * __dir,
                                     const wchar_t * __name,
                                     const wchar_t * __ext );
void __cdecl _wsplitpath(const wchar_t * __path,
                                     wchar_t * __drive,
                                     wchar_t * __dir,
                                     wchar_t * __name,
                                     wchar_t * __ext );

void __cdecl _wsearchenv(const wchar_t * __file,
                                     const wchar_t * __varname,
                                     wchar_t *__pathname);
void __cdecl _wsearchstr(const wchar_t * __file,
                                     const wchar_t * __ipath,
                                     wchar_t *__pathname);
wchar_t * __cdecl _wgetenv(const wchar_t * __name);
int __cdecl _wputenv(const wchar_t * __name);
#line 397 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\stdlib.h"
long __cdecl time(long *);
#line 500 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\stdlib.h"
    extern int __cdecl _argc;
    extern char ** __cdecl _argv;



    extern wchar_t ** __cdecl _wargv;








#pragma pack(pop)
#line 528 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\stdlib.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\search.h"
#line 20 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\search.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\_stddef.h"
#line 20 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\search.h"
#line 34 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\search.h"
void * __cdecl bsearch(const void * __key, const void * __base,
       size_t __nelem, size_t __width,
       int (__cdecl *fcmp)(const void *, const void *));

void * __cdecl lfind(const void * __key, const void * __base,
    size_t *__num, size_t __width,
                                int (__cdecl *fcmp)(const void *, const void *));

void * __cdecl lsearch(const void * __key, void * __base,
      size_t *__num, size_t __width,
      int (__cdecl *fcmp)(const void *, const void *));

void __cdecl qsort(void * __base, size_t __nelem, size_t __width,
     int (__cdecl *__fcmp)(const void *, const void *));


void * __cdecl bsearch_s(const void * __key, const void * __base,
         rsize_t __nelem, rsize_t __width,
         int (__cdecl *__fcmp)(const void *, const void *, void *),
         void *__context);

errno_t __cdecl qsort_s(void * __base, rsize_t __nelem, rsize_t __width,
        int (__cdecl *__fcmp)(const void *, const void *, void *),
        void *__context);
#line 528 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\stdlib.h"

#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\errno.h"
#line 22 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\errno.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\_stddef.h"
#line 22 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\errno.h"
#line 441 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\errno.h"
extern int __cdecl _doserrno;




extern int * __cdecl __errno(void);
#line 458 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\errno.h"
extern int __cdecl _sys_nerr;
extern char * __cdecl _sys_errlist[];
#line 529 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\stdlib.h"
#line 333 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\combaseapi.h"
#line 365 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\combaseapi.h"
typedef enum tagREGCLS
{
    REGCLS_SINGLEUSE = 0,
    REGCLS_MULTIPLEUSE = 1,

    REGCLS_MULTI_SEPARATE = 2,

    REGCLS_SUSPENDED = 4,

    REGCLS_SURROGATE = 8,
#line 388 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\combaseapi.h"
} REGCLS;



typedef struct IRpcStubBuffer IRpcStubBuffer;
typedef struct IRpcChannelBuffer IRpcChannelBuffer;


typedef enum tagCOINITBASE
{



  COINITBASE_MULTITHREADED = 0x0,

} COINITBASE;


#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wtypesbase.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 22 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wtypesbase.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpc.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 227 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpc.h"
#pragma option pop
#line 22 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wtypesbase.h"

#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcndr.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 3292 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcndr.h"
#pragma option pop
#line 23 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wtypesbase.h"
#line 41 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wtypesbase.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\guiddef.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 217 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\guiddef.h"
#pragma option pop
#line 41 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wtypesbase.h"
#line 66 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wtypesbase.h"
extern RPC_IF_HANDLE __MIDL_itf_wtypesbase_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wtypesbase_0000_0000_v0_0_s_ifspec;
#line 118 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wtypesbase.h"
typedef WCHAR OLECHAR;

typedef OLECHAR *LPOLESTR;

typedef const OLECHAR *LPCOLESTR;
#line 143 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wtypesbase.h"
typedef unsigned char UCHAR;

typedef short SHORT;

typedef unsigned short USHORT;

typedef DWORD ULONG;

typedef double DOUBLE;
#line 263 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wtypesbase.h"
typedef struct _COAUTHIDENTITY
    {
                    USHORT *User;
                  ULONG UserLength;
                    USHORT *Domain;
                  ULONG DomainLength;
                    USHORT *Password;
                  ULONG PasswordLength;
    ULONG Flags;
    } COAUTHIDENTITY;

typedef struct _COAUTHINFO
    {
    DWORD dwAuthnSvc;
    DWORD dwAuthzSvc;
    LPWSTR pwszServerPrincName;
    DWORD dwAuthnLevel;
    DWORD dwImpersonationLevel;
    COAUTHIDENTITY *pAuthIdentityData;
    DWORD dwCapabilities;
    } COAUTHINFO;

typedef LONG SCODE;

typedef SCODE *PSCODE;
#line 317 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wtypesbase.h"
typedef
enum tagMEMCTX
    {
        MEMCTX_TASK = 1,
        MEMCTX_SHARED = 2,
        MEMCTX_MACSYSTEM = 3,
        MEMCTX_UNKNOWN = -1,
        MEMCTX_SAME = -2
    } MEMCTX;
#line 353 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wtypesbase.h"
typedef
enum tagCLSCTX
    {
        CLSCTX_INPROC_SERVER = 0x1,
        CLSCTX_INPROC_HANDLER = 0x2,
        CLSCTX_LOCAL_SERVER = 0x4,
        CLSCTX_INPROC_SERVER16 = 0x8,
        CLSCTX_REMOTE_SERVER = 0x10,
        CLSCTX_INPROC_HANDLER16 = 0x20,
        CLSCTX_RESERVED1 = 0x40,
        CLSCTX_RESERVED2 = 0x80,
        CLSCTX_RESERVED3 = 0x100,
        CLSCTX_RESERVED4 = 0x200,
        CLSCTX_NO_CODE_DOWNLOAD = 0x400,
        CLSCTX_RESERVED5 = 0x800,
        CLSCTX_NO_CUSTOM_MARSHAL = 0x1000,
        CLSCTX_ENABLE_CODE_DOWNLOAD = 0x2000,
        CLSCTX_NO_FAILURE_LOG = 0x4000,
        CLSCTX_DISABLE_AAA = 0x8000,
        CLSCTX_ENABLE_AAA = 0x10000,
        CLSCTX_FROM_DEFAULT_CONTEXT = 0x20000,
        CLSCTX_ACTIVATE_32_BIT_SERVER = 0x40000,
        CLSCTX_ACTIVATE_64_BIT_SERVER = 0x80000,
        CLSCTX_ENABLE_CLOAKING = 0x100000,
        CLSCTX_APPCONTAINER = 0x400000,
        CLSCTX_ACTIVATE_AAA_AS_IU = 0x800000,
        CLSCTX_PS_DLL = ( int )0x80000000
    } CLSCTX;
#line 401 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wtypesbase.h"
typedef
enum tagMSHLFLAGS
    {
        MSHLFLAGS_NORMAL = 0,
        MSHLFLAGS_TABLESTRONG = 1,
        MSHLFLAGS_TABLEWEAK = 2,
        MSHLFLAGS_NOPING = 4,
        MSHLFLAGS_RESERVED1 = 8,
        MSHLFLAGS_RESERVED2 = 16,
        MSHLFLAGS_RESERVED3 = 32,
        MSHLFLAGS_RESERVED4 = 64
    } MSHLFLAGS;

typedef
enum tagMSHCTX
    {
        MSHCTX_LOCAL = 0,
        MSHCTX_NOSHAREDMEM = 1,
        MSHCTX_DIFFERENTMACHINE = 2,
        MSHCTX_INPROC = 3,
        MSHCTX_CROSSCTX = 4
    } MSHCTX;

typedef struct _BYTE_BLOB
    {
    ULONG clSize;
                    byte abData[ 1 ];
    } BYTE_BLOB;

typedef BYTE_BLOB *UP_BYTE_BLOB;

typedef struct _WORD_BLOB
    {
    ULONG clSize;
                    unsigned short asData[ 1 ];
    } WORD_BLOB;

typedef WORD_BLOB *UP_WORD_BLOB;

typedef struct _DWORD_BLOB
    {
    ULONG clSize;
                    ULONG alData[ 1 ];
    } DWORD_BLOB;

typedef DWORD_BLOB *UP_DWORD_BLOB;

typedef struct _FLAGGED_BYTE_BLOB
    {
    ULONG fFlags;
    ULONG clSize;
                    byte abData[ 1 ];
    } FLAGGED_BYTE_BLOB;

typedef FLAGGED_BYTE_BLOB *UP_FLAGGED_BYTE_BLOB;

typedef struct _FLAGGED_WORD_BLOB
    {
    ULONG fFlags;
    ULONG clSize;
                    unsigned short asData[ 1 ];
    } FLAGGED_WORD_BLOB;

typedef FLAGGED_WORD_BLOB *UP_FLAGGED_WORD_BLOB;

typedef struct _BYTE_SIZEDARR
    {
    ULONG clSize;
                    byte *pData;
    } BYTE_SIZEDARR;

typedef struct _SHORT_SIZEDARR
    {
    ULONG clSize;
                    unsigned short *pData;
    } WORD_SIZEDARR;

typedef struct _LONG_SIZEDARR
    {
    ULONG clSize;
                    ULONG *pData;
    } DWORD_SIZEDARR;

typedef struct _HYPER_SIZEDARR
    {
    ULONG clSize;
                    __int64 *pData;
    } HYPER_SIZEDARR;



extern RPC_IF_HANDLE IWinTypesBase_v0_1_c_ifspec;
extern RPC_IF_HANDLE IWinTypesBase_v0_1_s_ifspec;





typedef boolean BOOLEAN;





typedef struct tagBLOB
    {
    ULONG cbSize;
                    BYTE *pBlobData;
    } BLOB;

typedef struct tagBLOB *LPBLOB;
#line 550 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wtypesbase.h"
extern RPC_IF_HANDLE __MIDL_itf_wtypesbase_0000_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wtypesbase_0000_0001_v0_0_s_ifspec;
#line 564 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wtypesbase.h"
#pragma option pop
#line 405 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\combaseapi.h"

#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\unknwnbase.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 22 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\unknwnbase.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpc.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 227 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpc.h"
#pragma option pop
#line 22 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\unknwnbase.h"

#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcndr.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 3292 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcndr.h"
#pragma option pop
#line 23 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\unknwnbase.h"
#line 45 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\unknwnbase.h"
typedef struct IUnknown IUnknown;






typedef struct AsyncIUnknown AsyncIUnknown;






typedef struct IClassFactory IClassFactory;






#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wtypesbase.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 22 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wtypesbase.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpc.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 227 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpc.h"
#pragma option pop
#line 22 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wtypesbase.h"

#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcndr.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 3292 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcndr.h"
#pragma option pop
#line 23 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wtypesbase.h"
#line 564 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wtypesbase.h"
#pragma option pop
#line 65 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\unknwnbase.h"
#line 85 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\unknwnbase.h"
#pragma region Application Family or OneCore Family



extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0000_v0_0_s_ifspec;







typedef IUnknown *LPUNKNOWN;
#line 167 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\unknwnbase.h"
extern const IID IID_IUnknown;
#line 191 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\unknwnbase.h"
    typedef struct IUnknownVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IUnknown * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IUnknown * This);

        ULONG ( __stdcall *Release )(
            IUnknown * This);


    } IUnknownVtbl;

    struct IUnknown
    {
                   struct IUnknownVtbl *lpVtbl;
    };
#line 236 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\unknwnbase.h"
HRESULT __stdcall IUnknown_QueryInterface_Proxy(
    IUnknown * This,
               const IID * const riid,

                  void **ppvObject);


void __stdcall IUnknown_QueryInterface_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


ULONG __stdcall IUnknown_AddRef_Proxy(
    IUnknown * This);


void __stdcall IUnknown_AddRef_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


ULONG __stdcall IUnknown_Release_Proxy(
    IUnknown * This);


void __stdcall IUnknown_Release_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
#line 281 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\unknwnbase.h"
#pragma endregion
#pragma region Desktop Family or OneCore Family



extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0001_v0_0_s_ifspec;
#line 296 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\unknwnbase.h"
extern const IID IID_AsyncIUnknown;
#line 324 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\unknwnbase.h"
    typedef struct AsyncIUnknownVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            AsyncIUnknown * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            AsyncIUnknown * This);

        ULONG ( __stdcall *Release )(
            AsyncIUnknown * This);

        HRESULT ( __stdcall *Begin_QueryInterface )(
            AsyncIUnknown * This,
                       const IID * const riid);

        HRESULT ( __stdcall *Finish_QueryInterface )(
            AsyncIUnknown * This,

                              void **ppvObject);

        HRESULT ( __stdcall *Begin_AddRef )(
            AsyncIUnknown * This);

        ULONG ( __stdcall *Finish_AddRef )(
            AsyncIUnknown * This);

        HRESULT ( __stdcall *Begin_Release )(
            AsyncIUnknown * This);

        ULONG ( __stdcall *Finish_Release )(
            AsyncIUnknown * This);


    } AsyncIUnknownVtbl;

    struct AsyncIUnknown
    {
                   struct AsyncIUnknownVtbl *lpVtbl;
    };
#line 417 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\unknwnbase.h"
#pragma endregion
#pragma region Application Family or OneCore Family



extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0002_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0002_v0_0_s_ifspec;







typedef IClassFactory *LPCLASSFACTORY;


extern const IID IID_IClassFactory;
#line 458 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\unknwnbase.h"
    typedef struct IClassFactoryVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      IClassFactory * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      IClassFactory * This);

        ULONG ( __stdcall *Release )(
                      IClassFactory * This);

                      HRESULT ( __stdcall *CreateInstance )(
            IClassFactory * This,

                      IUnknown *pUnkOuter,

                  const IID * const riid,

                          void **ppvObject);

                      HRESULT ( __stdcall *LockServer )(
            IClassFactory * This,
                       BOOL fLock);


    } IClassFactoryVtbl;

    struct IClassFactory
    {
                   struct IClassFactoryVtbl *lpVtbl;
    };
#line 523 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\unknwnbase.h"
                HRESULT __stdcall IClassFactory_RemoteCreateInstance_Proxy(
              IClassFactory * This,
                         const IID * const riid,
                                             IUnknown **ppvObject);


void __stdcall IClassFactory_RemoteCreateInstance_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall IClassFactory_RemoteLockServer_Proxy(
              IClassFactory * This,
               BOOL fLock);


void __stdcall IClassFactory_RemoteLockServer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
#line 556 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\unknwnbase.h"
#pragma endregion


extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0003_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0003_v0_0_s_ifspec;



              HRESULT __stdcall IClassFactory_CreateInstance_Proxy(
    IClassFactory * This,

              IUnknown *pUnkOuter,

          const IID * const riid,

                  void **ppvObject);


                HRESULT __stdcall IClassFactory_CreateInstance_Stub(
              IClassFactory * This,
                         const IID * const riid,
                                             IUnknown **ppvObject);

              HRESULT __stdcall IClassFactory_LockServer_Proxy(
    IClassFactory * This,
               BOOL fLock);


                HRESULT __stdcall IClassFactory_LockServer_Stub(
              IClassFactory * This,
               BOOL fLock);
#line 599 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\unknwnbase.h"
#pragma option pop
#line 406 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\combaseapi.h"

#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 22 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpc.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 227 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpc.h"
#pragma option pop
#line 22 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"

#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcndr.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 3292 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcndr.h"
#pragma option pop
#line 23 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
#line 45 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
typedef struct IMarshal IMarshal;






typedef struct INoMarshal INoMarshal;






typedef struct IAgileObject IAgileObject;






typedef struct IActivationFilter IActivationFilter;






typedef struct IMarshal2 IMarshal2;






typedef struct IMalloc IMalloc;






typedef struct IStdMarshalInfo IStdMarshalInfo;






typedef struct IExternalConnection IExternalConnection;






typedef struct IMultiQI IMultiQI;






typedef struct AsyncIMultiQI AsyncIMultiQI;






typedef struct IInternalUnknown IInternalUnknown;






typedef struct IEnumUnknown IEnumUnknown;






typedef struct IEnumString IEnumString;






typedef struct ISequentialStream ISequentialStream;






typedef struct IStream IStream;






typedef struct IRpcChannelBuffer IRpcChannelBuffer;






typedef struct IRpcChannelBuffer2 IRpcChannelBuffer2;






typedef struct IAsyncRpcChannelBuffer IAsyncRpcChannelBuffer;






typedef struct IRpcChannelBuffer3 IRpcChannelBuffer3;






typedef struct IRpcSyntaxNegotiate IRpcSyntaxNegotiate;






typedef struct IRpcProxyBuffer IRpcProxyBuffer;






typedef struct IRpcStubBuffer IRpcStubBuffer;






typedef struct IPSFactoryBuffer IPSFactoryBuffer;






typedef struct IChannelHook IChannelHook;






typedef struct IClientSecurity IClientSecurity;






typedef struct IServerSecurity IServerSecurity;






typedef struct IRpcOptions IRpcOptions;






typedef struct IGlobalOptions IGlobalOptions;






typedef struct ISurrogate ISurrogate;






typedef struct IGlobalInterfaceTable IGlobalInterfaceTable;






typedef struct ISynchronize ISynchronize;






typedef struct ISynchronizeHandle ISynchronizeHandle;






typedef struct ISynchronizeEvent ISynchronizeEvent;






typedef struct ISynchronizeContainer ISynchronizeContainer;






typedef struct ISynchronizeMutex ISynchronizeMutex;






typedef struct ICancelMethodCalls ICancelMethodCalls;






typedef struct IAsyncManager IAsyncManager;






typedef struct ICallFactory ICallFactory;






typedef struct IRpcHelper IRpcHelper;






typedef struct IReleaseMarshalBuffers IReleaseMarshalBuffers;






typedef struct IWaitMultiple IWaitMultiple;






typedef struct IAddrTrackingControl IAddrTrackingControl;






typedef struct IAddrExclusionControl IAddrExclusionControl;






typedef struct IPipeByte IPipeByte;






typedef struct AsyncIPipeByte AsyncIPipeByte;






typedef struct IPipeLong IPipeLong;






typedef struct AsyncIPipeLong AsyncIPipeLong;






typedef struct IPipeDouble IPipeDouble;






typedef struct AsyncIPipeDouble AsyncIPipeDouble;






typedef struct IEnumContextProps IEnumContextProps;






typedef struct IContext IContext;






typedef struct IObjContext IObjContext;






typedef struct IComThreadingInfo IComThreadingInfo;






typedef struct IProcessInitControl IProcessInitControl;






typedef struct IFastRundown IFastRundown;






typedef struct IMarshalingStream IMarshalingStream;






typedef struct IAgileReference IAgileReference;






#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\unknwnbase.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 22 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\unknwnbase.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpc.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 227 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpc.h"
#pragma option pop
#line 22 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\unknwnbase.h"

#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcndr.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 3292 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcndr.h"
#pragma option pop
#line 23 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\unknwnbase.h"
#line 599 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\unknwnbase.h"
#pragma option pop
#line 443 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
#line 490 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
#pragma region Application Family or OneCore Family




#pragma endregion
#pragma region Desktop Family or OneCore Family





#pragma endregion
#pragma region Application Family or OneCore Family


typedef struct _COSERVERINFO
    {
    DWORD dwReserved1;
    LPWSTR pwszName;
    COAUTHINFO *pAuthInfo;
    DWORD dwReserved2;
    } COSERVERINFO;




extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0000_v0_0_s_ifspec;







typedef IMarshal *LPMARSHAL;


extern const IID IID_IMarshal;
#line 600 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
    typedef struct IMarshalVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IMarshal * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IMarshal * This);

        ULONG ( __stdcall *Release )(
            IMarshal * This);

        HRESULT ( __stdcall *GetUnmarshalClass )(
            IMarshal * This,

                  const IID * const riid,

                      void *pv,

                  DWORD dwDestContext,

                        void *pvDestContext,

                  DWORD mshlflags,

                   CLSID *pCid);

        HRESULT ( __stdcall *GetMarshalSizeMax )(
            IMarshal * This,

                  const IID * const riid,

                      void *pv,

                  DWORD dwDestContext,

                        void *pvDestContext,

                  DWORD mshlflags,

                   DWORD *pSize);

        HRESULT ( __stdcall *MarshalInterface )(
            IMarshal * This,

                  IStream *pStm,

                  const IID * const riid,

                      void *pv,

                  DWORD dwDestContext,

                        void *pvDestContext,

                  DWORD mshlflags);

        HRESULT ( __stdcall *UnmarshalInterface )(
            IMarshal * This,

                  IStream *pStm,

                  const IID * const riid,

                      void **ppv);

        HRESULT ( __stdcall *ReleaseMarshalData )(
            IMarshal * This,

                  IStream *pStm);

        HRESULT ( __stdcall *DisconnectObject )(
            IMarshal * This,

                  DWORD dwReserved);


    } IMarshalVtbl;

    struct IMarshal
    {
                   struct IMarshalVtbl *lpVtbl;
    };
#line 739 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
extern const IID IID_INoMarshal;
#line 752 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
    typedef struct INoMarshalVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            INoMarshal * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            INoMarshal * This);

        ULONG ( __stdcall *Release )(
            INoMarshal * This);


    } INoMarshalVtbl;

    struct INoMarshal
    {
                   struct INoMarshalVtbl *lpVtbl;
    };
#line 809 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
extern const IID IID_IAgileObject;
#line 822 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
    typedef struct IAgileObjectVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IAgileObject * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IAgileObject * This);

        ULONG ( __stdcall *Release )(
            IAgileObject * This);


    } IAgileObjectVtbl;

    struct IAgileObject
    {
                   struct IAgileObjectVtbl *lpVtbl;
    };
#line 876 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
#pragma endregion
#pragma region Desktop Family or OneCore Family or OneCore Family



extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0003_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0003_v0_0_s_ifspec;







typedef
enum tagACTIVATIONTYPE
    {
        ACTIVATIONTYPE_UNCATEGORIZED = 0,
        ACTIVATIONTYPE_FROM_MONIKER = 0x1,
        ACTIVATIONTYPE_FROM_DATA = 0x2,
        ACTIVATIONTYPE_FROM_STORAGE = 0x4,
        ACTIVATIONTYPE_FROM_STREAM = 0x8,
        ACTIVATIONTYPE_FROM_FILE = 0x10
    } ACTIVATIONTYPE;


extern const IID IID_IActivationFilter;
#line 920 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
    typedef struct IActivationFilterVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IActivationFilter * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IActivationFilter * This);

        ULONG ( __stdcall *Release )(
            IActivationFilter * This);

        HRESULT ( __stdcall *HandleActivation )(
            IActivationFilter * This,
                       DWORD dwActivationType,
                       const IID * const rclsid,
                        CLSID *pReplacementClsId);


    } IActivationFilterVtbl;

    struct IActivationFilter
    {
                   struct IActivationFilterVtbl *lpVtbl;
    };
#line 985 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
typedef IMarshal2 *LPMARSHAL2;


extern const IID IID_IMarshal2;
#line 1001 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
    typedef struct IMarshal2Vtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IMarshal2 * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IMarshal2 * This);

        ULONG ( __stdcall *Release )(
            IMarshal2 * This);

        HRESULT ( __stdcall *GetUnmarshalClass )(
            IMarshal2 * This,

                  const IID * const riid,

                      void *pv,

                  DWORD dwDestContext,

                        void *pvDestContext,

                  DWORD mshlflags,

                   CLSID *pCid);

        HRESULT ( __stdcall *GetMarshalSizeMax )(
            IMarshal2 * This,

                  const IID * const riid,

                      void *pv,

                  DWORD dwDestContext,

                        void *pvDestContext,

                  DWORD mshlflags,

                   DWORD *pSize);

        HRESULT ( __stdcall *MarshalInterface )(
            IMarshal2 * This,

                  IStream *pStm,

                  const IID * const riid,

                      void *pv,

                  DWORD dwDestContext,

                        void *pvDestContext,

                  DWORD mshlflags);

        HRESULT ( __stdcall *UnmarshalInterface )(
            IMarshal2 * This,

                  IStream *pStm,

                  const IID * const riid,

                      void **ppv);

        HRESULT ( __stdcall *ReleaseMarshalData )(
            IMarshal2 * This,

                  IStream *pStm);

        HRESULT ( __stdcall *DisconnectObject )(
            IMarshal2 * This,

                  DWORD dwReserved);


    } IMarshal2Vtbl;

    struct IMarshal2
    {
                   struct IMarshal2Vtbl *lpVtbl;
    };
#line 1140 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
typedef IMalloc *LPMALLOC;


extern const IID IID_IMalloc;
#line 1182 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
    typedef struct IMallocVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IMalloc * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IMalloc * This);

        ULONG ( __stdcall *Release )(
            IMalloc * This);

        void *( __stdcall *Alloc )(
            IMalloc * This,

                  SIZE_T cb);

        void *( __stdcall *Realloc )(
            IMalloc * This,

                      void *pv,

                  SIZE_T cb);

        void ( __stdcall *Free )(
            IMalloc * This,

                      void *pv);



        SIZE_T ( __stdcall *GetSize )(
            IMalloc * This,

                                                        void *pv);

        int ( __stdcall *DidAlloc )(
            IMalloc * This,

                      void *pv);

        void ( __stdcall *HeapMinimize )(
            IMalloc * This);


    } IMallocVtbl;

    struct IMalloc
    {
                   struct IMallocVtbl *lpVtbl;
    };
#line 1288 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
typedef IStdMarshalInfo *LPSTDMARSHALINFO;


extern const IID IID_IStdMarshalInfo;
#line 1312 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
    typedef struct IStdMarshalInfoVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IStdMarshalInfo * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IStdMarshalInfo * This);

        ULONG ( __stdcall *Release )(
            IStdMarshalInfo * This);

        HRESULT ( __stdcall *GetClassForHandler )(
            IStdMarshalInfo * This,

                  DWORD dwDestContext,

                        void *pvDestContext,

                   CLSID *pClsid);


    } IStdMarshalInfoVtbl;

    struct IStdMarshalInfo
    {
                   struct IStdMarshalInfoVtbl *lpVtbl;
    };
#line 1380 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
typedef IExternalConnection *LPEXTERNALCONNECTION;

typedef
enum tagEXTCONN
    {
        EXTCONN_STRONG = 0x1,
        EXTCONN_WEAK = 0x2,
        EXTCONN_CALLABLE = 0x4
    } EXTCONN;


extern const IID IID_IExternalConnection;
#line 1418 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
    typedef struct IExternalConnectionVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IExternalConnection * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IExternalConnection * This);

        ULONG ( __stdcall *Release )(
            IExternalConnection * This);

        DWORD ( __stdcall *AddConnection )(
            IExternalConnection * This,

                  DWORD extconn,

                  DWORD reserved);

        DWORD ( __stdcall *ReleaseConnection )(
            IExternalConnection * This,

                  DWORD extconn,

                  DWORD reserved,

                  BOOL fLastReleaseCloses);


    } IExternalConnectionVtbl;

    struct IExternalConnection
    {
                   struct IExternalConnectionVtbl *lpVtbl;
    };
#line 1493 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
typedef IMultiQI *LPMULTIQI;


#pragma endregion
#pragma region Application Family or OneCore Family

typedef struct tagMULTI_QI
    {
    const IID *pIID;
    IUnknown *pItf;
    HRESULT hr;
    } MULTI_QI;



extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0008_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0008_v0_0_s_ifspec;
#line 1518 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
extern const IID IID_IMultiQI;
#line 1537 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
    typedef struct IMultiQIVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IMultiQI * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IMultiQI * This);

        ULONG ( __stdcall *Release )(
            IMultiQI * This);

        HRESULT ( __stdcall *QueryMultipleInterfaces )(
            IMultiQI * This,

                  ULONG cMQIs,

                                    MULTI_QI *pMQIs);


    } IMultiQIVtbl;

    struct IMultiQI
    {
                   struct IMultiQIVtbl *lpVtbl;
    };
#line 1604 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
extern const IID IID_AsyncIMultiQI;
#line 1627 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
    typedef struct AsyncIMultiQIVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            AsyncIMultiQI * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            AsyncIMultiQI * This);

        ULONG ( __stdcall *Release )(
            AsyncIMultiQI * This);

        HRESULT ( __stdcall *Begin_QueryMultipleInterfaces )(
            AsyncIMultiQI * This,

                  ULONG cMQIs,

                                    MULTI_QI *pMQIs);

        HRESULT ( __stdcall *Finish_QueryMultipleInterfaces )(
            AsyncIMultiQI * This,

                                    MULTI_QI *pMQIs);


    } AsyncIMultiQIVtbl;

    struct AsyncIMultiQI
    {
                   struct AsyncIMultiQIVtbl *lpVtbl;
    };
#line 1699 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
#pragma endregion
#pragma region Desktop Family or OneCore Family



extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0009_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0009_v0_0_s_ifspec;
#line 1714 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
extern const IID IID_IInternalUnknown;
#line 1733 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
    typedef struct IInternalUnknownVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IInternalUnknown * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IInternalUnknown * This);

        ULONG ( __stdcall *Release )(
            IInternalUnknown * This);

        HRESULT ( __stdcall *QueryInternalInterface )(
            IInternalUnknown * This,

                  const IID * const riid,

                      void **ppv);


    } IInternalUnknownVtbl;

    struct IInternalUnknown
    {
                   struct IInternalUnknownVtbl *lpVtbl;
    };
#line 1797 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
#pragma endregion
#pragma region Application Family or OneCore Family or OneCore Family



extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0010_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0010_v0_0_s_ifspec;







typedef IEnumUnknown *LPENUMUNKNOWN;


extern const IID IID_IEnumUnknown;
#line 1843 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
    typedef struct IEnumUnknownVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      IEnumUnknown * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      IEnumUnknown * This);

        ULONG ( __stdcall *Release )(
                      IEnumUnknown * This);

                      HRESULT ( __stdcall *Next )(
            IEnumUnknown * This,

                  ULONG celt,

                                                 IUnknown **rgelt,

                       ULONG *pceltFetched);

        HRESULT ( __stdcall *Skip )(
                      IEnumUnknown * This,
                       ULONG celt);

        HRESULT ( __stdcall *Reset )(
                      IEnumUnknown * This);

        HRESULT ( __stdcall *Clone )(
                      IEnumUnknown * This,
                                             IEnumUnknown **ppenum);


    } IEnumUnknownVtbl;

    struct IEnumUnknown
    {
                   struct IEnumUnknownVtbl *lpVtbl;
    };
#line 1921 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
                HRESULT __stdcall IEnumUnknown_RemoteNext_Proxy(
              IEnumUnknown * This,
               ULONG celt,
                                                                                IUnknown **rgelt,
                           ULONG *pceltFetched);


void __stdcall IEnumUnknown_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
#line 1945 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
typedef IEnumString *LPENUMSTRING;


extern const IID IID_IEnumString;
#line 1976 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
    typedef struct IEnumStringVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      IEnumString * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      IEnumString * This);

        ULONG ( __stdcall *Release )(
                      IEnumString * This);

                      HRESULT ( __stdcall *Next )(
            IEnumString * This,
                       ULONG celt,

                                                 LPOLESTR *rgelt,

                       ULONG *pceltFetched);

        HRESULT ( __stdcall *Skip )(
                      IEnumString * This,
                       ULONG celt);

        HRESULT ( __stdcall *Reset )(
                      IEnumString * This);

        HRESULT ( __stdcall *Clone )(
                      IEnumString * This,
                                             IEnumString **ppenum);


    } IEnumStringVtbl;

    struct IEnumString
    {
                   struct IEnumStringVtbl *lpVtbl;
    };
#line 2053 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
                HRESULT __stdcall IEnumString_RemoteNext_Proxy(
              IEnumString * This,
               ULONG celt,
                                                                                LPOLESTR *rgelt,
                           ULONG *pceltFetched);


void __stdcall IEnumString_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
#line 2078 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
extern const IID IID_ISequentialStream;
#line 2107 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
    typedef struct ISequentialStreamVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      ISequentialStream * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      ISequentialStream * This);

        ULONG ( __stdcall *Release )(
                      ISequentialStream * This);

                      HRESULT ( __stdcall *Read )(
            ISequentialStream * This,

                                                 void *pv,

                  ULONG cb,

                       ULONG *pcbRead);

                      HRESULT ( __stdcall *Write )(
            ISequentialStream * This,

                                  const void *pv,

                  ULONG cb,

                       ULONG *pcbWritten);


    } ISequentialStreamVtbl;

    struct ISequentialStream
    {
                   struct ISequentialStreamVtbl *lpVtbl;
    };
#line 2177 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
                HRESULT __stdcall ISequentialStream_RemoteRead_Proxy(
              ISequentialStream * This,
                                                                         byte *pv,
               ULONG cb,
                           ULONG *pcbRead);


void __stdcall ISequentialStream_RemoteRead_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall ISequentialStream_RemoteWrite_Proxy(
              ISequentialStream * This,
                                                  const byte *pv,
               ULONG cb,
                           ULONG *pcbWritten);


void __stdcall ISequentialStream_RemoteWrite_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
#line 2215 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
typedef IStream *LPSTREAM;

typedef struct tagSTATSTG
    {
    LPOLESTR pwcsName;
    DWORD type;
    ULARGE_INTEGER cbSize;
    FILETIME mtime;
    FILETIME ctime;
    FILETIME atime;
    DWORD grfMode;
    DWORD grfLocksSupported;
    CLSID clsid;
    DWORD grfStateBits;
    DWORD reserved;
    } STATSTG;

typedef
enum tagSTGTY
    {
        STGTY_STORAGE = 1,
        STGTY_STREAM = 2,
        STGTY_LOCKBYTES = 3,
        STGTY_PROPERTY = 4
    } STGTY;

typedef
enum tagSTREAM_SEEK
    {
        STREAM_SEEK_SET = 0,
        STREAM_SEEK_CUR = 1,
        STREAM_SEEK_END = 2
    } STREAM_SEEK;

typedef
enum tagLOCKTYPE
    {
        LOCK_WRITE = 1,
        LOCK_EXCLUSIVE = 2,
        LOCK_ONLYONCE = 4
    } LOCKTYPE;


extern const IID IID_IStream;
#line 2311 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
    typedef struct IStreamVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      IStream * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      IStream * This);

        ULONG ( __stdcall *Release )(
                      IStream * This);

                      HRESULT ( __stdcall *Read )(
            IStream * This,

                                                 void *pv,

                  ULONG cb,

                       ULONG *pcbRead);

                      HRESULT ( __stdcall *Write )(
            IStream * This,

                                  const void *pv,

                  ULONG cb,

                       ULONG *pcbWritten);

                      HRESULT ( __stdcall *Seek )(
            IStream * This,
                       LARGE_INTEGER dlibMove,
                       DWORD dwOrigin,

                       ULARGE_INTEGER *plibNewPosition);

        HRESULT ( __stdcall *SetSize )(
                      IStream * This,
                       ULARGE_INTEGER libNewSize);

                      HRESULT ( __stdcall *CopyTo )(
            IStream * This,

                  IStream *pstm,
                       ULARGE_INTEGER cb,

                       ULARGE_INTEGER *pcbRead,

                       ULARGE_INTEGER *pcbWritten);

        HRESULT ( __stdcall *Commit )(
                      IStream * This,
                       DWORD grfCommitFlags);

        HRESULT ( __stdcall *Revert )(
                      IStream * This);

        HRESULT ( __stdcall *LockRegion )(
                      IStream * This,
                       ULARGE_INTEGER libOffset,
                       ULARGE_INTEGER cb,
                       DWORD dwLockType);

        HRESULT ( __stdcall *UnlockRegion )(
                      IStream * This,
                       ULARGE_INTEGER libOffset,
                       ULARGE_INTEGER cb,
                       DWORD dwLockType);

        HRESULT ( __stdcall *Stat )(
                      IStream * This,
                                   STATSTG *pstatstg,
                       DWORD grfStatFlag);

        HRESULT ( __stdcall *Clone )(
                      IStream * This,
                                             IStream **ppstm);


    } IStreamVtbl;

    struct IStream
    {
                   struct IStreamVtbl *lpVtbl;
    };
#line 2458 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
                HRESULT __stdcall IStream_RemoteSeek_Proxy(
              IStream * This,
               LARGE_INTEGER dlibMove,
               DWORD dwOrigin,
                           ULARGE_INTEGER *plibNewPosition);


void __stdcall IStream_RemoteSeek_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall IStream_RemoteCopyTo_Proxy(
              IStream * This,
                                     IStream *pstm,
               ULARGE_INTEGER cb,
                           ULARGE_INTEGER *pcbRead,
                           ULARGE_INTEGER *pcbWritten);


void __stdcall IStream_RemoteCopyTo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
#line 2497 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
typedef ULONG RPCOLEDATAREP;

typedef struct tagRPCOLEMESSAGE
    {
    void *reserved1;
    RPCOLEDATAREP dataRepresentation;
    void *Buffer;
    ULONG cbBuffer;
    ULONG iMethod;
    void *reserved2[ 5 ];
    ULONG rpcFlags;
    } RPCOLEMESSAGE;

typedef RPCOLEMESSAGE *PRPCOLEMESSAGE;


extern const IID IID_IRpcChannelBuffer;
#line 2550 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
    typedef struct IRpcChannelBufferVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IRpcChannelBuffer * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IRpcChannelBuffer * This);

        ULONG ( __stdcall *Release )(
            IRpcChannelBuffer * This);

        HRESULT ( __stdcall *GetBuffer )(
            IRpcChannelBuffer * This,

                     RPCOLEMESSAGE *pMessage,

                  const IID * const riid);

        HRESULT ( __stdcall *SendReceive )(
            IRpcChannelBuffer * This,

                     RPCOLEMESSAGE *pMessage,

                       ULONG *pStatus);

        HRESULT ( __stdcall *FreeBuffer )(
            IRpcChannelBuffer * This,

                     RPCOLEMESSAGE *pMessage);

        HRESULT ( __stdcall *GetDestCtx )(
            IRpcChannelBuffer * This,

                   DWORD *pdwDestContext,

                                       void **ppvDestContext);

        HRESULT ( __stdcall *IsConnected )(
            IRpcChannelBuffer * This);


    } IRpcChannelBufferVtbl;

    struct IRpcChannelBuffer
    {
                   struct IRpcChannelBufferVtbl *lpVtbl;
    };
#line 2648 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
#pragma endregion
#pragma region Desktop Family or OneCore Family



extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0015_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0015_v0_0_s_ifspec;
#line 2663 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
extern const IID IID_IRpcChannelBuffer2;
#line 2680 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
    typedef struct IRpcChannelBuffer2Vtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IRpcChannelBuffer2 * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IRpcChannelBuffer2 * This);

        ULONG ( __stdcall *Release )(
            IRpcChannelBuffer2 * This);

        HRESULT ( __stdcall *GetBuffer )(
            IRpcChannelBuffer2 * This,

                     RPCOLEMESSAGE *pMessage,

                  const IID * const riid);

        HRESULT ( __stdcall *SendReceive )(
            IRpcChannelBuffer2 * This,

                     RPCOLEMESSAGE *pMessage,

                       ULONG *pStatus);

        HRESULT ( __stdcall *FreeBuffer )(
            IRpcChannelBuffer2 * This,

                     RPCOLEMESSAGE *pMessage);

        HRESULT ( __stdcall *GetDestCtx )(
            IRpcChannelBuffer2 * This,

                   DWORD *pdwDestContext,

                                       void **ppvDestContext);

        HRESULT ( __stdcall *IsConnected )(
            IRpcChannelBuffer2 * This);

        HRESULT ( __stdcall *GetProtocolVersion )(
            IRpcChannelBuffer2 * This,

                   DWORD *pdwVersion);


    } IRpcChannelBuffer2Vtbl;

    struct IRpcChannelBuffer2
    {
                   struct IRpcChannelBuffer2Vtbl *lpVtbl;
    };
#line 2790 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
extern const IID IID_IAsyncRpcChannelBuffer;
#line 2825 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
    typedef struct IAsyncRpcChannelBufferVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IAsyncRpcChannelBuffer * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IAsyncRpcChannelBuffer * This);

        ULONG ( __stdcall *Release )(
            IAsyncRpcChannelBuffer * This);

        HRESULT ( __stdcall *GetBuffer )(
            IAsyncRpcChannelBuffer * This,

                     RPCOLEMESSAGE *pMessage,

                  const IID * const riid);

        HRESULT ( __stdcall *SendReceive )(
            IAsyncRpcChannelBuffer * This,

                     RPCOLEMESSAGE *pMessage,

                       ULONG *pStatus);

        HRESULT ( __stdcall *FreeBuffer )(
            IAsyncRpcChannelBuffer * This,

                     RPCOLEMESSAGE *pMessage);

        HRESULT ( __stdcall *GetDestCtx )(
            IAsyncRpcChannelBuffer * This,

                   DWORD *pdwDestContext,

                                       void **ppvDestContext);

        HRESULT ( __stdcall *IsConnected )(
            IAsyncRpcChannelBuffer * This);

        HRESULT ( __stdcall *GetProtocolVersion )(
            IAsyncRpcChannelBuffer * This,

                   DWORD *pdwVersion);

        HRESULT ( __stdcall *Send )(
            IAsyncRpcChannelBuffer * This,

                     RPCOLEMESSAGE *pMsg,

                  ISynchronize *pSync,

                   ULONG *pulStatus);

        HRESULT ( __stdcall *Receive )(
            IAsyncRpcChannelBuffer * This,

                     RPCOLEMESSAGE *pMsg,

                   ULONG *pulStatus);

        HRESULT ( __stdcall *GetDestCtxEx )(
            IAsyncRpcChannelBuffer * This,

                  RPCOLEMESSAGE *pMsg,

                   DWORD *pdwDestContext,

                                           void **ppvDestContext);


    } IAsyncRpcChannelBufferVtbl;

    struct IAsyncRpcChannelBuffer
    {
                   struct IAsyncRpcChannelBufferVtbl *lpVtbl;
    };
#line 2970 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
extern const IID IID_IRpcChannelBuffer3;
#line 3029 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
    typedef struct IRpcChannelBuffer3Vtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IRpcChannelBuffer3 * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IRpcChannelBuffer3 * This);

        ULONG ( __stdcall *Release )(
            IRpcChannelBuffer3 * This);

        HRESULT ( __stdcall *GetBuffer )(
            IRpcChannelBuffer3 * This,

                     RPCOLEMESSAGE *pMessage,

                  const IID * const riid);

        HRESULT ( __stdcall *SendReceive )(
            IRpcChannelBuffer3 * This,

                     RPCOLEMESSAGE *pMessage,

                       ULONG *pStatus);

        HRESULT ( __stdcall *FreeBuffer )(
            IRpcChannelBuffer3 * This,

                     RPCOLEMESSAGE *pMessage);

        HRESULT ( __stdcall *GetDestCtx )(
            IRpcChannelBuffer3 * This,

                   DWORD *pdwDestContext,

                                       void **ppvDestContext);

        HRESULT ( __stdcall *IsConnected )(
            IRpcChannelBuffer3 * This);

        HRESULT ( __stdcall *GetProtocolVersion )(
            IRpcChannelBuffer3 * This,

                   DWORD *pdwVersion);

        HRESULT ( __stdcall *Send )(
            IRpcChannelBuffer3 * This,

                     RPCOLEMESSAGE *pMsg,

                   ULONG *pulStatus);

        HRESULT ( __stdcall *Receive )(
            IRpcChannelBuffer3 * This,

                     RPCOLEMESSAGE *pMsg,

                  ULONG ulSize,

                   ULONG *pulStatus);

        HRESULT ( __stdcall *Cancel )(
            IRpcChannelBuffer3 * This,

                     RPCOLEMESSAGE *pMsg);

        HRESULT ( __stdcall *GetCallContext )(
            IRpcChannelBuffer3 * This,

                  RPCOLEMESSAGE *pMsg,

                  const IID * const riid,

                      void **pInterface);

        HRESULT ( __stdcall *GetDestCtxEx )(
            IRpcChannelBuffer3 * This,

                  RPCOLEMESSAGE *pMsg,

                   DWORD *pdwDestContext,

                                           void **ppvDestContext);

        HRESULT ( __stdcall *GetState )(
            IRpcChannelBuffer3 * This,

                  RPCOLEMESSAGE *pMsg,

                   DWORD *pState);

        HRESULT ( __stdcall *RegisterAsync )(
            IRpcChannelBuffer3 * This,

                     RPCOLEMESSAGE *pMsg,

                  IAsyncManager *pAsyncMgr);


    } IRpcChannelBuffer3Vtbl;

    struct IRpcChannelBuffer3
    {
                   struct IRpcChannelBuffer3Vtbl *lpVtbl;
    };
#line 3214 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
extern const IID IID_IRpcSyntaxNegotiate;
#line 3231 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
    typedef struct IRpcSyntaxNegotiateVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IRpcSyntaxNegotiate * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IRpcSyntaxNegotiate * This);

        ULONG ( __stdcall *Release )(
            IRpcSyntaxNegotiate * This);

        HRESULT ( __stdcall *NegotiateSyntax )(
            IRpcSyntaxNegotiate * This,

                     RPCOLEMESSAGE *pMsg);


    } IRpcSyntaxNegotiateVtbl;

    struct IRpcSyntaxNegotiate
    {
                   struct IRpcSyntaxNegotiateVtbl *lpVtbl;
    };
#line 3296 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
extern const IID IID_IRpcProxyBuffer;
#line 3315 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
    typedef struct IRpcProxyBufferVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IRpcProxyBuffer * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IRpcProxyBuffer * This);

        ULONG ( __stdcall *Release )(
            IRpcProxyBuffer * This);

        HRESULT ( __stdcall *Connect )(
            IRpcProxyBuffer * This,

                  IRpcChannelBuffer *pRpcChannelBuffer);

        void ( __stdcall *Disconnect )(
            IRpcProxyBuffer * This);


    } IRpcProxyBufferVtbl;

    struct IRpcProxyBuffer
    {
                   struct IRpcProxyBufferVtbl *lpVtbl;
    };
#line 3383 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
#pragma endregion
#pragma region Application Family or OneCore Family or OneCore Family



extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0020_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0020_v0_0_s_ifspec;
#line 3398 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
extern const IID IID_IRpcStubBuffer;
#line 3437 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
    typedef struct IRpcStubBufferVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IRpcStubBuffer * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IRpcStubBuffer * This);

        ULONG ( __stdcall *Release )(
            IRpcStubBuffer * This);

        HRESULT ( __stdcall *Connect )(
            IRpcStubBuffer * This,

                  IUnknown *pUnkServer);

        void ( __stdcall *Disconnect )(
            IRpcStubBuffer * This);

        HRESULT ( __stdcall *Invoke )(
            IRpcStubBuffer * This,

                     RPCOLEMESSAGE *_prpcmsg,

                  IRpcChannelBuffer *_pRpcChannelBuffer);

        IRpcStubBuffer *( __stdcall *IsIIDSupported )(
            IRpcStubBuffer * This,

                  const IID * const riid);

        ULONG ( __stdcall *CountRefs )(
            IRpcStubBuffer * This);

        HRESULT ( __stdcall *DebugServerQueryInterface )(
            IRpcStubBuffer * This,

                      void **ppv);

        void ( __stdcall *DebugServerRelease )(
            IRpcStubBuffer * This,

                  void *pv);


    } IRpcStubBufferVtbl;

    struct IRpcStubBuffer
    {
                   struct IRpcStubBufferVtbl *lpVtbl;
    };
#line 3548 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
extern const IID IID_IPSFactoryBuffer;
#line 3579 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
    typedef struct IPSFactoryBufferVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IPSFactoryBuffer * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IPSFactoryBuffer * This);

        ULONG ( __stdcall *Release )(
            IPSFactoryBuffer * This);

        HRESULT ( __stdcall *CreateProxy )(
            IPSFactoryBuffer * This,

                  IUnknown *pUnkOuter,

                  const IID * const riid,

                      IRpcProxyBuffer **ppProxy,

                      void **ppv);

        HRESULT ( __stdcall *CreateStub )(
            IPSFactoryBuffer * This,

                  const IID * const riid,

                      IUnknown *pUnkServer,

                      IRpcStubBuffer **ppStub);


    } IPSFactoryBufferVtbl;

    struct IPSFactoryBuffer
    {
                   struct IPSFactoryBufferVtbl *lpVtbl;
    };
#line 3659 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
#pragma endregion
#pragma region Desktop Family or OneCore Family



typedef struct SChannelHookCallInfo
    {
    IID iid;
    DWORD cbSize;
    GUID uCausality;
    DWORD dwServerPid;
    DWORD iMethod;
    void *pObject;
    } SChannelHookCallInfo;



extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0022_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0022_v0_0_s_ifspec;
#line 3686 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
extern const IID IID_IChannelHook;
#line 3765 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
    typedef struct IChannelHookVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IChannelHook * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IChannelHook * This);

        ULONG ( __stdcall *Release )(
            IChannelHook * This);

        void ( __stdcall *ClientGetSize )(
            IChannelHook * This,

                  const GUID * const uExtent,

                  const IID * const riid,

                   ULONG *pDataSize);

        void ( __stdcall *ClientFillBuffer )(
            IChannelHook * This,

                  const GUID * const uExtent,

                  const IID * const riid,

                     ULONG *pDataSize,

                  void *pDataBuffer);

        void ( __stdcall *ClientNotify )(
            IChannelHook * This,

                  const GUID * const uExtent,

                  const IID * const riid,

                  ULONG cbDataSize,

                  void *pDataBuffer,

                  DWORD lDataRep,

                  HRESULT hrFault);

        void ( __stdcall *ServerNotify )(
            IChannelHook * This,

                  const GUID * const uExtent,

                  const IID * const riid,

                  ULONG cbDataSize,

                  void *pDataBuffer,

                  DWORD lDataRep);

        void ( __stdcall *ServerGetSize )(
            IChannelHook * This,

                  const GUID * const uExtent,

                  const IID * const riid,

                  HRESULT hrFault,

                   ULONG *pDataSize);

        void ( __stdcall *ServerFillBuffer )(
            IChannelHook * This,

                  const GUID * const uExtent,

                  const IID * const riid,

                     ULONG *pDataSize,

                  void *pDataBuffer,

                  HRESULT hrFault);


    } IChannelHookVtbl;

    struct IChannelHook
    {
                   struct IChannelHookVtbl *lpVtbl;
    };
#line 3910 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
#pragma endregion


#pragma region Application Family or OneCore Family



extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0023_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0023_v0_0_s_ifspec;







typedef struct tagSOLE_AUTHENTICATION_SERVICE
    {
    DWORD dwAuthnSvc;
    DWORD dwAuthzSvc;
    OLECHAR *pPrincipalName;
    HRESULT hr;
    } SOLE_AUTHENTICATION_SERVICE;

typedef SOLE_AUTHENTICATION_SERVICE *PSOLE_AUTHENTICATION_SERVICE;

typedef
enum tagEOLE_AUTHENTICATION_CAPABILITIES
    {
        EOAC_NONE = 0,
        EOAC_MUTUAL_AUTH = 0x1,
        EOAC_STATIC_CLOAKING = 0x20,
        EOAC_DYNAMIC_CLOAKING = 0x40,
        EOAC_ANY_AUTHORITY = 0x80,
        EOAC_MAKE_FULLSIC = 0x100,
        EOAC_DEFAULT = 0x800,
        EOAC_SECURE_REFS = 0x2,
        EOAC_ACCESS_CONTROL = 0x4,
        EOAC_APPID = 0x8,
        EOAC_DYNAMIC = 0x10,
        EOAC_REQUIRE_FULLSIC = 0x200,
        EOAC_AUTO_IMPERSONATE = 0x400,
        EOAC_NO_CUSTOM_MARSHAL = 0x2000,
        EOAC_DISABLE_AAA = 0x1000
    } EOLE_AUTHENTICATION_CAPABILITIES;





typedef struct tagSOLE_AUTHENTICATION_INFO
    {
    DWORD dwAuthnSvc;
    DWORD dwAuthzSvc;
    void *pAuthInfo;
    } SOLE_AUTHENTICATION_INFO;

typedef struct tagSOLE_AUTHENTICATION_INFO *PSOLE_AUTHENTICATION_INFO;

typedef struct tagSOLE_AUTHENTICATION_LIST
    {
    DWORD cAuthInfo;
    SOLE_AUTHENTICATION_INFO *aAuthInfo;
    } SOLE_AUTHENTICATION_LIST;

typedef struct tagSOLE_AUTHENTICATION_LIST *PSOLE_AUTHENTICATION_LIST;


extern const IID IID_IClientSecurity;
#line 4033 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
    typedef struct IClientSecurityVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IClientSecurity * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IClientSecurity * This);

        ULONG ( __stdcall *Release )(
            IClientSecurity * This);

        HRESULT ( __stdcall *QueryBlanket )(
            IClientSecurity * This,

                  IUnknown *pProxy,

                   DWORD *pAuthnSvc,

                       DWORD *pAuthzSvc,

                                  OLECHAR **pServerPrincName,

                       DWORD *pAuthnLevel,

                       DWORD *pImpLevel,

                                       void **pAuthInfo,

                       DWORD *pCapabilites);

        HRESULT ( __stdcall *SetBlanket )(
            IClientSecurity * This,

                  IUnknown *pProxy,

                  DWORD dwAuthnSvc,

                  DWORD dwAuthzSvc,

                           OLECHAR *pServerPrincName,

                  DWORD dwAuthnLevel,

                  DWORD dwImpLevel,

                      void *pAuthInfo,

                  DWORD dwCapabilities);

        HRESULT ( __stdcall *CopyProxy )(
            IClientSecurity * This,

                  IUnknown *pProxy,

                      IUnknown **ppCopy);


    } IClientSecurityVtbl;

    struct IClientSecurity
    {
                   struct IClientSecurityVtbl *lpVtbl;
    };
#line 4141 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
#pragma endregion
#pragma region Desktop Family or OneCore Family



extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0024_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0024_v0_0_s_ifspec;
#line 4156 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
extern const IID IID_IServerSecurity;
#line 4191 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
    typedef struct IServerSecurityVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IServerSecurity * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IServerSecurity * This);

        ULONG ( __stdcall *Release )(
            IServerSecurity * This);

        HRESULT ( __stdcall *QueryBlanket )(
            IServerSecurity * This,

                       DWORD *pAuthnSvc,

                       DWORD *pAuthzSvc,

                                  OLECHAR **pServerPrincName,

                       DWORD *pAuthnLevel,

                       DWORD *pImpLevel,

                                       void **pPrivs,

                         DWORD *pCapabilities);

        HRESULT ( __stdcall *ImpersonateClient )(
            IServerSecurity * This);

        HRESULT ( __stdcall *RevertToSelf )(
            IServerSecurity * This);

        BOOL ( __stdcall *IsImpersonating )(
            IServerSecurity * This);


    } IServerSecurityVtbl;

    struct IServerSecurity
    {
                   struct IServerSecurityVtbl *lpVtbl;
    };
#line 4282 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
typedef
enum tagRPCOPT_PROPERTIES
    {
        COMBND_RPCTIMEOUT = 0x1,
        COMBND_SERVER_LOCALITY = 0x2,
        COMBND_RESERVED1 = 0x4,
        COMBND_RESERVED2 = 0x5,
        COMBND_RESERVED3 = 0x8,
        COMBND_RESERVED4 = 0x10
    } RPCOPT_PROPERTIES;

typedef
enum tagRPCOPT_SERVER_LOCALITY_VALUES
    {
        SERVER_LOCALITY_PROCESS_LOCAL = 0,
        SERVER_LOCALITY_MACHINE_LOCAL = 1,
        SERVER_LOCALITY_REMOTE = 2
    } RPCOPT_SERVER_LOCALITY_VALUES;



extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0025_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0025_v0_0_s_ifspec;
#line 4313 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
extern const IID IID_IRpcOptions;
#line 4342 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
    typedef struct IRpcOptionsVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IRpcOptions * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IRpcOptions * This);

        ULONG ( __stdcall *Release )(
            IRpcOptions * This);

        HRESULT ( __stdcall *Set )(
            IRpcOptions * This,

                  IUnknown *pPrx,

                  RPCOPT_PROPERTIES dwProperty,

                  ULONG_PTR dwValue);

        HRESULT ( __stdcall *Query )(
            IRpcOptions * This,

                  IUnknown *pPrx,

                  RPCOPT_PROPERTIES dwProperty,

                   ULONG_PTR *pdwValue);


    } IRpcOptionsVtbl;

    struct IRpcOptions
    {
                   struct IRpcOptionsVtbl *lpVtbl;
    };
#line 4420 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
#pragma endregion
#pragma region Application Family or OneCore Family

typedef
enum tagGLOBALOPT_PROPERTIES
    {
        COMGLB_EXCEPTION_HANDLING = 1,
        COMGLB_APPID = 2,
        COMGLB_RPC_THREADPOOL_SETTING = 3,
        COMGLB_RO_SETTINGS = 4,
        COMGLB_UNMARSHALING_POLICY = 5
    } GLOBALOPT_PROPERTIES;

typedef
enum tagGLOBALOPT_EH_VALUES
    {
        COMGLB_EXCEPTION_HANDLE = 0,
        COMGLB_EXCEPTION_DONOT_HANDLE_FATAL = 1,
        COMGLB_EXCEPTION_DONOT_HANDLE = COMGLB_EXCEPTION_DONOT_HANDLE_FATAL,
        COMGLB_EXCEPTION_DONOT_HANDLE_ANY = 2
    } GLOBALOPT_EH_VALUES;

typedef
enum tagGLOBALOPT_RPCTP_VALUES
    {
        COMGLB_RPC_THREADPOOL_SETTING_DEFAULT_POOL = 0,
        COMGLB_RPC_THREADPOOL_SETTING_PRIVATE_POOL = 1
    } GLOBALOPT_RPCTP_VALUES;

typedef
enum tagGLOBALOPT_RO_FLAGS
    {
        COMGLB_STA_MODALLOOP_REMOVE_TOUCH_MESSAGES = 0x1,
        COMGLB_STA_MODALLOOP_SHARED_QUEUE_REMOVE_INPUT_MESSAGES = 0x2,
        COMGLB_STA_MODALLOOP_SHARED_QUEUE_DONOT_REMOVE_INPUT_MESSAGES = 0x4,
        COMGLB_FAST_RUNDOWN = 0x8,
        COMGLB_RESERVED1 = 0x10,
        COMGLB_RESERVED2 = 0x20,
        COMGLB_RESERVED3 = 0x40,
        COMGLB_STA_MODALLOOP_SHARED_QUEUE_REORDER_POINTER_MESSAGES = 0x80,
        COMGLB_RESERVED4 = 0x100,
        COMGLB_RESERVED5 = 0x200,
        COMGLB_RESERVED6 = 0x400
    } GLOBALOPT_RO_FLAGS;

typedef
enum tagGLOBALOPT_UNMARSHALING_POLICY_VALUES
    {
        COMGLB_UNMARSHALING_POLICY_NORMAL = 0,
        COMGLB_UNMARSHALING_POLICY_STRONG = 1,
        COMGLB_UNMARSHALING_POLICY_HYBRID = 2
    } GLOBALOPT_UNMARSHALING_POLICY_VALUES;



extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0026_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0026_v0_0_s_ifspec;
#line 4485 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
extern const IID IID_IGlobalOptions;
#line 4510 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
    typedef struct IGlobalOptionsVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IGlobalOptions * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IGlobalOptions * This);

        ULONG ( __stdcall *Release )(
            IGlobalOptions * This);

        HRESULT ( __stdcall *Set )(
            IGlobalOptions * This,

                  GLOBALOPT_PROPERTIES dwProperty,

                  ULONG_PTR dwValue);

        HRESULT ( __stdcall *Query )(
            IGlobalOptions * This,

                  GLOBALOPT_PROPERTIES dwProperty,

                   ULONG_PTR *pdwValue);


    } IGlobalOptionsVtbl;

    struct IGlobalOptions
    {
                   struct IGlobalOptionsVtbl *lpVtbl;
    };
#line 4584 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
#pragma endregion

#pragma region Application Family or OneCore Family



extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0027_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0027_v0_0_s_ifspec;







typedef ISurrogate *LPSURROGATE;


extern const IID IID_ISurrogate;
#line 4620 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
    typedef struct ISurrogateVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      ISurrogate * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      ISurrogate * This);

        ULONG ( __stdcall *Release )(
                      ISurrogate * This);

        HRESULT ( __stdcall *LoadDllServer )(
                      ISurrogate * This,
                                 const IID * const Clsid);

        HRESULT ( __stdcall *FreeSurrogate )(
                      ISurrogate * This);


    } ISurrogateVtbl;

    struct ISurrogate
    {
                   struct ISurrogateVtbl *lpVtbl;
    };
#line 4689 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
typedef IGlobalInterfaceTable *LPGLOBALINTERFACETABLE;


extern const IID IID_IGlobalInterfaceTable;
#line 4725 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
    typedef struct IGlobalInterfaceTableVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IGlobalInterfaceTable * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IGlobalInterfaceTable * This);

        ULONG ( __stdcall *Release )(
            IGlobalInterfaceTable * This);

        HRESULT ( __stdcall *RegisterInterfaceInGlobal )(
            IGlobalInterfaceTable * This,

                  IUnknown *pUnk,

                  const IID * const riid,

                   DWORD *pdwCookie);

        HRESULT ( __stdcall *RevokeInterfaceFromGlobal )(
            IGlobalInterfaceTable * This,

                  DWORD dwCookie);

        HRESULT ( __stdcall *GetInterfaceFromGlobal )(
            IGlobalInterfaceTable * This,

                  DWORD dwCookie,

                  const IID * const riid,

                      void **ppv);


    } IGlobalInterfaceTableVtbl;

    struct IGlobalInterfaceTable
    {
                   struct IGlobalInterfaceTableVtbl *lpVtbl;
    };
#line 4811 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
#pragma endregion
#pragma region Desktop Family or OneCore Family



extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0029_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0029_v0_0_s_ifspec;
#line 4826 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
extern const IID IID_ISynchronize;
#line 4847 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
    typedef struct ISynchronizeVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      ISynchronize * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      ISynchronize * This);

        ULONG ( __stdcall *Release )(
                      ISynchronize * This);

        HRESULT ( __stdcall *Wait )(
                      ISynchronize * This,
                       DWORD dwFlags,
                       DWORD dwMilliseconds);

        HRESULT ( __stdcall *Signal )(
                      ISynchronize * This);

        HRESULT ( __stdcall *Reset )(
                      ISynchronize * This);


    } ISynchronizeVtbl;

    struct ISynchronize
    {
                   struct ISynchronizeVtbl *lpVtbl;
    };
#line 4924 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
extern const IID IID_ISynchronizeHandle;
#line 4941 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
    typedef struct ISynchronizeHandleVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            ISynchronizeHandle * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            ISynchronizeHandle * This);

        ULONG ( __stdcall *Release )(
            ISynchronizeHandle * This);

        HRESULT ( __stdcall *GetHandle )(
            ISynchronizeHandle * This,

                   HANDLE *ph);


    } ISynchronizeHandleVtbl;

    struct ISynchronizeHandle
    {
                   struct ISynchronizeHandleVtbl *lpVtbl;
    };
#line 5006 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
extern const IID IID_ISynchronizeEvent;
#line 5023 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
    typedef struct ISynchronizeEventVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            ISynchronizeEvent * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            ISynchronizeEvent * This);

        ULONG ( __stdcall *Release )(
            ISynchronizeEvent * This);

        HRESULT ( __stdcall *GetHandle )(
            ISynchronizeEvent * This,

                   HANDLE *ph);

        HRESULT ( __stdcall *SetEventHandle )(
            ISynchronizeEvent * This,

                  HANDLE *ph);


    } ISynchronizeEventVtbl;

    struct ISynchronizeEvent
    {
                   struct ISynchronizeEventVtbl *lpVtbl;
    };
#line 5097 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
extern const IID IID_ISynchronizeContainer;
#line 5122 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
    typedef struct ISynchronizeContainerVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            ISynchronizeContainer * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            ISynchronizeContainer * This);

        ULONG ( __stdcall *Release )(
            ISynchronizeContainer * This);

        HRESULT ( __stdcall *AddSynchronize )(
            ISynchronizeContainer * This,

                  ISynchronize *pSync);

        HRESULT ( __stdcall *WaitMultiple )(
            ISynchronizeContainer * This,

                  DWORD dwFlags,

                  DWORD dwTimeOut,

                      ISynchronize **ppSync);


    } ISynchronizeContainerVtbl;

    struct ISynchronizeContainer
    {
                   struct ISynchronizeContainerVtbl *lpVtbl;
    };
#line 5199 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
extern const IID IID_ISynchronizeMutex;
#line 5214 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
    typedef struct ISynchronizeMutexVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            ISynchronizeMutex * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            ISynchronizeMutex * This);

        ULONG ( __stdcall *Release )(
            ISynchronizeMutex * This);

        HRESULT ( __stdcall *Wait )(
            ISynchronizeMutex * This,
                       DWORD dwFlags,
                       DWORD dwMilliseconds);

        HRESULT ( __stdcall *Signal )(
            ISynchronizeMutex * This);

        HRESULT ( __stdcall *Reset )(
            ISynchronizeMutex * This);

        HRESULT ( __stdcall *ReleaseMutex )(
            ISynchronizeMutex * This);


    } ISynchronizeMutexVtbl;

    struct ISynchronizeMutex
    {
                   struct ISynchronizeMutexVtbl *lpVtbl;
    };
#line 5297 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
typedef ICancelMethodCalls *LPCANCELMETHODCALLS;


extern const IID IID_ICancelMethodCalls;
#line 5319 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
    typedef struct ICancelMethodCallsVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            ICancelMethodCalls * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            ICancelMethodCalls * This);

        ULONG ( __stdcall *Release )(
            ICancelMethodCalls * This);

        HRESULT ( __stdcall *Cancel )(
            ICancelMethodCalls * This,

                  ULONG ulSeconds);

        HRESULT ( __stdcall *TestCancel )(
            ICancelMethodCalls * This);


    } ICancelMethodCallsVtbl;

    struct ICancelMethodCalls
    {
                   struct ICancelMethodCallsVtbl *lpVtbl;
    };
#line 5389 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
typedef
enum tagDCOM_CALL_STATE
    {
        DCOM_NONE = 0,
        DCOM_CALL_COMPLETE = 0x1,
        DCOM_CALL_CANCELED = 0x2
    } DCOM_CALL_STATE;


extern const IID IID_IAsyncManager;
#line 5425 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
    typedef struct IAsyncManagerVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IAsyncManager * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IAsyncManager * This);

        ULONG ( __stdcall *Release )(
            IAsyncManager * This);

        HRESULT ( __stdcall *CompleteCall )(
            IAsyncManager * This,

                  HRESULT Result);

        HRESULT ( __stdcall *GetCallContext )(
            IAsyncManager * This,

                  const IID * const riid,

                      void **pInterface);

        HRESULT ( __stdcall *GetState )(
            IAsyncManager * This,

                   ULONG *pulStateFlags);


    } IAsyncManagerVtbl;

    struct IAsyncManager
    {
                   struct IAsyncManagerVtbl *lpVtbl;
    };
#line 5508 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
extern const IID IID_ICallFactory;
#line 5531 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
    typedef struct ICallFactoryVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            ICallFactory * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            ICallFactory * This);

        ULONG ( __stdcall *Release )(
            ICallFactory * This);

        HRESULT ( __stdcall *CreateCall )(
            ICallFactory * This,

                  const IID * const riid,

                      IUnknown *pCtrlUnk,

                  const IID * const riid2,

                      IUnknown **ppv);


    } ICallFactoryVtbl;

    struct ICallFactory
    {
                   struct ICallFactoryVtbl *lpVtbl;
    };
#line 5602 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
extern const IID IID_IRpcHelper;
#line 5625 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
    typedef struct IRpcHelperVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IRpcHelper * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IRpcHelper * This);

        ULONG ( __stdcall *Release )(
            IRpcHelper * This);

        HRESULT ( __stdcall *GetDCOMProtocolVersion )(
            IRpcHelper * This,

                   DWORD *pComVersion);

        HRESULT ( __stdcall *GetIIDFromOBJREF )(
            IRpcHelper * This,

                  void *pObjRef,

                      IID **piid);


    } IRpcHelperVtbl;

    struct IRpcHelper
    {
                   struct IRpcHelperVtbl *lpVtbl;
    };
#line 5700 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
extern const IID IID_IReleaseMarshalBuffers;
#line 5721 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
    typedef struct IReleaseMarshalBuffersVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IReleaseMarshalBuffers * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IReleaseMarshalBuffers * This);

        ULONG ( __stdcall *Release )(
            IReleaseMarshalBuffers * This);

        HRESULT ( __stdcall *ReleaseMarshalBuffer )(
            IReleaseMarshalBuffers * This,

                     RPCOLEMESSAGE *pMsg,

                  DWORD dwFlags,

                      IUnknown *pChnl);


    } IReleaseMarshalBuffersVtbl;

    struct IReleaseMarshalBuffers
    {
                   struct IReleaseMarshalBuffersVtbl *lpVtbl;
    };
#line 5790 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
extern const IID IID_IWaitMultiple;
#line 5813 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
    typedef struct IWaitMultipleVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IWaitMultiple * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IWaitMultiple * This);

        ULONG ( __stdcall *Release )(
            IWaitMultiple * This);

        HRESULT ( __stdcall *WaitMultiple )(
            IWaitMultiple * This,

                  DWORD timeout,

                      ISynchronize **pSync);

        HRESULT ( __stdcall *AddSynchronize )(
            IWaitMultiple * This,

                  ISynchronize *pSync);


    } IWaitMultipleVtbl;

    struct IWaitMultiple
    {
                   struct IWaitMultipleVtbl *lpVtbl;
    };
#line 5887 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
typedef IAddrTrackingControl *LPADDRTRACKINGCONTROL;


extern const IID IID_IAddrTrackingControl;
#line 5907 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
    typedef struct IAddrTrackingControlVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IAddrTrackingControl * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IAddrTrackingControl * This);

        ULONG ( __stdcall *Release )(
            IAddrTrackingControl * This);

        HRESULT ( __stdcall *EnableCOMDynamicAddrTracking )(
            IAddrTrackingControl * This);

        HRESULT ( __stdcall *DisableCOMDynamicAddrTracking )(
            IAddrTrackingControl * This);


    } IAddrTrackingControlVtbl;

    struct IAddrTrackingControl
    {
                   struct IAddrTrackingControlVtbl *lpVtbl;
    };
#line 5975 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
typedef IAddrExclusionControl *LPADDREXCLUSIONCONTROL;


extern const IID IID_IAddrExclusionControl;
#line 6001 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
    typedef struct IAddrExclusionControlVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IAddrExclusionControl * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IAddrExclusionControl * This);

        ULONG ( __stdcall *Release )(
            IAddrExclusionControl * This);

        HRESULT ( __stdcall *GetCurrentAddrExclusionList )(
            IAddrExclusionControl * This,

                  const IID * const riid,

                      void **ppEnumerator);

        HRESULT ( __stdcall *UpdateAddrExclusionList )(
            IAddrExclusionControl * This,

                  IUnknown *pEnumerator);


    } IAddrExclusionControlVtbl;

    struct IAddrExclusionControl
    {
                   struct IAddrExclusionControlVtbl *lpVtbl;
    };
#line 6076 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
extern const IID IID_IPipeByte;
#line 6098 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
    typedef struct IPipeByteVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      IPipeByte * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      IPipeByte * This);

        ULONG ( __stdcall *Release )(
                      IPipeByte * This);

        HRESULT ( __stdcall *Pull )(
                      IPipeByte * This,
                                                                                          BYTE *buf,
                       ULONG cRequest,
                                   ULONG *pcReturned);

        HRESULT ( __stdcall *Push )(
                      IPipeByte * This,
                                                             BYTE *buf,
                       ULONG cSent);


    } IPipeByteVtbl;

    struct IPipeByte
    {
                   struct IPipeByteVtbl *lpVtbl;
    };
#line 6172 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
extern const IID IID_AsyncIPipeByte;
#line 6198 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
    typedef struct AsyncIPipeByteVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      AsyncIPipeByte * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      AsyncIPipeByte * This);

        ULONG ( __stdcall *Release )(
                      AsyncIPipeByte * This);

        HRESULT ( __stdcall *Begin_Pull )(
                      AsyncIPipeByte * This,
                       ULONG cRequest);

        HRESULT ( __stdcall *Finish_Pull )(
                      AsyncIPipeByte * This,
                                                                                          BYTE *buf,
                                   ULONG *pcReturned);

        HRESULT ( __stdcall *Begin_Push )(
                      AsyncIPipeByte * This,
                                                             BYTE *buf,
                       ULONG cSent);

        HRESULT ( __stdcall *Finish_Push )(
                      AsyncIPipeByte * This);


    } AsyncIPipeByteVtbl;

    struct AsyncIPipeByte
    {
                   struct AsyncIPipeByteVtbl *lpVtbl;
    };
#line 6284 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
extern const IID IID_IPipeLong;
#line 6306 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
    typedef struct IPipeLongVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      IPipeLong * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      IPipeLong * This);

        ULONG ( __stdcall *Release )(
                      IPipeLong * This);

        HRESULT ( __stdcall *Pull )(
                      IPipeLong * This,
                                                                                          LONG *buf,
                       ULONG cRequest,
                                   ULONG *pcReturned);

        HRESULT ( __stdcall *Push )(
                      IPipeLong * This,
                                                             LONG *buf,
                       ULONG cSent);


    } IPipeLongVtbl;

    struct IPipeLong
    {
                   struct IPipeLongVtbl *lpVtbl;
    };
#line 6380 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
extern const IID IID_AsyncIPipeLong;
#line 6406 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
    typedef struct AsyncIPipeLongVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      AsyncIPipeLong * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      AsyncIPipeLong * This);

        ULONG ( __stdcall *Release )(
                      AsyncIPipeLong * This);

        HRESULT ( __stdcall *Begin_Pull )(
                      AsyncIPipeLong * This,
                       ULONG cRequest);

        HRESULT ( __stdcall *Finish_Pull )(
                      AsyncIPipeLong * This,
                                                                                          LONG *buf,
                                   ULONG *pcReturned);

        HRESULT ( __stdcall *Begin_Push )(
                      AsyncIPipeLong * This,
                                                             LONG *buf,
                       ULONG cSent);

        HRESULT ( __stdcall *Finish_Push )(
                      AsyncIPipeLong * This);


    } AsyncIPipeLongVtbl;

    struct AsyncIPipeLong
    {
                   struct AsyncIPipeLongVtbl *lpVtbl;
    };
#line 6492 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
extern const IID IID_IPipeDouble;
#line 6514 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
    typedef struct IPipeDoubleVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      IPipeDouble * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      IPipeDouble * This);

        ULONG ( __stdcall *Release )(
                      IPipeDouble * This);

        HRESULT ( __stdcall *Pull )(
                      IPipeDouble * This,
                                                                                          DOUBLE *buf,
                       ULONG cRequest,
                                   ULONG *pcReturned);

        HRESULT ( __stdcall *Push )(
                      IPipeDouble * This,
                                                             DOUBLE *buf,
                       ULONG cSent);


    } IPipeDoubleVtbl;

    struct IPipeDouble
    {
                   struct IPipeDoubleVtbl *lpVtbl;
    };
#line 6588 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
extern const IID IID_AsyncIPipeDouble;
#line 6614 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
    typedef struct AsyncIPipeDoubleVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      AsyncIPipeDouble * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      AsyncIPipeDouble * This);

        ULONG ( __stdcall *Release )(
                      AsyncIPipeDouble * This);

        HRESULT ( __stdcall *Begin_Pull )(
                      AsyncIPipeDouble * This,
                       ULONG cRequest);

        HRESULT ( __stdcall *Finish_Pull )(
                      AsyncIPipeDouble * This,
                                                                                          DOUBLE *buf,
                                   ULONG *pcReturned);

        HRESULT ( __stdcall *Begin_Push )(
                      AsyncIPipeDouble * This,
                                                             DOUBLE *buf,
                       ULONG cSent);

        HRESULT ( __stdcall *Finish_Push )(
                      AsyncIPipeDouble * This);


    } AsyncIPipeDoubleVtbl;

    struct AsyncIPipeDouble
    {
                   struct AsyncIPipeDoubleVtbl *lpVtbl;
    };
#line 7163 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
#pragma endregion
#pragma region Application Family or OneCore Family

typedef
enum _APTTYPEQUALIFIER
    {
        APTTYPEQUALIFIER_NONE = 0,
        APTTYPEQUALIFIER_IMPLICIT_MTA = 1,
        APTTYPEQUALIFIER_NA_ON_MTA = 2,
        APTTYPEQUALIFIER_NA_ON_STA = 3,
        APTTYPEQUALIFIER_NA_ON_IMPLICIT_MTA = 4,
        APTTYPEQUALIFIER_NA_ON_MAINSTA = 5,
        APTTYPEQUALIFIER_APPLICATION_STA = 6
    } APTTYPEQUALIFIER;

typedef
enum _APTTYPE
    {
        APTTYPE_CURRENT = -1,
        APTTYPE_STA = 0,
        APTTYPE_MTA = 1,
        APTTYPE_NA = 2,
        APTTYPE_MAINSTA = 3
    } APTTYPE;


#pragma endregion
#pragma region Desktop Family or OneCore Family

typedef
enum _THDTYPE
    {
        THDTYPE_BLOCKMESSAGES = 0,
        THDTYPE_PROCESSMESSAGES = 1
    } THDTYPE;

typedef DWORD APARTMENTID;



extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0048_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0048_v0_0_s_ifspec;
#line 7213 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
extern const IID IID_IComThreadingInfo;
#line 7242 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
    typedef struct IComThreadingInfoVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IComThreadingInfo * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IComThreadingInfo * This);

        ULONG ( __stdcall *Release )(
            IComThreadingInfo * This);

        HRESULT ( __stdcall *GetCurrentApartmentType )(
            IComThreadingInfo * This,

                   APTTYPE *pAptType);

        HRESULT ( __stdcall *GetCurrentThreadType )(
            IComThreadingInfo * This,

                   THDTYPE *pThreadType);

        HRESULT ( __stdcall *GetCurrentLogicalThreadId )(
            IComThreadingInfo * This,

                   GUID *pguidLogicalThreadId);

        HRESULT ( __stdcall *SetCurrentLogicalThreadId )(
            IComThreadingInfo * This,

                  const GUID * const rguid);


    } IComThreadingInfoVtbl;

    struct IComThreadingInfo
    {
                   struct IComThreadingInfoVtbl *lpVtbl;
    };
#line 7331 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
extern const IID IID_IProcessInitControl;
#line 7347 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
    typedef struct IProcessInitControlVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      IProcessInitControl * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      IProcessInitControl * This);

        ULONG ( __stdcall *Release )(
                      IProcessInitControl * This);

        HRESULT ( __stdcall *ResetInitializerTimeout )(
                      IProcessInitControl * This,
                       DWORD dwSecondsRemaining);


    } IProcessInitControlVtbl;

    struct IProcessInitControl
    {
                   struct IProcessInitControlVtbl *lpVtbl;
    };
#line 7411 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
extern const IID IID_IFastRundown;
#line 7424 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
    typedef struct IFastRundownVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IFastRundown * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IFastRundown * This);

        ULONG ( __stdcall *Release )(
            IFastRundown * This);


    } IFastRundownVtbl;

    struct IFastRundown
    {
                   struct IFastRundownVtbl *lpVtbl;
    };
#line 7477 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
typedef
enum CO_MARSHALING_CONTEXT_ATTRIBUTES
    {
        CO_MARSHALING_SOURCE_IS_APP_CONTAINER = 0,
        CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_1 = 0x80000000,
        CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_2 = 0x80000001,
        CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_3 = 0x80000002,
        CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_4 = 0x80000003,
        CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_5 = 0x80000004,
        CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_6 = 0x80000005,
        CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_7 = 0x80000006
    } CO_MARSHALING_CONTEXT_ATTRIBUTES;



extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0051_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0051_v0_0_s_ifspec;
#line 7502 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
extern const IID IID_IMarshalingStream;
#line 7519 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
    typedef struct IMarshalingStreamVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IMarshalingStream * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IMarshalingStream * This);

        ULONG ( __stdcall *Release )(
            IMarshalingStream * This);

                      HRESULT ( __stdcall *Read )(
            IMarshalingStream * This,

                                                 void *pv,

                  ULONG cb,

                       ULONG *pcbRead);

                      HRESULT ( __stdcall *Write )(
            IMarshalingStream * This,

                                  const void *pv,

                  ULONG cb,

                       ULONG *pcbWritten);

                      HRESULT ( __stdcall *Seek )(
            IMarshalingStream * This,
                       LARGE_INTEGER dlibMove,
                       DWORD dwOrigin,

                       ULARGE_INTEGER *plibNewPosition);

        HRESULT ( __stdcall *SetSize )(
            IMarshalingStream * This,
                       ULARGE_INTEGER libNewSize);

                      HRESULT ( __stdcall *CopyTo )(
            IMarshalingStream * This,

                  IStream *pstm,
                       ULARGE_INTEGER cb,

                       ULARGE_INTEGER *pcbRead,

                       ULARGE_INTEGER *pcbWritten);

        HRESULT ( __stdcall *Commit )(
            IMarshalingStream * This,
                       DWORD grfCommitFlags);

        HRESULT ( __stdcall *Revert )(
            IMarshalingStream * This);

        HRESULT ( __stdcall *LockRegion )(
            IMarshalingStream * This,
                       ULARGE_INTEGER libOffset,
                       ULARGE_INTEGER cb,
                       DWORD dwLockType);

        HRESULT ( __stdcall *UnlockRegion )(
            IMarshalingStream * This,
                       ULARGE_INTEGER libOffset,
                       ULARGE_INTEGER cb,
                       DWORD dwLockType);

        HRESULT ( __stdcall *Stat )(
            IMarshalingStream * This,
                        STATSTG *pstatstg,
                       DWORD grfStatFlag);

        HRESULT ( __stdcall *Clone )(
            IMarshalingStream * This,
                        IStream **ppstm);

        HRESULT ( __stdcall *GetMarshalingContextAttribute )(
            IMarshalingStream * This,
                       CO_MARSHALING_CONTEXT_ATTRIBUTES attribute,
                        ULONG_PTR *pAttributeValue);


    } IMarshalingStreamVtbl;

    struct IMarshalingStream
    {
                   struct IMarshalingStreamVtbl *lpVtbl;
    };
#line 7683 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
#pragma endregion
#pragma region Application Family or OneCore Family



extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0052_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0052_v0_0_s_ifspec;
#line 7725 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
extern const IID IID_IAgileReference;
#line 7742 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
    typedef struct IAgileReferenceVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IAgileReference * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IAgileReference * This);

        ULONG ( __stdcall *Release )(
            IAgileReference * This);

        HRESULT ( __stdcall *Resolve )(
            IAgileReference * This,
                       const IID * const riid,
                                        void **ppvObjectReference);


    } IAgileReferenceVtbl;

    struct IAgileReference
    {
                   struct IAgileReferenceVtbl *lpVtbl;
    };
#line 7805 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
#pragma endregion
#pragma region Application Family or OneCore Family

extern const GUID IID_ICallbackWithNoReentrancyToApplicationSTA;

#pragma endregion
#line 7822 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0053_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0053_v0_0_s_ifspec;



              HRESULT __stdcall IEnumUnknown_Next_Proxy(
    IEnumUnknown * This,

          ULONG celt,

                                         IUnknown **rgelt,

               ULONG *pceltFetched);


                HRESULT __stdcall IEnumUnknown_Next_Stub(
              IEnumUnknown * This,
               ULONG celt,
                                                                                IUnknown **rgelt,
                           ULONG *pceltFetched);

              HRESULT __stdcall IEnumString_Next_Proxy(
    IEnumString * This,
               ULONG celt,

                                         LPOLESTR *rgelt,

               ULONG *pceltFetched);


                HRESULT __stdcall IEnumString_Next_Stub(
              IEnumString * This,
               ULONG celt,
                                                                                LPOLESTR *rgelt,
                           ULONG *pceltFetched);

              HRESULT __stdcall ISequentialStream_Read_Proxy(
    ISequentialStream * This,

                                         void *pv,

          ULONG cb,

               ULONG *pcbRead);


                HRESULT __stdcall ISequentialStream_Read_Stub(
              ISequentialStream * This,
                                                                         byte *pv,
               ULONG cb,
                           ULONG *pcbRead);

              HRESULT __stdcall ISequentialStream_Write_Proxy(
    ISequentialStream * This,

                          const void *pv,

          ULONG cb,

               ULONG *pcbWritten);


                HRESULT __stdcall ISequentialStream_Write_Stub(
              ISequentialStream * This,
                                                  const byte *pv,
               ULONG cb,
                           ULONG *pcbWritten);

              HRESULT __stdcall IStream_Seek_Proxy(
    IStream * This,
               LARGE_INTEGER dlibMove,
               DWORD dwOrigin,

               ULARGE_INTEGER *plibNewPosition);


                HRESULT __stdcall IStream_Seek_Stub(
              IStream * This,
               LARGE_INTEGER dlibMove,
               DWORD dwOrigin,
                           ULARGE_INTEGER *plibNewPosition);

              HRESULT __stdcall IStream_CopyTo_Proxy(
    IStream * This,

          IStream *pstm,
               ULARGE_INTEGER cb,

               ULARGE_INTEGER *pcbRead,

               ULARGE_INTEGER *pcbWritten);


                HRESULT __stdcall IStream_CopyTo_Stub(
              IStream * This,
                                     IStream *pstm,
               ULARGE_INTEGER cb,
                           ULARGE_INTEGER *pcbRead,
                           ULARGE_INTEGER *pcbWritten);
#line 7933 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidlbase.h"
#pragma option pop
#line 407 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\combaseapi.h"


#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\guiddef.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 217 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\guiddef.h"
#pragma option pop
#line 409 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\combaseapi.h"




#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\cguid.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 31 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\cguid.h"
#pragma region Application Family


extern const IID GUID_NULL;


#pragma endregion

#pragma region Desktop Family



extern const IID CATID_MARSHALER;


extern const IID IID_IRpcChannel;
extern const IID IID_IRpcStub;
extern const IID IID_IStubManager;
extern const IID IID_IRpcProxy;
extern const IID IID_IProxyManager;
extern const IID IID_IPSFactory;
extern const IID IID_IInternalMoniker;
extern const IID IID_IDfReserved1;
extern const IID IID_IDfReserved2;
extern const IID IID_IDfReserved3;
extern const CLSID CLSID_StdMarshal;
extern const CLSID CLSID_AggStdMarshal;
extern const CLSID CLSID_StdAsyncActManager;
extern const IID IID_IStub;
extern const IID IID_IProxy;
extern const IID IID_IEnumGeneric;
extern const IID IID_IEnumHolder;
extern const IID IID_IEnumCallback;
extern const IID IID_IOleManager;
extern const IID IID_IOlePresObj;
extern const IID IID_IDebug;
extern const IID IID_IDebugStream;
extern const CLSID CLSID_PSGenObject;
extern const CLSID CLSID_PSClientSite;
extern const CLSID CLSID_PSClassObject;
extern const CLSID CLSID_PSInPlaceActive;
extern const CLSID CLSID_PSInPlaceFrame;
extern const CLSID CLSID_PSDragDrop;
extern const CLSID CLSID_PSBindCtx;
extern const CLSID CLSID_PSEnumerators;
extern const CLSID CLSID_StaticMetafile;
extern const CLSID CLSID_StaticDib;
extern const CLSID CID_CDfsVolume;
extern const CLSID CLSID_DCOMAccessControl;


#pragma endregion

#pragma region Application Family


extern const CLSID CLSID_GlobalOptions;
extern const CLSID CLSID_StdGlobalInterfaceTable;


#pragma endregion

#pragma region Desktop Family


extern const CLSID CLSID_ComBinding;
extern const CLSID CLSID_StdEvent;
extern const CLSID CLSID_ManualResetEvent;
extern const CLSID CLSID_SynchronizeContainer;


extern const CLSID CLSID_AddrControl;
#line 118 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\cguid.h"
extern const CLSID CLSID_CCDFormKrnl;
extern const CLSID CLSID_CCDPropertyPage;
extern const CLSID CLSID_CCDFormDialog;




extern const CLSID CLSID_CCDCommandButton;
extern const CLSID CLSID_CCDComboBox;
extern const CLSID CLSID_CCDTextBox;
extern const CLSID CLSID_CCDCheckBox;
extern const CLSID CLSID_CCDLabel;
extern const CLSID CLSID_CCDOptionButton;
extern const CLSID CLSID_CCDListBox;
extern const CLSID CLSID_CCDScrollBar;
extern const CLSID CLSID_CCDGroupBox;




extern const CLSID CLSID_CCDGeneralPropertyPage;
extern const CLSID CLSID_CCDGenericPropertyPage;
extern const CLSID CLSID_CCDFontPropertyPage;
extern const CLSID CLSID_CCDColorPropertyPage;
extern const CLSID CLSID_CCDLabelPropertyPage;
extern const CLSID CLSID_CCDCheckBoxPropertyPage;
extern const CLSID CLSID_CCDTextBoxPropertyPage;
extern const CLSID CLSID_CCDOptionButtonPropertyPage;
extern const CLSID CLSID_CCDListBoxPropertyPage;
extern const CLSID CLSID_CCDCommandButtonPropertyPage;
extern const CLSID CLSID_CCDComboBoxPropertyPage;
extern const CLSID CLSID_CCDScrollBarPropertyPage;
extern const CLSID CLSID_CCDGroupBoxPropertyPage;
extern const CLSID CLSID_CCDXObjectPropertyPage;

extern const CLSID CLSID_CStdPropertyFrame;

extern const CLSID CLSID_CFormPropertyPage;
extern const CLSID CLSID_CGridPropertyPage;

extern const CLSID CLSID_CWSJArticlePage;
extern const CLSID CLSID_CSystemPage;
extern const CLSID CLSID_IdentityUnmarshal;


#pragma endregion

#pragma region Application Family


extern const CLSID CLSID_InProcFreeMarshaler;


#pragma endregion

#pragma region Desktop Family


extern const CLSID CLSID_Picture_Metafile;
extern const CLSID CLSID_Picture_EnhMetafile;
extern const CLSID CLSID_Picture_Dib;




extern const GUID GUID_TRISTATE;


#pragma endregion
#line 201 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\cguid.h"
#pragma option pop
#line 413 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\combaseapi.h"




#pragma endregion



#pragma region Desktop or OneCore Family



 extern HRESULT __stdcall
CoGetMalloc(
         DWORD dwMemContext,
             LPMALLOC * ppMalloc
    );



#pragma endregion

#pragma region Application or OneCore Family



 extern HRESULT __stdcall
CreateStreamOnHGlobal(
    HGLOBAL hGlobal,
         BOOL fDeleteOnRelease,
             LPSTREAM * ppstm
    );


               extern HRESULT __stdcall
GetHGlobalFromStream(
         LPSTREAM pstm,
          HGLOBAL * phglobal
    );




extern void __stdcall
CoUninitialize(
    void
    );



#pragma endregion

#pragma region Desktop or OneCore Family



extern DWORD __stdcall
CoGetCurrentProcess(
    void
    );



#pragma endregion




#pragma region Application or OneCore Family



 extern HRESULT __stdcall
CoInitializeEx(
             LPVOID pvReserved,
         DWORD dwCoInit
    );



#pragma endregion

#pragma region Desktop or OneCore Family



extern HRESULT __stdcall
CoGetCallerTID(
          LPDWORD lpdwTID
    );




#pragma endregion

#pragma region Application or OneCore Family



extern HRESULT __stdcall
CoGetCurrentLogicalThreadId(
          GUID * pguid
    );



#pragma endregion






#pragma region Application or OneCore Family



 extern HRESULT __stdcall
CoGetContextToken(
          ULONG_PTR * pToken
    );



#pragma endregion

#pragma region Desktop or OneCore Family



 extern HRESULT __stdcall
CoGetDefaultContext(
         APTTYPE aptType,
         const IID * const riid,
             void ** ppv
    );



#pragma endregion



#pragma region Application or OneCore Family
#line 576 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\combaseapi.h"
#pragma endregion
#line 647 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\combaseapi.h"
#pragma region Application or OneCore Family



 extern HRESULT __stdcall
CoGetObjectContext(
         const IID * const riid,
             LPVOID * ppv
    );



#pragma endregion

#pragma region Desktop or OneCore Family





 extern HRESULT __stdcall
CoGetClassObject(
         const IID * const rclsid,
         DWORD dwClsContext,
             LPVOID pvReserved,
         const IID * const riid,
             LPVOID * ppv
    );


#pragma endregion

#pragma region Application or OneCore Family



 extern HRESULT __stdcall
CoRegisterClassObject(
         const IID * const rclsid,
         LPUNKNOWN pUnk,
         DWORD dwClsContext,
         DWORD flags,
          LPDWORD lpdwRegister
    );

extern HRESULT __stdcall
CoRevokeClassObject(
         DWORD dwRegister
    );

               extern HRESULT __stdcall
CoResumeClassObjects(
    void
    );

               extern HRESULT __stdcall
CoSuspendClassObjects(
    void
    );



#pragma endregion

#pragma region Desktop or OneCore Family



extern ULONG __stdcall
CoAddRefServerProcess(
    void
    );


extern ULONG __stdcall
CoReleaseServerProcess(
    void
    );


               extern HRESULT __stdcall
CoGetPSClsid(
         const IID * const riid,
          CLSID * pClsid
    );

               extern HRESULT __stdcall
CoRegisterPSClsid(
         const IID * const riid,
         const IID * const rclsid
    );



               extern HRESULT __stdcall
CoRegisterSurrogate(
         LPSURROGATE pSurrogate
    );



#pragma endregion

#pragma region Application or OneCore Family





 extern HRESULT __stdcall
CoGetMarshalSizeMax(
          ULONG * pulSize,
         const IID * const riid,
         LPUNKNOWN pUnk,
         DWORD dwDestContext,
             LPVOID pvDestContext,
         DWORD mshlflags
    );

               extern HRESULT __stdcall
CoMarshalInterface(
         LPSTREAM pStm,
         const IID * const riid,
         LPUNKNOWN pUnk,
         DWORD dwDestContext,
             LPVOID pvDestContext,
         DWORD mshlflags
    );

               extern HRESULT __stdcall
CoUnmarshalInterface(
         LPSTREAM pStm,
         const IID * const riid,
                 LPVOID * ppv
    );



#pragma endregion

#pragma region Desktop or OneCore Family



extern HRESULT __stdcall
CoMarshalHresult(
         LPSTREAM pstm,
         HRESULT hresult
    );

extern HRESULT __stdcall
CoUnmarshalHresult(
         LPSTREAM pstm,
          HRESULT * phresult
    );



#pragma endregion

#pragma region Application or OneCore Family



 extern HRESULT __stdcall
CoReleaseMarshalData(
         LPSTREAM pStm
    );

               extern HRESULT __stdcall
CoDisconnectObject(
         LPUNKNOWN pUnk,
         DWORD dwReserved
    );



#pragma endregion

#pragma region Desktop or OneCore Family



 extern HRESULT __stdcall
CoLockObjectExternal(
         LPUNKNOWN pUnk,
         BOOL fLock,
         BOOL fLastUnlockReleases
    );



#pragma endregion

#pragma region Application or OneCore Family



 extern HRESULT __stdcall
CoGetStandardMarshal(
         const IID * const riid,
         LPUNKNOWN pUnk,
         DWORD dwDestContext,
             LPVOID pvDestContext,
         DWORD mshlflags,
             LPMARSHAL * ppMarshal
    );




#pragma endregion

#pragma region Desktop or OneCore Family



 extern HRESULT __stdcall
CoGetStdMarshalEx(
         LPUNKNOWN pUnkOuter,
         DWORD smexflags,
             LPUNKNOWN * ppUnkInner
    );



#pragma endregion

#pragma region Application or OneCore Family




typedef enum tagSTDMSHLFLAGS
{
    SMEXF_SERVER = 0x01,
    SMEXF_HANDLER = 0x02
} STDMSHLFLAGS;



#pragma endregion

#pragma region Desktop or OneCore Family



extern BOOL __stdcall
CoIsHandlerConnected(
         LPUNKNOWN pUnk
    );




#pragma endregion

#pragma region Application or OneCore Family




 extern HRESULT __stdcall
CoMarshalInterThreadInterfaceInStream(
         const IID * const riid,
         LPUNKNOWN pUnk,
             LPSTREAM * ppStm
    );


               extern HRESULT __stdcall
CoGetInterfaceAndReleaseStream(
         LPSTREAM pStm,
         const IID * const iid,
                 LPVOID * ppv
    );


               extern HRESULT __stdcall
CoCreateFreeThreadedMarshaler(
             LPUNKNOWN punkOuter,
             LPUNKNOWN * ppunkMarshal
    );


extern void __stdcall
CoFreeUnusedLibraries(
    void
    );



extern void __stdcall
CoFreeUnusedLibrariesEx(
         DWORD dwUnloadDelay,
         DWORD dwReserved
    );




#pragma endregion
#line 971 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\combaseapi.h"
#pragma region Application or OneCore Family





 extern HRESULT __stdcall
CoInitializeSecurity(
             PSECURITY_DESCRIPTOR pSecDesc,
         LONG cAuthSvc,
                             SOLE_AUTHENTICATION_SERVICE * asAuthSvc,
             void * pReserved1,
         DWORD dwAuthnLevel,
         DWORD dwImpLevel,
             void * pAuthList,
         DWORD dwCapabilities,
             void * pReserved3
    );



#pragma endregion

#pragma region Desktop or OneCore Family



 extern HRESULT __stdcall
CoGetCallContext(
         const IID * const riid,
             void ** ppInterface
    );


               extern HRESULT __stdcall
CoQueryProxyBlanket(
         IUnknown * pProxy,
              DWORD * pwAuthnSvc,
              DWORD * pAuthzSvc,
                 LPOLESTR * pServerPrincName,
              DWORD * pAuthnLevel,
              DWORD * pImpLevel,
              RPC_AUTH_IDENTITY_HANDLE * pAuthInfo,
              DWORD * pCapabilites
    );


               extern HRESULT __stdcall
CoSetProxyBlanket(
         IUnknown * pProxy,
         DWORD dwAuthnSvc,
         DWORD dwAuthzSvc,
             OLECHAR * pServerPrincName,
         DWORD dwAuthnLevel,
         DWORD dwImpLevel,
             RPC_AUTH_IDENTITY_HANDLE pAuthInfo,
         DWORD dwCapabilities
    );


               extern HRESULT __stdcall
CoCopyProxy(
         IUnknown * pProxy,
             IUnknown ** ppCopy
    );


               extern HRESULT __stdcall
CoQueryClientBlanket(
              DWORD * pAuthnSvc,
              DWORD * pAuthzSvc,
                 LPOLESTR * pServerPrincName,
              DWORD * pAuthnLevel,
              DWORD * pImpLevel,
                                                                        RPC_AUTHZ_HANDLE * pPrivs,
                DWORD * pCapabilities
    );


               extern HRESULT __stdcall
CoImpersonateClient(
    void
    );


               extern HRESULT __stdcall
CoRevertToSelf(
    void
    );


               extern HRESULT __stdcall
CoQueryAuthenticationServices(
          DWORD * pcAuthSvc,
                                       SOLE_AUTHENTICATION_SERVICE ** asAuthSvc
    );



#pragma endregion

#pragma region Application or OneCore Family



 extern HRESULT __stdcall
CoSwitchCallContext(
             IUnknown * pNewObject,
             IUnknown ** ppOldObject
    );
#line 1090 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\combaseapi.h"
#pragma endregion




#pragma region Desktop or OneCore Family





 extern HRESULT __stdcall
CoCreateInstance(
         const IID * const rclsid,
             LPUNKNOWN pUnkOuter,
         DWORD dwClsContext,
         const IID * const riid,
                                                                           LPVOID * ppv
    );






               extern HRESULT __stdcall
CoCreateInstanceEx(
         const IID * const Clsid,
             IUnknown * punkOuter,
         DWORD dwClsCtx,
             COSERVERINFO * pServerInfo,
         DWORD dwCount,
                             MULTI_QI * pResults
    );







extern HRESULT __stdcall
CoRegisterActivationFilter(
         IActivationFilter * pActivationFilter
    );





#pragma endregion
#line 1166 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\combaseapi.h"
#pragma region Application or OneCore Family
#line 1213 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\combaseapi.h"
#pragma endregion





#pragma region Desktop or OneCore Family



 extern HRESULT __stdcall
CoGetCancelObject(
         DWORD dwThreadId,
         const IID * const iid,
             void ** ppUnk
    );


               extern HRESULT __stdcall
CoSetCancelObject(
             IUnknown * pUnk
    );


               extern HRESULT __stdcall
CoCancelCall(
         DWORD dwThreadId,
         ULONG ulTimeout
    );


               extern HRESULT __stdcall
CoTestCancel(
    void
    );


               extern HRESULT __stdcall
CoEnableCallCancellation(
             LPVOID pReserved
    );


               extern HRESULT __stdcall
CoDisableCallCancellation(
             LPVOID pReserved
    );



#pragma endregion



#pragma region Application or OneCore Family





 extern HRESULT __stdcall
StringFromCLSID(
         const IID * const rclsid,
             LPOLESTR * lplpsz
    );

               extern HRESULT __stdcall
CLSIDFromString(
         LPCOLESTR lpsz,
          LPCLSID pclsid
    );

               extern HRESULT __stdcall
StringFromIID(
         const IID * const rclsid,
             LPOLESTR * lplpsz
    );

               extern HRESULT __stdcall
IIDFromString(
         LPCOLESTR lpsz,
          LPIID lpiid
    );



#pragma endregion

#pragma region Desktop or OneCore Family



 extern HRESULT __stdcall
ProgIDFromCLSID(
         const IID * const clsid,
             LPOLESTR * lplpszProgID
    );

               extern HRESULT __stdcall
CLSIDFromProgID(
         LPCOLESTR lpszProgID,
          LPCLSID lpclsid
    );



#pragma endregion

#pragma region Application or OneCore Family



 extern int __stdcall
StringFromGUID2(
         const GUID * const rguid,
                                    LPOLESTR lpsz,
         int cchMax
    );


               extern HRESULT __stdcall
CoCreateGuid(
          GUID * pguid
    );




typedef struct tagPROPVARIANT PROPVARIANT;


extern HRESULT __stdcall
PropVariantCopy(
          PROPVARIANT * pvarDest,
         const PROPVARIANT * pvarSrc
    );


extern HRESULT __stdcall
PropVariantClear(
            PROPVARIANT * pvar
    );


extern HRESULT __stdcall
FreePropVariantArray(
         ULONG cVariants,
                               PROPVARIANT * rgvars
    );



#pragma endregion




#pragma region Desktop or OneCore Family




#pragma endregion







#pragma region Desktop or OneCore Family



 extern HRESULT __stdcall
CoWaitForMultipleHandles(
         DWORD dwFlags,
         DWORD dwTimeout,
         ULONG cHandles,
                         LPHANDLE pHandles,
          LPDWORD lpdwindex
    );




typedef enum tagCOWAIT_FLAGS
{
  COWAIT_DEFAULT = 0,
  COWAIT_WAITALL = 1,
  COWAIT_ALERTABLE = 2,
  COWAIT_INPUTAVAILABLE = 4,
  COWAIT_DISPATCH_CALLS = 8,
  COWAIT_DISPATCH_WINDOW_MESSAGES = 0x10,
}COWAIT_FLAGS;
#line 1434 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\combaseapi.h"
#pragma endregion



#pragma region Desktop or OneCore Family



 extern HRESULT __stdcall
CoGetTreatAsClass(
         const IID * const clsidOld,
          LPCLSID pClsidNew
    );



#pragma endregion






#pragma region Desktop or OneCore Family



 extern HRESULT __stdcall
CoInvalidateRemoteMachineBindings(
         LPOLESTR pszMachineName
    );



#pragma endregion
#line 1504 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\combaseapi.h"
#pragma region Application or OneCore Family








typedef HRESULT (__stdcall * LPFNGETCLASSOBJECT) (const IID * const, const IID * const, LPVOID *);
typedef HRESULT (__stdcall * LPFNCANUNLOADNOW)(void);


extern HRESULT __stdcall DllGetClassObject( const IID * const rclsid, const IID * const riid, LPVOID * ppv);


extern HRESULT __stdcall DllCanUnloadNow(void);



extern LPVOID __stdcall
CoTaskMemAlloc(
         SIZE_T cb
    );

extern LPVOID __stdcall
CoTaskMemRealloc(
                                                       LPVOID pv,
         SIZE_T cb
    );

extern void __stdcall
CoTaskMemFree(
                                                       LPVOID pv
    );




#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/poppack.h"
#line 29 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/poppack.h"
#pragma pack(pop)
#line 1542 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\combaseapi.h"




#pragma endregion


#pragma option pop
#line 28 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objbase.h"

#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\coml2api.h"
#line 14 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\coml2api.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 40 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\coml2api.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\combaseapi.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 35 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\combaseapi.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpc.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 227 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpc.h"
#pragma option pop
#line 35 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\combaseapi.h"

#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcndr.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 3292 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcndr.h"
#pragma option pop
#line 36 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\combaseapi.h"
#line 1549 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\combaseapi.h"
#pragma option pop
#line 40 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\coml2api.h"

#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 22 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpc.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 227 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpc.h"
#pragma option pop
#line 22 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"

#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcndr.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 3292 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcndr.h"
#pragma option pop
#line 23 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
#line 444 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
typedef struct IMallocSpy IMallocSpy;






typedef struct IBindCtx IBindCtx;






typedef struct IEnumMoniker IEnumMoniker;






typedef struct IRunnableObject IRunnableObject;






typedef struct IRunningObjectTable IRunningObjectTable;






typedef struct IPersist IPersist;






typedef struct IPersistStream IPersistStream;






typedef struct IMoniker IMoniker;






typedef struct IROTData IROTData;






typedef struct IEnumSTATSTG IEnumSTATSTG;






typedef struct IStorage IStorage;






typedef struct IPersistFile IPersistFile;






typedef struct IPersistStorage IPersistStorage;






typedef struct ILockBytes ILockBytes;






typedef struct IEnumFORMATETC IEnumFORMATETC;






typedef struct IEnumSTATDATA IEnumSTATDATA;






typedef struct IRootStorage IRootStorage;






typedef struct IAdviseSink IAdviseSink;






typedef struct AsyncIAdviseSink AsyncIAdviseSink;






typedef struct IAdviseSink2 IAdviseSink2;






typedef struct AsyncIAdviseSink2 AsyncIAdviseSink2;






typedef struct IDataObject IDataObject;






typedef struct IDataAdviseHolder IDataAdviseHolder;






typedef struct IMessageFilter IMessageFilter;






typedef struct IClassActivator IClassActivator;






typedef struct IFillLockBytes IFillLockBytes;






typedef struct IProgressNotify IProgressNotify;






typedef struct ILayoutStorage ILayoutStorage;






typedef struct IBlockingLock IBlockingLock;






typedef struct ITimeAndNoticeControl ITimeAndNoticeControl;






typedef struct IOplockStorage IOplockStorage;






typedef struct IDirectWriterLock IDirectWriterLock;






typedef struct IUrlMon IUrlMon;






typedef struct IForegroundTransfer IForegroundTransfer;






typedef struct IThumbnailExtractor IThumbnailExtractor;






typedef struct IDummyHICONIncluder IDummyHICONIncluder;






typedef struct IProcessLock IProcessLock;






typedef struct ISurrogateService ISurrogateService;






typedef struct IInitializeSpy IInitializeSpy;






typedef struct IApartmentShutdown IApartmentShutdown;






#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/unknwn.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 22 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/unknwn.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpc.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 227 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpc.h"
#pragma option pop
#line 22 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/unknwn.h"

#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcndr.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 3292 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcndr.h"
#pragma option pop
#line 23 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/unknwn.h"
#line 65 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/unknwn.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/wtypes.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 22 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/wtypes.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpc.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 227 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpc.h"
#pragma option pop
#line 22 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/wtypes.h"

#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcndr.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 3292 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcndr.h"
#pragma option pop
#line 23 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/wtypes.h"
#line 40 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/wtypes.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wtypesbase.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 22 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wtypesbase.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpc.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 227 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpc.h"
#pragma option pop
#line 22 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wtypesbase.h"

#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcndr.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 3292 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcndr.h"
#pragma option pop
#line 23 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wtypesbase.h"
#line 564 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\wtypesbase.h"
#pragma option pop
#line 40 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/wtypes.h"
#line 65 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/wtypes.h"
extern RPC_IF_HANDLE __MIDL_itf_wtypes_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wtypes_0000_0000_v0_0_s_ifspec;







typedef struct tagRemHGLOBAL
    {
    LONG fNullHGlobal;
    ULONG cbData;
                    byte data[ 1 ];
    } RemHGLOBAL;

typedef struct tagRemHMETAFILEPICT
    {
    LONG mm;
    LONG xExt;
    LONG yExt;
    ULONG cbData;
                    byte data[ 1 ];
    } RemHMETAFILEPICT;

typedef struct tagRemHENHMETAFILE
    {
    ULONG cbData;
                    byte data[ 1 ];
    } RemHENHMETAFILE;

typedef struct tagRemHBITMAP
    {
    ULONG cbData;
                    byte data[ 1 ];
    } RemHBITMAP;

typedef struct tagRemHPALETTE
    {
    ULONG cbData;
                    byte data[ 1 ];
    } RemHPALETTE;

typedef struct tagRemBRUSH
    {
    ULONG cbData;
                    byte data[ 1 ];
    } RemHBRUSH;
#line 346 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/wtypes.h"
typedef
enum tagDVASPECT
    {
        DVASPECT_CONTENT = 1,
        DVASPECT_THUMBNAIL = 2,
        DVASPECT_ICON = 4,
        DVASPECT_DOCPRINT = 8
    } DVASPECT;

typedef
enum tagSTGC
    {
        STGC_DEFAULT = 0,
        STGC_OVERWRITE = 1,
        STGC_ONLYIFCURRENT = 2,
        STGC_DANGEROUSLYCOMMITMERELYTODISKCACHE = 4,
        STGC_CONSOLIDATE = 8
    } STGC;

typedef
enum tagSTGMOVE
    {
        STGMOVE_MOVE = 0,
        STGMOVE_COPY = 1,
        STGMOVE_SHALLOWCOPY = 2
    } STGMOVE;

typedef
enum tagSTATFLAG
    {
        STATFLAG_DEFAULT = 0,
        STATFLAG_NONAME = 1,
        STATFLAG_NOOPEN = 2
    } STATFLAG;

typedef void *HCONTEXT;



typedef DWORD LCID;




typedef USHORT LANGID;
#line 399 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/wtypes.h"
typedef struct _userCLIPFORMAT
    {
    LONG fContext;
                                          union __MIDL_IWinTypes_0001
        {
                       DWORD dwValue;
                               wchar_t *pwszName;
        } u;
    } userCLIPFORMAT;

typedef userCLIPFORMAT *wireCLIPFORMAT;

typedef WORD CLIPFORMAT;

typedef struct _GDI_NONREMOTE
    {
    LONG fContext;
                                          union __MIDL_IWinTypes_0002
        {
                       LONG hInproc;
                       DWORD_BLOB *hRemote;
        } u;
    } GDI_NONREMOTE;

typedef struct _userHGLOBAL
    {
    LONG fContext;
                                          union __MIDL_IWinTypes_0003
        {
                       LONG hInproc;
                       FLAGGED_BYTE_BLOB *hRemote;
                       __int64 hInproc64;
        } u;
    } userHGLOBAL;

typedef userHGLOBAL *wireHGLOBAL;

typedef struct _userHMETAFILE
    {
    LONG fContext;
                                          union __MIDL_IWinTypes_0004
        {
                       LONG hInproc;
                       BYTE_BLOB *hRemote;
                       __int64 hInproc64;
        } u;
    } userHMETAFILE;

typedef struct _remoteMETAFILEPICT
    {
    LONG mm;
    LONG xExt;
    LONG yExt;
    userHMETAFILE *hMF;
    } remoteMETAFILEPICT;

typedef struct _userHMETAFILEPICT
    {
    LONG fContext;
                                          union __MIDL_IWinTypes_0005
        {
                       LONG hInproc;
                       remoteMETAFILEPICT *hRemote;
                       __int64 hInproc64;
        } u;
    } userHMETAFILEPICT;

typedef struct _userHENHMETAFILE
    {
    LONG fContext;
                                          union __MIDL_IWinTypes_0006
        {
                       LONG hInproc;
                       BYTE_BLOB *hRemote;
                       __int64 hInproc64;
        } u;
    } userHENHMETAFILE;

typedef struct _userBITMAP
    {
    LONG bmType;
    LONG bmWidth;
    LONG bmHeight;
    LONG bmWidthBytes;
    WORD bmPlanes;
    WORD bmBitsPixel;
    ULONG cbSize;
                    byte pBuffer[ 1 ];
    } userBITMAP;

typedef struct _userHBITMAP
    {
    LONG fContext;
                                          union __MIDL_IWinTypes_0007
        {
                       LONG hInproc;
                       userBITMAP *hRemote;
                       __int64 hInproc64;
        } u;
    } userHBITMAP;

typedef struct _userHPALETTE
    {
    LONG fContext;
                                          union __MIDL_IWinTypes_0008
        {
                       LONG hInproc;
                       LOGPALETTE *hRemote;
                       __int64 hInproc64;
        } u;
    } userHPALETTE;

typedef struct _RemotableHandle
    {
    LONG fContext;
                                          union __MIDL_IWinTypes_0009
        {
                       LONG hInproc;
                       LONG hRemote;
        } u;
    } RemotableHandle;

typedef RemotableHandle *wireHWND;

typedef RemotableHandle *wireHMENU;

typedef RemotableHandle *wireHACCEL;

typedef RemotableHandle *wireHBRUSH;

typedef RemotableHandle *wireHFONT;

typedef RemotableHandle *wireHDC;

typedef RemotableHandle *wireHICON;

typedef RemotableHandle *wireHRGN;

typedef RemotableHandle *wireHMONITOR;
#line 615 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/wtypes.h"
typedef userHBITMAP *wireHBITMAP;

typedef userHPALETTE *wireHPALETTE;

typedef userHENHMETAFILE *wireHENHMETAFILE;

typedef userHMETAFILE *wireHMETAFILE;

typedef userHMETAFILEPICT *wireHMETAFILEPICT;
#line 639 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/wtypes.h"
typedef void *HMETAFILEPICT;



extern RPC_IF_HANDLE IWinTypes_v0_1_c_ifspec;
extern RPC_IF_HANDLE IWinTypes_v0_1_s_ifspec;
#line 656 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/wtypes.h"
typedef double DATE;
#line 671 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/wtypes.h"
typedef union tagCY {
    struct {
        ULONG Lo;
        LONG Hi;
    } ;
    LONGLONG int64;
} CY;


typedef CY *LPCY;
#line 696 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/wtypes.h"
typedef struct tagDEC {
    USHORT wReserved;
    union {
        struct {
            BYTE scale;
            BYTE sign;
        } ;
        USHORT signscale;
    } ;
    ULONG Hi32;
    union {
        struct {
            ULONG Lo32;
            ULONG Mid32;
        } ;
        ULONGLONG Lo64;
    } ;
} DECIMAL;




typedef DECIMAL *LPDECIMAL;
#line 727 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/wtypes.h"
typedef FLAGGED_WORD_BLOB *wireBSTR;


typedef OLECHAR *BSTR;




typedef BSTR *LPBSTR;


typedef short VARIANT_BOOL;
#line 753 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/wtypes.h"
typedef struct tagBSTRBLOB
    {
    ULONG cbSize;
                    BYTE *pData;
    } BSTRBLOB;

typedef struct tagBSTRBLOB *LPBSTRBLOB;




typedef struct tagCLIPDATA
    {
    ULONG cbSize;
    LONG ulClipFmt;
                    BYTE *pClipData;
    } CLIPDATA;



typedef unsigned short VARTYPE;
#line 834 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/wtypes.h"
enum VARENUM
    {
        VT_EMPTY = 0,
        VT_NULL = 1,
        VT_I2 = 2,
        VT_I4 = 3,
        VT_R4 = 4,
        VT_R8 = 5,
        VT_CY = 6,
        VT_DATE = 7,
        VT_BSTR = 8,
        VT_DISPATCH = 9,
        VT_ERROR = 10,
        VT_BOOL = 11,
        VT_VARIANT = 12,
        VT_UNKNOWN = 13,
        VT_DECIMAL = 14,
        VT_I1 = 16,
        VT_UI1 = 17,
        VT_UI2 = 18,
        VT_UI4 = 19,
        VT_I8 = 20,
        VT_UI8 = 21,
        VT_INT = 22,
        VT_UINT = 23,
        VT_VOID = 24,
        VT_HRESULT = 25,
        VT_PTR = 26,
        VT_SAFEARRAY = 27,
        VT_CARRAY = 28,
        VT_USERDEFINED = 29,
        VT_LPSTR = 30,
        VT_LPWSTR = 31,
        VT_RECORD = 36,
        VT_INT_PTR = 37,
        VT_UINT_PTR = 38,
        VT_FILETIME = 64,
        VT_BLOB = 65,
        VT_STREAM = 66,
        VT_STORAGE = 67,
        VT_STREAMED_OBJECT = 68,
        VT_STORED_OBJECT = 69,
        VT_BLOB_OBJECT = 70,
        VT_CF = 71,
        VT_CLSID = 72,
        VT_VERSIONED_STREAM = 73,
        VT_BSTR_BLOB = 0xfff,
        VT_VECTOR = 0x1000,
        VT_ARRAY = 0x2000,
        VT_BYREF = 0x4000,
        VT_RESERVED = 0x8000,
        VT_ILLEGAL = 0xffff,
        VT_ILLEGALMASKED = 0xfff,
        VT_TYPEMASK = 0xfff
    } ;
typedef ULONG PROPID;



typedef struct _tagpropertykey
    {
    GUID fmtid;
    DWORD pid;
    } PROPERTYKEY;


typedef struct tagCSPLATFORM
    {
    DWORD dwPlatformId;
    DWORD dwVersionHi;
    DWORD dwVersionLo;
    DWORD dwProcessorArch;
    } CSPLATFORM;

typedef struct tagQUERYCONTEXT
    {
    DWORD dwContext;
    CSPLATFORM Platform;
    LCID Locale;
    DWORD dwVersionHi;
    DWORD dwVersionLo;
    } QUERYCONTEXT;

typedef
enum tagTYSPEC
    {
        TYSPEC_CLSID = 0,
        TYSPEC_FILEEXT = ( TYSPEC_CLSID + 1 ) ,
        TYSPEC_MIMETYPE = ( TYSPEC_FILEEXT + 1 ) ,
        TYSPEC_FILENAME = ( TYSPEC_MIMETYPE + 1 ) ,
        TYSPEC_PROGID = ( TYSPEC_FILENAME + 1 ) ,
        TYSPEC_PACKAGENAME = ( TYSPEC_PROGID + 1 ) ,
        TYSPEC_OBJECTID = ( TYSPEC_PACKAGENAME + 1 )
    } TYSPEC;

typedef struct __MIDL___MIDL_itf_wtypes_0000_0001_0001
    {
    DWORD tyspec;
                                          union __MIDL___MIDL_itf_wtypes_0000_0001_0005
        {
                       CLSID clsid;
                       LPOLESTR pFileExt;
                       LPOLESTR pMimeType;
                       LPOLESTR pProgId;
                       LPOLESTR pFileName;
                       struct
            {
            LPOLESTR pPackageName;
            GUID PolicyId;
            } ByName;
                       struct
            {
            GUID ObjectId;
            GUID PolicyId;
            } ByObjectId;
        } tagged_union;
    } uCLSSPEC;






extern RPC_IF_HANDLE __MIDL_itf_wtypes_0000_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wtypes_0000_0001_v0_0_s_ifspec;
#line 971 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/wtypes.h"
#pragma option pop
#line 65 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/unknwn.h"
#line 85 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/unknwn.h"
#pragma region Application Family or OneCore Family



extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0000_v0_0_s_ifspec;
#line 281 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/unknwn.h"
#pragma endregion
#pragma region Desktop Family or OneCore Family



extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0001_v0_0_s_ifspec;
#line 417 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/unknwn.h"
#pragma endregion
#pragma region Application Family or OneCore Family



extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0002_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0002_v0_0_s_ifspec;
#line 556 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/unknwn.h"
#pragma endregion


extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0003_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0003_v0_0_s_ifspec;



              HRESULT __stdcall IClassFactory_CreateInstance_Proxy(
    IClassFactory * This,

              IUnknown *pUnkOuter,

          const IID * const riid,

                  void **ppvObject);


                HRESULT __stdcall IClassFactory_CreateInstance_Stub(
              IClassFactory * This,
                         const IID * const riid,
                                             IUnknown **ppvObject);

              HRESULT __stdcall IClassFactory_LockServer_Proxy(
    IClassFactory * This,
               BOOL fLock);


                HRESULT __stdcall IClassFactory_LockServer_Stub(
              IClassFactory * This,
               BOOL fLock);
#line 599 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/unknwn.h"
#pragma option pop
#line 723 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
#line 8142 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
#pragma region Desktop Family or OneCore Family



extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0053_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0053_v0_0_s_ifspec;







typedef IMallocSpy *LPMALLOCSPY;


extern const IID IID_IMallocSpy;
#line 8235 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
    typedef struct IMallocSpyVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IMallocSpy * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IMallocSpy * This);

        ULONG ( __stdcall *Release )(
            IMallocSpy * This);

        SIZE_T ( __stdcall *PreAlloc )(
            IMallocSpy * This,

                  SIZE_T cbRequest);

        void *( __stdcall *PostAlloc )(
            IMallocSpy * This,

                  void *pActual);

        void *( __stdcall *PreFree )(
            IMallocSpy * This,

                  void *pRequest,

                  BOOL fSpyed);

        void ( __stdcall *PostFree )(
            IMallocSpy * This,

                  BOOL fSpyed);

        SIZE_T ( __stdcall *PreRealloc )(
            IMallocSpy * This,

                  void *pRequest,

                  SIZE_T cbRequest,

                      void **ppNewRequest,

                  BOOL fSpyed);

        void *( __stdcall *PostRealloc )(
            IMallocSpy * This,

                  void *pActual,

                  BOOL fSpyed);

        void *( __stdcall *PreGetSize )(
            IMallocSpy * This,

                  void *pRequest,

                  BOOL fSpyed);

        SIZE_T ( __stdcall *PostGetSize )(
            IMallocSpy * This,

                  SIZE_T cbActual,

                  BOOL fSpyed);

        void *( __stdcall *PreDidAlloc )(
            IMallocSpy * This,

                  void *pRequest,

                  BOOL fSpyed);

        int ( __stdcall *PostDidAlloc )(
            IMallocSpy * This,

                  void *pRequest,

                  BOOL fSpyed,

                  int fActual);

        void ( __stdcall *PreHeapMinimize )(
            IMallocSpy * This);

        void ( __stdcall *PostHeapMinimize )(
            IMallocSpy * This);


    } IMallocSpyVtbl;

    struct IMallocSpy
    {
                   struct IMallocSpyVtbl *lpVtbl;
    };
#line 8401 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
#pragma endregion
#pragma region Application Family or OneCore Family



extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0054_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0054_v0_0_s_ifspec;







typedef IBindCtx *LPBC;

typedef IBindCtx *LPBINDCTX;
#line 8427 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
typedef struct tagBIND_OPTS
    {
    DWORD cbStruct;
    DWORD grfFlags;
    DWORD grfMode;
    DWORD dwTickCountDeadline;
    } BIND_OPTS;

typedef struct tagBIND_OPTS *LPBIND_OPTS;
#line 8447 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
typedef struct tagBIND_OPTS2
    {
    DWORD cbStruct;
    DWORD grfFlags;
    DWORD grfMode;
    DWORD dwTickCountDeadline;
    DWORD dwTrackFlags;
    DWORD dwClassContext;
    LCID locale;
    COSERVERINFO *pServerInfo;
    } BIND_OPTS2;

typedef struct tagBIND_OPTS2 *LPBIND_OPTS2;







typedef struct tagBIND_OPTS3
    {
    DWORD cbStruct;
    DWORD grfFlags;
    DWORD grfMode;
    DWORD dwTickCountDeadline;
    DWORD dwTrackFlags;
    DWORD dwClassContext;
    LCID locale;
    COSERVERINFO *pServerInfo;
    HWND hwnd;
    } BIND_OPTS3;

typedef struct tagBIND_OPTS3 *LPBIND_OPTS3;


typedef
enum tagBIND_FLAGS
    {
        BIND_MAYBOTHERUSER = 1,
        BIND_JUSTTESTEXISTENCE = 2
    } BIND_FLAGS;


extern const IID IID_IBindCtx;
#line 8537 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
    typedef struct IBindCtxVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      IBindCtx * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      IBindCtx * This);

        ULONG ( __stdcall *Release )(
                      IBindCtx * This);

        HRESULT ( __stdcall *RegisterObjectBound )(
                      IBindCtx * This,
                                             IUnknown *punk);

        HRESULT ( __stdcall *RevokeObjectBound )(
                      IBindCtx * This,
                                             IUnknown *punk);

        HRESULT ( __stdcall *ReleaseBoundObjects )(
                      IBindCtx * This);

                      HRESULT ( __stdcall *SetBindOptions )(
            IBindCtx * This,

                  BIND_OPTS *pbindopts);

                      HRESULT ( __stdcall *GetBindOptions )(
            IBindCtx * This,

                     BIND_OPTS *pbindopts);

        HRESULT ( __stdcall *GetRunningObjectTable )(
                      IBindCtx * This,
                                             IRunningObjectTable **pprot);

        HRESULT ( __stdcall *RegisterObjectParam )(
                      IBindCtx * This,
                                 LPOLESTR pszKey,
                                             IUnknown *punk);

        HRESULT ( __stdcall *GetObjectParam )(
                      IBindCtx * This,
                                 LPOLESTR pszKey,
                                             IUnknown **ppunk);

        HRESULT ( __stdcall *EnumObjectParam )(
                      IBindCtx * This,
                                             IEnumString **ppenum);

        HRESULT ( __stdcall *RevokeObjectParam )(
                      IBindCtx * This,
                                 LPOLESTR pszKey);


    } IBindCtxVtbl;

    struct IBindCtx
    {
                   struct IBindCtxVtbl *lpVtbl;
    };
#line 8656 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
                HRESULT __stdcall IBindCtx_RemoteSetBindOptions_Proxy(
              IBindCtx * This,
                         BIND_OPTS2 *pbindopts);


void __stdcall IBindCtx_RemoteSetBindOptions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall IBindCtx_RemoteGetBindOptions_Proxy(
              IBindCtx * This,
                                 BIND_OPTS2 *pbindopts);


void __stdcall IBindCtx_RemoteGetBindOptions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
#line 8690 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
typedef IEnumMoniker *LPENUMMONIKER;


extern const IID IID_IEnumMoniker;
#line 8721 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
    typedef struct IEnumMonikerVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      IEnumMoniker * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      IEnumMoniker * This);

        ULONG ( __stdcall *Release )(
                      IEnumMoniker * This);

                      HRESULT ( __stdcall *Next )(
            IEnumMoniker * This,
                       ULONG celt,

                                                 IMoniker **rgelt,

                       ULONG *pceltFetched);

        HRESULT ( __stdcall *Skip )(
                      IEnumMoniker * This,
                       ULONG celt);

        HRESULT ( __stdcall *Reset )(
                      IEnumMoniker * This);

        HRESULT ( __stdcall *Clone )(
                      IEnumMoniker * This,
                                             IEnumMoniker **ppenum);


    } IEnumMonikerVtbl;

    struct IEnumMoniker
    {
                   struct IEnumMonikerVtbl *lpVtbl;
    };
#line 8798 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
                HRESULT __stdcall IEnumMoniker_RemoteNext_Proxy(
              IEnumMoniker * This,
               ULONG celt,
                                                                                IMoniker **rgelt,
                           ULONG *pceltFetched);


void __stdcall IEnumMoniker_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
#line 8820 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
#pragma endregion
#pragma region Desktop Family or OneCore Family



extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0056_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0056_v0_0_s_ifspec;







typedef IRunnableObject *LPRUNNABLEOBJECT;


extern const IID IID_IRunnableObject;
#line 8865 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
    typedef struct IRunnableObjectVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      IRunnableObject * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      IRunnableObject * This);

        ULONG ( __stdcall *Release )(
                      IRunnableObject * This);

        HRESULT ( __stdcall *GetRunningClass )(
                      IRunnableObject * This,
                                   LPCLSID lpClsid);

        HRESULT ( __stdcall *Run )(
                      IRunnableObject * This,
                                     LPBINDCTX pbc);

                      BOOL ( __stdcall *IsRunning )(
            IRunnableObject * This);

        HRESULT ( __stdcall *LockRunning )(
                      IRunnableObject * This,
                       BOOL fLock,
                       BOOL fLastUnlockCloses);

        HRESULT ( __stdcall *SetContainedObject )(
                      IRunnableObject * This,
                       BOOL fContained);


    } IRunnableObjectVtbl;

    struct IRunnableObject
    {
                   struct IRunnableObjectVtbl *lpVtbl;
    };
#line 8946 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
                HRESULT __stdcall IRunnableObject_RemoteIsRunning_Proxy(
              IRunnableObject * This);


void __stdcall IRunnableObject_RemoteIsRunning_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
#line 8967 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
typedef IRunningObjectTable *LPRUNNINGOBJECTTABLE;


extern const IID IID_IRunningObjectTable;
#line 9010 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
    typedef struct IRunningObjectTableVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      IRunningObjectTable * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      IRunningObjectTable * This);

        ULONG ( __stdcall *Release )(
                      IRunningObjectTable * This);

        HRESULT ( __stdcall *Register )(
                      IRunningObjectTable * This,
                       DWORD grfFlags,
                                             IUnknown *punkObject,
                                             IMoniker *pmkObjectName,
                                   DWORD *pdwRegister);

        HRESULT ( __stdcall *Revoke )(
                      IRunningObjectTable * This,
                       DWORD dwRegister);

        HRESULT ( __stdcall *IsRunning )(
                      IRunningObjectTable * This,
                                             IMoniker *pmkObjectName);

        HRESULT ( __stdcall *GetObjectW )(
                      IRunningObjectTable * This,
                                             IMoniker *pmkObjectName,
                                             IUnknown **ppunkObject);

        HRESULT ( __stdcall *NoteChangeTime )(
                      IRunningObjectTable * This,
                       DWORD dwRegister,
                                 FILETIME *pfiletime);

        HRESULT ( __stdcall *GetTimeOfLastChange )(
                      IRunningObjectTable * This,
                                             IMoniker *pmkObjectName,
                                   FILETIME *pfiletime);

        HRESULT ( __stdcall *EnumRunning )(
                      IRunningObjectTable * This,
                                             IEnumMoniker **ppenumMoniker);


    } IRunningObjectTableVtbl;

    struct IRunningObjectTable
    {
                   struct IRunningObjectTableVtbl *lpVtbl;
    };
#line 9119 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
#pragma endregion
#pragma region Application Family or OneCore Family



extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0058_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0058_v0_0_s_ifspec;







typedef IPersist *LPPERSIST;


extern const IID IID_IPersist;
#line 9152 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
    typedef struct IPersistVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      IPersist * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      IPersist * This);

        ULONG ( __stdcall *Release )(
                      IPersist * This);

        HRESULT ( __stdcall *GetClassID )(
                      IPersist * This,
                                   CLSID *pClassID);


    } IPersistVtbl;

    struct IPersist
    {
                   struct IPersistVtbl *lpVtbl;
    };
#line 9215 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
typedef IPersistStream *LPPERSISTSTREAM;


extern const IID IID_IPersistStream;
#line 9243 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
    typedef struct IPersistStreamVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      IPersistStream * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      IPersistStream * This);

        ULONG ( __stdcall *Release )(
                      IPersistStream * This);

        HRESULT ( __stdcall *GetClassID )(
                      IPersistStream * This,
                                   CLSID *pClassID);

        HRESULT ( __stdcall *IsDirty )(
                      IPersistStream * This);

        HRESULT ( __stdcall *Load )(
                      IPersistStream * This,
                                             IStream *pStm);

        HRESULT ( __stdcall *Save )(
                      IPersistStream * This,
                                             IStream *pStm,
                       BOOL fClearDirty);

        HRESULT ( __stdcall *GetSizeMax )(
                      IPersistStream * This,
                                   ULARGE_INTEGER *pcbSize);


    } IPersistStreamVtbl;

    struct IPersistStream
    {
                   struct IPersistStreamVtbl *lpVtbl;
    };
#line 9335 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
typedef IMoniker *LPMONIKER;

typedef
enum tagMKSYS
    {
        MKSYS_NONE = 0,
        MKSYS_GENERICCOMPOSITE = 1,
        MKSYS_FILEMONIKER = 2,
        MKSYS_ANTIMONIKER = 3,
        MKSYS_ITEMMONIKER = 4,
        MKSYS_POINTERMONIKER = 5,
        MKSYS_CLASSMONIKER = 7,
        MKSYS_OBJREFMONIKER = 8,
        MKSYS_SESSIONMONIKER = 9,
        MKSYS_LUAMONIKER = 10
    } MKSYS;

typedef
enum tagMKREDUCE
    {
        MKRREDUCE_ONE = ( 3 << 16 ) ,
        MKRREDUCE_TOUSER = ( 2 << 16 ) ,
        MKRREDUCE_THROUGHUSER = ( 1 << 16 ) ,
        MKRREDUCE_ALL = 0
    } MKRREDUCE;


extern const IID IID_IMoniker;
#line 9452 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
    typedef struct IMonikerVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      IMoniker * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      IMoniker * This);

        ULONG ( __stdcall *Release )(
                      IMoniker * This);

        HRESULT ( __stdcall *GetClassID )(
                      IMoniker * This,
                                   CLSID *pClassID);

        HRESULT ( __stdcall *IsDirty )(
                      IMoniker * This);

        HRESULT ( __stdcall *Load )(
                      IMoniker * This,
                                             IStream *pStm);

        HRESULT ( __stdcall *Save )(
                      IMoniker * This,
                                             IStream *pStm,
                       BOOL fClearDirty);

        HRESULT ( __stdcall *GetSizeMax )(
                      IMoniker * This,
                                   ULARGE_INTEGER *pcbSize);

                      HRESULT ( __stdcall *BindToObject )(
            IMoniker * This,

                  IBindCtx *pbc,

                      IMoniker *pmkToLeft,

                  const IID * const riidResult,

                      void **ppvResult);

                      HRESULT ( __stdcall *BindToStorage )(
            IMoniker * This,

                  IBindCtx *pbc,

                      IMoniker *pmkToLeft,

                  const IID * const riid,

                      void **ppvObj);

        HRESULT ( __stdcall *Reduce )(
                      IMoniker * This,
                                             IBindCtx *pbc,
                       DWORD dwReduceHowFar,
                                                               IMoniker **ppmkToLeft,
                                             IMoniker **ppmkReduced);

        HRESULT ( __stdcall *ComposeWith )(
                      IMoniker * This,
                                             IMoniker *pmkRight,
                       BOOL fOnlyIfNotGeneric,
                                             IMoniker **ppmkComposite);

        HRESULT ( __stdcall *Enum )(
                      IMoniker * This,
                       BOOL fForward,
                                             IEnumMoniker **ppenumMoniker);

        HRESULT ( __stdcall *IsEqual )(
                      IMoniker * This,
                                             IMoniker *pmkOtherMoniker);

        HRESULT ( __stdcall *Hash )(
                      IMoniker * This,
                                   DWORD *pdwHash);

        HRESULT ( __stdcall *IsRunning )(
                      IMoniker * This,
                                             IBindCtx *pbc,
                                             IMoniker *pmkToLeft,
                                             IMoniker *pmkNewlyRunning);

        HRESULT ( __stdcall *GetTimeOfLastChange )(
                      IMoniker * This,
                                             IBindCtx *pbc,
                                             IMoniker *pmkToLeft,
                                   FILETIME *pFileTime);

        HRESULT ( __stdcall *Inverse )(
                      IMoniker * This,
                                             IMoniker **ppmk);

        HRESULT ( __stdcall *CommonPrefixWith )(
                      IMoniker * This,
                                             IMoniker *pmkOther,
                                             IMoniker **ppmkPrefix);

        HRESULT ( __stdcall *RelativePathTo )(
                      IMoniker * This,
                                             IMoniker *pmkOther,
                                             IMoniker **ppmkRelPath);

        HRESULT ( __stdcall *GetDisplayName )(
                      IMoniker * This,
                                             IBindCtx *pbc,
                                             IMoniker *pmkToLeft,
                                             LPOLESTR *ppszDisplayName);

        HRESULT ( __stdcall *ParseDisplayName )(
                      IMoniker * This,
                                             IBindCtx *pbc,
                                             IMoniker *pmkToLeft,
                                 LPOLESTR pszDisplayName,
                                   ULONG *pchEaten,
                                             IMoniker **ppmkOut);

        HRESULT ( __stdcall *IsSystemMoniker )(
                      IMoniker * This,
                                   DWORD *pdwMksys);


    } IMonikerVtbl;

    struct IMoniker
    {
                   struct IMonikerVtbl *lpVtbl;
    };
#line 9672 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
                HRESULT __stdcall IMoniker_RemoteBindToObject_Proxy(
              IMoniker * This,
                                     IBindCtx *pbc,
                                     IMoniker *pmkToLeft,
                         const IID * const riidResult,
                                             IUnknown **ppvResult);


void __stdcall IMoniker_RemoteBindToObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall IMoniker_RemoteBindToStorage_Proxy(
              IMoniker * This,
                                     IBindCtx *pbc,
                                     IMoniker *pmkToLeft,
                         const IID * const riid,
                                             IUnknown **ppvObj);


void __stdcall IMoniker_RemoteBindToStorage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
#line 9710 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
#pragma endregion
#pragma region Desktop Family or OneCore Family



extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0061_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0061_v0_0_s_ifspec;
#line 9725 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
extern const IID IID_IROTData;
#line 9743 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
    typedef struct IROTDataVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      IROTData * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      IROTData * This);

        ULONG ( __stdcall *Release )(
                      IROTData * This);

        HRESULT ( __stdcall *GetComparisonData )(
                      IROTData * This,
                                                               byte *pbData,
                       ULONG cbMax,
                                   ULONG *pcbData);


    } IROTDataVtbl;

    struct IROTData
    {
                   struct IROTDataVtbl *lpVtbl;
    };
#line 9806 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
#pragma endregion
#pragma region Application Family or OneCore Family



extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0062_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0062_v0_0_s_ifspec;







typedef IEnumSTATSTG *LPENUMSTATSTG;


extern const IID IID_IEnumSTATSTG;
#line 9851 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
    typedef struct IEnumSTATSTGVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      IEnumSTATSTG * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      IEnumSTATSTG * This);

        ULONG ( __stdcall *Release )(
                      IEnumSTATSTG * This);

                      HRESULT ( __stdcall *Next )(
            IEnumSTATSTG * This,
                       ULONG celt,

                                                 STATSTG *rgelt,

                       ULONG *pceltFetched);

        HRESULT ( __stdcall *Skip )(
                      IEnumSTATSTG * This,
                       ULONG celt);

        HRESULT ( __stdcall *Reset )(
                      IEnumSTATSTG * This);

        HRESULT ( __stdcall *Clone )(
                      IEnumSTATSTG * This,
                                             IEnumSTATSTG **ppenum);


    } IEnumSTATSTGVtbl;

    struct IEnumSTATSTG
    {
                   struct IEnumSTATSTGVtbl *lpVtbl;
    };
#line 9928 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
                HRESULT __stdcall IEnumSTATSTG_RemoteNext_Proxy(
              IEnumSTATSTG * This,
               ULONG celt,
                                                                                STATSTG *rgelt,
                           ULONG *pceltFetched);


void __stdcall IEnumSTATSTG_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
#line 9952 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
typedef IStorage *LPSTORAGE;

typedef struct tagRemSNB
    {
    ULONG ulCntStr;
    ULONG ulCntChar;
                    OLECHAR rgString[ 1 ];
    } RemSNB;

typedef RemSNB *wireSNB;

typedef LPOLESTR *SNB;


extern const IID IID_IStorage;
#line 10065 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
    typedef struct IStorageVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      IStorage * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      IStorage * This);

        ULONG ( __stdcall *Release )(
                      IStorage * This);

        HRESULT ( __stdcall *CreateStream )(
                      IStorage * This,
                                                const OLECHAR *pwcsName,
                       DWORD grfMode,
                       DWORD reserved1,
                       DWORD reserved2,
                                             IStream **ppstm);

                      HRESULT ( __stdcall *OpenStream )(
            IStorage * This,

                    const OLECHAR *pwcsName,

                        void *reserved1,
                       DWORD grfMode,
                       DWORD reserved2,

                      IStream **ppstm);

        HRESULT ( __stdcall *CreateStorage )(
                      IStorage * This,
                                                const OLECHAR *pwcsName,
                       DWORD grfMode,
                       DWORD reserved1,
                       DWORD reserved2,
                                             IStorage **ppstg);

        HRESULT ( __stdcall *OpenStorage )(
                      IStorage * This,
                                                            const OLECHAR *pwcsName,
                                             IStorage *pstgPriority,
                       DWORD grfMode,
                                                       SNB snbExclude,
                       DWORD reserved,
                                             IStorage **ppstg);

                      HRESULT ( __stdcall *CopyTo )(
            IStorage * This,
                       DWORD ciidExclude,

                                         const IID *rgiidExclude,

                      SNB snbExclude,

                  IStorage *pstgDest);

        HRESULT ( __stdcall *MoveElementTo )(
                      IStorage * This,
                                                const OLECHAR *pwcsName,
                                             IStorage *pstgDest,
                                                const OLECHAR *pwcsNewName,
                       DWORD grfFlags);

        HRESULT ( __stdcall *Commit )(
                      IStorage * This,
                       DWORD grfCommitFlags);

        HRESULT ( __stdcall *Revert )(
                      IStorage * This);

                      HRESULT ( __stdcall *EnumElements )(
            IStorage * This,

                        DWORD reserved1,

                        void *reserved2,

                        DWORD reserved3,

                      IEnumSTATSTG **ppenum);

        HRESULT ( __stdcall *DestroyElement )(
                      IStorage * This,
                                                const OLECHAR *pwcsName);

        HRESULT ( __stdcall *RenameElement )(
                      IStorage * This,
                                                const OLECHAR *pwcsOldName,
                                                const OLECHAR *pwcsNewName);

        HRESULT ( __stdcall *SetElementTimes )(
                      IStorage * This,
                                                            const OLECHAR *pwcsName,
                                             const FILETIME *pctime,
                                             const FILETIME *patime,
                                             const FILETIME *pmtime);

        HRESULT ( __stdcall *SetClass )(
                      IStorage * This,
                                 const IID * const clsid);

        HRESULT ( __stdcall *SetStateBits )(
                      IStorage * This,
                       DWORD grfStateBits,
                       DWORD grfMask);

        HRESULT ( __stdcall *Stat )(
                      IStorage * This,
                                   STATSTG *pstatstg,
                       DWORD grfStatFlag);


    } IStorageVtbl;

    struct IStorage
    {
                   struct IStorageVtbl *lpVtbl;
    };
#line 10257 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
                HRESULT __stdcall IStorage_RemoteOpenStream_Proxy(
              IStorage * This,
                                        const OLECHAR *pwcsName,
               ULONG cbReserved1,
                                                                       byte *reserved1,
               DWORD grfMode,
               DWORD reserved2,
                                     IStream **ppstm);


void __stdcall IStorage_RemoteOpenStream_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall IStorage_RemoteCopyTo_Proxy(
              IStorage * This,
               DWORD ciidExclude,
                                                                       const IID *rgiidExclude,
                                               SNB snbExclude,
                                     IStorage *pstgDest);


void __stdcall IStorage_RemoteCopyTo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall IStorage_RemoteEnumElements_Proxy(
              IStorage * This,
               DWORD reserved1,
               ULONG cbReserved2,
                                                                       byte *reserved2,
               DWORD reserved3,
                                     IEnumSTATSTG **ppenum);


void __stdcall IStorage_RemoteEnumElements_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
#line 10313 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
#pragma endregion
#pragma region Desktop Family or OneCore Family



extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0064_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0064_v0_0_s_ifspec;







typedef IPersistFile *LPPERSISTFILE;


extern const IID IID_IPersistFile;
#line 10359 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
    typedef struct IPersistFileVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      IPersistFile * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      IPersistFile * This);

        ULONG ( __stdcall *Release )(
                      IPersistFile * This);

        HRESULT ( __stdcall *GetClassID )(
                      IPersistFile * This,
                                   CLSID *pClassID);

        HRESULT ( __stdcall *IsDirty )(
                      IPersistFile * This);

        HRESULT ( __stdcall *Load )(
                      IPersistFile * This,
                                 LPCOLESTR pszFileName,
                       DWORD dwMode);

        HRESULT ( __stdcall *Save )(
                      IPersistFile * This,
                                             LPCOLESTR pszFileName,
                       BOOL fRemember);

        HRESULT ( __stdcall *SaveCompleted )(
                      IPersistFile * This,
                                             LPCOLESTR pszFileName);

        HRESULT ( __stdcall *GetCurFile )(
                      IPersistFile * This,
                                             LPOLESTR *ppszFileName);


    } IPersistFileVtbl;

    struct IPersistFile
    {
                   struct IPersistFileVtbl *lpVtbl;
    };
#line 10459 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
typedef IPersistStorage *LPPERSISTSTORAGE;


extern const IID IID_IPersistStorage;
#line 10492 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
    typedef struct IPersistStorageVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      IPersistStorage * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      IPersistStorage * This);

        ULONG ( __stdcall *Release )(
                      IPersistStorage * This);

        HRESULT ( __stdcall *GetClassID )(
                      IPersistStorage * This,
                                   CLSID *pClassID);

        HRESULT ( __stdcall *IsDirty )(
                      IPersistStorage * This);

        HRESULT ( __stdcall *InitNew )(
                      IPersistStorage * This,
                                             IStorage *pStg);

        HRESULT ( __stdcall *Load )(
                      IPersistStorage * This,
                                             IStorage *pStg);

        HRESULT ( __stdcall *Save )(
                      IPersistStorage * This,
                                             IStorage *pStgSave,
                       BOOL fSameAsLoad);

        HRESULT ( __stdcall *SaveCompleted )(
                      IPersistStorage * This,
                                             IStorage *pStgNew);

        HRESULT ( __stdcall *HandsOffStorage )(
                      IPersistStorage * This);


    } IPersistStorageVtbl;

    struct IPersistStorage
    {
                   struct IPersistStorageVtbl *lpVtbl;
    };
#line 10595 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
#pragma endregion
#pragma region Application Family or OneCore Family



extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0066_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0066_v0_0_s_ifspec;







typedef ILockBytes *LPLOCKBYTES;


extern const IID IID_ILockBytes;
#line 10660 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
    typedef struct ILockBytesVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      ILockBytes * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      ILockBytes * This);

        ULONG ( __stdcall *Release )(
                      ILockBytes * This);

                      HRESULT ( __stdcall *ReadAt )(
            ILockBytes * This,
                       ULARGE_INTEGER ulOffset,

                                                 void *pv,
                       ULONG cb,

                       ULONG *pcbRead);

                      HRESULT ( __stdcall *WriteAt )(
            ILockBytes * This,
                       ULARGE_INTEGER ulOffset,

                                  const void *pv,
                       ULONG cb,

                       ULONG *pcbWritten);

        HRESULT ( __stdcall *Flush )(
                      ILockBytes * This);

        HRESULT ( __stdcall *SetSize )(
                      ILockBytes * This,
                       ULARGE_INTEGER cb);

        HRESULT ( __stdcall *LockRegion )(
                      ILockBytes * This,
                       ULARGE_INTEGER libOffset,
                       ULARGE_INTEGER cb,
                       DWORD dwLockType);

        HRESULT ( __stdcall *UnlockRegion )(
                      ILockBytes * This,
                       ULARGE_INTEGER libOffset,
                       ULARGE_INTEGER cb,
                       DWORD dwLockType);

        HRESULT ( __stdcall *Stat )(
                      ILockBytes * This,
                                   STATSTG *pstatstg,
                       DWORD grfStatFlag);


    } ILockBytesVtbl;

    struct ILockBytes
    {
                   struct ILockBytesVtbl *lpVtbl;
    };
#line 10769 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
                HRESULT __stdcall ILockBytes_RemoteReadAt_Proxy(
              ILockBytes * This,
               ULARGE_INTEGER ulOffset,
                                                                         byte *pv,
               ULONG cb,
                           ULONG *pcbRead);


void __stdcall ILockBytes_RemoteReadAt_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall ILockBytes_RemoteWriteAt_Proxy(
              ILockBytes * This,
               ULARGE_INTEGER ulOffset,
                                                  const byte *pv,
               ULONG cb,
                           ULONG *pcbWritten);


void __stdcall ILockBytes_RemoteWriteAt_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
#line 10809 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
typedef IEnumFORMATETC *LPENUMFORMATETC;


typedef struct tagDVTARGETDEVICE
    {
    DWORD tdSize;
    WORD tdDriverNameOffset;
    WORD tdDeviceNameOffset;
    WORD tdPortNameOffset;
    WORD tdExtDevmodeOffset;
                    BYTE tdData[ 1 ];
    } DVTARGETDEVICE;


typedef CLIPFORMAT *LPCLIPFORMAT;

typedef struct tagFORMATETC
    {
    CLIPFORMAT cfFormat;
                   DVTARGETDEVICE *ptd;
    DWORD dwAspect;
    LONG lindex;
    DWORD tymed;
    } FORMATETC;

typedef struct tagFORMATETC *LPFORMATETC;


extern const IID IID_IEnumFORMATETC;
#line 10865 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
    typedef struct IEnumFORMATETCVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      IEnumFORMATETC * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      IEnumFORMATETC * This);

        ULONG ( __stdcall *Release )(
                      IEnumFORMATETC * This);

                      HRESULT ( __stdcall *Next )(
            IEnumFORMATETC * This,
                       ULONG celt,

                                                 FORMATETC *rgelt,

                       ULONG *pceltFetched);

        HRESULT ( __stdcall *Skip )(
                      IEnumFORMATETC * This,
                       ULONG celt);

        HRESULT ( __stdcall *Reset )(
                      IEnumFORMATETC * This);

        HRESULT ( __stdcall *Clone )(
                      IEnumFORMATETC * This,
                                             IEnumFORMATETC **ppenum);


    } IEnumFORMATETCVtbl;

    struct IEnumFORMATETC
    {
                   struct IEnumFORMATETCVtbl *lpVtbl;
    };
#line 10942 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
                HRESULT __stdcall IEnumFORMATETC_RemoteNext_Proxy(
              IEnumFORMATETC * This,
               ULONG celt,
                                                                                FORMATETC *rgelt,
                           ULONG *pceltFetched);


void __stdcall IEnumFORMATETC_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
#line 10966 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
typedef IEnumSTATDATA *LPENUMSTATDATA;

typedef
enum tagADVF
    {
        ADVF_NODATA = 1,
        ADVF_PRIMEFIRST = 2,
        ADVF_ONLYONCE = 4,
        ADVF_DATAONSTOP = 64,
        ADVFCACHE_NOHANDLER = 8,
        ADVFCACHE_FORCEBUILTIN = 16,
        ADVFCACHE_ONSAVE = 32
    } ADVF;

typedef struct tagSTATDATA
    {
    FORMATETC formatetc;
    DWORD advf;
                   IAdviseSink *pAdvSink;
    DWORD dwConnection;
    } STATDATA;

typedef STATDATA *LPSTATDATA;


extern const IID IID_IEnumSTATDATA;
#line 11019 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
    typedef struct IEnumSTATDATAVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      IEnumSTATDATA * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      IEnumSTATDATA * This);

        ULONG ( __stdcall *Release )(
                      IEnumSTATDATA * This);

                      HRESULT ( __stdcall *Next )(
            IEnumSTATDATA * This,
                       ULONG celt,

                                                 STATDATA *rgelt,

                       ULONG *pceltFetched);

        HRESULT ( __stdcall *Skip )(
                      IEnumSTATDATA * This,
                       ULONG celt);

        HRESULT ( __stdcall *Reset )(
                      IEnumSTATDATA * This);

        HRESULT ( __stdcall *Clone )(
                      IEnumSTATDATA * This,
                                             IEnumSTATDATA **ppenum);


    } IEnumSTATDATAVtbl;

    struct IEnumSTATDATA
    {
                   struct IEnumSTATDATAVtbl *lpVtbl;
    };
#line 11096 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
                HRESULT __stdcall IEnumSTATDATA_RemoteNext_Proxy(
              IEnumSTATDATA * This,
               ULONG celt,
                                                                                STATDATA *rgelt,
                           ULONG *pceltFetched);


void __stdcall IEnumSTATDATA_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
#line 11120 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
typedef IRootStorage *LPROOTSTORAGE;


extern const IID IID_IRootStorage;
#line 11139 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
    typedef struct IRootStorageVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      IRootStorage * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      IRootStorage * This);

        ULONG ( __stdcall *Release )(
                      IRootStorage * This);

        HRESULT ( __stdcall *SwitchToFile )(
                      IRootStorage * This,
                                 LPOLESTR pszFile);


    } IRootStorageVtbl;

    struct IRootStorage
    {
                   struct IRootStorageVtbl *lpVtbl;
    };
#line 11202 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
typedef IAdviseSink *LPADVISESINK;

typedef
enum tagTYMED
    {
        TYMED_HGLOBAL = 1,
        TYMED_FILE = 2,
        TYMED_ISTREAM = 4,
        TYMED_ISTORAGE = 8,
        TYMED_GDI = 16,
        TYMED_MFPICT = 32,
        TYMED_ENHMF = 64,
        TYMED_NULL = 0
    } TYMED;







typedef struct tagRemSTGMEDIUM
    {
    DWORD tymed;
    DWORD dwHandleType;
    ULONG pData;
    ULONG pUnkForRelease;
    ULONG cbData;
                    byte data[ 1 ];
    } RemSTGMEDIUM;
#line 11241 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
typedef struct tagSTGMEDIUM {
    DWORD tymed;
    union {
        HBITMAP hBitmap;
        HMETAFILEPICT hMetaFilePict;
        HENHMETAFILE hEnhMetaFile;
        HGLOBAL hGlobal;
        LPOLESTR lpszFileName;
        IStream *pstm;
        IStorage *pstg;
        } u;
    IUnknown *pUnkForRelease;
}uSTGMEDIUM;
#line 11273 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
typedef struct _GDI_OBJECT
    {
    DWORD ObjectType;
                                          union __MIDL_IAdviseSink_0002
        {
                       wireHBITMAP hBitmap;
                       wireHPALETTE hPalette;
                        wireHGLOBAL hGeneric;
        } u;
    } GDI_OBJECT;

typedef struct _userSTGMEDIUM
    {
    struct _STGMEDIUM_UNION
        {
        DWORD tymed;
                                              union __MIDL_IAdviseSink_0003
            {

                           wireHMETAFILEPICT hMetaFilePict;
                           wireHENHMETAFILE hHEnhMetaFile;
                           GDI_OBJECT *hGdiHandle;
                           wireHGLOBAL hGlobal;
                           LPOLESTR lpszFileName;
                           BYTE_BLOB *pstm;
                           BYTE_BLOB *pstg;
            } u;
        } ;
    IUnknown *pUnkForRelease;
    } userSTGMEDIUM;

typedef userSTGMEDIUM *wireSTGMEDIUM;

typedef uSTGMEDIUM STGMEDIUM;

typedef userSTGMEDIUM *wireASYNC_STGMEDIUM;

typedef STGMEDIUM ASYNC_STGMEDIUM;

typedef STGMEDIUM *LPSTGMEDIUM;

typedef struct _userFLAG_STGMEDIUM
    {
    LONG ContextFlags;
    LONG fPassOwnership;
    userSTGMEDIUM Stgmed;
    } userFLAG_STGMEDIUM;

typedef userFLAG_STGMEDIUM *wireFLAG_STGMEDIUM;

typedef struct _FLAG_STGMEDIUM
    {
    LONG ContextFlags;
    LONG fPassOwnership;
    STGMEDIUM Stgmed;
    } FLAG_STGMEDIUM;


extern const IID IID_IAdviseSink;
#line 11362 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
    typedef struct IAdviseSinkVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      IAdviseSink * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      IAdviseSink * This);

        ULONG ( __stdcall *Release )(
                      IAdviseSink * This);

                      void ( __stdcall *OnDataChange )(
            IAdviseSink * This,

                  FORMATETC *pFormatetc,

                  STGMEDIUM *pStgmed);

                      void ( __stdcall *OnViewChange )(
            IAdviseSink * This,
                       DWORD dwAspect,
                       LONG lindex);

                      void ( __stdcall *OnRename )(
            IAdviseSink * This,

                  IMoniker *pmk);

                      void ( __stdcall *OnSave )(
            IAdviseSink * This);

                      void ( __stdcall *OnClose )(
            IAdviseSink * This);


    } IAdviseSinkVtbl;

    struct IAdviseSink
    {
                   struct IAdviseSinkVtbl *lpVtbl;
    };
#line 11446 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
                HRESULT __stdcall IAdviseSink_RemoteOnDataChange_Proxy(
              IAdviseSink * This,
                                     FORMATETC *pFormatetc,
                                     ASYNC_STGMEDIUM *pStgmed);


void __stdcall IAdviseSink_RemoteOnDataChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall IAdviseSink_RemoteOnViewChange_Proxy(
              IAdviseSink * This,
               DWORD dwAspect,
               LONG lindex);


void __stdcall IAdviseSink_RemoteOnViewChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall IAdviseSink_RemoteOnRename_Proxy(
              IAdviseSink * This,
                             IMoniker *pmk);


void __stdcall IAdviseSink_RemoteOnRename_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall IAdviseSink_RemoteOnSave_Proxy(
              IAdviseSink * This);


void __stdcall IAdviseSink_RemoteOnSave_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall IAdviseSink_RemoteOnClose_Proxy(
              IAdviseSink * This);


void __stdcall IAdviseSink_RemoteOnClose_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
#line 11517 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
extern const IID IID_AsyncIAdviseSink;
#line 11558 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
    typedef struct AsyncIAdviseSinkVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      AsyncIAdviseSink * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      AsyncIAdviseSink * This);

        ULONG ( __stdcall *Release )(
                      AsyncIAdviseSink * This);

                      void ( __stdcall *Begin_OnDataChange )(
            AsyncIAdviseSink * This,

                  FORMATETC *pFormatetc,

                  STGMEDIUM *pStgmed);

                      void ( __stdcall *Finish_OnDataChange )(
            AsyncIAdviseSink * This);

                      void ( __stdcall *Begin_OnViewChange )(
            AsyncIAdviseSink * This,
                       DWORD dwAspect,
                       LONG lindex);

                      void ( __stdcall *Finish_OnViewChange )(
            AsyncIAdviseSink * This);

                      void ( __stdcall *Begin_OnRename )(
            AsyncIAdviseSink * This,

                  IMoniker *pmk);

                      void ( __stdcall *Finish_OnRename )(
            AsyncIAdviseSink * This);

                      void ( __stdcall *Begin_OnSave )(
            AsyncIAdviseSink * This);

                      void ( __stdcall *Finish_OnSave )(
            AsyncIAdviseSink * This);

                      void ( __stdcall *Begin_OnClose )(
            AsyncIAdviseSink * This);

                      void ( __stdcall *Finish_OnClose )(
            AsyncIAdviseSink * This);


    } AsyncIAdviseSinkVtbl;

    struct AsyncIAdviseSink
    {
                   struct AsyncIAdviseSinkVtbl *lpVtbl;
    };
#line 11672 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
                HRESULT __stdcall AsyncIAdviseSink_Begin_RemoteOnDataChange_Proxy(
              AsyncIAdviseSink * This,
                                     FORMATETC *pFormatetc,
                                     ASYNC_STGMEDIUM *pStgmed);


void __stdcall AsyncIAdviseSink_Begin_RemoteOnDataChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall AsyncIAdviseSink_Finish_RemoteOnDataChange_Proxy(
              AsyncIAdviseSink * This);


void __stdcall AsyncIAdviseSink_Finish_RemoteOnDataChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall AsyncIAdviseSink_Begin_RemoteOnViewChange_Proxy(
              AsyncIAdviseSink * This,
               DWORD dwAspect,
               LONG lindex);


void __stdcall AsyncIAdviseSink_Begin_RemoteOnViewChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall AsyncIAdviseSink_Finish_RemoteOnViewChange_Proxy(
              AsyncIAdviseSink * This);


void __stdcall AsyncIAdviseSink_Finish_RemoteOnViewChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall AsyncIAdviseSink_Begin_RemoteOnRename_Proxy(
              AsyncIAdviseSink * This,
                             IMoniker *pmk);


void __stdcall AsyncIAdviseSink_Begin_RemoteOnRename_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall AsyncIAdviseSink_Finish_RemoteOnRename_Proxy(
              AsyncIAdviseSink * This);


void __stdcall AsyncIAdviseSink_Finish_RemoteOnRename_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall AsyncIAdviseSink_Begin_RemoteOnSave_Proxy(
              AsyncIAdviseSink * This);


void __stdcall AsyncIAdviseSink_Begin_RemoteOnSave_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall AsyncIAdviseSink_Finish_RemoteOnSave_Proxy(
              AsyncIAdviseSink * This);


void __stdcall AsyncIAdviseSink_Finish_RemoteOnSave_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall AsyncIAdviseSink_Begin_RemoteOnClose_Proxy(
              AsyncIAdviseSink * This);


void __stdcall AsyncIAdviseSink_Begin_RemoteOnClose_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall AsyncIAdviseSink_Finish_RemoteOnClose_Proxy(
              AsyncIAdviseSink * This);


void __stdcall AsyncIAdviseSink_Finish_RemoteOnClose_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
#line 11795 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
#pragma endregion
#pragma region Desktop Family or OneCore Family



extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0071_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0071_v0_0_s_ifspec;







typedef IAdviseSink2 *LPADVISESINK2;


extern const IID IID_IAdviseSink2;
#line 11829 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
    typedef struct IAdviseSink2Vtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      IAdviseSink2 * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      IAdviseSink2 * This);

        ULONG ( __stdcall *Release )(
                      IAdviseSink2 * This);

                      void ( __stdcall *OnDataChange )(
            IAdviseSink2 * This,

                  FORMATETC *pFormatetc,

                  STGMEDIUM *pStgmed);

                      void ( __stdcall *OnViewChange )(
            IAdviseSink2 * This,
                       DWORD dwAspect,
                       LONG lindex);

                      void ( __stdcall *OnRename )(
            IAdviseSink2 * This,

                  IMoniker *pmk);

                      void ( __stdcall *OnSave )(
            IAdviseSink2 * This);

                      void ( __stdcall *OnClose )(
            IAdviseSink2 * This);

                      void ( __stdcall *OnLinkSrcChange )(
            IAdviseSink2 * This,

                  IMoniker *pmk);


    } IAdviseSink2Vtbl;

    struct IAdviseSink2
    {
                   struct IAdviseSink2Vtbl *lpVtbl;
    };
#line 11922 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
                HRESULT __stdcall IAdviseSink2_RemoteOnLinkSrcChange_Proxy(
              IAdviseSink2 * This,
                                     IMoniker *pmk);


void __stdcall IAdviseSink2_RemoteOnLinkSrcChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
#line 11945 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
extern const IID IID_AsyncIAdviseSink2;
#line 11964 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
    typedef struct AsyncIAdviseSink2Vtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      AsyncIAdviseSink2 * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      AsyncIAdviseSink2 * This);

        ULONG ( __stdcall *Release )(
                      AsyncIAdviseSink2 * This);

                      void ( __stdcall *Begin_OnDataChange )(
            AsyncIAdviseSink2 * This,

                  FORMATETC *pFormatetc,

                  STGMEDIUM *pStgmed);

                      void ( __stdcall *Finish_OnDataChange )(
            AsyncIAdviseSink2 * This);

                      void ( __stdcall *Begin_OnViewChange )(
            AsyncIAdviseSink2 * This,
                       DWORD dwAspect,
                       LONG lindex);

                      void ( __stdcall *Finish_OnViewChange )(
            AsyncIAdviseSink2 * This);

                      void ( __stdcall *Begin_OnRename )(
            AsyncIAdviseSink2 * This,

                  IMoniker *pmk);

                      void ( __stdcall *Finish_OnRename )(
            AsyncIAdviseSink2 * This);

                      void ( __stdcall *Begin_OnSave )(
            AsyncIAdviseSink2 * This);

                      void ( __stdcall *Finish_OnSave )(
            AsyncIAdviseSink2 * This);

                      void ( __stdcall *Begin_OnClose )(
            AsyncIAdviseSink2 * This);

                      void ( __stdcall *Finish_OnClose )(
            AsyncIAdviseSink2 * This);

                      void ( __stdcall *Begin_OnLinkSrcChange )(
            AsyncIAdviseSink2 * This,

                  IMoniker *pmk);

                      void ( __stdcall *Finish_OnLinkSrcChange )(
            AsyncIAdviseSink2 * This);


    } AsyncIAdviseSink2Vtbl;

    struct AsyncIAdviseSink2
    {
                   struct AsyncIAdviseSink2Vtbl *lpVtbl;
    };
#line 12093 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
                HRESULT __stdcall AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Proxy(
              AsyncIAdviseSink2 * This,
                                     IMoniker *pmk);


void __stdcall AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Proxy(
              AsyncIAdviseSink2 * This);


void __stdcall AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
#line 12124 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
#pragma endregion
#pragma region Application Family or OneCore Family



extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0072_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0072_v0_0_s_ifspec;







typedef IDataObject *LPDATAOBJECT;

typedef
enum tagDATADIR
    {
        DATADIR_GET = 1,
        DATADIR_SET = 2
    } DATADIR;


extern const IID IID_IDataObject;
#line 12203 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
    typedef struct IDataObjectVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      IDataObject * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      IDataObject * This);

        ULONG ( __stdcall *Release )(
                      IDataObject * This);

                      HRESULT ( __stdcall *GetData )(
            IDataObject * This,

                  FORMATETC *pformatetcIn,

                   STGMEDIUM *pmedium);

                      HRESULT ( __stdcall *GetDataHere )(
            IDataObject * This,

                  FORMATETC *pformatetc,

                     STGMEDIUM *pmedium);

        HRESULT ( __stdcall *QueryGetData )(
                      IDataObject * This,
                                             FORMATETC *pformatetc);

        HRESULT ( __stdcall *GetCanonicalFormatEtc )(
                      IDataObject * This,
                                             FORMATETC *pformatectIn,
                                   FORMATETC *pformatetcOut);

                      HRESULT ( __stdcall *SetData )(
            IDataObject * This,

                  FORMATETC *pformatetc,

                  STGMEDIUM *pmedium,
                       BOOL fRelease);

        HRESULT ( __stdcall *EnumFormatEtc )(
                      IDataObject * This,
                       DWORD dwDirection,
                                             IEnumFORMATETC **ppenumFormatEtc);

        HRESULT ( __stdcall *DAdvise )(
                      IDataObject * This,
                                 FORMATETC *pformatetc,
                       DWORD advf,
                                             IAdviseSink *pAdvSink,
                                   DWORD *pdwConnection);

        HRESULT ( __stdcall *DUnadvise )(
                      IDataObject * This,
                       DWORD dwConnection);

        HRESULT ( __stdcall *EnumDAdvise )(
                      IDataObject * This,
                                             IEnumSTATDATA **ppenumAdvise);


    } IDataObjectVtbl;

    struct IDataObject
    {
                   struct IDataObjectVtbl *lpVtbl;
    };
#line 12327 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
                HRESULT __stdcall IDataObject_RemoteGetData_Proxy(
              IDataObject * This,
                                     FORMATETC *pformatetcIn,
                           STGMEDIUM *pRemoteMedium);


void __stdcall IDataObject_RemoteGetData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall IDataObject_RemoteGetDataHere_Proxy(
              IDataObject * This,
                                     FORMATETC *pformatetc,
                                 STGMEDIUM *pRemoteMedium);


void __stdcall IDataObject_RemoteGetDataHere_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall IDataObject_RemoteSetData_Proxy(
              IDataObject * This,
                                     FORMATETC *pformatetc,
                                     FLAG_STGMEDIUM *pmedium,
               BOOL fRelease);


void __stdcall IDataObject_RemoteSetData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
#line 12375 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
#pragma endregion
#pragma region Desktop Family or OneCore Family



extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0073_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0073_v0_0_s_ifspec;







typedef IDataAdviseHolder *LPDATAADVISEHOLDER;


extern const IID IID_IDataAdviseHolder;
#line 12433 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
    typedef struct IDataAdviseHolderVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IDataAdviseHolder * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IDataAdviseHolder * This);

        ULONG ( __stdcall *Release )(
            IDataAdviseHolder * This);

        HRESULT ( __stdcall *Advise )(
            IDataAdviseHolder * This,

                      IDataObject *pDataObject,

                  FORMATETC *pFetc,

                  DWORD advf,

                  IAdviseSink *pAdvise,

                   DWORD *pdwConnection);

        HRESULT ( __stdcall *Unadvise )(
            IDataAdviseHolder * This,

                  DWORD dwConnection);

        HRESULT ( __stdcall *EnumAdvise )(
            IDataAdviseHolder * This,

                      IEnumSTATDATA **ppenumAdvise);

        HRESULT ( __stdcall *SendOnDataChange )(
            IDataAdviseHolder * This,

                  IDataObject *pDataObject,

                        DWORD dwReserved,

                  DWORD advf);


    } IDataAdviseHolderVtbl;

    struct IDataAdviseHolder
    {
                   struct IDataAdviseHolderVtbl *lpVtbl;
    };
#line 12533 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
typedef IMessageFilter *LPMESSAGEFILTER;

typedef
enum tagCALLTYPE
    {
        CALLTYPE_TOPLEVEL = 1,
        CALLTYPE_NESTED = 2,
        CALLTYPE_ASYNC = 3,
        CALLTYPE_TOPLEVEL_CALLPENDING = 4,
        CALLTYPE_ASYNC_CALLPENDING = 5
    } CALLTYPE;

typedef
enum tagSERVERCALL
    {
        SERVERCALL_ISHANDLED = 0,
        SERVERCALL_REJECTED = 1,
        SERVERCALL_RETRYLATER = 2
    } SERVERCALL;

typedef
enum tagPENDINGTYPE
    {
        PENDINGTYPE_TOPLEVEL = 1,
        PENDINGTYPE_NESTED = 2
    } PENDINGTYPE;

typedef
enum tagPENDINGMSG
    {
        PENDINGMSG_CANCELCALL = 0,
        PENDINGMSG_WAITNOPROCESS = 1,
        PENDINGMSG_WAITDEFPROCESS = 2
    } PENDINGMSG;

typedef struct tagINTERFACEINFO
    {
    IUnknown *pUnk;
    IID iid;
    WORD wMethod;
    } INTERFACEINFO;

typedef struct tagINTERFACEINFO *LPINTERFACEINFO;


extern const IID IID_IMessageFilter;
#line 12617 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
    typedef struct IMessageFilterVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IMessageFilter * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IMessageFilter * This);

        ULONG ( __stdcall *Release )(
            IMessageFilter * This);

        DWORD ( __stdcall *HandleInComingCall )(
            IMessageFilter * This,

                  DWORD dwCallType,

                  HTASK htaskCaller,

                  DWORD dwTickCount,

                      LPINTERFACEINFO lpInterfaceInfo);

        DWORD ( __stdcall *RetryRejectedCall )(
            IMessageFilter * This,

                  HTASK htaskCallee,

                  DWORD dwTickCount,

                  DWORD dwRejectType);

        DWORD ( __stdcall *MessagePending )(
            IMessageFilter * This,

                  HTASK htaskCallee,

                  DWORD dwTickCount,

                  DWORD dwPendingType);


    } IMessageFilterVtbl;

    struct IMessageFilter
    {
                   struct IMessageFilterVtbl *lpVtbl;
    };
#line 12710 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
extern const FMTID FMTID_SummaryInformation;

extern const FMTID FMTID_DocSummaryInformation;

extern const FMTID FMTID_UserDefinedProperties;

extern const FMTID FMTID_DiscardableInformation;

extern const FMTID FMTID_ImageSummaryInformation;

extern const FMTID FMTID_AudioSummaryInformation;

extern const FMTID FMTID_VideoSummaryInformation;

extern const FMTID FMTID_MediaFileSummaryInformation;



extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0075_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0075_v0_0_s_ifspec;
#line 12738 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
extern const IID IID_IClassActivator;
#line 12758 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
    typedef struct IClassActivatorVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      IClassActivator * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      IClassActivator * This);

        ULONG ( __stdcall *Release )(
                      IClassActivator * This);

        HRESULT ( __stdcall *GetClassObject )(
                      IClassActivator * This,
                                 const IID * const rclsid,
                       DWORD dwClassContext,
                       LCID locale,
                                 const IID * const riid,
                                                     void **ppv);


    } IClassActivatorVtbl;

    struct IClassActivator
    {
                   struct IClassActivatorVtbl *lpVtbl;
    };
#line 12823 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
#pragma endregion
#pragma region Application Family or OneCore Family



extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0076_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0076_v0_0_s_ifspec;
#line 12838 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
extern const IID IID_IFillLockBytes;
#line 12875 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
    typedef struct IFillLockBytesVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      IFillLockBytes * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      IFillLockBytes * This);

        ULONG ( __stdcall *Release )(
                      IFillLockBytes * This);

                      HRESULT ( __stdcall *FillAppend )(
            IFillLockBytes * This,

                                  const void *pv,

                  ULONG cb,

                   ULONG *pcbWritten);

                      HRESULT ( __stdcall *FillAt )(
            IFillLockBytes * This,

                  ULARGE_INTEGER ulOffset,

                                  const void *pv,

                  ULONG cb,

                   ULONG *pcbWritten);

        HRESULT ( __stdcall *SetFillSize )(
                      IFillLockBytes * This,
                       ULARGE_INTEGER ulSize);

        HRESULT ( __stdcall *Terminate )(
                      IFillLockBytes * This,
                       BOOL bCanceled);


    } IFillLockBytesVtbl;

    struct IFillLockBytes
    {
                   struct IFillLockBytesVtbl *lpVtbl;
    };
#line 12961 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
                HRESULT __stdcall IFillLockBytes_RemoteFillAppend_Proxy(
              IFillLockBytes * This,
                                                  const byte *pv,
               ULONG cb,
                           ULONG *pcbWritten);


void __stdcall IFillLockBytes_RemoteFillAppend_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall IFillLockBytes_RemoteFillAt_Proxy(
              IFillLockBytes * This,
               ULARGE_INTEGER ulOffset,
                                                  const byte *pv,
               ULONG cb,
                           ULONG *pcbWritten);


void __stdcall IFillLockBytes_RemoteFillAt_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
#line 12998 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
#pragma endregion
#pragma region Desktop Family or OneCore Family



extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0077_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0077_v0_0_s_ifspec;
#line 13013 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
extern const IID IID_IProgressNotify;
#line 13032 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
    typedef struct IProgressNotifyVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      IProgressNotify * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      IProgressNotify * This);

        ULONG ( __stdcall *Release )(
                      IProgressNotify * This);

        HRESULT ( __stdcall *OnProgress )(
                      IProgressNotify * This,
                       DWORD dwProgressCurrent,
                       DWORD dwProgressMaximum,
                       BOOL fAccurate,
                       BOOL fOwner);


    } IProgressNotifyVtbl;

    struct IProgressNotify
    {
                   struct IProgressNotifyVtbl *lpVtbl;
    };
#line 13096 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
#pragma endregion
#pragma region Application Family or OneCore Family



extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0078_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0078_v0_0_s_ifspec;







typedef struct tagStorageLayout
    {
    DWORD LayoutType;
    OLECHAR *pwcsElementName;
    LARGE_INTEGER cOffset;
    LARGE_INTEGER cBytes;
    } StorageLayout;


extern const IID IID_ILayoutStorage;
#line 13152 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
    typedef struct ILayoutStorageVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            ILayoutStorage * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            ILayoutStorage * This);

        ULONG ( __stdcall *Release )(
            ILayoutStorage * This);

        HRESULT ( __stdcall *LayoutScript )(
            ILayoutStorage * This,

                                  StorageLayout *pStorageLayout,

                  DWORD nEntries,

                        DWORD glfInterleavedFlag);

        HRESULT ( __stdcall *BeginMonitor )(
            ILayoutStorage * This);

        HRESULT ( __stdcall *EndMonitor )(
            ILayoutStorage * This);

        HRESULT ( __stdcall *ReLayoutDocfile )(
            ILayoutStorage * This,

                       OLECHAR *pwcsNewDfName);

        HRESULT ( __stdcall *ReLayoutDocfileOnILockBytes )(
            ILayoutStorage * This,

                  ILockBytes *pILockBytes);


    } ILayoutStorageVtbl;

    struct ILayoutStorage
    {
                   struct ILayoutStorageVtbl *lpVtbl;
    };
#line 13246 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
#pragma endregion
#pragma region Desktop Family or OneCore Family



extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0079_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0079_v0_0_s_ifspec;
#line 13261 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
extern const IID IID_IBlockingLock;
#line 13279 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
    typedef struct IBlockingLockVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      IBlockingLock * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      IBlockingLock * This);

        ULONG ( __stdcall *Release )(
                      IBlockingLock * This);

        HRESULT ( __stdcall *Lock )(
                      IBlockingLock * This,
                       DWORD dwTimeout);

        HRESULT ( __stdcall *Unlock )(
                      IBlockingLock * This);


    } IBlockingLockVtbl;

    struct IBlockingLock
    {
                   struct IBlockingLockVtbl *lpVtbl;
    };
#line 13349 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
extern const IID IID_ITimeAndNoticeControl;
#line 13366 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
    typedef struct ITimeAndNoticeControlVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      ITimeAndNoticeControl * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      ITimeAndNoticeControl * This);

        ULONG ( __stdcall *Release )(
                      ITimeAndNoticeControl * This);

        HRESULT ( __stdcall *SuppressChanges )(
                      ITimeAndNoticeControl * This,
                       DWORD res1,
                       DWORD res2);


    } ITimeAndNoticeControlVtbl;

    struct ITimeAndNoticeControl
    {
                   struct ITimeAndNoticeControlVtbl *lpVtbl;
    };
#line 13431 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
extern const IID IID_IOplockStorage;
#line 13460 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
    typedef struct IOplockStorageVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      IOplockStorage * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      IOplockStorage * This);

        ULONG ( __stdcall *Release )(
                      IOplockStorage * This);

        HRESULT ( __stdcall *CreateStorageEx )(
                      IOplockStorage * This,
                                 LPCWSTR pwcsName,
                       DWORD grfMode,
                       DWORD stgfmt,
                       DWORD grfAttrs,
                                 const IID * const riid,
                                                     void **ppstgOpen);

        HRESULT ( __stdcall *OpenStorageEx )(
                      IOplockStorage * This,
                                 LPCWSTR pwcsName,
                       DWORD grfMode,
                       DWORD stgfmt,
                       DWORD grfAttrs,
                                 const IID * const riid,
                                                     void **ppstgOpen);


    } IOplockStorageVtbl;

    struct IOplockStorage
    {
                   struct IOplockStorageVtbl *lpVtbl;
    };
#line 13538 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
#pragma endregion
#pragma region Application Family or OneCore Family



extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0082_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0082_v0_0_s_ifspec;
#line 13553 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
extern const IID IID_IDirectWriterLock;
#line 13573 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
    typedef struct IDirectWriterLockVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      IDirectWriterLock * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      IDirectWriterLock * This);

        ULONG ( __stdcall *Release )(
                      IDirectWriterLock * This);

        HRESULT ( __stdcall *WaitForWriteAccess )(
                      IDirectWriterLock * This,
                       DWORD dwTimeout);

        HRESULT ( __stdcall *ReleaseWriteAccess )(
                      IDirectWriterLock * This);

        HRESULT ( __stdcall *HaveWriteAccess )(
                      IDirectWriterLock * This);


    } IDirectWriterLockVtbl;

    struct IDirectWriterLock
    {
                   struct IDirectWriterLockVtbl *lpVtbl;
    };
#line 13646 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
#pragma endregion
#pragma region Desktop Family or OneCore Family



extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0083_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0083_v0_0_s_ifspec;
#line 13661 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
extern const IID IID_IUrlMon;
#line 13686 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
    typedef struct IUrlMonVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      IUrlMon * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      IUrlMon * This);

        ULONG ( __stdcall *Release )(
                      IUrlMon * This);

        HRESULT ( __stdcall *AsyncGetClassBits )(
                      IUrlMon * This,
                                 const IID * const rclsid,
                                             LPCWSTR pszTYPE,
                                             LPCWSTR pszExt,
                       DWORD dwFileVersionMS,
                       DWORD dwFileVersionLS,
                                             LPCWSTR pszCodeBase,
                                     IBindCtx *pbc,
                       DWORD dwClassContext,
                                 const IID * const riid,
                       DWORD flags);


    } IUrlMonVtbl;

    struct IUrlMon
    {
                   struct IUrlMonVtbl *lpVtbl;
    };
#line 13759 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
extern const IID IID_IForegroundTransfer;
#line 13776 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
    typedef struct IForegroundTransferVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IForegroundTransfer * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IForegroundTransfer * This);

        ULONG ( __stdcall *Release )(
            IForegroundTransfer * This);

        HRESULT ( __stdcall *AllowForegroundTransfer )(
            IForegroundTransfer * This,

                        void *lpvReserved);


    } IForegroundTransferVtbl;

    struct IForegroundTransfer
    {
                   struct IForegroundTransferVtbl *lpVtbl;
    };
#line 13841 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
extern const IID IID_IThumbnailExtractor;
#line 13865 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
    typedef struct IThumbnailExtractorVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      IThumbnailExtractor * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      IThumbnailExtractor * This);

        ULONG ( __stdcall *Release )(
                      IThumbnailExtractor * This);

        HRESULT ( __stdcall *ExtractThumbnail )(
                      IThumbnailExtractor * This,
                                     IStorage *pStg,
                       ULONG ulLength,
                       ULONG ulHeight,
                                   ULONG *pulOutputLength,
                                   ULONG *pulOutputHeight,
                                             HBITMAP *phOutputBitmap);

        HRESULT ( __stdcall *OnFileUpdated )(
                      IThumbnailExtractor * This,
                                     IStorage *pStg);


    } IThumbnailExtractorVtbl;

    struct IThumbnailExtractor
    {
                   struct IThumbnailExtractorVtbl *lpVtbl;
    };
#line 13941 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
extern const IID IID_IDummyHICONIncluder;
#line 13958 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
    typedef struct IDummyHICONIncluderVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      IDummyHICONIncluder * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      IDummyHICONIncluder * This);

        ULONG ( __stdcall *Release )(
                      IDummyHICONIncluder * This);

        HRESULT ( __stdcall *Dummy )(
                      IDummyHICONIncluder * This,
                                 HICON h1,
                                 HDC h2);


    } IDummyHICONIncluderVtbl;

    struct IDummyHICONIncluder
    {
                   struct IDummyHICONIncluderVtbl *lpVtbl;
    };
#line 14019 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
typedef
enum tagApplicationType
    {
        ServerApplication = 0,
        LibraryApplication = ( ServerApplication + 1 )
    } ApplicationType;

typedef
enum tagShutdownType
    {
        IdleShutdown = 0,
        ForcedShutdown = ( IdleShutdown + 1 )
    } ShutdownType;



extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0087_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0087_v0_0_s_ifspec;
#line 14045 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
extern const IID IID_IProcessLock;
#line 14062 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
    typedef struct IProcessLockVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IProcessLock * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IProcessLock * This);

        ULONG ( __stdcall *Release )(
            IProcessLock * This);

        ULONG ( __stdcall *AddRefOnProcess )(
            IProcessLock * This);

        ULONG ( __stdcall *ReleaseRefOnProcess )(
            IProcessLock * This);


    } IProcessLockVtbl;

    struct IProcessLock
    {
                   struct IProcessLockVtbl *lpVtbl;
    };
#line 14131 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
extern const IID IID_ISurrogateService;
#line 14170 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
    typedef struct ISurrogateServiceVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            ISurrogateService * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            ISurrogateService * This);

        ULONG ( __stdcall *Release )(
            ISurrogateService * This);

        HRESULT ( __stdcall *Init )(
            ISurrogateService * This,

                  const GUID * const rguidProcessID,

                  IProcessLock *pProcessLock,

                   BOOL *pfApplicationAware);

        HRESULT ( __stdcall *ApplicationLaunch )(
            ISurrogateService * This,

                  const GUID * const rguidApplID,

                  ApplicationType appType);

        HRESULT ( __stdcall *ApplicationFree )(
            ISurrogateService * This,

                  const GUID * const rguidApplID);

        HRESULT ( __stdcall *CatalogRefresh )(
            ISurrogateService * This,

                        ULONG ulReserved);

        HRESULT ( __stdcall *ProcessShutdown )(
            ISurrogateService * This,

                  ShutdownType shutdownType);


    } ISurrogateServiceVtbl;

    struct ISurrogateService
    {
                   struct ISurrogateServiceVtbl *lpVtbl;
    };
#line 14272 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0089_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0089_v0_0_s_ifspec;







typedef IInitializeSpy *LPINITIALIZESPY;


extern const IID IID_IInitializeSpy;
#line 14319 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
    typedef struct IInitializeSpyVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IInitializeSpy * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IInitializeSpy * This);

        ULONG ( __stdcall *Release )(
            IInitializeSpy * This);

        HRESULT ( __stdcall *PreInitialize )(
            IInitializeSpy * This,

                  DWORD dwCoInit,

                  DWORD dwCurThreadAptRefs);

        HRESULT ( __stdcall *PostInitialize )(
            IInitializeSpy * This,

                  HRESULT hrCoInit,

                  DWORD dwCoInit,

                  DWORD dwNewThreadAptRefs);

        HRESULT ( __stdcall *PreUninitialize )(
            IInitializeSpy * This,

                  DWORD dwCurThreadAptRefs);

        HRESULT ( __stdcall *PostUninitialize )(
            IInitializeSpy * This,

                  DWORD dwNewThreadAptRefs);


    } IInitializeSpyVtbl;

    struct IInitializeSpy
    {
                   struct IInitializeSpyVtbl *lpVtbl;
    };
#line 14412 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
#pragma endregion
#pragma region Application Family or OneCore Family



extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0090_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0090_v0_0_s_ifspec;
#line 14427 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
extern const IID IID_IApartmentShutdown;
#line 14444 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
    typedef struct IApartmentShutdownVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IApartmentShutdown * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IApartmentShutdown * This);

        ULONG ( __stdcall *Release )(
            IApartmentShutdown * This);

        void ( __stdcall *OnUninitialize )(
            IApartmentShutdown * This,

                  UINT64 ui64ApartmentIdentifier);


    } IApartmentShutdownVtbl;

    struct IApartmentShutdown
    {
                   struct IApartmentShutdownVtbl *lpVtbl;
    };
#line 14506 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
#pragma endregion
#line 14516 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0091_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0091_v0_0_s_ifspec;



unsigned long __stdcall ASYNC_STGMEDIUM_UserSize( unsigned long *, unsigned long , ASYNC_STGMEDIUM * );
unsigned char * __stdcall ASYNC_STGMEDIUM_UserMarshal( unsigned long *, unsigned char *, ASYNC_STGMEDIUM * );
unsigned char * __stdcall ASYNC_STGMEDIUM_UserUnmarshal( unsigned long *, unsigned char *, ASYNC_STGMEDIUM * );
void __stdcall ASYNC_STGMEDIUM_UserFree( unsigned long *, ASYNC_STGMEDIUM * );

unsigned long __stdcall CLIPFORMAT_UserSize( unsigned long *, unsigned long , CLIPFORMAT * );
unsigned char * __stdcall CLIPFORMAT_UserMarshal( unsigned long *, unsigned char *, CLIPFORMAT * );
unsigned char * __stdcall CLIPFORMAT_UserUnmarshal( unsigned long *, unsigned char *, CLIPFORMAT * );
void __stdcall CLIPFORMAT_UserFree( unsigned long *, CLIPFORMAT * );

unsigned long __stdcall FLAG_STGMEDIUM_UserSize( unsigned long *, unsigned long , FLAG_STGMEDIUM * );
unsigned char * __stdcall FLAG_STGMEDIUM_UserMarshal( unsigned long *, unsigned char *, FLAG_STGMEDIUM * );
unsigned char * __stdcall FLAG_STGMEDIUM_UserUnmarshal( unsigned long *, unsigned char *, FLAG_STGMEDIUM * );
void __stdcall FLAG_STGMEDIUM_UserFree( unsigned long *, FLAG_STGMEDIUM * );

unsigned long __stdcall HBITMAP_UserSize( unsigned long *, unsigned long , HBITMAP * );
unsigned char * __stdcall HBITMAP_UserMarshal( unsigned long *, unsigned char *, HBITMAP * );
unsigned char * __stdcall HBITMAP_UserUnmarshal( unsigned long *, unsigned char *, HBITMAP * );
void __stdcall HBITMAP_UserFree( unsigned long *, HBITMAP * );

unsigned long __stdcall HDC_UserSize( unsigned long *, unsigned long , HDC * );
unsigned char * __stdcall HDC_UserMarshal( unsigned long *, unsigned char *, HDC * );
unsigned char * __stdcall HDC_UserUnmarshal( unsigned long *, unsigned char *, HDC * );
void __stdcall HDC_UserFree( unsigned long *, HDC * );

unsigned long __stdcall HICON_UserSize( unsigned long *, unsigned long , HICON * );
unsigned char * __stdcall HICON_UserMarshal( unsigned long *, unsigned char *, HICON * );
unsigned char * __stdcall HICON_UserUnmarshal( unsigned long *, unsigned char *, HICON * );
void __stdcall HICON_UserFree( unsigned long *, HICON * );

unsigned long __stdcall SNB_UserSize( unsigned long *, unsigned long , SNB * );
unsigned char * __stdcall SNB_UserMarshal( unsigned long *, unsigned char *, SNB * );
unsigned char * __stdcall SNB_UserUnmarshal( unsigned long *, unsigned char *, SNB * );
void __stdcall SNB_UserFree( unsigned long *, SNB * );

unsigned long __stdcall STGMEDIUM_UserSize( unsigned long *, unsigned long , STGMEDIUM * );
unsigned char * __stdcall STGMEDIUM_UserMarshal( unsigned long *, unsigned char *, STGMEDIUM * );
unsigned char * __stdcall STGMEDIUM_UserUnmarshal( unsigned long *, unsigned char *, STGMEDIUM * );
void __stdcall STGMEDIUM_UserFree( unsigned long *, STGMEDIUM * );

unsigned long __stdcall ASYNC_STGMEDIUM_UserSize64( unsigned long *, unsigned long , ASYNC_STGMEDIUM * );
unsigned char * __stdcall ASYNC_STGMEDIUM_UserMarshal64( unsigned long *, unsigned char *, ASYNC_STGMEDIUM * );
unsigned char * __stdcall ASYNC_STGMEDIUM_UserUnmarshal64( unsigned long *, unsigned char *, ASYNC_STGMEDIUM * );
void __stdcall ASYNC_STGMEDIUM_UserFree64( unsigned long *, ASYNC_STGMEDIUM * );

unsigned long __stdcall CLIPFORMAT_UserSize64( unsigned long *, unsigned long , CLIPFORMAT * );
unsigned char * __stdcall CLIPFORMAT_UserMarshal64( unsigned long *, unsigned char *, CLIPFORMAT * );
unsigned char * __stdcall CLIPFORMAT_UserUnmarshal64( unsigned long *, unsigned char *, CLIPFORMAT * );
void __stdcall CLIPFORMAT_UserFree64( unsigned long *, CLIPFORMAT * );

unsigned long __stdcall FLAG_STGMEDIUM_UserSize64( unsigned long *, unsigned long , FLAG_STGMEDIUM * );
unsigned char * __stdcall FLAG_STGMEDIUM_UserMarshal64( unsigned long *, unsigned char *, FLAG_STGMEDIUM * );
unsigned char * __stdcall FLAG_STGMEDIUM_UserUnmarshal64( unsigned long *, unsigned char *, FLAG_STGMEDIUM * );
void __stdcall FLAG_STGMEDIUM_UserFree64( unsigned long *, FLAG_STGMEDIUM * );

unsigned long __stdcall HBITMAP_UserSize64( unsigned long *, unsigned long , HBITMAP * );
unsigned char * __stdcall HBITMAP_UserMarshal64( unsigned long *, unsigned char *, HBITMAP * );
unsigned char * __stdcall HBITMAP_UserUnmarshal64( unsigned long *, unsigned char *, HBITMAP * );
void __stdcall HBITMAP_UserFree64( unsigned long *, HBITMAP * );

unsigned long __stdcall HDC_UserSize64( unsigned long *, unsigned long , HDC * );
unsigned char * __stdcall HDC_UserMarshal64( unsigned long *, unsigned char *, HDC * );
unsigned char * __stdcall HDC_UserUnmarshal64( unsigned long *, unsigned char *, HDC * );
void __stdcall HDC_UserFree64( unsigned long *, HDC * );

unsigned long __stdcall HICON_UserSize64( unsigned long *, unsigned long , HICON * );
unsigned char * __stdcall HICON_UserMarshal64( unsigned long *, unsigned char *, HICON * );
unsigned char * __stdcall HICON_UserUnmarshal64( unsigned long *, unsigned char *, HICON * );
void __stdcall HICON_UserFree64( unsigned long *, HICON * );

unsigned long __stdcall SNB_UserSize64( unsigned long *, unsigned long , SNB * );
unsigned char * __stdcall SNB_UserMarshal64( unsigned long *, unsigned char *, SNB * );
unsigned char * __stdcall SNB_UserUnmarshal64( unsigned long *, unsigned char *, SNB * );
void __stdcall SNB_UserFree64( unsigned long *, SNB * );

unsigned long __stdcall STGMEDIUM_UserSize64( unsigned long *, unsigned long , STGMEDIUM * );
unsigned char * __stdcall STGMEDIUM_UserMarshal64( unsigned long *, unsigned char *, STGMEDIUM * );
unsigned char * __stdcall STGMEDIUM_UserUnmarshal64( unsigned long *, unsigned char *, STGMEDIUM * );
void __stdcall STGMEDIUM_UserFree64( unsigned long *, STGMEDIUM * );

              HRESULT __stdcall IEnumUnknown_Next_Proxy(
    IEnumUnknown * This,

          ULONG celt,

                                         IUnknown **rgelt,

               ULONG *pceltFetched);


                HRESULT __stdcall IEnumUnknown_Next_Stub(
              IEnumUnknown * This,
               ULONG celt,
                                                                                IUnknown **rgelt,
                           ULONG *pceltFetched);

              HRESULT __stdcall IEnumString_Next_Proxy(
    IEnumString * This,
               ULONG celt,

                                         LPOLESTR *rgelt,

               ULONG *pceltFetched);


                HRESULT __stdcall IEnumString_Next_Stub(
              IEnumString * This,
               ULONG celt,
                                                                                LPOLESTR *rgelt,
                           ULONG *pceltFetched);

              HRESULT __stdcall ISequentialStream_Read_Proxy(
    ISequentialStream * This,

                                         void *pv,

          ULONG cb,

               ULONG *pcbRead);


                HRESULT __stdcall ISequentialStream_Read_Stub(
              ISequentialStream * This,
                                                                         byte *pv,
               ULONG cb,
                           ULONG *pcbRead);

              HRESULT __stdcall ISequentialStream_Write_Proxy(
    ISequentialStream * This,

                          const void *pv,

          ULONG cb,

               ULONG *pcbWritten);


                HRESULT __stdcall ISequentialStream_Write_Stub(
              ISequentialStream * This,
                                                  const byte *pv,
               ULONG cb,
                           ULONG *pcbWritten);

              HRESULT __stdcall IStream_Seek_Proxy(
    IStream * This,
               LARGE_INTEGER dlibMove,
               DWORD dwOrigin,

               ULARGE_INTEGER *plibNewPosition);


                HRESULT __stdcall IStream_Seek_Stub(
              IStream * This,
               LARGE_INTEGER dlibMove,
               DWORD dwOrigin,
                           ULARGE_INTEGER *plibNewPosition);

              HRESULT __stdcall IStream_CopyTo_Proxy(
    IStream * This,

          IStream *pstm,
               ULARGE_INTEGER cb,

               ULARGE_INTEGER *pcbRead,

               ULARGE_INTEGER *pcbWritten);


                HRESULT __stdcall IStream_CopyTo_Stub(
              IStream * This,
                                     IStream *pstm,
               ULARGE_INTEGER cb,
                           ULARGE_INTEGER *pcbRead,
                           ULARGE_INTEGER *pcbWritten);

              HRESULT __stdcall IBindCtx_SetBindOptions_Proxy(
    IBindCtx * This,

          BIND_OPTS *pbindopts);


                HRESULT __stdcall IBindCtx_SetBindOptions_Stub(
              IBindCtx * This,
                         BIND_OPTS2 *pbindopts);

              HRESULT __stdcall IBindCtx_GetBindOptions_Proxy(
    IBindCtx * This,

             BIND_OPTS *pbindopts);


                HRESULT __stdcall IBindCtx_GetBindOptions_Stub(
              IBindCtx * This,
                                 BIND_OPTS2 *pbindopts);

              HRESULT __stdcall IEnumMoniker_Next_Proxy(
    IEnumMoniker * This,
               ULONG celt,

                                         IMoniker **rgelt,

               ULONG *pceltFetched);


                HRESULT __stdcall IEnumMoniker_Next_Stub(
              IEnumMoniker * This,
               ULONG celt,
                                                                                IMoniker **rgelt,
                           ULONG *pceltFetched);

              BOOL __stdcall IRunnableObject_IsRunning_Proxy(
    IRunnableObject * This);


                HRESULT __stdcall IRunnableObject_IsRunning_Stub(
              IRunnableObject * This);

              HRESULT __stdcall IMoniker_BindToObject_Proxy(
    IMoniker * This,

          IBindCtx *pbc,

              IMoniker *pmkToLeft,

          const IID * const riidResult,

              void **ppvResult);


                HRESULT __stdcall IMoniker_BindToObject_Stub(
              IMoniker * This,
                                     IBindCtx *pbc,
                                     IMoniker *pmkToLeft,
                         const IID * const riidResult,
                                             IUnknown **ppvResult);

              HRESULT __stdcall IMoniker_BindToStorage_Proxy(
    IMoniker * This,

          IBindCtx *pbc,

              IMoniker *pmkToLeft,

          const IID * const riid,

              void **ppvObj);


                HRESULT __stdcall IMoniker_BindToStorage_Stub(
              IMoniker * This,
                                     IBindCtx *pbc,
                                     IMoniker *pmkToLeft,
                         const IID * const riid,
                                             IUnknown **ppvObj);

              HRESULT __stdcall IEnumSTATSTG_Next_Proxy(
    IEnumSTATSTG * This,
               ULONG celt,

                                         STATSTG *rgelt,

               ULONG *pceltFetched);


                HRESULT __stdcall IEnumSTATSTG_Next_Stub(
              IEnumSTATSTG * This,
               ULONG celt,
                                                                                STATSTG *rgelt,
                           ULONG *pceltFetched);

              HRESULT __stdcall IStorage_OpenStream_Proxy(
    IStorage * This,

            const OLECHAR *pwcsName,

                void *reserved1,
               DWORD grfMode,
               DWORD reserved2,

              IStream **ppstm);


                HRESULT __stdcall IStorage_OpenStream_Stub(
              IStorage * This,
                                        const OLECHAR *pwcsName,
               ULONG cbReserved1,
                                                                       byte *reserved1,
               DWORD grfMode,
               DWORD reserved2,
                                     IStream **ppstm);

              HRESULT __stdcall IStorage_CopyTo_Proxy(
    IStorage * This,
               DWORD ciidExclude,

                                 const IID *rgiidExclude,

              SNB snbExclude,

          IStorage *pstgDest);


                HRESULT __stdcall IStorage_CopyTo_Stub(
              IStorage * This,
               DWORD ciidExclude,
                                                                       const IID *rgiidExclude,
                                               SNB snbExclude,
                                     IStorage *pstgDest);

              HRESULT __stdcall IStorage_EnumElements_Proxy(
    IStorage * This,

                DWORD reserved1,

                void *reserved2,

                DWORD reserved3,

              IEnumSTATSTG **ppenum);


                HRESULT __stdcall IStorage_EnumElements_Stub(
              IStorage * This,
               DWORD reserved1,
               ULONG cbReserved2,
                                                                       byte *reserved2,
               DWORD reserved3,
                                     IEnumSTATSTG **ppenum);

              HRESULT __stdcall ILockBytes_ReadAt_Proxy(
    ILockBytes * This,
               ULARGE_INTEGER ulOffset,

                                         void *pv,
               ULONG cb,

               ULONG *pcbRead);


                HRESULT __stdcall ILockBytes_ReadAt_Stub(
              ILockBytes * This,
               ULARGE_INTEGER ulOffset,
                                                                         byte *pv,
               ULONG cb,
                           ULONG *pcbRead);

              HRESULT __stdcall ILockBytes_WriteAt_Proxy(
    ILockBytes * This,
               ULARGE_INTEGER ulOffset,

                          const void *pv,
               ULONG cb,

               ULONG *pcbWritten);


                HRESULT __stdcall ILockBytes_WriteAt_Stub(
              ILockBytes * This,
               ULARGE_INTEGER ulOffset,
                                                  const byte *pv,
               ULONG cb,
                           ULONG *pcbWritten);

              HRESULT __stdcall IEnumFORMATETC_Next_Proxy(
    IEnumFORMATETC * This,
               ULONG celt,

                                         FORMATETC *rgelt,

               ULONG *pceltFetched);


                HRESULT __stdcall IEnumFORMATETC_Next_Stub(
              IEnumFORMATETC * This,
               ULONG celt,
                                                                                FORMATETC *rgelt,
                           ULONG *pceltFetched);

              HRESULT __stdcall IEnumSTATDATA_Next_Proxy(
    IEnumSTATDATA * This,
               ULONG celt,

                                         STATDATA *rgelt,

               ULONG *pceltFetched);


                HRESULT __stdcall IEnumSTATDATA_Next_Stub(
              IEnumSTATDATA * This,
               ULONG celt,
                                                                                STATDATA *rgelt,
                           ULONG *pceltFetched);

              void __stdcall IAdviseSink_OnDataChange_Proxy(
    IAdviseSink * This,

          FORMATETC *pFormatetc,

          STGMEDIUM *pStgmed);


                HRESULT __stdcall IAdviseSink_OnDataChange_Stub(
              IAdviseSink * This,
                                     FORMATETC *pFormatetc,
                                     ASYNC_STGMEDIUM *pStgmed);

              void __stdcall IAdviseSink_OnViewChange_Proxy(
    IAdviseSink * This,
               DWORD dwAspect,
               LONG lindex);


                HRESULT __stdcall IAdviseSink_OnViewChange_Stub(
              IAdviseSink * This,
               DWORD dwAspect,
               LONG lindex);

              void __stdcall IAdviseSink_OnRename_Proxy(
    IAdviseSink * This,

          IMoniker *pmk);


                HRESULT __stdcall IAdviseSink_OnRename_Stub(
              IAdviseSink * This,
                             IMoniker *pmk);

              void __stdcall IAdviseSink_OnSave_Proxy(
    IAdviseSink * This);


                HRESULT __stdcall IAdviseSink_OnSave_Stub(
              IAdviseSink * This);

              void __stdcall IAdviseSink_OnClose_Proxy(
    IAdviseSink * This);


                HRESULT __stdcall IAdviseSink_OnClose_Stub(
              IAdviseSink * This);

              void __stdcall AsyncIAdviseSink_Begin_OnDataChange_Proxy(
    AsyncIAdviseSink * This,

          FORMATETC *pFormatetc,

          STGMEDIUM *pStgmed);


                HRESULT __stdcall AsyncIAdviseSink_Begin_OnDataChange_Stub(
              AsyncIAdviseSink * This,
                                     FORMATETC *pFormatetc,
                                     ASYNC_STGMEDIUM *pStgmed);

              void __stdcall AsyncIAdviseSink_Finish_OnDataChange_Proxy(
    AsyncIAdviseSink * This);


                HRESULT __stdcall AsyncIAdviseSink_Finish_OnDataChange_Stub(
              AsyncIAdviseSink * This);

              void __stdcall AsyncIAdviseSink_Begin_OnViewChange_Proxy(
    AsyncIAdviseSink * This,
               DWORD dwAspect,
               LONG lindex);


                HRESULT __stdcall AsyncIAdviseSink_Begin_OnViewChange_Stub(
              AsyncIAdviseSink * This,
               DWORD dwAspect,
               LONG lindex);

              void __stdcall AsyncIAdviseSink_Finish_OnViewChange_Proxy(
    AsyncIAdviseSink * This);


                HRESULT __stdcall AsyncIAdviseSink_Finish_OnViewChange_Stub(
              AsyncIAdviseSink * This);

              void __stdcall AsyncIAdviseSink_Begin_OnRename_Proxy(
    AsyncIAdviseSink * This,

          IMoniker *pmk);


                HRESULT __stdcall AsyncIAdviseSink_Begin_OnRename_Stub(
              AsyncIAdviseSink * This,
                             IMoniker *pmk);

              void __stdcall AsyncIAdviseSink_Finish_OnRename_Proxy(
    AsyncIAdviseSink * This);


                HRESULT __stdcall AsyncIAdviseSink_Finish_OnRename_Stub(
              AsyncIAdviseSink * This);

              void __stdcall AsyncIAdviseSink_Begin_OnSave_Proxy(
    AsyncIAdviseSink * This);


                HRESULT __stdcall AsyncIAdviseSink_Begin_OnSave_Stub(
              AsyncIAdviseSink * This);

              void __stdcall AsyncIAdviseSink_Finish_OnSave_Proxy(
    AsyncIAdviseSink * This);


                HRESULT __stdcall AsyncIAdviseSink_Finish_OnSave_Stub(
              AsyncIAdviseSink * This);

              void __stdcall AsyncIAdviseSink_Begin_OnClose_Proxy(
    AsyncIAdviseSink * This);


                HRESULT __stdcall AsyncIAdviseSink_Begin_OnClose_Stub(
              AsyncIAdviseSink * This);

              void __stdcall AsyncIAdviseSink_Finish_OnClose_Proxy(
    AsyncIAdviseSink * This);


                HRESULT __stdcall AsyncIAdviseSink_Finish_OnClose_Stub(
              AsyncIAdviseSink * This);

              void __stdcall IAdviseSink2_OnLinkSrcChange_Proxy(
    IAdviseSink2 * This,

          IMoniker *pmk);


                HRESULT __stdcall IAdviseSink2_OnLinkSrcChange_Stub(
              IAdviseSink2 * This,
                                     IMoniker *pmk);

              void __stdcall AsyncIAdviseSink2_Begin_OnLinkSrcChange_Proxy(
    AsyncIAdviseSink2 * This,

          IMoniker *pmk);


                HRESULT __stdcall AsyncIAdviseSink2_Begin_OnLinkSrcChange_Stub(
              AsyncIAdviseSink2 * This,
                                     IMoniker *pmk);

              void __stdcall AsyncIAdviseSink2_Finish_OnLinkSrcChange_Proxy(
    AsyncIAdviseSink2 * This);


                HRESULT __stdcall AsyncIAdviseSink2_Finish_OnLinkSrcChange_Stub(
              AsyncIAdviseSink2 * This);

              HRESULT __stdcall IDataObject_GetData_Proxy(
    IDataObject * This,

          FORMATETC *pformatetcIn,

           STGMEDIUM *pmedium);


                HRESULT __stdcall IDataObject_GetData_Stub(
              IDataObject * This,
                                     FORMATETC *pformatetcIn,
                           STGMEDIUM *pRemoteMedium);

              HRESULT __stdcall IDataObject_GetDataHere_Proxy(
    IDataObject * This,

          FORMATETC *pformatetc,

             STGMEDIUM *pmedium);


                HRESULT __stdcall IDataObject_GetDataHere_Stub(
              IDataObject * This,
                                     FORMATETC *pformatetc,
                                 STGMEDIUM *pRemoteMedium);

              HRESULT __stdcall IDataObject_SetData_Proxy(
    IDataObject * This,

          FORMATETC *pformatetc,

          STGMEDIUM *pmedium,
               BOOL fRelease);


                HRESULT __stdcall IDataObject_SetData_Stub(
              IDataObject * This,
                                     FORMATETC *pformatetc,
                                     FLAG_STGMEDIUM *pmedium,
               BOOL fRelease);

              HRESULT __stdcall IFillLockBytes_FillAppend_Proxy(
    IFillLockBytes * This,

                          const void *pv,

          ULONG cb,

           ULONG *pcbWritten);


                HRESULT __stdcall IFillLockBytes_FillAppend_Stub(
              IFillLockBytes * This,
                                                  const byte *pv,
               ULONG cb,
                           ULONG *pcbWritten);

              HRESULT __stdcall IFillLockBytes_FillAt_Proxy(
    IFillLockBytes * This,

          ULARGE_INTEGER ulOffset,

                          const void *pv,

          ULONG cb,

           ULONG *pcbWritten);


                HRESULT __stdcall IFillLockBytes_FillAt_Stub(
              IFillLockBytes * This,
               ULARGE_INTEGER ulOffset,
                                                  const byte *pv,
               ULONG cb,
                           ULONG *pcbWritten);
#line 15159 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
#pragma option pop
#line 41 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\coml2api.h"

#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\propidlbase.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 22 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\propidlbase.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpc.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 227 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpc.h"
#pragma option pop
#line 22 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\propidlbase.h"

#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcndr.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 3292 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcndr.h"
#pragma option pop
#line 23 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\propidlbase.h"
#line 45 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\propidlbase.h"
typedef struct IPropertyStorage IPropertyStorage;






typedef struct IPropertySetStorage IPropertySetStorage;






typedef struct IEnumSTATPROPSTG IEnumSTATPROPSTG;






typedef struct IEnumSTATPROPSETSTG IEnumSTATPROPSETSTG;






#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 22 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpc.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 227 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpc.h"
#pragma option pop
#line 22 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"

#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcndr.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 3292 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcndr.h"
#pragma option pop
#line 23 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
#line 15159 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
#pragma option pop
#line 72 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\propidlbase.h"

#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oaidl.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 22 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oaidl.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpc.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 227 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpc.h"
#pragma option pop
#line 22 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oaidl.h"

#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcndr.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 3292 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcndr.h"
#pragma option pop
#line 23 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oaidl.h"
#line 45 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oaidl.h"
typedef struct ICreateTypeInfo ICreateTypeInfo;






typedef struct ICreateTypeInfo2 ICreateTypeInfo2;






typedef struct ICreateTypeLib ICreateTypeLib;






typedef struct ICreateTypeLib2 ICreateTypeLib2;






typedef struct IDispatch IDispatch;






typedef struct IEnumVARIANT IEnumVARIANT;






typedef struct ITypeComp ITypeComp;






typedef struct ITypeInfo ITypeInfo;






typedef struct ITypeInfo2 ITypeInfo2;






typedef struct ITypeLib ITypeLib;






typedef struct ITypeLib2 ITypeLib2;






typedef struct ITypeChangeEvents ITypeChangeEvents;






typedef struct IErrorInfo IErrorInfo;






typedef struct ICreateErrorInfo ICreateErrorInfo;






typedef struct ISupportErrorInfo ISupportErrorInfo;






typedef struct ITypeFactory ITypeFactory;






typedef struct ITypeMarshal ITypeMarshal;






typedef struct IRecordInfo IRecordInfo;






typedef struct IErrorLog IErrorLog;






typedef struct IPropertyBag IPropertyBag;






#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 22 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpc.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 227 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpc.h"
#pragma option pop
#line 22 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"

#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcndr.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 3292 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcndr.h"
#pragma option pop
#line 23 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
#line 15159 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
#pragma option pop
#line 184 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oaidl.h"
#line 211 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oaidl.h"
#pragma region Desktop Family or OneCore Family






#pragma endregion
#pragma region Application Family or OneCore Family





#pragma endregion
#pragma region Desktop Family or OneCore Family or OneCore Family
#line 240 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oaidl.h"
#pragma endregion
#pragma region Application Family or OneCore Family



extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0000_v0_0_s_ifspec;







typedef CY CURRENCY;

typedef struct tagSAFEARRAYBOUND
    {
    ULONG cElements;
    LONG lLbound;
    } SAFEARRAYBOUND;

typedef struct tagSAFEARRAYBOUND *LPSAFEARRAYBOUND;


typedef struct _wireVARIANT *wireVARIANT;

typedef struct _wireBRECORD *wireBRECORD;

typedef struct _wireSAFEARR_BSTR
    {
    ULONG Size;
                         wireBSTR *aBstr;
    } SAFEARR_BSTR;

typedef struct _wireSAFEARR_UNKNOWN
    {
    ULONG Size;
                         IUnknown **apUnknown;
    } SAFEARR_UNKNOWN;

typedef struct _wireSAFEARR_DISPATCH
    {
    ULONG Size;
                         IDispatch **apDispatch;
    } SAFEARR_DISPATCH;

typedef struct _wireSAFEARR_VARIANT
    {
    ULONG Size;
                         wireVARIANT *aVariant;
    } SAFEARR_VARIANT;

typedef struct _wireSAFEARR_BRECORD
    {
    ULONG Size;
                         wireBRECORD *aRecord;
    } SAFEARR_BRECORD;

typedef struct _wireSAFEARR_HAVEIID
    {
    ULONG Size;
                         IUnknown **apUnknown;
    IID iid;
    } SAFEARR_HAVEIID;

typedef
enum tagSF_TYPE
    {
        SF_ERROR = VT_ERROR,
        SF_I1 = VT_I1,
        SF_I2 = VT_I2,
        SF_I4 = VT_I4,
        SF_I8 = VT_I8,
        SF_BSTR = VT_BSTR,
        SF_UNKNOWN = VT_UNKNOWN,
        SF_DISPATCH = VT_DISPATCH,
        SF_VARIANT = VT_VARIANT,
        SF_RECORD = VT_RECORD,
        SF_HAVEIID = ( VT_UNKNOWN | VT_RESERVED )
    } SF_TYPE;

typedef struct _wireSAFEARRAY_UNION
    {
    ULONG sfType;
                                          union __MIDL_IOleAutomationTypes_0001
        {
                       SAFEARR_BSTR BstrStr;
                       SAFEARR_UNKNOWN UnknownStr;
                       SAFEARR_DISPATCH DispatchStr;
                       SAFEARR_VARIANT VariantStr;
                       SAFEARR_BRECORD RecordStr;
                       SAFEARR_HAVEIID HaveIidStr;
                       BYTE_SIZEDARR ByteStr;
                       WORD_SIZEDARR WordStr;
                       DWORD_SIZEDARR LongStr;
                       HYPER_SIZEDARR HyperStr;
        } u;
    } SAFEARRAYUNION;

typedef struct _wireSAFEARRAY
    {
    USHORT cDims;
    USHORT fFeatures;
    ULONG cbElements;
    ULONG cLocks;
    SAFEARRAYUNION uArrayStructs;
                    SAFEARRAYBOUND rgsabound[ 1 ];
    } *wireSAFEARRAY;

typedef wireSAFEARRAY *wirePSAFEARRAY;

typedef struct tagSAFEARRAY
    {
    USHORT cDims;
    USHORT fFeatures;
    ULONG cbElements;
    ULONG cLocks;
    PVOID pvData;
    SAFEARRAYBOUND rgsabound[ 1 ];
    } SAFEARRAY;

typedef SAFEARRAY *LPSAFEARRAY;
#line 453 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oaidl.h"
typedef struct tagVARIANT VARIANT;

struct tagVARIANT
    {
    union
        {
        struct __tagVARIANT
            {
            VARTYPE vt;
            WORD wReserved1;
            WORD wReserved2;
            WORD wReserved3;
            union
                {
                LONGLONG llVal;
                LONG lVal;
                BYTE bVal;
                SHORT iVal;
                FLOAT fltVal;
                DOUBLE dblVal;
                VARIANT_BOOL boolVal;

                SCODE scode;
                CY cyVal;
                DATE date;
                BSTR bstrVal;
                IUnknown *punkVal;
                IDispatch *pdispVal;
                SAFEARRAY *parray;
                BYTE *pbVal;
                SHORT *piVal;
                LONG *plVal;
                LONGLONG *pllVal;
                FLOAT *pfltVal;
                DOUBLE *pdblVal;
                VARIANT_BOOL *pboolVal;

                SCODE *pscode;
                CY *pcyVal;
                DATE *pdate;
                BSTR *pbstrVal;
                IUnknown **ppunkVal;
                IDispatch **ppdispVal;
                SAFEARRAY **pparray;
                VARIANT *pvarVal;
                PVOID byref;
                CHAR cVal;
                USHORT uiVal;
                ULONG ulVal;
                ULONGLONG ullVal;
                INT intVal;
                UINT uintVal;
                DECIMAL *pdecVal;
                CHAR *pcVal;
                USHORT *puiVal;
                ULONG *pulVal;
                ULONGLONG *pullVal;
                INT *pintVal;
                UINT *puintVal;
                struct __tagBRECORD
                    {
                    PVOID pvRecord;
                    IRecordInfo *pRecInfo;
                    } brecVal;
                } n3;
            } n2;
        DECIMAL decVal;
        } n1;
    } ;
typedef VARIANT *LPVARIANT;

typedef VARIANT VARIANTARG;

typedef VARIANT *LPVARIANTARG;
#line 545 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oaidl.h"
struct _wireBRECORD
    {
    ULONG fFlags;
    ULONG clSize;
    IRecordInfo *pRecInfo;
                    byte *pRecord;
    } ;
struct _wireVARIANT
    {
    DWORD clSize;
    DWORD rpcReserved;
    USHORT vt;
    USHORT wReserved1;
    USHORT wReserved2;
    USHORT wReserved3;
                                   union
        {
                       LONGLONG llVal;
                       LONG lVal;
                       BYTE bVal;
                       SHORT iVal;
                       FLOAT fltVal;
                       DOUBLE dblVal;
                       VARIANT_BOOL boolVal;
                       SCODE scode;
                       CY cyVal;
                       DATE date;
                       wireBSTR bstrVal;
                       IUnknown *punkVal;
                       IDispatch *pdispVal;
                       wirePSAFEARRAY parray;
                       wireBRECORD brecVal;
                       BYTE *pbVal;
                       SHORT *piVal;
                       LONG *plVal;
                       LONGLONG *pllVal;
                       FLOAT *pfltVal;
                       DOUBLE *pdblVal;
                       VARIANT_BOOL *pboolVal;
                       SCODE *pscode;
                       CY *pcyVal;
                       DATE *pdate;
                       wireBSTR *pbstrVal;
                       IUnknown **ppunkVal;
                       IDispatch **ppdispVal;
                       wirePSAFEARRAY *pparray;
                       wireVARIANT *pvarVal;
                       CHAR cVal;
                       USHORT uiVal;
                       ULONG ulVal;
                       ULONGLONG ullVal;
                       INT intVal;
                       UINT uintVal;
                       DECIMAL decVal;
                       DECIMAL *pdecVal;
                       CHAR *pcVal;
                       USHORT *puiVal;
                       ULONG *pulVal;
                       ULONGLONG *pullVal;
                       INT *pintVal;
                       UINT *puintVal;


        } ;
    } ;
typedef LONG DISPID;

typedef DISPID MEMBERID;

typedef DWORD HREFTYPE;

typedef
enum tagTYPEKIND
    {
        TKIND_ENUM = 0,
        TKIND_RECORD = ( TKIND_ENUM + 1 ) ,
        TKIND_MODULE = ( TKIND_RECORD + 1 ) ,
        TKIND_INTERFACE = ( TKIND_MODULE + 1 ) ,
        TKIND_DISPATCH = ( TKIND_INTERFACE + 1 ) ,
        TKIND_COCLASS = ( TKIND_DISPATCH + 1 ) ,
        TKIND_ALIAS = ( TKIND_COCLASS + 1 ) ,
        TKIND_UNION = ( TKIND_ALIAS + 1 ) ,
        TKIND_MAX = ( TKIND_UNION + 1 )
    } TYPEKIND;

typedef struct tagTYPEDESC
    {
                                   union
        {
                       struct tagTYPEDESC *lptdesc;
                       struct tagARRAYDESC *lpadesc;
                       HREFTYPE hreftype;

        } ;
    VARTYPE vt;
    } TYPEDESC;

typedef struct tagARRAYDESC
    {
    TYPEDESC tdescElem;
    USHORT cDims;
                    SAFEARRAYBOUND rgbounds[ 1 ];
    } ARRAYDESC;

typedef struct tagPARAMDESCEX
    {
    ULONG cBytes;
    VARIANTARG varDefaultValue;
    } PARAMDESCEX;

typedef struct tagPARAMDESCEX *LPPARAMDESCEX;

typedef struct tagPARAMDESC
    {
    LPPARAMDESCEX pparamdescex;
    USHORT wParamFlags;
    } PARAMDESC;

typedef struct tagPARAMDESC *LPPARAMDESC;
#line 681 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oaidl.h"
typedef struct tagIDLDESC
    {
    ULONG_PTR dwReserved;
    USHORT wIDLFlags;
    } IDLDESC;

typedef struct tagIDLDESC *LPIDLDESC;
#line 710 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oaidl.h"
typedef struct tagELEMDESC {
    TYPEDESC tdesc;
    union {
        IDLDESC idldesc;
        PARAMDESC paramdesc;
    } ;
} ELEMDESC, * LPELEMDESC;



typedef struct tagTYPEATTR
    {
    GUID guid;
    LCID lcid;
    DWORD dwReserved;
    MEMBERID memidConstructor;
    MEMBERID memidDestructor;
    LPOLESTR lpstrSchema;
    ULONG cbSizeInstance;
    TYPEKIND typekind;
    WORD cFuncs;
    WORD cVars;
    WORD cImplTypes;
    WORD cbSizeVft;
    WORD cbAlignment;
    WORD wTypeFlags;
    WORD wMajorVerNum;
    WORD wMinorVerNum;
    TYPEDESC tdescAlias;
    IDLDESC idldescType;
    } TYPEATTR;

typedef struct tagTYPEATTR *LPTYPEATTR;

typedef struct tagDISPPARAMS
    {
                    VARIANTARG *rgvarg;
                    DISPID *rgdispidNamedArgs;
    UINT cArgs;
    UINT cNamedArgs;
    } DISPPARAMS;
#line 771 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oaidl.h"
typedef struct tagEXCEPINFO {
    WORD wCode;
    WORD wReserved;
    BSTR bstrSource;
    BSTR bstrDescription;
    BSTR bstrHelpFile;
    DWORD dwHelpContext;
    PVOID pvReserved;
    HRESULT (__stdcall *pfnDeferredFillIn)(struct tagEXCEPINFO *);
    SCODE scode;
} EXCEPINFO, * LPEXCEPINFO;



typedef
enum tagCALLCONV
    {
        CC_FASTCALL = 0,
        CC_CDECL = 1,
        CC_MSCPASCAL = ( CC_CDECL + 1 ) ,
        CC_PASCAL = CC_MSCPASCAL,
        CC_MACPASCAL = ( CC_PASCAL + 1 ) ,
        CC_STDCALL = ( CC_MACPASCAL + 1 ) ,
        CC_FPFASTCALL = ( CC_STDCALL + 1 ) ,
        CC_SYSCALL = ( CC_FPFASTCALL + 1 ) ,
        CC_MPWCDECL = ( CC_SYSCALL + 1 ) ,
        CC_MPWPASCAL = ( CC_MPWCDECL + 1 ) ,
        CC_MAX = ( CC_MPWPASCAL + 1 )
    } CALLCONV;

typedef
enum tagFUNCKIND
    {
        FUNC_VIRTUAL = 0,
        FUNC_PUREVIRTUAL = ( FUNC_VIRTUAL + 1 ) ,
        FUNC_NONVIRTUAL = ( FUNC_PUREVIRTUAL + 1 ) ,
        FUNC_STATIC = ( FUNC_NONVIRTUAL + 1 ) ,
        FUNC_DISPATCH = ( FUNC_STATIC + 1 )
    } FUNCKIND;

typedef
enum tagINVOKEKIND
    {
        INVOKE_FUNC = 1,
        INVOKE_PROPERTYGET = 2,
        INVOKE_PROPERTYPUT = 4,
        INVOKE_PROPERTYPUTREF = 8
    } INVOKEKIND;

typedef struct tagFUNCDESC
    {
    MEMBERID memid;
                    SCODE *lprgscode;
                    ELEMDESC *lprgelemdescParam;
    FUNCKIND funckind;
    INVOKEKIND invkind;
    CALLCONV callconv;
    SHORT cParams;
    SHORT cParamsOpt;
    SHORT oVft;
    SHORT cScodes;
    ELEMDESC elemdescFunc;
    WORD wFuncFlags;
    } FUNCDESC;

typedef struct tagFUNCDESC *LPFUNCDESC;

typedef
enum tagVARKIND
    {
        VAR_PERINSTANCE = 0,
        VAR_STATIC = ( VAR_PERINSTANCE + 1 ) ,
        VAR_CONST = ( VAR_STATIC + 1 ) ,
        VAR_DISPATCH = ( VAR_CONST + 1 )
    } VARKIND;
#line 855 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oaidl.h"
typedef struct tagVARDESC
    {
    MEMBERID memid;
    LPOLESTR lpstrSchema;
                                   union
        {
                       ULONG oInst;
                       VARIANT *lpvarValue;
        } ;
    ELEMDESC elemdescVar;
    WORD wVarFlags;
    VARKIND varkind;
    } VARDESC;

typedef struct tagVARDESC *LPVARDESC;

typedef
enum tagTYPEFLAGS
    {
        TYPEFLAG_FAPPOBJECT = 0x1,
        TYPEFLAG_FCANCREATE = 0x2,
        TYPEFLAG_FLICENSED = 0x4,
        TYPEFLAG_FPREDECLID = 0x8,
        TYPEFLAG_FHIDDEN = 0x10,
        TYPEFLAG_FCONTROL = 0x20,
        TYPEFLAG_FDUAL = 0x40,
        TYPEFLAG_FNONEXTENSIBLE = 0x80,
        TYPEFLAG_FOLEAUTOMATION = 0x100,
        TYPEFLAG_FRESTRICTED = 0x200,
        TYPEFLAG_FAGGREGATABLE = 0x400,
        TYPEFLAG_FREPLACEABLE = 0x800,
        TYPEFLAG_FDISPATCHABLE = 0x1000,
        TYPEFLAG_FREVERSEBIND = 0x2000,
        TYPEFLAG_FPROXY = 0x4000
    } TYPEFLAGS;

typedef
enum tagFUNCFLAGS
    {
        FUNCFLAG_FRESTRICTED = 0x1,
        FUNCFLAG_FSOURCE = 0x2,
        FUNCFLAG_FBINDABLE = 0x4,
        FUNCFLAG_FREQUESTEDIT = 0x8,
        FUNCFLAG_FDISPLAYBIND = 0x10,
        FUNCFLAG_FDEFAULTBIND = 0x20,
        FUNCFLAG_FHIDDEN = 0x40,
        FUNCFLAG_FUSESGETLASTERROR = 0x80,
        FUNCFLAG_FDEFAULTCOLLELEM = 0x100,
        FUNCFLAG_FUIDEFAULT = 0x200,
        FUNCFLAG_FNONBROWSABLE = 0x400,
        FUNCFLAG_FREPLACEABLE = 0x800,
        FUNCFLAG_FIMMEDIATEBIND = 0x1000
    } FUNCFLAGS;

typedef
enum tagVARFLAGS
    {
        VARFLAG_FREADONLY = 0x1,
        VARFLAG_FSOURCE = 0x2,
        VARFLAG_FBINDABLE = 0x4,
        VARFLAG_FREQUESTEDIT = 0x8,
        VARFLAG_FDISPLAYBIND = 0x10,
        VARFLAG_FDEFAULTBIND = 0x20,
        VARFLAG_FHIDDEN = 0x40,
        VARFLAG_FRESTRICTED = 0x80,
        VARFLAG_FDEFAULTCOLLELEM = 0x100,
        VARFLAG_FUIDEFAULT = 0x200,
        VARFLAG_FNONBROWSABLE = 0x400,
        VARFLAG_FREPLACEABLE = 0x800,
        VARFLAG_FIMMEDIATEBIND = 0x1000
    } VARFLAGS;

typedef struct tagCLEANLOCALSTORAGE
    {
    IUnknown *pInterface;
    PVOID pStorage;
    DWORD flags;
    } CLEANLOCALSTORAGE;

typedef struct tagCUSTDATAITEM
    {
    GUID guid;
    VARIANTARG varValue;
    } CUSTDATAITEM;

typedef struct tagCUSTDATAITEM *LPCUSTDATAITEM;

typedef struct tagCUSTDATA
    {
    DWORD cCustData;
                    LPCUSTDATAITEM prgCustData;
    } CUSTDATA;

typedef struct tagCUSTDATA *LPCUSTDATA;



extern RPC_IF_HANDLE IOleAutomationTypes_v1_0_c_ifspec;
extern RPC_IF_HANDLE IOleAutomationTypes_v1_0_s_ifspec;






#pragma endregion
#pragma region Desktop Family or OneCore Family



extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0001_v0_0_s_ifspec;







typedef ICreateTypeInfo *LPCREATETYPEINFO;


extern const IID IID_ICreateTypeInfo;
#line 1082 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oaidl.h"
    typedef struct ICreateTypeInfoVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            ICreateTypeInfo * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            ICreateTypeInfo * This);

        ULONG ( __stdcall *Release )(
            ICreateTypeInfo * This);

        HRESULT ( __stdcall *SetGuid )(
            ICreateTypeInfo * This,
                       const GUID * const guid);

        HRESULT ( __stdcall *SetTypeFlags )(
            ICreateTypeInfo * This,
                       UINT uTypeFlags);

        HRESULT ( __stdcall *SetDocString )(
            ICreateTypeInfo * This,

                       LPOLESTR pStrDoc);

        HRESULT ( __stdcall *SetHelpContext )(
            ICreateTypeInfo * This,
                       DWORD dwHelpContext);

        HRESULT ( __stdcall *SetVersion )(
            ICreateTypeInfo * This,
                       WORD wMajorVerNum,
                       WORD wMinorVerNum);

        HRESULT ( __stdcall *AddRefTypeInfo )(
            ICreateTypeInfo * This,
                       ITypeInfo *pTInfo,
                       HREFTYPE *phRefType);

        HRESULT ( __stdcall *AddFuncDesc )(
            ICreateTypeInfo * This,
                       UINT index,
                       FUNCDESC *pFuncDesc);

        HRESULT ( __stdcall *AddImplType )(
            ICreateTypeInfo * This,
                       UINT index,
                       HREFTYPE hRefType);

        HRESULT ( __stdcall *SetImplTypeFlags )(
            ICreateTypeInfo * This,
                       UINT index,
                       INT implTypeFlags);

        HRESULT ( __stdcall *SetAlignment )(
            ICreateTypeInfo * This,
                       WORD cbAlignment);

        HRESULT ( __stdcall *SetSchema )(
            ICreateTypeInfo * This,

                       LPOLESTR pStrSchema);

        HRESULT ( __stdcall *AddVarDesc )(
            ICreateTypeInfo * This,
                       UINT index,
                       VARDESC *pVarDesc);

        HRESULT ( __stdcall *SetFuncAndParamNames )(
            ICreateTypeInfo * This,
                       UINT index,

                                      LPOLESTR *rgszNames,
                       UINT cNames);

        HRESULT ( __stdcall *SetVarName )(
            ICreateTypeInfo * This,
                       UINT index,

                       LPOLESTR szName);

        HRESULT ( __stdcall *SetTypeDescAlias )(
            ICreateTypeInfo * This,
                       TYPEDESC *pTDescAlias);

        HRESULT ( __stdcall *DefineFuncAsDllEntry )(
            ICreateTypeInfo * This,
                       UINT index,

                       LPOLESTR szDllName,

                       LPOLESTR szProcName);

        HRESULT ( __stdcall *SetFuncDocString )(
            ICreateTypeInfo * This,
                       UINT index,

                       LPOLESTR szDocString);

        HRESULT ( __stdcall *SetVarDocString )(
            ICreateTypeInfo * This,
                       UINT index,

                       LPOLESTR szDocString);

        HRESULT ( __stdcall *SetFuncHelpContext )(
            ICreateTypeInfo * This,
                       UINT index,
                       DWORD dwHelpContext);

        HRESULT ( __stdcall *SetVarHelpContext )(
            ICreateTypeInfo * This,
                       UINT index,
                       DWORD dwHelpContext);

        HRESULT ( __stdcall *SetMops )(
            ICreateTypeInfo * This,
                       UINT index,
                       BSTR bstrMops);

        HRESULT ( __stdcall *SetTypeIdldesc )(
            ICreateTypeInfo * This,
                       IDLDESC *pIdlDesc);

        HRESULT ( __stdcall *LayOut )(
            ICreateTypeInfo * This);


    } ICreateTypeInfoVtbl;

    struct ICreateTypeInfo
    {
                   struct ICreateTypeInfoVtbl *lpVtbl;
    };
#line 1322 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oaidl.h"
typedef ICreateTypeInfo2 *LPCREATETYPEINFO2;


extern const IID IID_ICreateTypeInfo2;
#line 1396 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oaidl.h"
    typedef struct ICreateTypeInfo2Vtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            ICreateTypeInfo2 * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            ICreateTypeInfo2 * This);

        ULONG ( __stdcall *Release )(
            ICreateTypeInfo2 * This);

        HRESULT ( __stdcall *SetGuid )(
            ICreateTypeInfo2 * This,
                       const GUID * const guid);

        HRESULT ( __stdcall *SetTypeFlags )(
            ICreateTypeInfo2 * This,
                       UINT uTypeFlags);

        HRESULT ( __stdcall *SetDocString )(
            ICreateTypeInfo2 * This,

                       LPOLESTR pStrDoc);

        HRESULT ( __stdcall *SetHelpContext )(
            ICreateTypeInfo2 * This,
                       DWORD dwHelpContext);

        HRESULT ( __stdcall *SetVersion )(
            ICreateTypeInfo2 * This,
                       WORD wMajorVerNum,
                       WORD wMinorVerNum);

        HRESULT ( __stdcall *AddRefTypeInfo )(
            ICreateTypeInfo2 * This,
                       ITypeInfo *pTInfo,
                       HREFTYPE *phRefType);

        HRESULT ( __stdcall *AddFuncDesc )(
            ICreateTypeInfo2 * This,
                       UINT index,
                       FUNCDESC *pFuncDesc);

        HRESULT ( __stdcall *AddImplType )(
            ICreateTypeInfo2 * This,
                       UINT index,
                       HREFTYPE hRefType);

        HRESULT ( __stdcall *SetImplTypeFlags )(
            ICreateTypeInfo2 * This,
                       UINT index,
                       INT implTypeFlags);

        HRESULT ( __stdcall *SetAlignment )(
            ICreateTypeInfo2 * This,
                       WORD cbAlignment);

        HRESULT ( __stdcall *SetSchema )(
            ICreateTypeInfo2 * This,

                       LPOLESTR pStrSchema);

        HRESULT ( __stdcall *AddVarDesc )(
            ICreateTypeInfo2 * This,
                       UINT index,
                       VARDESC *pVarDesc);

        HRESULT ( __stdcall *SetFuncAndParamNames )(
            ICreateTypeInfo2 * This,
                       UINT index,

                                      LPOLESTR *rgszNames,
                       UINT cNames);

        HRESULT ( __stdcall *SetVarName )(
            ICreateTypeInfo2 * This,
                       UINT index,

                       LPOLESTR szName);

        HRESULT ( __stdcall *SetTypeDescAlias )(
            ICreateTypeInfo2 * This,
                       TYPEDESC *pTDescAlias);

        HRESULT ( __stdcall *DefineFuncAsDllEntry )(
            ICreateTypeInfo2 * This,
                       UINT index,

                       LPOLESTR szDllName,

                       LPOLESTR szProcName);

        HRESULT ( __stdcall *SetFuncDocString )(
            ICreateTypeInfo2 * This,
                       UINT index,

                       LPOLESTR szDocString);

        HRESULT ( __stdcall *SetVarDocString )(
            ICreateTypeInfo2 * This,
                       UINT index,

                       LPOLESTR szDocString);

        HRESULT ( __stdcall *SetFuncHelpContext )(
            ICreateTypeInfo2 * This,
                       UINT index,
                       DWORD dwHelpContext);

        HRESULT ( __stdcall *SetVarHelpContext )(
            ICreateTypeInfo2 * This,
                       UINT index,
                       DWORD dwHelpContext);

        HRESULT ( __stdcall *SetMops )(
            ICreateTypeInfo2 * This,
                       UINT index,
                       BSTR bstrMops);

        HRESULT ( __stdcall *SetTypeIdldesc )(
            ICreateTypeInfo2 * This,
                       IDLDESC *pIdlDesc);

        HRESULT ( __stdcall *LayOut )(
            ICreateTypeInfo2 * This);

        HRESULT ( __stdcall *DeleteFuncDesc )(
            ICreateTypeInfo2 * This,
                       UINT index);

        HRESULT ( __stdcall *DeleteFuncDescByMemId )(
            ICreateTypeInfo2 * This,
                       MEMBERID memid,
                       INVOKEKIND invKind);

        HRESULT ( __stdcall *DeleteVarDesc )(
            ICreateTypeInfo2 * This,
                       UINT index);

        HRESULT ( __stdcall *DeleteVarDescByMemId )(
            ICreateTypeInfo2 * This,
                       MEMBERID memid);

        HRESULT ( __stdcall *DeleteImplType )(
            ICreateTypeInfo2 * This,
                       UINT index);

        HRESULT ( __stdcall *SetCustData )(
            ICreateTypeInfo2 * This,
                       const GUID * const guid,
                       VARIANT *pVarVal);

        HRESULT ( __stdcall *SetFuncCustData )(
            ICreateTypeInfo2 * This,
                       UINT index,
                       const GUID * const guid,
                       VARIANT *pVarVal);

        HRESULT ( __stdcall *SetParamCustData )(
            ICreateTypeInfo2 * This,
                       UINT indexFunc,
                       UINT indexParam,
                       const GUID * const guid,
                       VARIANT *pVarVal);

        HRESULT ( __stdcall *SetVarCustData )(
            ICreateTypeInfo2 * This,
                       UINT index,
                       const GUID * const guid,
                       VARIANT *pVarVal);

        HRESULT ( __stdcall *SetImplTypeCustData )(
            ICreateTypeInfo2 * This,
                       UINT index,
                       const GUID * const guid,
                       VARIANT *pVarVal);

        HRESULT ( __stdcall *SetHelpStringContext )(
            ICreateTypeInfo2 * This,
                       ULONG dwHelpStringContext);

        HRESULT ( __stdcall *SetFuncHelpStringContext )(
            ICreateTypeInfo2 * This,
                       UINT index,
                       ULONG dwHelpStringContext);

        HRESULT ( __stdcall *SetVarHelpStringContext )(
            ICreateTypeInfo2 * This,
                       UINT index,
                       ULONG dwHelpStringContext);

        HRESULT ( __stdcall *Invalidate )(
            ICreateTypeInfo2 * This);

        HRESULT ( __stdcall *SetName )(
            ICreateTypeInfo2 * This,

                       LPOLESTR szName);


    } ICreateTypeInfo2Vtbl;

    struct ICreateTypeInfo2
    {
                   struct ICreateTypeInfo2Vtbl *lpVtbl;
    };
#line 1755 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oaidl.h"
typedef ICreateTypeLib *LPCREATETYPELIB;


extern const IID IID_ICreateTypeLib;
#line 1807 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oaidl.h"
    typedef struct ICreateTypeLibVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            ICreateTypeLib * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            ICreateTypeLib * This);

        ULONG ( __stdcall *Release )(
            ICreateTypeLib * This);

        HRESULT ( __stdcall *CreateTypeInfo )(
            ICreateTypeLib * This,

                       LPOLESTR szName,
                       TYPEKIND tkind,
                        ICreateTypeInfo **ppCTInfo);

        HRESULT ( __stdcall *SetName )(
            ICreateTypeLib * This,

                       LPOLESTR szName);

        HRESULT ( __stdcall *SetVersion )(
            ICreateTypeLib * This,
                       WORD wMajorVerNum,
                       WORD wMinorVerNum);

        HRESULT ( __stdcall *SetGuid )(
            ICreateTypeLib * This,
                       const GUID * const guid);

        HRESULT ( __stdcall *SetDocString )(
            ICreateTypeLib * This,

                       LPOLESTR szDoc);

        HRESULT ( __stdcall *SetHelpFileName )(
            ICreateTypeLib * This,

                       LPOLESTR szHelpFileName);

        HRESULT ( __stdcall *SetHelpContext )(
            ICreateTypeLib * This,
                       DWORD dwHelpContext);

        HRESULT ( __stdcall *SetLcid )(
            ICreateTypeLib * This,
                       LCID lcid);

        HRESULT ( __stdcall *SetLibFlags )(
            ICreateTypeLib * This,
                       UINT uLibFlags);

        HRESULT ( __stdcall *SaveAllChanges )(
            ICreateTypeLib * This);


    } ICreateTypeLibVtbl;

    struct ICreateTypeLib
    {
                   struct ICreateTypeLibVtbl *lpVtbl;
    };
#line 1939 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oaidl.h"
typedef ICreateTypeLib2 *LPCREATETYPELIB2;


extern const IID IID_ICreateTypeLib2;
#line 1970 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oaidl.h"
    typedef struct ICreateTypeLib2Vtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            ICreateTypeLib2 * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            ICreateTypeLib2 * This);

        ULONG ( __stdcall *Release )(
            ICreateTypeLib2 * This);

        HRESULT ( __stdcall *CreateTypeInfo )(
            ICreateTypeLib2 * This,

                       LPOLESTR szName,
                       TYPEKIND tkind,
                        ICreateTypeInfo **ppCTInfo);

        HRESULT ( __stdcall *SetName )(
            ICreateTypeLib2 * This,

                       LPOLESTR szName);

        HRESULT ( __stdcall *SetVersion )(
            ICreateTypeLib2 * This,
                       WORD wMajorVerNum,
                       WORD wMinorVerNum);

        HRESULT ( __stdcall *SetGuid )(
            ICreateTypeLib2 * This,
                       const GUID * const guid);

        HRESULT ( __stdcall *SetDocString )(
            ICreateTypeLib2 * This,

                       LPOLESTR szDoc);

        HRESULT ( __stdcall *SetHelpFileName )(
            ICreateTypeLib2 * This,

                       LPOLESTR szHelpFileName);

        HRESULT ( __stdcall *SetHelpContext )(
            ICreateTypeLib2 * This,
                       DWORD dwHelpContext);

        HRESULT ( __stdcall *SetLcid )(
            ICreateTypeLib2 * This,
                       LCID lcid);

        HRESULT ( __stdcall *SetLibFlags )(
            ICreateTypeLib2 * This,
                       UINT uLibFlags);

        HRESULT ( __stdcall *SaveAllChanges )(
            ICreateTypeLib2 * This);

        HRESULT ( __stdcall *DeleteTypeInfo )(
            ICreateTypeLib2 * This,

                       LPOLESTR szName);

        HRESULT ( __stdcall *SetCustData )(
            ICreateTypeLib2 * This,
                       const GUID * const guid,
                       VARIANT *pVarVal);

        HRESULT ( __stdcall *SetHelpStringContext )(
            ICreateTypeLib2 * This,
                       ULONG dwHelpStringContext);

        HRESULT ( __stdcall *SetHelpStringDll )(
            ICreateTypeLib2 * This,

                       LPOLESTR szFileName);


    } ICreateTypeLib2Vtbl;

    struct ICreateTypeLib2
    {
                   struct ICreateTypeLib2Vtbl *lpVtbl;
    };
#line 2132 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oaidl.h"
#pragma endregion
#pragma region Application Family or OneCore Family



extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0005_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0005_v0_0_s_ifspec;







typedef IDispatch *LPDISPATCH;
#line 2180 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oaidl.h"
extern const IID IID_IDispatch;
#line 2226 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oaidl.h"
    typedef struct IDispatchVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      IDispatch * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      IDispatch * This);

        ULONG ( __stdcall *Release )(
                      IDispatch * This);

        HRESULT ( __stdcall *GetTypeInfoCount )(
                      IDispatch * This,
                                   UINT *pctinfo);

        HRESULT ( __stdcall *GetTypeInfo )(
                      IDispatch * This,
                       UINT iTInfo,
                       LCID lcid,
                                             ITypeInfo **ppTInfo);

        HRESULT ( __stdcall *GetIDsOfNames )(
                      IDispatch * This,
                                 const IID * const riid,
                                                              LPOLESTR *rgszNames,
                                                       UINT cNames,
                       LCID lcid,
                                                                DISPID *rgDispId);

                      HRESULT ( __stdcall *Invoke )(
            IDispatch * This,

                  DISPID dispIdMember,

                  const IID * const riid,

                  LCID lcid,

                  WORD wFlags,

                  DISPPARAMS *pDispParams,

                       VARIANT *pVarResult,

                       EXCEPINFO *pExcepInfo,

                       UINT *puArgErr);


    } IDispatchVtbl;

    struct IDispatch
    {
                   struct IDispatchVtbl *lpVtbl;
    };
#line 2321 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oaidl.h"
                HRESULT __stdcall IDispatch_RemoteInvoke_Proxy(
              IDispatch * This,
               DISPID dispIdMember,
                         const IID * const riid,
               LCID lcid,
               DWORD dwFlags,
                         DISPPARAMS *pDispParams,
                           VARIANT *pVarResult,
                           EXCEPINFO *pExcepInfo,
                           UINT *pArgErr,
               UINT cVarRef,
                                                       UINT *rgVarRefIdx,
                                                               VARIANTARG *rgVarRef);


void __stdcall IDispatch_RemoteInvoke_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
#line 2353 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oaidl.h"
typedef IEnumVARIANT *LPENUMVARIANT;


extern const IID IID_IEnumVARIANT;
#line 2382 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oaidl.h"
    typedef struct IEnumVARIANTVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      IEnumVARIANT * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      IEnumVARIANT * This);

        ULONG ( __stdcall *Release )(
                      IEnumVARIANT * This);

                      HRESULT ( __stdcall *Next )(
            IEnumVARIANT * This,
                       ULONG celt,
                                            VARIANT *rgVar,
                        ULONG *pCeltFetched);

        HRESULT ( __stdcall *Skip )(
                      IEnumVARIANT * This,
                       ULONG celt);

        HRESULT ( __stdcall *Reset )(
                      IEnumVARIANT * This);

        HRESULT ( __stdcall *Clone )(
                      IEnumVARIANT * This,
                                             IEnumVARIANT **ppEnum);


    } IEnumVARIANTVtbl;

    struct IEnumVARIANT
    {
                   struct IEnumVARIANTVtbl *lpVtbl;
    };
#line 2457 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oaidl.h"
                HRESULT __stdcall IEnumVARIANT_RemoteNext_Proxy(
              IEnumVARIANT * This,
               ULONG celt,
                                                                                VARIANT *rgVar,
                           ULONG *pCeltFetched);


void __stdcall IEnumVARIANT_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
#line 2481 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oaidl.h"
typedef ITypeComp *LPTYPECOMP;

typedef
enum tagDESCKIND
    {
        DESCKIND_NONE = 0,
        DESCKIND_FUNCDESC = ( DESCKIND_NONE + 1 ) ,
        DESCKIND_VARDESC = ( DESCKIND_FUNCDESC + 1 ) ,
        DESCKIND_TYPECOMP = ( DESCKIND_VARDESC + 1 ) ,
        DESCKIND_IMPLICITAPPOBJ = ( DESCKIND_TYPECOMP + 1 ) ,
        DESCKIND_MAX = ( DESCKIND_IMPLICITAPPOBJ + 1 )
    } DESCKIND;

typedef union tagBINDPTR
    {
    FUNCDESC *lpfuncdesc;
    VARDESC *lpvardesc;
    ITypeComp *lptcomp;
    } BINDPTR;

typedef union tagBINDPTR *LPBINDPTR;


extern const IID IID_ITypeComp;
#line 2533 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oaidl.h"
    typedef struct ITypeCompVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      ITypeComp * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      ITypeComp * This);

        ULONG ( __stdcall *Release )(
                      ITypeComp * This);

                      HRESULT ( __stdcall *Bind )(
            ITypeComp * This,

                       LPOLESTR szName,
                       ULONG lHashVal,
                       WORD wFlags,
                        ITypeInfo **ppTInfo,
                        DESCKIND *pDescKind,
                        BINDPTR *pBindPtr);

                      HRESULT ( __stdcall *BindType )(
            ITypeComp * This,

                       LPOLESTR szName,
                       ULONG lHashVal,
                        ITypeInfo **ppTInfo,
                        ITypeComp **ppTComp);


    } ITypeCompVtbl;

    struct ITypeComp
    {
                   struct ITypeCompVtbl *lpVtbl;
    };
#line 2603 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oaidl.h"
                HRESULT __stdcall ITypeComp_RemoteBind_Proxy(
              ITypeComp * This,
                         LPOLESTR szName,
               ULONG lHashVal,
               WORD wFlags,
                                     ITypeInfo **ppTInfo,
                           DESCKIND *pDescKind,
                                     LPFUNCDESC *ppFuncDesc,
                                     LPVARDESC *ppVarDesc,
                                     ITypeComp **ppTypeComp,
                           CLEANLOCALSTORAGE *pDummy);


void __stdcall ITypeComp_RemoteBind_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall ITypeComp_RemoteBindType_Proxy(
              ITypeComp * This,
                         LPOLESTR szName,
               ULONG lHashVal,
                                     ITypeInfo **ppTInfo);


void __stdcall ITypeComp_RemoteBindType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
#line 2645 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oaidl.h"
#pragma endregion
#pragma region Desktop Family or OneCore Family



extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0008_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0008_v0_0_s_ifspec;







typedef ITypeInfo *LPTYPEINFO;


extern const IID IID_ITypeInfo;
#line 2763 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oaidl.h"
    typedef struct ITypeInfoVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      ITypeInfo * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      ITypeInfo * This);

        ULONG ( __stdcall *Release )(
                      ITypeInfo * This);

                      HRESULT ( __stdcall *GetTypeAttr )(
            ITypeInfo * This,
                        TYPEATTR **ppTypeAttr);

        HRESULT ( __stdcall *GetTypeComp )(
                      ITypeInfo * This,
                                             ITypeComp **ppTComp);

                      HRESULT ( __stdcall *GetFuncDesc )(
            ITypeInfo * This,
                       UINT index,
                        FUNCDESC **ppFuncDesc);

                      HRESULT ( __stdcall *GetVarDesc )(
            ITypeInfo * This,
                       UINT index,
                        VARDESC **ppVarDesc);

                      HRESULT ( __stdcall *GetNames )(
            ITypeInfo * This,
                       MEMBERID memid,
                                            BSTR *rgBstrNames,
                       UINT cMaxNames,
                        UINT *pcNames);

        HRESULT ( __stdcall *GetRefTypeOfImplType )(
                      ITypeInfo * This,
                       UINT index,
                                   HREFTYPE *pRefType);

        HRESULT ( __stdcall *GetImplTypeFlags )(
                      ITypeInfo * This,
                       UINT index,
                                   INT *pImplTypeFlags);

                      HRESULT ( __stdcall *GetIDsOfNames )(
            ITypeInfo * This,

                                      LPOLESTR *rgszNames,
                       UINT cNames,
                                 MEMBERID *pMemId);

                      HRESULT ( __stdcall *Invoke )(
            ITypeInfo * This,
                       PVOID pvInstance,
                       MEMBERID memid,
                       WORD wFlags,
                            DISPPARAMS *pDispParams,
                        VARIANT *pVarResult,
                        EXCEPINFO *pExcepInfo,
                        UINT *puArgErr);

                      HRESULT ( __stdcall *GetDocumentation )(
            ITypeInfo * This,
                       MEMBERID memid,
                        BSTR *pBstrName,
                        BSTR *pBstrDocString,
                        DWORD *pdwHelpContext,
                        BSTR *pBstrHelpFile);

                      HRESULT ( __stdcall *GetDllEntry )(
            ITypeInfo * This,
                       MEMBERID memid,
                       INVOKEKIND invKind,
                        BSTR *pBstrDllName,
                        BSTR *pBstrName,
                        WORD *pwOrdinal);

        HRESULT ( __stdcall *GetRefTypeInfo )(
                      ITypeInfo * This,
                       HREFTYPE hRefType,
                                             ITypeInfo **ppTInfo);

                      HRESULT ( __stdcall *AddressOfMember )(
            ITypeInfo * This,
                       MEMBERID memid,
                       INVOKEKIND invKind,
                        PVOID *ppv);

                      HRESULT ( __stdcall *CreateInstance )(
            ITypeInfo * This,
                       IUnknown *pUnkOuter,
                       const IID * const riid,
                                PVOID *ppvObj);

        HRESULT ( __stdcall *GetMops )(
                      ITypeInfo * This,
                       MEMBERID memid,
                                             BSTR *pBstrMops);

                      HRESULT ( __stdcall *GetContainingTypeLib )(
            ITypeInfo * This,
                        ITypeLib **ppTLib,
                        UINT *pIndex);

                      void ( __stdcall *ReleaseTypeAttr )(
            ITypeInfo * This,
                       TYPEATTR *pTypeAttr);

                      void ( __stdcall *ReleaseFuncDesc )(
            ITypeInfo * This,
                       FUNCDESC *pFuncDesc);

                      void ( __stdcall *ReleaseVarDesc )(
            ITypeInfo * This,
                       VARDESC *pVarDesc);


    } ITypeInfoVtbl;

    struct ITypeInfo
    {
                   struct ITypeInfoVtbl *lpVtbl;
    };
#line 2973 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oaidl.h"
                HRESULT __stdcall ITypeInfo_RemoteGetTypeAttr_Proxy(
              ITypeInfo * This,
                                     LPTYPEATTR *ppTypeAttr,
                           CLEANLOCALSTORAGE *pDummy);


void __stdcall ITypeInfo_RemoteGetTypeAttr_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall ITypeInfo_RemoteGetFuncDesc_Proxy(
              ITypeInfo * This,
               UINT index,
                                     LPFUNCDESC *ppFuncDesc,
                           CLEANLOCALSTORAGE *pDummy);


void __stdcall ITypeInfo_RemoteGetFuncDesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall ITypeInfo_RemoteGetVarDesc_Proxy(
              ITypeInfo * This,
               UINT index,
                                     LPVARDESC *ppVarDesc,
                           CLEANLOCALSTORAGE *pDummy);


void __stdcall ITypeInfo_RemoteGetVarDesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall ITypeInfo_RemoteGetNames_Proxy(
              ITypeInfo * This,
               MEMBERID memid,
                                                                                BSTR *rgBstrNames,
               UINT cMaxNames,
                           UINT *pcNames);


void __stdcall ITypeInfo_RemoteGetNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                        HRESULT __stdcall ITypeInfo_LocalGetIDsOfNames_Proxy(
              ITypeInfo * This);


void __stdcall ITypeInfo_LocalGetIDsOfNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                        HRESULT __stdcall ITypeInfo_LocalInvoke_Proxy(
              ITypeInfo * This);


void __stdcall ITypeInfo_LocalInvoke_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall ITypeInfo_RemoteGetDocumentation_Proxy(
              ITypeInfo * This,
               MEMBERID memid,
               DWORD refPtrFlags,
                                     BSTR *pBstrName,
                                     BSTR *pBstrDocString,
                           DWORD *pdwHelpContext,
                                     BSTR *pBstrHelpFile);


void __stdcall ITypeInfo_RemoteGetDocumentation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall ITypeInfo_RemoteGetDllEntry_Proxy(
              ITypeInfo * This,
               MEMBERID memid,
               INVOKEKIND invKind,
               DWORD refPtrFlags,
                                     BSTR *pBstrDllName,
                                     BSTR *pBstrName,
                           WORD *pwOrdinal);


void __stdcall ITypeInfo_RemoteGetDllEntry_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                        HRESULT __stdcall ITypeInfo_LocalAddressOfMember_Proxy(
              ITypeInfo * This);


void __stdcall ITypeInfo_LocalAddressOfMember_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall ITypeInfo_RemoteCreateInstance_Proxy(
              ITypeInfo * This,
                         const IID * const riid,
                                             IUnknown **ppvObj);


void __stdcall ITypeInfo_RemoteCreateInstance_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall ITypeInfo_RemoteGetContainingTypeLib_Proxy(
              ITypeInfo * This,
                                     ITypeLib **ppTLib,
                           UINT *pIndex);


void __stdcall ITypeInfo_RemoteGetContainingTypeLib_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                        HRESULT __stdcall ITypeInfo_LocalReleaseTypeAttr_Proxy(
              ITypeInfo * This);


void __stdcall ITypeInfo_LocalReleaseTypeAttr_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                        HRESULT __stdcall ITypeInfo_LocalReleaseFuncDesc_Proxy(
              ITypeInfo * This);


void __stdcall ITypeInfo_LocalReleaseFuncDesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                        HRESULT __stdcall ITypeInfo_LocalReleaseVarDesc_Proxy(
              ITypeInfo * This);


void __stdcall ITypeInfo_LocalReleaseVarDesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
#line 3165 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oaidl.h"
typedef ITypeInfo2 *LPTYPEINFO2;


extern const IID IID_ITypeInfo2;
#line 3248 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oaidl.h"
    typedef struct ITypeInfo2Vtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      ITypeInfo2 * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      ITypeInfo2 * This);

        ULONG ( __stdcall *Release )(
                      ITypeInfo2 * This);

                      HRESULT ( __stdcall *GetTypeAttr )(
            ITypeInfo2 * This,
                        TYPEATTR **ppTypeAttr);

        HRESULT ( __stdcall *GetTypeComp )(
                      ITypeInfo2 * This,
                                             ITypeComp **ppTComp);

                      HRESULT ( __stdcall *GetFuncDesc )(
            ITypeInfo2 * This,
                       UINT index,
                        FUNCDESC **ppFuncDesc);

                      HRESULT ( __stdcall *GetVarDesc )(
            ITypeInfo2 * This,
                       UINT index,
                        VARDESC **ppVarDesc);

                      HRESULT ( __stdcall *GetNames )(
            ITypeInfo2 * This,
                       MEMBERID memid,
                                            BSTR *rgBstrNames,
                       UINT cMaxNames,
                        UINT *pcNames);

        HRESULT ( __stdcall *GetRefTypeOfImplType )(
                      ITypeInfo2 * This,
                       UINT index,
                                   HREFTYPE *pRefType);

        HRESULT ( __stdcall *GetImplTypeFlags )(
                      ITypeInfo2 * This,
                       UINT index,
                                   INT *pImplTypeFlags);

                      HRESULT ( __stdcall *GetIDsOfNames )(
            ITypeInfo2 * This,

                                      LPOLESTR *rgszNames,
                       UINT cNames,
                                 MEMBERID *pMemId);

                      HRESULT ( __stdcall *Invoke )(
            ITypeInfo2 * This,
                       PVOID pvInstance,
                       MEMBERID memid,
                       WORD wFlags,
                            DISPPARAMS *pDispParams,
                        VARIANT *pVarResult,
                        EXCEPINFO *pExcepInfo,
                        UINT *puArgErr);

                      HRESULT ( __stdcall *GetDocumentation )(
            ITypeInfo2 * This,
                       MEMBERID memid,
                        BSTR *pBstrName,
                        BSTR *pBstrDocString,
                        DWORD *pdwHelpContext,
                        BSTR *pBstrHelpFile);

                      HRESULT ( __stdcall *GetDllEntry )(
            ITypeInfo2 * This,
                       MEMBERID memid,
                       INVOKEKIND invKind,
                        BSTR *pBstrDllName,
                        BSTR *pBstrName,
                        WORD *pwOrdinal);

        HRESULT ( __stdcall *GetRefTypeInfo )(
                      ITypeInfo2 * This,
                       HREFTYPE hRefType,
                                             ITypeInfo **ppTInfo);

                      HRESULT ( __stdcall *AddressOfMember )(
            ITypeInfo2 * This,
                       MEMBERID memid,
                       INVOKEKIND invKind,
                        PVOID *ppv);

                      HRESULT ( __stdcall *CreateInstance )(
            ITypeInfo2 * This,
                       IUnknown *pUnkOuter,
                       const IID * const riid,
                                PVOID *ppvObj);

        HRESULT ( __stdcall *GetMops )(
                      ITypeInfo2 * This,
                       MEMBERID memid,
                                             BSTR *pBstrMops);

                      HRESULT ( __stdcall *GetContainingTypeLib )(
            ITypeInfo2 * This,
                        ITypeLib **ppTLib,
                        UINT *pIndex);

                      void ( __stdcall *ReleaseTypeAttr )(
            ITypeInfo2 * This,
                       TYPEATTR *pTypeAttr);

                      void ( __stdcall *ReleaseFuncDesc )(
            ITypeInfo2 * This,
                       FUNCDESC *pFuncDesc);

                      void ( __stdcall *ReleaseVarDesc )(
            ITypeInfo2 * This,
                       VARDESC *pVarDesc);

        HRESULT ( __stdcall *GetTypeKind )(
                      ITypeInfo2 * This,
                                   TYPEKIND *pTypeKind);

        HRESULT ( __stdcall *GetTypeFlags )(
                      ITypeInfo2 * This,
                                   ULONG *pTypeFlags);

        HRESULT ( __stdcall *GetFuncIndexOfMemId )(
                      ITypeInfo2 * This,
                       MEMBERID memid,
                       INVOKEKIND invKind,
                                   UINT *pFuncIndex);

        HRESULT ( __stdcall *GetVarIndexOfMemId )(
                      ITypeInfo2 * This,
                       MEMBERID memid,
                                   UINT *pVarIndex);

        HRESULT ( __stdcall *GetCustData )(
                      ITypeInfo2 * This,
                                 const GUID * const guid,
                                   VARIANT *pVarVal);

        HRESULT ( __stdcall *GetFuncCustData )(
                      ITypeInfo2 * This,
                       UINT index,
                                 const GUID * const guid,
                                   VARIANT *pVarVal);

        HRESULT ( __stdcall *GetParamCustData )(
                      ITypeInfo2 * This,
                       UINT indexFunc,
                       UINT indexParam,
                                 const GUID * const guid,
                                   VARIANT *pVarVal);

        HRESULT ( __stdcall *GetVarCustData )(
                      ITypeInfo2 * This,
                       UINT index,
                                 const GUID * const guid,
                                   VARIANT *pVarVal);

        HRESULT ( __stdcall *GetImplTypeCustData )(
                      ITypeInfo2 * This,
                       UINT index,
                                 const GUID * const guid,
                                   VARIANT *pVarVal);

                      HRESULT ( __stdcall *GetDocumentation2 )(
            ITypeInfo2 * This,
                       MEMBERID memid,
                       LCID lcid,
                        BSTR *pbstrHelpString,
                        DWORD *pdwHelpStringContext,
                        BSTR *pbstrHelpStringDll);

        HRESULT ( __stdcall *GetAllCustData )(
                      ITypeInfo2 * This,
                                   CUSTDATA *pCustData);

        HRESULT ( __stdcall *GetAllFuncCustData )(
                      ITypeInfo2 * This,
                       UINT index,
                                   CUSTDATA *pCustData);

        HRESULT ( __stdcall *GetAllParamCustData )(
                      ITypeInfo2 * This,
                       UINT indexFunc,
                       UINT indexParam,
                                   CUSTDATA *pCustData);

        HRESULT ( __stdcall *GetAllVarCustData )(
                      ITypeInfo2 * This,
                       UINT index,
                                   CUSTDATA *pCustData);

        HRESULT ( __stdcall *GetAllImplTypeCustData )(
                      ITypeInfo2 * This,
                       UINT index,
                                   CUSTDATA *pCustData);


    } ITypeInfo2Vtbl;

    struct ITypeInfo2
    {
                   struct ITypeInfo2Vtbl *lpVtbl;
    };
#line 3586 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oaidl.h"
                HRESULT __stdcall ITypeInfo2_RemoteGetDocumentation2_Proxy(
              ITypeInfo2 * This,
               MEMBERID memid,
               LCID lcid,
               DWORD refPtrFlags,
                                     BSTR *pbstrHelpString,
                           DWORD *pdwHelpStringContext,
                                     BSTR *pbstrHelpStringDll);


void __stdcall ITypeInfo2_RemoteGetDocumentation2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
#line 3611 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oaidl.h"
#pragma endregion
#pragma region Application Family or OneCore Family



extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0010_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0010_v0_0_s_ifspec;







typedef
enum tagSYSKIND
    {
        SYS_WIN16 = 0,
        SYS_WIN32 = ( SYS_WIN16 + 1 ) ,
        SYS_MAC = ( SYS_WIN32 + 1 ) ,
        SYS_WIN64 = ( SYS_MAC + 1 )
    } SYSKIND;

typedef
enum tagLIBFLAGS
    {
        LIBFLAG_FRESTRICTED = 0x1,
        LIBFLAG_FCONTROL = 0x2,
        LIBFLAG_FHIDDEN = 0x4,
        LIBFLAG_FHASDISKIMAGE = 0x8
    } LIBFLAGS;

typedef ITypeLib *LPTYPELIB;

typedef struct tagTLIBATTR
    {
    GUID guid;
    LCID lcid;
    SYSKIND syskind;
    WORD wMajorVerNum;
    WORD wMinorVerNum;
    WORD wLibFlags;
    } TLIBATTR;

typedef struct tagTLIBATTR *LPTLIBATTR;


extern const IID IID_ITypeLib;
#line 3715 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oaidl.h"
    typedef struct ITypeLibVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      ITypeLib * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      ITypeLib * This);

        ULONG ( __stdcall *Release )(
                      ITypeLib * This);

                      UINT ( __stdcall *GetTypeInfoCount )(
            ITypeLib * This);

        HRESULT ( __stdcall *GetTypeInfo )(
                      ITypeLib * This,
                       UINT index,
                                             ITypeInfo **ppTInfo);

        HRESULT ( __stdcall *GetTypeInfoType )(
                      ITypeLib * This,
                       UINT index,
                                   TYPEKIND *pTKind);

        HRESULT ( __stdcall *GetTypeInfoOfGuid )(
                      ITypeLib * This,
                                 const GUID * const guid,
                                             ITypeInfo **ppTinfo);

                      HRESULT ( __stdcall *GetLibAttr )(
            ITypeLib * This,
                        TLIBATTR **ppTLibAttr);

        HRESULT ( __stdcall *GetTypeComp )(
                      ITypeLib * This,
                                             ITypeComp **ppTComp);

                      HRESULT ( __stdcall *GetDocumentation )(
            ITypeLib * This,
                       INT index,
                        BSTR *pBstrName,
                        BSTR *pBstrDocString,
                        DWORD *pdwHelpContext,
                        BSTR *pBstrHelpFile);

                      HRESULT ( __stdcall *IsName )(
            ITypeLib * This,

                          LPOLESTR szNameBuf,
                       ULONG lHashVal,
                        BOOL *pfName);

                      HRESULT ( __stdcall *FindName )(
            ITypeLib * This,

                          LPOLESTR szNameBuf,
                       ULONG lHashVal,
                                            ITypeInfo **ppTInfo,
                                            MEMBERID *rgMemId,
                            USHORT *pcFound);

                      void ( __stdcall *ReleaseTLibAttr )(
            ITypeLib * This,
                       TLIBATTR *pTLibAttr);


    } ITypeLibVtbl;

    struct ITypeLib
    {
                   struct ITypeLibVtbl *lpVtbl;
    };
#line 3845 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oaidl.h"
                HRESULT __stdcall ITypeLib_RemoteGetTypeInfoCount_Proxy(
              ITypeLib * This,
                           UINT *pcTInfo);


void __stdcall ITypeLib_RemoteGetTypeInfoCount_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall ITypeLib_RemoteGetLibAttr_Proxy(
              ITypeLib * This,
                                     LPTLIBATTR *ppTLibAttr,
                           CLEANLOCALSTORAGE *pDummy);


void __stdcall ITypeLib_RemoteGetLibAttr_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall ITypeLib_RemoteGetDocumentation_Proxy(
              ITypeLib * This,
               INT index,
               DWORD refPtrFlags,
                                     BSTR *pBstrName,
                                     BSTR *pBstrDocString,
                           DWORD *pdwHelpContext,
                                     BSTR *pBstrHelpFile);


void __stdcall ITypeLib_RemoteGetDocumentation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall ITypeLib_RemoteIsName_Proxy(
              ITypeLib * This,
                         LPOLESTR szNameBuf,
               ULONG lHashVal,
                           BOOL *pfName,
                                     BSTR *pBstrLibName);


void __stdcall ITypeLib_RemoteIsName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall ITypeLib_RemoteFindName_Proxy(
              ITypeLib * This,
                         LPOLESTR szNameBuf,
               ULONG lHashVal,
                                                                               ITypeInfo **ppTInfo,
                                                                               MEMBERID *rgMemId,
                                 USHORT *pcFound,
                                     BSTR *pBstrLibName);


void __stdcall ITypeLib_RemoteFindName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                        HRESULT __stdcall ITypeLib_LocalReleaseTLibAttr_Proxy(
              ITypeLib * This);


void __stdcall ITypeLib_LocalReleaseTLibAttr_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
#line 3938 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oaidl.h"
#pragma endregion
#pragma region Desktop Family or OneCore Family or OneCore Family



extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0011_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0011_v0_0_s_ifspec;







typedef ITypeLib2 *LPTYPELIB2;


extern const IID IID_ITypeLib2;
#line 3986 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oaidl.h"
    typedef struct ITypeLib2Vtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      ITypeLib2 * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      ITypeLib2 * This);

        ULONG ( __stdcall *Release )(
                      ITypeLib2 * This);

                      UINT ( __stdcall *GetTypeInfoCount )(
            ITypeLib2 * This);

        HRESULT ( __stdcall *GetTypeInfo )(
                      ITypeLib2 * This,
                       UINT index,
                                             ITypeInfo **ppTInfo);

        HRESULT ( __stdcall *GetTypeInfoType )(
                      ITypeLib2 * This,
                       UINT index,
                                   TYPEKIND *pTKind);

        HRESULT ( __stdcall *GetTypeInfoOfGuid )(
                      ITypeLib2 * This,
                                 const GUID * const guid,
                                             ITypeInfo **ppTinfo);

                      HRESULT ( __stdcall *GetLibAttr )(
            ITypeLib2 * This,
                        TLIBATTR **ppTLibAttr);

        HRESULT ( __stdcall *GetTypeComp )(
                      ITypeLib2 * This,
                                             ITypeComp **ppTComp);

                      HRESULT ( __stdcall *GetDocumentation )(
            ITypeLib2 * This,
                       INT index,
                        BSTR *pBstrName,
                        BSTR *pBstrDocString,
                        DWORD *pdwHelpContext,
                        BSTR *pBstrHelpFile);

                      HRESULT ( __stdcall *IsName )(
            ITypeLib2 * This,

                          LPOLESTR szNameBuf,
                       ULONG lHashVal,
                        BOOL *pfName);

                      HRESULT ( __stdcall *FindName )(
            ITypeLib2 * This,

                          LPOLESTR szNameBuf,
                       ULONG lHashVal,
                                            ITypeInfo **ppTInfo,
                                            MEMBERID *rgMemId,
                            USHORT *pcFound);

                      void ( __stdcall *ReleaseTLibAttr )(
            ITypeLib2 * This,
                       TLIBATTR *pTLibAttr);

        HRESULT ( __stdcall *GetCustData )(
                      ITypeLib2 * This,
                                 const GUID * const guid,
                                   VARIANT *pVarVal);

                      HRESULT ( __stdcall *GetLibStatistics )(
            ITypeLib2 * This,
                        ULONG *pcUniqueNames,
                        ULONG *pcchUniqueNames);

                      HRESULT ( __stdcall *GetDocumentation2 )(
            ITypeLib2 * This,
                       INT index,
                       LCID lcid,
                        BSTR *pbstrHelpString,
                        DWORD *pdwHelpStringContext,
                        BSTR *pbstrHelpStringDll);

        HRESULT ( __stdcall *GetAllCustData )(
                      ITypeLib2 * This,
                                   CUSTDATA *pCustData);


    } ITypeLib2Vtbl;

    struct ITypeLib2
    {
                   struct ITypeLib2Vtbl *lpVtbl;
    };
#line 4151 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oaidl.h"
                HRESULT __stdcall ITypeLib2_RemoteGetLibStatistics_Proxy(
              ITypeLib2 * This,
                           ULONG *pcUniqueNames,
                           ULONG *pcchUniqueNames);


void __stdcall ITypeLib2_RemoteGetLibStatistics_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall ITypeLib2_RemoteGetDocumentation2_Proxy(
              ITypeLib2 * This,
               INT index,
               LCID lcid,
               DWORD refPtrFlags,
                                     BSTR *pbstrHelpString,
                           DWORD *pdwHelpStringContext,
                                     BSTR *pbstrHelpStringDll);


void __stdcall ITypeLib2_RemoteGetDocumentation2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
#line 4191 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oaidl.h"
typedef ITypeChangeEvents *LPTYPECHANGEEVENTS;

typedef
enum tagCHANGEKIND
    {
        CHANGEKIND_ADDMEMBER = 0,
        CHANGEKIND_DELETEMEMBER = ( CHANGEKIND_ADDMEMBER + 1 ) ,
        CHANGEKIND_SETNAMES = ( CHANGEKIND_DELETEMEMBER + 1 ) ,
        CHANGEKIND_SETDOCUMENTATION = ( CHANGEKIND_SETNAMES + 1 ) ,
        CHANGEKIND_GENERAL = ( CHANGEKIND_SETDOCUMENTATION + 1 ) ,
        CHANGEKIND_INVALIDATE = ( CHANGEKIND_GENERAL + 1 ) ,
        CHANGEKIND_CHANGEFAILED = ( CHANGEKIND_INVALIDATE + 1 ) ,
        CHANGEKIND_MAX = ( CHANGEKIND_CHANGEFAILED + 1 )
    } CHANGEKIND;


extern const IID IID_ITypeChangeEvents;
#line 4233 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oaidl.h"
    typedef struct ITypeChangeEventsVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            ITypeChangeEvents * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            ITypeChangeEvents * This);

        ULONG ( __stdcall *Release )(
            ITypeChangeEvents * This);

        HRESULT ( __stdcall *RequestTypeChange )(
            ITypeChangeEvents * This,
                       CHANGEKIND changeKind,
                       ITypeInfo *pTInfoBefore,

                       LPOLESTR pStrName,
                        INT *pfCancel);

        HRESULT ( __stdcall *AfterTypeChange )(
            ITypeChangeEvents * This,
                       CHANGEKIND changeKind,
                       ITypeInfo *pTInfoAfter,

                       LPOLESTR pStrName);


    } ITypeChangeEventsVtbl;

    struct ITypeChangeEvents
    {
                   struct ITypeChangeEventsVtbl *lpVtbl;
    };
#line 4310 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oaidl.h"
typedef IErrorInfo *LPERRORINFO;


extern const IID IID_IErrorInfo;
#line 4341 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oaidl.h"
    typedef struct IErrorInfoVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      IErrorInfo * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      IErrorInfo * This);

        ULONG ( __stdcall *Release )(
                      IErrorInfo * This);

        HRESULT ( __stdcall *GetGUID )(
                      IErrorInfo * This,
                                   GUID *pGUID);

        HRESULT ( __stdcall *GetSource )(
                      IErrorInfo * This,
                                             BSTR *pBstrSource);

        HRESULT ( __stdcall *GetDescription )(
                      IErrorInfo * This,
                                             BSTR *pBstrDescription);

        HRESULT ( __stdcall *GetHelpFile )(
                      IErrorInfo * This,
                                             BSTR *pBstrHelpFile);

        HRESULT ( __stdcall *GetHelpContext )(
                      IErrorInfo * This,
                                   DWORD *pdwHelpContext);


    } IErrorInfoVtbl;

    struct IErrorInfo
    {
                   struct IErrorInfoVtbl *lpVtbl;
    };
#line 4432 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oaidl.h"
typedef ICreateErrorInfo *LPCREATEERRORINFO;


extern const IID IID_ICreateErrorInfo;
#line 4463 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oaidl.h"
    typedef struct ICreateErrorInfoVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      ICreateErrorInfo * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      ICreateErrorInfo * This);

        ULONG ( __stdcall *Release )(
                      ICreateErrorInfo * This);

        HRESULT ( __stdcall *SetGUID )(
                      ICreateErrorInfo * This,
                                 const GUID * const rguid);

        HRESULT ( __stdcall *SetSource )(
                      ICreateErrorInfo * This,
                                 LPOLESTR szSource);

        HRESULT ( __stdcall *SetDescription )(
                      ICreateErrorInfo * This,
                                 LPOLESTR szDescription);

        HRESULT ( __stdcall *SetHelpFile )(
                      ICreateErrorInfo * This,
                                 LPOLESTR szHelpFile);

        HRESULT ( __stdcall *SetHelpContext )(
                      ICreateErrorInfo * This,
                       DWORD dwHelpContext);


    } ICreateErrorInfoVtbl;

    struct ICreateErrorInfo
    {
                   struct ICreateErrorInfoVtbl *lpVtbl;
    };
#line 4554 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oaidl.h"
typedef ISupportErrorInfo *LPSUPPORTERRORINFO;


extern const IID IID_ISupportErrorInfo;
#line 4573 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oaidl.h"
    typedef struct ISupportErrorInfoVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      ISupportErrorInfo * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      ISupportErrorInfo * This);

        ULONG ( __stdcall *Release )(
                      ISupportErrorInfo * This);

        HRESULT ( __stdcall *InterfaceSupportsErrorInfo )(
                      ISupportErrorInfo * This,
                                 const IID * const riid);


    } ISupportErrorInfoVtbl;

    struct ISupportErrorInfo
    {
                   struct ISupportErrorInfoVtbl *lpVtbl;
    };
#line 4637 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oaidl.h"
extern const IID IID_ITypeFactory;
#line 4655 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oaidl.h"
    typedef struct ITypeFactoryVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      ITypeFactory * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      ITypeFactory * This);

        ULONG ( __stdcall *Release )(
                      ITypeFactory * This);

        HRESULT ( __stdcall *CreateFromTypeInfo )(
                      ITypeFactory * This,
                                     ITypeInfo *pTypeInfo,
                                 const IID * const riid,
                                                     IUnknown **ppv);


    } ITypeFactoryVtbl;

    struct ITypeFactory
    {
                   struct ITypeFactoryVtbl *lpVtbl;
    };
#line 4721 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oaidl.h"
extern const IID IID_ITypeMarshal;
#line 4762 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oaidl.h"
    typedef struct ITypeMarshalVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            ITypeMarshal * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            ITypeMarshal * This);

        ULONG ( __stdcall *Release )(
            ITypeMarshal * This);

        HRESULT ( __stdcall *Size )(
            ITypeMarshal * This,
                       PVOID pvType,
                       DWORD dwDestContext,
                       PVOID pvDestContext,
                        ULONG *pSize);

        HRESULT ( __stdcall *Marshal )(
            ITypeMarshal * This,
                       PVOID pvType,
                       DWORD dwDestContext,
                       PVOID pvDestContext,
                       ULONG cbBufferLength,

                                                                BYTE *pBuffer,

                   ULONG *pcbWritten);

        HRESULT ( __stdcall *Unmarshal )(
            ITypeMarshal * This,
                        PVOID pvType,
                       DWORD dwFlags,
                       ULONG cbBufferLength,

                                        BYTE *pBuffer,

                   ULONG *pcbRead);

        HRESULT ( __stdcall *Free )(
            ITypeMarshal * This,
                       PVOID pvType);


    } ITypeMarshalVtbl;

    struct ITypeMarshal
    {
                   struct ITypeMarshalVtbl *lpVtbl;
    };
#line 4862 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oaidl.h"
typedef IRecordInfo *LPRECORDINFO;


extern const IID IID_IRecordInfo;
#line 4939 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oaidl.h"
    typedef struct IRecordInfoVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IRecordInfo * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IRecordInfo * This);

        ULONG ( __stdcall *Release )(
            IRecordInfo * This);

        HRESULT ( __stdcall *RecordInit )(
            IRecordInfo * This,
                        PVOID pvNew);

        HRESULT ( __stdcall *RecordClear )(
            IRecordInfo * This,
                       PVOID pvExisting);

        HRESULT ( __stdcall *RecordCopy )(
            IRecordInfo * This,
                       PVOID pvExisting,
                        PVOID pvNew);

        HRESULT ( __stdcall *GetGuid )(
            IRecordInfo * This,
                        GUID *pguid);

        HRESULT ( __stdcall *GetName )(
            IRecordInfo * This,
                        BSTR *pbstrName);

        HRESULT ( __stdcall *GetSize )(
            IRecordInfo * This,
                        ULONG *pcbSize);

        HRESULT ( __stdcall *GetTypeInfo )(
            IRecordInfo * This,
                        ITypeInfo **ppTypeInfo);

        HRESULT ( __stdcall *GetField )(
            IRecordInfo * This,
                       PVOID pvData,
                       LPCOLESTR szFieldName,
                        VARIANT *pvarField);

        HRESULT ( __stdcall *GetFieldNoCopy )(
            IRecordInfo * This,
                       PVOID pvData,
                       LPCOLESTR szFieldName,
                        VARIANT *pvarField,
                        PVOID *ppvDataCArray);

        HRESULT ( __stdcall *PutField )(
            IRecordInfo * This,
                       ULONG wFlags,
                            PVOID pvData,
                       LPCOLESTR szFieldName,
                       VARIANT *pvarField);

        HRESULT ( __stdcall *PutFieldNoCopy )(
            IRecordInfo * This,
                       ULONG wFlags,
                            PVOID pvData,
                       LPCOLESTR szFieldName,
                       VARIANT *pvarField);

        HRESULT ( __stdcall *GetFieldNames )(
            IRecordInfo * This,
                            ULONG *pcNames,
                                            BSTR *rgBstrNames);

        BOOL ( __stdcall *IsMatchingType )(
            IRecordInfo * This,
                       IRecordInfo *pRecordInfo);

        PVOID ( __stdcall *RecordCreate )(
            IRecordInfo * This);

        HRESULT ( __stdcall *RecordCreateCopy )(
            IRecordInfo * This,
                       PVOID pvSource,
                        PVOID *ppvDest);

        HRESULT ( __stdcall *RecordDestroy )(
            IRecordInfo * This,
                       PVOID pvRecord);


    } IRecordInfoVtbl;

    struct IRecordInfo
    {
                   struct IRecordInfoVtbl *lpVtbl;
    };
#line 5120 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oaidl.h"
typedef IErrorLog *LPERRORLOG;


extern const IID IID_IErrorLog;
#line 5140 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oaidl.h"
    typedef struct IErrorLogVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      IErrorLog * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      IErrorLog * This);

        ULONG ( __stdcall *Release )(
                      IErrorLog * This);

        HRESULT ( __stdcall *AddError )(
                      IErrorLog * This,
                                 LPCOLESTR pszPropName,
                                 EXCEPINFO *pExcepInfo);


    } IErrorLogVtbl;

    struct IErrorLog
    {
                   struct IErrorLogVtbl *lpVtbl;
    };
#line 5204 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oaidl.h"
typedef IPropertyBag *LPPROPERTYBAG;


extern const IID IID_IPropertyBag;
#line 5229 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oaidl.h"
    typedef struct IPropertyBagVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      IPropertyBag * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      IPropertyBag * This);

        ULONG ( __stdcall *Release )(
                      IPropertyBag * This);

                      HRESULT ( __stdcall *Read )(
            IPropertyBag * This,
                       LPCOLESTR pszPropName,
                            VARIANT *pVar,
                               IErrorLog *pErrorLog);

        HRESULT ( __stdcall *Write )(
                      IPropertyBag * This,
                                 LPCOLESTR pszPropName,
                                 VARIANT *pVar);


    } IPropertyBagVtbl;

    struct IPropertyBag
    {
                   struct IPropertyBagVtbl *lpVtbl;
    };
#line 5292 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oaidl.h"
                HRESULT __stdcall IPropertyBag_RemoteRead_Proxy(
              IPropertyBag * This,
                         LPCOLESTR pszPropName,
                           VARIANT *pVar,
                                     IErrorLog *pErrorLog,
               DWORD varType,
                             IUnknown *pUnkObj);


void __stdcall IPropertyBag_RemoteRead_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
#line 5316 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oaidl.h"
#pragma endregion
#line 5326 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oaidl.h"
extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0021_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0021_v0_0_s_ifspec;



unsigned long __stdcall BSTR_UserSize( unsigned long *, unsigned long , BSTR * );
unsigned char * __stdcall BSTR_UserMarshal( unsigned long *, unsigned char *, BSTR * );
unsigned char * __stdcall BSTR_UserUnmarshal( unsigned long *, unsigned char *, BSTR * );
void __stdcall BSTR_UserFree( unsigned long *, BSTR * );

unsigned long __stdcall CLEANLOCALSTORAGE_UserSize( unsigned long *, unsigned long , CLEANLOCALSTORAGE * );
unsigned char * __stdcall CLEANLOCALSTORAGE_UserMarshal( unsigned long *, unsigned char *, CLEANLOCALSTORAGE * );
unsigned char * __stdcall CLEANLOCALSTORAGE_UserUnmarshal( unsigned long *, unsigned char *, CLEANLOCALSTORAGE * );
void __stdcall CLEANLOCALSTORAGE_UserFree( unsigned long *, CLEANLOCALSTORAGE * );

unsigned long __stdcall VARIANT_UserSize( unsigned long *, unsigned long , VARIANT * );
unsigned char * __stdcall VARIANT_UserMarshal( unsigned long *, unsigned char *, VARIANT * );
unsigned char * __stdcall VARIANT_UserUnmarshal( unsigned long *, unsigned char *, VARIANT * );
void __stdcall VARIANT_UserFree( unsigned long *, VARIANT * );

unsigned long __stdcall BSTR_UserSize64( unsigned long *, unsigned long , BSTR * );
unsigned char * __stdcall BSTR_UserMarshal64( unsigned long *, unsigned char *, BSTR * );
unsigned char * __stdcall BSTR_UserUnmarshal64( unsigned long *, unsigned char *, BSTR * );
void __stdcall BSTR_UserFree64( unsigned long *, BSTR * );

unsigned long __stdcall CLEANLOCALSTORAGE_UserSize64( unsigned long *, unsigned long , CLEANLOCALSTORAGE * );
unsigned char * __stdcall CLEANLOCALSTORAGE_UserMarshal64( unsigned long *, unsigned char *, CLEANLOCALSTORAGE * );
unsigned char * __stdcall CLEANLOCALSTORAGE_UserUnmarshal64( unsigned long *, unsigned char *, CLEANLOCALSTORAGE * );
void __stdcall CLEANLOCALSTORAGE_UserFree64( unsigned long *, CLEANLOCALSTORAGE * );

unsigned long __stdcall VARIANT_UserSize64( unsigned long *, unsigned long , VARIANT * );
unsigned char * __stdcall VARIANT_UserMarshal64( unsigned long *, unsigned char *, VARIANT * );
unsigned char * __stdcall VARIANT_UserUnmarshal64( unsigned long *, unsigned char *, VARIANT * );
void __stdcall VARIANT_UserFree64( unsigned long *, VARIANT * );

              HRESULT __stdcall IDispatch_Invoke_Proxy(
    IDispatch * This,

          DISPID dispIdMember,

          const IID * const riid,

          LCID lcid,

          WORD wFlags,

          DISPPARAMS *pDispParams,

               VARIANT *pVarResult,

               EXCEPINFO *pExcepInfo,

               UINT *puArgErr);


                HRESULT __stdcall IDispatch_Invoke_Stub(
              IDispatch * This,
               DISPID dispIdMember,
                         const IID * const riid,
               LCID lcid,
               DWORD dwFlags,
                         DISPPARAMS *pDispParams,
                           VARIANT *pVarResult,
                           EXCEPINFO *pExcepInfo,
                           UINT *pArgErr,
               UINT cVarRef,
                                                       UINT *rgVarRefIdx,
                                                               VARIANTARG *rgVarRef);

              HRESULT __stdcall IEnumVARIANT_Next_Proxy(
    IEnumVARIANT * This,
               ULONG celt,
                                    VARIANT *rgVar,
                ULONG *pCeltFetched);


                HRESULT __stdcall IEnumVARIANT_Next_Stub(
              IEnumVARIANT * This,
               ULONG celt,
                                                                                VARIANT *rgVar,
                           ULONG *pCeltFetched);

              HRESULT __stdcall ITypeComp_Bind_Proxy(
    ITypeComp * This,

               LPOLESTR szName,
               ULONG lHashVal,
               WORD wFlags,
                ITypeInfo **ppTInfo,
                DESCKIND *pDescKind,
                BINDPTR *pBindPtr);


                HRESULT __stdcall ITypeComp_Bind_Stub(
              ITypeComp * This,
                         LPOLESTR szName,
               ULONG lHashVal,
               WORD wFlags,
                                     ITypeInfo **ppTInfo,
                           DESCKIND *pDescKind,
                                     LPFUNCDESC *ppFuncDesc,
                                     LPVARDESC *ppVarDesc,
                                     ITypeComp **ppTypeComp,
                           CLEANLOCALSTORAGE *pDummy);

              HRESULT __stdcall ITypeComp_BindType_Proxy(
    ITypeComp * This,

               LPOLESTR szName,
               ULONG lHashVal,
                ITypeInfo **ppTInfo,
                ITypeComp **ppTComp);


                HRESULT __stdcall ITypeComp_BindType_Stub(
              ITypeComp * This,
                         LPOLESTR szName,
               ULONG lHashVal,
                                     ITypeInfo **ppTInfo);

              HRESULT __stdcall ITypeInfo_GetTypeAttr_Proxy(
    ITypeInfo * This,
                TYPEATTR **ppTypeAttr);


                HRESULT __stdcall ITypeInfo_GetTypeAttr_Stub(
              ITypeInfo * This,
                                     LPTYPEATTR *ppTypeAttr,
                           CLEANLOCALSTORAGE *pDummy);

              HRESULT __stdcall ITypeInfo_GetFuncDesc_Proxy(
    ITypeInfo * This,
               UINT index,
                FUNCDESC **ppFuncDesc);


                HRESULT __stdcall ITypeInfo_GetFuncDesc_Stub(
              ITypeInfo * This,
               UINT index,
                                     LPFUNCDESC *ppFuncDesc,
                           CLEANLOCALSTORAGE *pDummy);

              HRESULT __stdcall ITypeInfo_GetVarDesc_Proxy(
    ITypeInfo * This,
               UINT index,
                VARDESC **ppVarDesc);


                HRESULT __stdcall ITypeInfo_GetVarDesc_Stub(
              ITypeInfo * This,
               UINT index,
                                     LPVARDESC *ppVarDesc,
                           CLEANLOCALSTORAGE *pDummy);

              HRESULT __stdcall ITypeInfo_GetNames_Proxy(
    ITypeInfo * This,
               MEMBERID memid,
                                    BSTR *rgBstrNames,
               UINT cMaxNames,
                UINT *pcNames);


                HRESULT __stdcall ITypeInfo_GetNames_Stub(
              ITypeInfo * This,
               MEMBERID memid,
                                                                                BSTR *rgBstrNames,
               UINT cMaxNames,
                           UINT *pcNames);

              HRESULT __stdcall ITypeInfo_GetIDsOfNames_Proxy(
    ITypeInfo * This,

                              LPOLESTR *rgszNames,
               UINT cNames,
                         MEMBERID *pMemId);


                        HRESULT __stdcall ITypeInfo_GetIDsOfNames_Stub(
              ITypeInfo * This);

              HRESULT __stdcall ITypeInfo_Invoke_Proxy(
    ITypeInfo * This,
               PVOID pvInstance,
               MEMBERID memid,
               WORD wFlags,
                    DISPPARAMS *pDispParams,
                VARIANT *pVarResult,
                EXCEPINFO *pExcepInfo,
                UINT *puArgErr);


                        HRESULT __stdcall ITypeInfo_Invoke_Stub(
              ITypeInfo * This);

              HRESULT __stdcall ITypeInfo_GetDocumentation_Proxy(
    ITypeInfo * This,
               MEMBERID memid,
                BSTR *pBstrName,
                BSTR *pBstrDocString,
                DWORD *pdwHelpContext,
                BSTR *pBstrHelpFile);


                HRESULT __stdcall ITypeInfo_GetDocumentation_Stub(
              ITypeInfo * This,
               MEMBERID memid,
               DWORD refPtrFlags,
                                     BSTR *pBstrName,
                                     BSTR *pBstrDocString,
                           DWORD *pdwHelpContext,
                                     BSTR *pBstrHelpFile);

              HRESULT __stdcall ITypeInfo_GetDllEntry_Proxy(
    ITypeInfo * This,
               MEMBERID memid,
               INVOKEKIND invKind,
                BSTR *pBstrDllName,
                BSTR *pBstrName,
                WORD *pwOrdinal);


                HRESULT __stdcall ITypeInfo_GetDllEntry_Stub(
              ITypeInfo * This,
               MEMBERID memid,
               INVOKEKIND invKind,
               DWORD refPtrFlags,
                                     BSTR *pBstrDllName,
                                     BSTR *pBstrName,
                           WORD *pwOrdinal);

              HRESULT __stdcall ITypeInfo_AddressOfMember_Proxy(
    ITypeInfo * This,
               MEMBERID memid,
               INVOKEKIND invKind,
                PVOID *ppv);


                        HRESULT __stdcall ITypeInfo_AddressOfMember_Stub(
              ITypeInfo * This);

              HRESULT __stdcall ITypeInfo_CreateInstance_Proxy(
    ITypeInfo * This,
               IUnknown *pUnkOuter,
               const IID * const riid,
                        PVOID *ppvObj);


                HRESULT __stdcall ITypeInfo_CreateInstance_Stub(
              ITypeInfo * This,
                         const IID * const riid,
                                             IUnknown **ppvObj);

              HRESULT __stdcall ITypeInfo_GetContainingTypeLib_Proxy(
    ITypeInfo * This,
                ITypeLib **ppTLib,
                UINT *pIndex);


                HRESULT __stdcall ITypeInfo_GetContainingTypeLib_Stub(
              ITypeInfo * This,
                                     ITypeLib **ppTLib,
                           UINT *pIndex);

              void __stdcall ITypeInfo_ReleaseTypeAttr_Proxy(
    ITypeInfo * This,
               TYPEATTR *pTypeAttr);


                        HRESULT __stdcall ITypeInfo_ReleaseTypeAttr_Stub(
              ITypeInfo * This);

              void __stdcall ITypeInfo_ReleaseFuncDesc_Proxy(
    ITypeInfo * This,
               FUNCDESC *pFuncDesc);


                        HRESULT __stdcall ITypeInfo_ReleaseFuncDesc_Stub(
              ITypeInfo * This);

              void __stdcall ITypeInfo_ReleaseVarDesc_Proxy(
    ITypeInfo * This,
               VARDESC *pVarDesc);


                        HRESULT __stdcall ITypeInfo_ReleaseVarDesc_Stub(
              ITypeInfo * This);

              HRESULT __stdcall ITypeInfo2_GetDocumentation2_Proxy(
    ITypeInfo2 * This,
               MEMBERID memid,
               LCID lcid,
                BSTR *pbstrHelpString,
                DWORD *pdwHelpStringContext,
                BSTR *pbstrHelpStringDll);


                HRESULT __stdcall ITypeInfo2_GetDocumentation2_Stub(
              ITypeInfo2 * This,
               MEMBERID memid,
               LCID lcid,
               DWORD refPtrFlags,
                                     BSTR *pbstrHelpString,
                           DWORD *pdwHelpStringContext,
                                     BSTR *pbstrHelpStringDll);

              UINT __stdcall ITypeLib_GetTypeInfoCount_Proxy(
    ITypeLib * This);


                HRESULT __stdcall ITypeLib_GetTypeInfoCount_Stub(
              ITypeLib * This,
                           UINT *pcTInfo);

              HRESULT __stdcall ITypeLib_GetLibAttr_Proxy(
    ITypeLib * This,
                TLIBATTR **ppTLibAttr);


                HRESULT __stdcall ITypeLib_GetLibAttr_Stub(
              ITypeLib * This,
                                     LPTLIBATTR *ppTLibAttr,
                           CLEANLOCALSTORAGE *pDummy);

              HRESULT __stdcall ITypeLib_GetDocumentation_Proxy(
    ITypeLib * This,
               INT index,
                BSTR *pBstrName,
                BSTR *pBstrDocString,
                DWORD *pdwHelpContext,
                BSTR *pBstrHelpFile);


                HRESULT __stdcall ITypeLib_GetDocumentation_Stub(
              ITypeLib * This,
               INT index,
               DWORD refPtrFlags,
                                     BSTR *pBstrName,
                                     BSTR *pBstrDocString,
                           DWORD *pdwHelpContext,
                                     BSTR *pBstrHelpFile);

              HRESULT __stdcall ITypeLib_IsName_Proxy(
    ITypeLib * This,

                  LPOLESTR szNameBuf,
               ULONG lHashVal,
                BOOL *pfName);


                HRESULT __stdcall ITypeLib_IsName_Stub(
              ITypeLib * This,
                         LPOLESTR szNameBuf,
               ULONG lHashVal,
                           BOOL *pfName,
                                     BSTR *pBstrLibName);

              HRESULT __stdcall ITypeLib_FindName_Proxy(
    ITypeLib * This,

                  LPOLESTR szNameBuf,
               ULONG lHashVal,
                                    ITypeInfo **ppTInfo,
                                    MEMBERID *rgMemId,
                    USHORT *pcFound);


                HRESULT __stdcall ITypeLib_FindName_Stub(
              ITypeLib * This,
                         LPOLESTR szNameBuf,
               ULONG lHashVal,
                                                                               ITypeInfo **ppTInfo,
                                                                               MEMBERID *rgMemId,
                                 USHORT *pcFound,
                                     BSTR *pBstrLibName);

              void __stdcall ITypeLib_ReleaseTLibAttr_Proxy(
    ITypeLib * This,
               TLIBATTR *pTLibAttr);


                        HRESULT __stdcall ITypeLib_ReleaseTLibAttr_Stub(
              ITypeLib * This);

              HRESULT __stdcall ITypeLib2_GetLibStatistics_Proxy(
    ITypeLib2 * This,
                ULONG *pcUniqueNames,
                ULONG *pcchUniqueNames);


                HRESULT __stdcall ITypeLib2_GetLibStatistics_Stub(
              ITypeLib2 * This,
                           ULONG *pcUniqueNames,
                           ULONG *pcchUniqueNames);

              HRESULT __stdcall ITypeLib2_GetDocumentation2_Proxy(
    ITypeLib2 * This,
               INT index,
               LCID lcid,
                BSTR *pbstrHelpString,
                DWORD *pdwHelpStringContext,
                BSTR *pbstrHelpStringDll);


                HRESULT __stdcall ITypeLib2_GetDocumentation2_Stub(
              ITypeLib2 * This,
               INT index,
               LCID lcid,
               DWORD refPtrFlags,
                                     BSTR *pbstrHelpString,
                           DWORD *pdwHelpStringContext,
                                     BSTR *pbstrHelpStringDll);

              HRESULT __stdcall IPropertyBag_Read_Proxy(
    IPropertyBag * This,
               LPCOLESTR pszPropName,
                    VARIANT *pVar,
                       IErrorLog *pErrorLog);


                HRESULT __stdcall IPropertyBag_Read_Stub(
              IPropertyBag * This,
                         LPCOLESTR pszPropName,
                           VARIANT *pVar,
                                     IErrorLog *pErrorLog,
               DWORD varType,
                             IUnknown *pUnkObj);
#line 5764 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oaidl.h"
#pragma option pop
#line 73 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\propidlbase.h"
#line 102 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\propidlbase.h"
#pragma region Application Family or OneCore Family




typedef struct tagVersionedStream
    {
    GUID guidVersion;
    IStream *pStream;
    } VERSIONEDSTREAM;

typedef struct tagVersionedStream *LPVERSIONEDSTREAM;
#line 139 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\propidlbase.h"
typedef struct tagPROPVARIANT PROPVARIANT;

typedef struct tagCAC
    {
    ULONG cElems;
                    CHAR *pElems;
    } CAC;

typedef struct tagCAUB
    {
    ULONG cElems;
                    UCHAR *pElems;
    } CAUB;

typedef struct tagCAI
    {
    ULONG cElems;
                    SHORT *pElems;
    } CAI;

typedef struct tagCAUI
    {
    ULONG cElems;
                    USHORT *pElems;
    } CAUI;

typedef struct tagCAL
    {
    ULONG cElems;
                    LONG *pElems;
    } CAL;

typedef struct tagCAUL
    {
    ULONG cElems;
                    ULONG *pElems;
    } CAUL;

typedef struct tagCAFLT
    {
    ULONG cElems;
                    FLOAT *pElems;
    } CAFLT;

typedef struct tagCADBL
    {
    ULONG cElems;
                    DOUBLE *pElems;
    } CADBL;

typedef struct tagCACY
    {
    ULONG cElems;
                    CY *pElems;
    } CACY;

typedef struct tagCADATE
    {
    ULONG cElems;
                    DATE *pElems;
    } CADATE;

typedef struct tagCABSTR
    {
    ULONG cElems;
                    BSTR *pElems;
    } CABSTR;

typedef struct tagCABSTRBLOB
    {
    ULONG cElems;
                    BSTRBLOB *pElems;
    } CABSTRBLOB;

typedef struct tagCABOOL
    {
    ULONG cElems;
                    VARIANT_BOOL *pElems;
    } CABOOL;

typedef struct tagCASCODE
    {
    ULONG cElems;
                    SCODE *pElems;
    } CASCODE;

typedef struct tagCAPROPVARIANT
    {
    ULONG cElems;
                    PROPVARIANT *pElems;
    } CAPROPVARIANT;

typedef struct tagCAH
    {
    ULONG cElems;
                    LARGE_INTEGER *pElems;
    } CAH;

typedef struct tagCAUH
    {
    ULONG cElems;
                    ULARGE_INTEGER *pElems;
    } CAUH;

typedef struct tagCALPSTR
    {
    ULONG cElems;
                    LPSTR *pElems;
    } CALPSTR;

typedef struct tagCALPWSTR
    {
    ULONG cElems;
                    LPWSTR *pElems;
    } CALPWSTR;

typedef struct tagCAFILETIME
    {
    ULONG cElems;
                    FILETIME *pElems;
    } CAFILETIME;

typedef struct tagCACLIPDATA
    {
    ULONG cElems;
                    CLIPDATA *pElems;
    } CACLIPDATA;

typedef struct tagCACLSID
    {
    ULONG cElems;
                    CLSID *pElems;
    } CACLSID;
#line 283 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\propidlbase.h"
typedef WORD PROPVAR_PAD1;
typedef WORD PROPVAR_PAD2;
typedef WORD PROPVAR_PAD3;
#line 295 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\propidlbase.h"
struct tagPROPVARIANT {
  union {

struct
    {
    VARTYPE vt;
    PROPVAR_PAD1 wReserved1;
    PROPVAR_PAD2 wReserved2;
    PROPVAR_PAD3 wReserved3;
                                          union
        {

                       CHAR cVal;
                       UCHAR bVal;
                       SHORT iVal;
                       USHORT uiVal;
                       LONG lVal;
                       ULONG ulVal;
                       INT intVal;
                       UINT uintVal;
                       LARGE_INTEGER hVal;
                       ULARGE_INTEGER uhVal;
                       FLOAT fltVal;
                       DOUBLE dblVal;
                       VARIANT_BOOL boolVal;

                       SCODE scode;
                       CY cyVal;
                       DATE date;
                       FILETIME filetime;
                       CLSID *puuid;
                       CLIPDATA *pclipdata;
                       BSTR bstrVal;
                       BSTRBLOB bstrblobVal;
                       BLOB blob;
                       LPSTR pszVal;
                       LPWSTR pwszVal;
                       IUnknown *punkVal;
                       IDispatch *pdispVal;
                       IStream *pStream;
                       IStorage *pStorage;
                       LPVERSIONEDSTREAM pVersionedStream;
                       LPSAFEARRAY parray;
                       CAC cac;
                       CAUB caub;
                       CAI cai;
                       CAUI caui;
                       CAL cal;
                       CAUL caul;
                       CAH cah;
                       CAUH cauh;
                       CAFLT caflt;
                       CADBL cadbl;
                       CABOOL cabool;
                       CASCODE cascode;
                       CACY cacy;
                       CADATE cadate;
                       CAFILETIME cafiletime;
                       CACLSID cauuid;
                       CACLIPDATA caclipdata;
                       CABSTR cabstr;
                       CABSTRBLOB cabstrblob;
                       CALPSTR calpstr;
                       CALPWSTR calpwstr;
                       CAPROPVARIANT capropvar;
                       CHAR *pcVal;
                       UCHAR *pbVal;
                       SHORT *piVal;
                       USHORT *puiVal;
                       LONG *plVal;
                       ULONG *pulVal;
                       INT *pintVal;
                       UINT *puintVal;
                       FLOAT *pfltVal;
                       DOUBLE *pdblVal;
                       VARIANT_BOOL *pboolVal;
                       DECIMAL *pdecVal;
                       SCODE *pscode;
                       CY *pcyVal;
                       DATE *pdate;
                       BSTR *pbstrVal;
                       IUnknown **ppunkVal;
                       IDispatch **ppdispVal;
                       LPSAFEARRAY *pparray;
                       PROPVARIANT *pvarVal;
        } ;
    } ;

    DECIMAL decVal;
  };
};
#line 399 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\propidlbase.h"
typedef struct tagPROPVARIANT * LPPROPVARIANT;
#line 442 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\propidlbase.h"
typedef struct tagPROPSPEC
    {
    ULONG ulKind;
                                          union
        {
                       PROPID propid;
                       LPOLESTR lpwstr;

        } ;
    } PROPSPEC;

typedef struct tagSTATPROPSTG
    {
    LPOLESTR lpwstrName;
    PROPID propid;
    VARTYPE vt;
    } STATPROPSTG;






typedef struct tagSTATPROPSETSTG
    {
    FMTID fmtid;
    CLSID clsid;
    DWORD grfFlags;
    FILETIME mtime;
    FILETIME ctime;
    FILETIME atime;
    DWORD dwOSVersion;
    } STATPROPSETSTG;



extern RPC_IF_HANDLE __MIDL_itf_propidlbase_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_propidlbase_0000_0000_v0_0_s_ifspec;
#line 488 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\propidlbase.h"
extern const IID IID_IPropertyStorage;
#line 549 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\propidlbase.h"
    typedef struct IPropertyStorageVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      IPropertyStorage * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      IPropertyStorage * This);

        ULONG ( __stdcall *Release )(
                      IPropertyStorage * This);

        HRESULT ( __stdcall *ReadMultiple )(
                      IPropertyStorage * This,
                       ULONG cpspec,
                                                              const PROPSPEC rgpspec[ ],
                                                                PROPVARIANT rgpropvar[ ]);

        HRESULT ( __stdcall *WriteMultiple )(
                      IPropertyStorage * This,
                       ULONG cpspec,
                                                              const PROPSPEC rgpspec[ ],
                                                              const PROPVARIANT rgpropvar[ ],
                       PROPID propidNameFirst);

        HRESULT ( __stdcall *DeleteMultiple )(
                      IPropertyStorage * This,
                       ULONG cpspec,
                                                              const PROPSPEC rgpspec[ ]);

        HRESULT ( __stdcall *ReadPropertyNames )(
                      IPropertyStorage * This,
                       ULONG cpropid,
                                                               const PROPID rgpropid[ ],
                                                                 LPOLESTR rglpwstrName[ ]);

        HRESULT ( __stdcall *WritePropertyNames )(
                      IPropertyStorage * This,
                       ULONG cpropid,
                                                               const PROPID rgpropid[ ],
                                                               const LPOLESTR rglpwstrName[ ]);

        HRESULT ( __stdcall *DeletePropertyNames )(
                      IPropertyStorage * This,
                       ULONG cpropid,
                                                               const PROPID rgpropid[ ]);

        HRESULT ( __stdcall *Commit )(
                      IPropertyStorage * This,
                       DWORD grfCommitFlags);

        HRESULT ( __stdcall *Revert )(
                      IPropertyStorage * This);

        HRESULT ( __stdcall *Enum )(
                      IPropertyStorage * This,
                                             IEnumSTATPROPSTG **ppenum);

        HRESULT ( __stdcall *SetTimes )(
                      IPropertyStorage * This,
                                 const FILETIME *pctime,
                                 const FILETIME *patime,
                                 const FILETIME *pmtime);

        HRESULT ( __stdcall *SetClass )(
                      IPropertyStorage * This,
                                 const IID * const clsid);

        HRESULT ( __stdcall *Stat )(
                      IPropertyStorage * This,
                                   STATPROPSETSTG *pstatpsstg);


    } IPropertyStorageVtbl;

    struct IPropertyStorage
    {
                   struct IPropertyStorageVtbl *lpVtbl;
    };
#line 701 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\propidlbase.h"
typedef IPropertySetStorage *LPPROPERTYSETSTORAGE;


extern const IID IID_IPropertySetStorage;
#line 735 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\propidlbase.h"
    typedef struct IPropertySetStorageVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      IPropertySetStorage * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      IPropertySetStorage * This);

        ULONG ( __stdcall *Release )(
                      IPropertySetStorage * This);

        HRESULT ( __stdcall *Create )(
                      IPropertySetStorage * This,
                                 const IID * const rfmtid,
                                             const CLSID *pclsid,
                       DWORD grfFlags,
                       DWORD grfMode,
                                             IPropertyStorage **ppprstg);

        HRESULT ( __stdcall *Open )(
                      IPropertySetStorage * This,
                                 const IID * const rfmtid,
                       DWORD grfMode,
                                             IPropertyStorage **ppprstg);

        HRESULT ( __stdcall *Delete )(
                      IPropertySetStorage * This,
                                 const IID * const rfmtid);

        HRESULT ( __stdcall *Enum )(
                      IPropertySetStorage * This,
                                             IEnumSTATPROPSETSTG **ppenum);


    } IPropertySetStorageVtbl;

    struct IPropertySetStorage
    {
                   struct IPropertySetStorageVtbl *lpVtbl;
    };
#line 825 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\propidlbase.h"
typedef IEnumSTATPROPSTG *LPENUMSTATPROPSTG;


extern const IID IID_IEnumSTATPROPSTG;
#line 856 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\propidlbase.h"
    typedef struct IEnumSTATPROPSTGVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      IEnumSTATPROPSTG * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      IEnumSTATPROPSTG * This);

        ULONG ( __stdcall *Release )(
                      IEnumSTATPROPSTG * This);

                      HRESULT ( __stdcall *Next )(
            IEnumSTATPROPSTG * This,
                       ULONG celt,

                                                  STATPROPSTG *rgelt,

                                                  ULONG *pceltFetched);

        HRESULT ( __stdcall *Skip )(
                      IEnumSTATPROPSTG * This,
                       ULONG celt);

        HRESULT ( __stdcall *Reset )(
                      IEnumSTATPROPSTG * This);

        HRESULT ( __stdcall *Clone )(
                      IEnumSTATPROPSTG * This,
                                             IEnumSTATPROPSTG **ppenum);


    } IEnumSTATPROPSTGVtbl;

    struct IEnumSTATPROPSTG
    {
                   struct IEnumSTATPROPSTGVtbl *lpVtbl;
    };
#line 933 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\propidlbase.h"
                HRESULT __stdcall IEnumSTATPROPSTG_RemoteNext_Proxy(
              IEnumSTATPROPSTG * This,
               ULONG celt,
                                                                                STATPROPSTG *rgelt,
                           ULONG *pceltFetched);


void __stdcall IEnumSTATPROPSTG_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
#line 957 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\propidlbase.h"
typedef IEnumSTATPROPSETSTG *LPENUMSTATPROPSETSTG;


extern const IID IID_IEnumSTATPROPSETSTG;
#line 988 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\propidlbase.h"
    typedef struct IEnumSTATPROPSETSTGVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      IEnumSTATPROPSETSTG * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      IEnumSTATPROPSETSTG * This);

        ULONG ( __stdcall *Release )(
                      IEnumSTATPROPSETSTG * This);

                      HRESULT ( __stdcall *Next )(
            IEnumSTATPROPSETSTG * This,
                       ULONG celt,

                                                  STATPROPSETSTG *rgelt,

                                                  ULONG *pceltFetched);

        HRESULT ( __stdcall *Skip )(
                      IEnumSTATPROPSETSTG * This,
                       ULONG celt);

        HRESULT ( __stdcall *Reset )(
                      IEnumSTATPROPSETSTG * This);

        HRESULT ( __stdcall *Clone )(
                      IEnumSTATPROPSETSTG * This,
                                             IEnumSTATPROPSETSTG **ppenum);


    } IEnumSTATPROPSETSTGVtbl;

    struct IEnumSTATPROPSETSTG
    {
                   struct IEnumSTATPROPSETSTGVtbl *lpVtbl;
    };
#line 1065 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\propidlbase.h"
                HRESULT __stdcall IEnumSTATPROPSETSTG_RemoteNext_Proxy(
              IEnumSTATPROPSETSTG * This,
               ULONG celt,
                                                                                STATPROPSETSTG *rgelt,
                           ULONG *pceltFetched);


void __stdcall IEnumSTATPROPSETSTG_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
#line 1086 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\propidlbase.h"
typedef IPropertyStorage *LPPROPERTYSTORAGE;


#pragma endregion
#line 1101 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\propidlbase.h"
extern RPC_IF_HANDLE __MIDL_itf_propidlbase_0000_0004_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_propidlbase_0000_0004_v0_0_s_ifspec;



unsigned long __stdcall BSTR_UserSize( unsigned long *, unsigned long , BSTR * );
unsigned char * __stdcall BSTR_UserMarshal( unsigned long *, unsigned char *, BSTR * );
unsigned char * __stdcall BSTR_UserUnmarshal( unsigned long *, unsigned char *, BSTR * );
void __stdcall BSTR_UserFree( unsigned long *, BSTR * );

unsigned long __stdcall LPSAFEARRAY_UserSize( unsigned long *, unsigned long , LPSAFEARRAY * );
unsigned char * __stdcall LPSAFEARRAY_UserMarshal( unsigned long *, unsigned char *, LPSAFEARRAY * );
unsigned char * __stdcall LPSAFEARRAY_UserUnmarshal( unsigned long *, unsigned char *, LPSAFEARRAY * );
void __stdcall LPSAFEARRAY_UserFree( unsigned long *, LPSAFEARRAY * );

unsigned long __stdcall BSTR_UserSize64( unsigned long *, unsigned long , BSTR * );
unsigned char * __stdcall BSTR_UserMarshal64( unsigned long *, unsigned char *, BSTR * );
unsigned char * __stdcall BSTR_UserUnmarshal64( unsigned long *, unsigned char *, BSTR * );
void __stdcall BSTR_UserFree64( unsigned long *, BSTR * );

unsigned long __stdcall LPSAFEARRAY_UserSize64( unsigned long *, unsigned long , LPSAFEARRAY * );
unsigned char * __stdcall LPSAFEARRAY_UserMarshal64( unsigned long *, unsigned char *, LPSAFEARRAY * );
unsigned char * __stdcall LPSAFEARRAY_UserUnmarshal64( unsigned long *, unsigned char *, LPSAFEARRAY * );
void __stdcall LPSAFEARRAY_UserFree64( unsigned long *, LPSAFEARRAY * );

              HRESULT __stdcall IEnumSTATPROPSTG_Next_Proxy(
    IEnumSTATPROPSTG * This,
               ULONG celt,

                                          STATPROPSTG *rgelt,

                                          ULONG *pceltFetched);


                HRESULT __stdcall IEnumSTATPROPSTG_Next_Stub(
              IEnumSTATPROPSTG * This,
               ULONG celt,
                                                                                STATPROPSTG *rgelt,
                           ULONG *pceltFetched);

              HRESULT __stdcall IEnumSTATPROPSETSTG_Next_Proxy(
    IEnumSTATPROPSETSTG * This,
               ULONG celt,

                                          STATPROPSETSTG *rgelt,

                                          ULONG *pceltFetched);


                HRESULT __stdcall IEnumSTATPROPSETSTG_Next_Stub(
              IEnumSTATPROPSETSTG * This,
               ULONG celt,
                                                                                STATPROPSETSTG *rgelt,
                           ULONG *pceltFetched);
#line 1167 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\propidlbase.h"
#pragma option pop
#line 42 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\coml2api.h"


#pragma region Application Family
#line 88 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\coml2api.h"
typedef DWORD STGFMT;
#line 101 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\coml2api.h"
extern HRESULT __stdcall
StgCreateDocfile(
                               const WCHAR * pwcsName,
         DWORD grfMode,
               DWORD reserved,
             IStorage ** ppstgOpen
    );



extern HRESULT __stdcall
StgCreateDocfileOnILockBytes(
         ILockBytes * plkbyt,
         DWORD grfMode,
         DWORD reserved,
             IStorage ** ppstgOpen
    );



extern HRESULT __stdcall
StgOpenStorage(
                               const WCHAR * pwcsName,
             IStorage * pstgPriority,
         DWORD grfMode,
               SNB snbExclude,
         DWORD reserved,
             IStorage ** ppstgOpen
    );



extern HRESULT __stdcall
StgOpenStorageOnILockBytes(
         ILockBytes * plkbyt,
             IStorage * pstgPriority,
         DWORD grfMode,
               SNB snbExclude,
               DWORD reserved,
             IStorage ** ppstgOpen
    );



extern HRESULT __stdcall
StgIsStorageFile(
                           const WCHAR * pwcsName
    );



extern HRESULT __stdcall
StgIsStorageILockBytes(
         ILockBytes * plkbyt
    );



extern HRESULT __stdcall
StgSetTimes(
                           const WCHAR * lpszName,
             const FILETIME * pctime,
             const FILETIME * patime,
             const FILETIME * pmtime
    );
#line 179 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\coml2api.h"
typedef struct tagSTGOPTIONS
{
    USHORT usVersion;
    USHORT reserved;
    ULONG ulSectorSize;


    const WCHAR *pwcsTemplateFile;

} STGOPTIONS;


extern HRESULT __stdcall
StgCreateStorageEx(
                               const WCHAR * pwcsName,
         DWORD grfMode,
         DWORD stgfmt,
         DWORD grfAttrs,
                STGOPTIONS * pStgOptions,
             PSECURITY_DESCRIPTOR pSecurityDescriptor,
         const IID * const riid,
             void ** ppObjectOpen
    );



extern HRESULT __stdcall
StgOpenStorageEx(
                           const WCHAR * pwcsName,
         DWORD grfMode,
         DWORD stgfmt,
         DWORD grfAttrs,
                STGOPTIONS * pStgOptions,
             PSECURITY_DESCRIPTOR pSecurityDescriptor,
         const IID * const riid,
             void ** ppObjectOpen
    );





extern HRESULT __stdcall
StgCreatePropStg(
         IUnknown * pUnk,
         const IID * const fmtid,
         const CLSID * pclsid,
         DWORD grfFlags,
               DWORD dwReserved,
             IPropertyStorage ** ppPropStg
    );



extern HRESULT __stdcall
StgOpenPropStg(
         IUnknown * pUnk,
         const IID * const fmtid,
         DWORD grfFlags,
               DWORD dwReserved,
             IPropertyStorage ** ppPropStg
    );



extern HRESULT __stdcall
StgCreatePropSetStg(
         IStorage * pStorage,
               DWORD dwReserved,
             IPropertySetStorage ** ppPropSetStg
    );





extern HRESULT __stdcall
FmtIdToPropStgName(
         const FMTID * pfmtid,
                                         LPOLESTR oszName
    );



extern HRESULT __stdcall
PropStgNameToFmtId(
         const LPOLESTR oszName,
          FMTID * pfmtid
    );





extern HRESULT __stdcall
ReadClassStg(
         LPSTORAGE pStg,
          CLSID * pclsid
    );


extern HRESULT __stdcall
WriteClassStg(
         LPSTORAGE pStg,
         const IID * const rclsid
    );


extern HRESULT __stdcall
ReadClassStm(
         LPSTREAM pStm,
          CLSID * pclsid
    );


extern HRESULT __stdcall
WriteClassStm(
         LPSTREAM pStm,
         const IID * const rclsid
    );




extern HRESULT __stdcall
GetHGlobalFromILockBytes(
         LPLOCKBYTES plkbyt,
          HGLOBAL * phglobal
    );



extern HRESULT __stdcall
CreateILockBytesOnHGlobal(
             HGLOBAL hGlobal,
         BOOL fDeleteOnRelease,
             LPLOCKBYTES * pplkbyt
    );



extern HRESULT __stdcall
GetConvertStg(
         LPSTORAGE pStg
    );



#pragma endregion

#pragma option pop
#line 29 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objbase.h"



typedef enum tagCOINIT
{
  COINIT_APARTMENTTHREADED = 0x2,



  COINIT_MULTITHREADED = COINITBASE_MULTITHREADED,
  COINIT_DISABLE_OLE1DDE = 0x4,
  COINIT_SPEED_OVER_MEMORY = 0x8,

} COINIT;
#line 60 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objbase.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 22 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpc.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 227 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpc.h"
#pragma option pop
#line 22 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"

#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcndr.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 3292 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcndr.h"
#pragma option pop
#line 23 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
#line 15159 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
#pragma option pop
#line 60 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objbase.h"
#line 72 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objbase.h"
#pragma region Desktop Family




extern DWORD __stdcall CoBuildVersion( void );



               extern HRESULT __stdcall CoInitialize( LPVOID pvReserved);
extern HRESULT __stdcall CoRegisterMallocSpy( LPMALLOCSPY pMallocSpy);
extern HRESULT __stdcall CoRevokeMallocSpy(void);
extern HRESULT __stdcall CoCreateStandardMalloc( DWORD memctx, IMalloc * * ppMalloc);




               extern HRESULT __stdcall CoRegisterInitializeSpy( LPINITIALIZESPY pSpy, ULARGE_INTEGER *puliCookie);
               extern HRESULT __stdcall CoRevokeInitializeSpy( ULARGE_INTEGER uliCookie);



typedef enum tagCOMSD
{
    SD_LAUNCHPERMISSIONS = 0,
    SD_ACCESSPERMISSIONS = 1,
    SD_LAUNCHRESTRICTIONS = 2,
    SD_ACCESSRESTRICTIONS = 3

} COMSD;
               extern HRESULT __stdcall CoGetSystemSecurityPermissions(COMSD comSDType, PSECURITY_DESCRIPTOR *ppSD);





extern HINSTANCE __stdcall CoLoadLibrary( LPOLESTR lpszLibName, BOOL bAutoFree);
extern void __stdcall CoFreeLibrary( HINSTANCE hInst);
extern void __stdcall CoFreeAllLibraries(void);





               extern HRESULT __stdcall CoGetInstanceFromFile(
             COSERVERINFO * pServerInfo,
             CLSID * pClsid,
             IUnknown * punkOuter,
         DWORD dwClsCtx,
         DWORD grfMode,
                           OLECHAR * pwszName,
         DWORD dwCount,
                             MULTI_QI * pResults );


               extern HRESULT __stdcall CoGetInstanceFromIStorage(
             COSERVERINFO * pServerInfo,
             CLSID * pClsid,
             IUnknown * punkOuter,
         DWORD dwClsCtx,
         struct IStorage * pstg,
         DWORD dwCount,
                             MULTI_QI * pResults );







extern HRESULT __stdcall CoAllowSetForegroundWindow( IUnknown *pUnk, LPVOID lpvReserved);


extern HRESULT __stdcall DcomChannelSetHResult( LPVOID pvReserved, ULONG* pulReserved, HRESULT appsHR);




extern BOOL __stdcall CoIsOle1Class( const IID * const rclsid);
               extern HRESULT __stdcall CLSIDFromProgIDEx ( LPCOLESTR lpszProgID, LPCLSID lpclsid);

extern BOOL __stdcall CoFileTimeToDosDateTime(
                      FILETIME * lpFileTime, LPWORD lpDosDate, LPWORD lpDosTime);
extern BOOL __stdcall CoDosDateTimeToFileTime(
                            WORD nDosDate, WORD nDosTime, FILETIME * lpFileTime);
extern HRESULT __stdcall CoFileTimeNow( FILETIME * lpFileTime );

               extern HRESULT __stdcall CoRegisterMessageFilter( LPMESSAGEFILTER lpMessageFilter,
                                                              LPMESSAGEFILTER * lplpMessageFilter );



extern HRESULT __stdcall CoRegisterChannelHook( const GUID * const ExtensionUuid, IChannelHook *pChannelHook );





               extern HRESULT __stdcall CoTreatAsClass( const IID * const clsidOld, const IID * const clsidNew);




extern HRESULT __stdcall CreateDataAdviseHolder( LPDATAADVISEHOLDER * ppDAHolder);

extern HRESULT __stdcall CreateDataCache( LPUNKNOWN pUnkOuter, const IID * const rclsid,
                               const IID * const iid, LPVOID * ppv);





               extern HRESULT __stdcall StgOpenAsyncDocfileOnIFillLockBytes( IFillLockBytes *pflb,
                  DWORD grfMode,
                  DWORD asyncFlags,
                      IStorage** ppstgOpen);

               extern HRESULT __stdcall StgGetIFillLockBytesOnILockBytes( ILockBytes *pilb,
                      IFillLockBytes** ppflb);

               extern HRESULT __stdcall StgGetIFillLockBytesOnFile( OLECHAR const *pwcsName,
                      IFillLockBytes** ppflb);

               extern HRESULT __stdcall StgOpenLayoutDocfile( OLECHAR const *pwcsDfName,
                  DWORD grfMode,
                  DWORD reserved,
                      IStorage** ppstgOpen);


#pragma endregion

#pragma region Desktop Family


extern HRESULT __stdcall CoInstall(
         IBindCtx * pbc,
         DWORD dwFlags,
         uCLSSPEC * pClassSpec,
         QUERYCONTEXT * pQuery,
         LPWSTR pszCodeBase);


#pragma endregion

#pragma region Applicaiton Family






 extern HRESULT __stdcall BindMoniker( LPMONIKER pmk, DWORD grfOpt, const IID * const iidResult, LPVOID * ppvResult);

               extern HRESULT __stdcall CoGetObject( LPCWSTR pszName, BIND_OPTS *pBindOptions, const IID * const riid, void **ppv);
               extern HRESULT __stdcall MkParseDisplayName( LPBC pbc, LPCOLESTR szUserName,
                      ULONG * pchEaten, LPMONIKER * ppmk);
               extern HRESULT __stdcall MonikerRelativePathTo( LPMONIKER pmkSrc, LPMONIKER pmkDest, LPMONIKER
                   * ppmkRelPath, BOOL dwReserved);
               extern HRESULT __stdcall MonikerCommonPrefixWith( LPMONIKER pmkThis, LPMONIKER pmkOther,
                         LPMONIKER * ppmkCommon);
               extern HRESULT __stdcall CreateBindCtx( DWORD reserved, LPBC * ppbc);
               extern HRESULT __stdcall CreateGenericComposite( LPMONIKER pmkFirst, LPMONIKER pmkRest,
                         LPMONIKER * ppmkComposite);
               extern HRESULT __stdcall GetClassFile ( LPCOLESTR szFilename, CLSID * pclsid);

               extern HRESULT __stdcall CreateClassMoniker( const IID * const rclsid, LPMONIKER * ppmk);

               extern HRESULT __stdcall CreateFileMoniker( LPCOLESTR lpszPathName, LPMONIKER * ppmk);

               extern HRESULT __stdcall CreateItemMoniker( LPCOLESTR lpszDelim, LPCOLESTR lpszItem,
                                   LPMONIKER * ppmk);
               extern HRESULT __stdcall CreateAntiMoniker( LPMONIKER * ppmk);
               extern HRESULT __stdcall CreatePointerMoniker( LPUNKNOWN punk, LPMONIKER * ppmk);
               extern HRESULT __stdcall CreateObjrefMoniker( LPUNKNOWN punk, LPMONIKER * ppmk);


#pragma endregion

#pragma region Desktop Family


 extern HRESULT __stdcall GetRunningObjectTable( DWORD reserved, LPRUNNINGOBJECTTABLE * pprot);


#pragma endregion


#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 22 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpc.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 227 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpc.h"
#pragma option pop
#line 22 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"

#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcndr.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 3292 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcndr.h"
#pragma option pop
#line 23 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
#line 45 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
typedef struct IPersistMoniker IPersistMoniker;






typedef struct IMonikerProp IMonikerProp;






typedef struct IBindProtocol IBindProtocol;






typedef struct IBinding IBinding;






typedef struct IBindStatusCallback IBindStatusCallback;






typedef struct IBindStatusCallbackEx IBindStatusCallbackEx;






typedef struct IAuthenticate IAuthenticate;






typedef struct IAuthenticateEx IAuthenticateEx;






typedef struct IHttpNegotiate IHttpNegotiate;






typedef struct IHttpNegotiate2 IHttpNegotiate2;






typedef struct IHttpNegotiate3 IHttpNegotiate3;






typedef struct IWinInetFileStream IWinInetFileStream;






typedef struct IWindowForBindingUI IWindowForBindingUI;






typedef struct ICodeInstall ICodeInstall;






typedef struct IUri IUri;






typedef struct IUriContainer IUriContainer;






typedef struct IUriBuilder IUriBuilder;






typedef struct IUriBuilderFactory IUriBuilderFactory;






typedef struct IWinInetInfo IWinInetInfo;






typedef struct IHttpSecurity IHttpSecurity;






typedef struct IWinInetHttpInfo IWinInetHttpInfo;






typedef struct IWinInetHttpTimeouts IWinInetHttpTimeouts;






typedef struct IWinInetCacheHints IWinInetCacheHints;






typedef struct IWinInetCacheHints2 IWinInetCacheHints2;






typedef struct IBindHost IBindHost;






typedef struct IInternet IInternet;






typedef struct IInternetBindInfo IInternetBindInfo;






typedef struct IInternetBindInfoEx IInternetBindInfoEx;






typedef struct IInternetProtocolRoot IInternetProtocolRoot;






typedef struct IInternetProtocol IInternetProtocol;






typedef struct IInternetProtocolEx IInternetProtocolEx;






typedef struct IInternetProtocolSink IInternetProtocolSink;






typedef struct IInternetProtocolSinkStackable IInternetProtocolSinkStackable;






typedef struct IInternetSession IInternetSession;






typedef struct IInternetThreadSwitch IInternetThreadSwitch;






typedef struct IInternetPriority IInternetPriority;






typedef struct IInternetProtocolInfo IInternetProtocolInfo;






typedef struct IInternetSecurityMgrSite IInternetSecurityMgrSite;






typedef struct IInternetSecurityManager IInternetSecurityManager;






typedef struct IInternetSecurityManagerEx IInternetSecurityManagerEx;






typedef struct IInternetSecurityManagerEx2 IInternetSecurityManagerEx2;






typedef struct IZoneIdentifier IZoneIdentifier;






typedef struct IZoneIdentifier2 IZoneIdentifier2;






typedef struct IInternetHostSecurityManager IInternetHostSecurityManager;






typedef struct IInternetZoneManager IInternetZoneManager;






typedef struct IInternetZoneManagerEx IInternetZoneManagerEx;






typedef struct IInternetZoneManagerEx2 IInternetZoneManagerEx2;






typedef struct ISoftDistExt ISoftDistExt;






typedef struct ICatalogFileInfo ICatalogFileInfo;






typedef struct IDataFilter IDataFilter;






typedef struct IEncodingFilterFactory IEncodingFilterFactory;






typedef struct IWrappedProtocol IWrappedProtocol;






typedef struct IGetBindHandle IGetBindHandle;






typedef struct IBindCallbackRedirect IBindCallbackRedirect;






typedef struct IBindHttpSecurity IBindHttpSecurity;






#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 22 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpc.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 227 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpc.h"
#pragma option pop
#line 22 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"

#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcndr.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 3292 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcndr.h"
#pragma option pop
#line 23 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
#line 15159 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
#pragma option pop
#line 429 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"

#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oleidl.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 22 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oleidl.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpc.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 227 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpc.h"
#pragma option pop
#line 22 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oleidl.h"

#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcndr.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 3292 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcndr.h"
#pragma option pop
#line 23 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oleidl.h"
#line 45 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oleidl.h"
typedef struct IOleAdviseHolder IOleAdviseHolder;






typedef struct IOleCache IOleCache;






typedef struct IOleCache2 IOleCache2;






typedef struct IOleCacheControl IOleCacheControl;






typedef struct IParseDisplayName IParseDisplayName;






typedef struct IOleContainer IOleContainer;






typedef struct IOleClientSite IOleClientSite;






typedef struct IOleObject IOleObject;






typedef struct IOleWindow IOleWindow;






typedef struct IOleLink IOleLink;






typedef struct IOleItemContainer IOleItemContainer;






typedef struct IOleInPlaceUIWindow IOleInPlaceUIWindow;






typedef struct IOleInPlaceActiveObject IOleInPlaceActiveObject;






typedef struct IOleInPlaceFrame IOleInPlaceFrame;






typedef struct IOleInPlaceObject IOleInPlaceObject;






typedef struct IOleInPlaceSite IOleInPlaceSite;






typedef struct IContinue IContinue;






typedef struct IViewObject IViewObject;






typedef struct IViewObject2 IViewObject2;






typedef struct IDropSource IDropSource;






typedef struct IDropTarget IDropTarget;






typedef struct IDropSourceNotify IDropSourceNotify;






typedef struct IEnumOLEVERB IEnumOLEVERB;






#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 22 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpc.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 227 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpc.h"
#pragma option pop
#line 22 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"

#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcndr.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 3292 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcndr.h"
#pragma option pop
#line 23 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
#line 15159 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
#pragma option pop
#line 205 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oleidl.h"
#line 229 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oleidl.h"
#pragma region Desktop Family or OneCore Family





extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0000_v0_0_s_ifspec;







typedef IOleAdviseHolder *LPOLEADVISEHOLDER;


extern const IID IID_IOleAdviseHolder;
#line 281 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oleidl.h"
    typedef struct IOleAdviseHolderVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IOleAdviseHolder * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IOleAdviseHolder * This);

        ULONG ( __stdcall *Release )(
            IOleAdviseHolder * This);

        HRESULT ( __stdcall *Advise )(
            IOleAdviseHolder * This,

                  IAdviseSink *pAdvise,

                   DWORD *pdwConnection);

        HRESULT ( __stdcall *Unadvise )(
            IOleAdviseHolder * This,
                       DWORD dwConnection);

        HRESULT ( __stdcall *EnumAdvise )(
            IOleAdviseHolder * This,

                      IEnumSTATDATA **ppenumAdvise);

        HRESULT ( __stdcall *SendOnRename )(
            IOleAdviseHolder * This,

                  IMoniker *pmk);

        HRESULT ( __stdcall *SendOnSave )(
            IOleAdviseHolder * This);

        HRESULT ( __stdcall *SendOnClose )(
            IOleAdviseHolder * This);


    } IOleAdviseHolderVtbl;

    struct IOleAdviseHolder
    {
                   struct IOleAdviseHolderVtbl *lpVtbl;
    };
#line 380 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oleidl.h"
#pragma endregion
#pragma region Application Family or OneCore Family



extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0001_v0_0_s_ifspec;







typedef IOleCache *LPOLECACHE;


extern const IID IID_IOleCache;
#line 429 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oleidl.h"
    typedef struct IOleCacheVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      IOleCache * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      IOleCache * This);

        ULONG ( __stdcall *Release )(
                      IOleCache * This);

        HRESULT ( __stdcall *Cache )(
                      IOleCache * This,
                                             FORMATETC *pformatetc,
                       DWORD advf,
                                   DWORD *pdwConnection);

        HRESULT ( __stdcall *Uncache )(
                      IOleCache * This,
                       DWORD dwConnection);

        HRESULT ( __stdcall *EnumCache )(
                      IOleCache * This,
                                             IEnumSTATDATA **ppenumSTATDATA);

        HRESULT ( __stdcall *InitCache )(
                      IOleCache * This,
                                             IDataObject *pDataObject);

        HRESULT ( __stdcall *SetData )(
                      IOleCache * This,
                                             FORMATETC *pformatetc,
                                             STGMEDIUM *pmedium,
                       BOOL fRelease);


    } IOleCacheVtbl;

    struct IOleCache
    {
                   struct IOleCacheVtbl *lpVtbl;
    };
#line 524 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oleidl.h"
typedef IOleCache2 *LPOLECACHE2;
#line 544 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oleidl.h"
typedef
enum tagDISCARDCACHE
    {
        DISCARDCACHE_SAVEIFDIRTY = 0,
        DISCARDCACHE_NOSAVE = 1
    } DISCARDCACHE;


extern const IID IID_IOleCache2;
#line 576 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oleidl.h"
    typedef struct IOleCache2Vtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      IOleCache2 * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      IOleCache2 * This);

        ULONG ( __stdcall *Release )(
                      IOleCache2 * This);

        HRESULT ( __stdcall *Cache )(
                      IOleCache2 * This,
                                             FORMATETC *pformatetc,
                       DWORD advf,
                                   DWORD *pdwConnection);

        HRESULT ( __stdcall *Uncache )(
                      IOleCache2 * This,
                       DWORD dwConnection);

        HRESULT ( __stdcall *EnumCache )(
                      IOleCache2 * This,
                                             IEnumSTATDATA **ppenumSTATDATA);

        HRESULT ( __stdcall *InitCache )(
                      IOleCache2 * This,
                                             IDataObject *pDataObject);

        HRESULT ( __stdcall *SetData )(
                      IOleCache2 * This,
                                             FORMATETC *pformatetc,
                                             STGMEDIUM *pmedium,
                       BOOL fRelease);

                      HRESULT ( __stdcall *UpdateCache )(
            IOleCache2 * This,

                  LPDATAOBJECT pDataObject,

                  DWORD grfUpdf,

                        LPVOID pReserved);

        HRESULT ( __stdcall *DiscardCache )(
                      IOleCache2 * This,
                       DWORD dwDiscardOptions);


    } IOleCache2Vtbl;

    struct IOleCache2
    {
                   struct IOleCache2Vtbl *lpVtbl;
    };
#line 681 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oleidl.h"
                HRESULT __stdcall IOleCache2_RemoteUpdateCache_Proxy(
              IOleCache2 * This,
                             LPDATAOBJECT pDataObject,
               DWORD grfUpdf,
               LONG_PTR pReserved);


void __stdcall IOleCache2_RemoteUpdateCache_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
#line 703 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oleidl.h"
#pragma endregion
#pragma region Desktop Family or OneCore Family



extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0003_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0003_v0_0_s_ifspec;







typedef IOleCacheControl *LPOLECACHECONTROL;


extern const IID IID_IOleCacheControl;
#line 738 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oleidl.h"
    typedef struct IOleCacheControlVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      IOleCacheControl * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      IOleCacheControl * This);

        ULONG ( __stdcall *Release )(
                      IOleCacheControl * This);

        HRESULT ( __stdcall *OnRun )(
                      IOleCacheControl * This,
                          LPDATAOBJECT pDataObject);

        HRESULT ( __stdcall *OnStop )(
                      IOleCacheControl * This);


    } IOleCacheControlVtbl;

    struct IOleCacheControl
    {
                   struct IOleCacheControlVtbl *lpVtbl;
    };
#line 807 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oleidl.h"
typedef IParseDisplayName *LPPARSEDISPLAYNAME;


extern const IID IID_IParseDisplayName;
#line 829 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oleidl.h"
    typedef struct IParseDisplayNameVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      IParseDisplayName * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      IParseDisplayName * This);

        ULONG ( __stdcall *Release )(
                      IParseDisplayName * This);

        HRESULT ( __stdcall *ParseDisplayName )(
                      IParseDisplayName * This,
                                             IBindCtx *pbc,
                                 LPOLESTR pszDisplayName,
                                   ULONG *pchEaten,
                                             IMoniker **ppmkOut);


    } IParseDisplayNameVtbl;

    struct IParseDisplayName
    {
                   struct IParseDisplayNameVtbl *lpVtbl;
    };
#line 895 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oleidl.h"
typedef IOleContainer *LPOLECONTAINER;


extern const IID IID_IOleContainer;
#line 918 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oleidl.h"
    typedef struct IOleContainerVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      IOleContainer * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      IOleContainer * This);

        ULONG ( __stdcall *Release )(
                      IOleContainer * This);

        HRESULT ( __stdcall *ParseDisplayName )(
                      IOleContainer * This,
                                             IBindCtx *pbc,
                                 LPOLESTR pszDisplayName,
                                   ULONG *pchEaten,
                                             IMoniker **ppmkOut);

        HRESULT ( __stdcall *EnumObjects )(
                      IOleContainer * This,
                       DWORD grfFlags,
                                             IEnumUnknown **ppenum);

        HRESULT ( __stdcall *LockContainer )(
                      IOleContainer * This,
                       BOOL fLock);


    } IOleContainerVtbl;

    struct IOleContainer
    {
                   struct IOleContainerVtbl *lpVtbl;
    };
#line 1000 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oleidl.h"
typedef IOleClientSite *LPOLECLIENTSITE;


extern const IID IID_IOleClientSite;
#line 1033 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oleidl.h"
    typedef struct IOleClientSiteVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      IOleClientSite * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      IOleClientSite * This);

        ULONG ( __stdcall *Release )(
                      IOleClientSite * This);

        HRESULT ( __stdcall *SaveObject )(
                      IOleClientSite * This);

        HRESULT ( __stdcall *GetMoniker )(
                      IOleClientSite * This,
                       DWORD dwAssign,
                       DWORD dwWhichMoniker,
                                             IMoniker **ppmk);

        HRESULT ( __stdcall *GetContainer )(
                      IOleClientSite * This,
                                             IOleContainer **ppContainer);

        HRESULT ( __stdcall *ShowObject )(
                      IOleClientSite * This);

        HRESULT ( __stdcall *OnShowWindow )(
                      IOleClientSite * This,
                       BOOL fShow);

        HRESULT ( __stdcall *RequestNewObjectLayout )(
                      IOleClientSite * This);


    } IOleClientSiteVtbl;

    struct IOleClientSite
    {
                   struct IOleClientSiteVtbl *lpVtbl;
    };
#line 1130 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oleidl.h"
typedef IOleObject *LPOLEOBJECT;

typedef
enum tagOLEGETMONIKER
    {
        OLEGETMONIKER_ONLYIFTHERE = 1,
        OLEGETMONIKER_FORCEASSIGN = 2,
        OLEGETMONIKER_UNASSIGN = 3,
        OLEGETMONIKER_TEMPFORUSER = 4
    } OLEGETMONIKER;

typedef
enum tagOLEWHICHMK
    {
        OLEWHICHMK_CONTAINER = 1,
        OLEWHICHMK_OBJREL = 2,
        OLEWHICHMK_OBJFULL = 3
    } OLEWHICHMK;

typedef
enum tagUSERCLASSTYPE
    {
        USERCLASSTYPE_FULL = 1,
        USERCLASSTYPE_SHORT = 2,
        USERCLASSTYPE_APPNAME = 3
    } USERCLASSTYPE;

typedef
enum tagOLEMISC
    {
        OLEMISC_RECOMPOSEONRESIZE = 0x1,
        OLEMISC_ONLYICONIC = 0x2,
        OLEMISC_INSERTNOTREPLACE = 0x4,
        OLEMISC_STATIC = 0x8,
        OLEMISC_CANTLINKINSIDE = 0x10,
        OLEMISC_CANLINKBYOLE1 = 0x20,
        OLEMISC_ISLINKOBJECT = 0x40,
        OLEMISC_INSIDEOUT = 0x80,
        OLEMISC_ACTIVATEWHENVISIBLE = 0x100,
        OLEMISC_RENDERINGISDEVICEINDEPENDENT = 0x200,
        OLEMISC_INVISIBLEATRUNTIME = 0x400,
        OLEMISC_ALWAYSRUN = 0x800,
        OLEMISC_ACTSLIKEBUTTON = 0x1000,
        OLEMISC_ACTSLIKELABEL = 0x2000,
        OLEMISC_NOUIACTIVATE = 0x4000,
        OLEMISC_ALIGNABLE = 0x8000,
        OLEMISC_SIMPLEFRAME = 0x10000,
        OLEMISC_SETCLIENTSITEFIRST = 0x20000,
        OLEMISC_IMEMODE = 0x40000,
        OLEMISC_IGNOREACTIVATEWHENVISIBLE = 0x80000,
        OLEMISC_WANTSTOMENUMERGE = 0x100000,
        OLEMISC_SUPPORTSMULTILEVELUNDO = 0x200000
    } OLEMISC;

typedef
enum tagOLECLOSE
    {
        OLECLOSE_SAVEIFDIRTY = 0,
        OLECLOSE_NOSAVE = 1,
        OLECLOSE_PROMPTSAVE = 2
    } OLECLOSE;


extern const IID IID_IOleObject;
#line 1284 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oleidl.h"
    typedef struct IOleObjectVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      IOleObject * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      IOleObject * This);

        ULONG ( __stdcall *Release )(
                      IOleObject * This);

        HRESULT ( __stdcall *SetClientSite )(
                      IOleObject * This,
                                             IOleClientSite *pClientSite);

        HRESULT ( __stdcall *GetClientSite )(
                      IOleObject * This,
                                             IOleClientSite **ppClientSite);

        HRESULT ( __stdcall *SetHostNames )(
                      IOleObject * This,
                                 LPCOLESTR szContainerApp,
                                             LPCOLESTR szContainerObj);

        HRESULT ( __stdcall *Close )(
                      IOleObject * This,
                       DWORD dwSaveOption);

        HRESULT ( __stdcall *SetMoniker )(
                      IOleObject * This,
                       DWORD dwWhichMoniker,
                                             IMoniker *pmk);

        HRESULT ( __stdcall *GetMoniker )(
                      IOleObject * This,
                       DWORD dwAssign,
                       DWORD dwWhichMoniker,
                                             IMoniker **ppmk);

        HRESULT ( __stdcall *InitFromData )(
                      IOleObject * This,
                                             IDataObject *pDataObject,
                       BOOL fCreation,
                       DWORD dwReserved);

        HRESULT ( __stdcall *GetClipboardData )(
                      IOleObject * This,
                       DWORD dwReserved,
                                             IDataObject **ppDataObject);

        HRESULT ( __stdcall *DoVerb )(
                      IOleObject * This,
                       LONG iVerb,
                                             LPMSG lpmsg,
                                             IOleClientSite *pActiveSite,
                       LONG lindex,
                                 HWND hwndParent,
                                             LPCRECT lprcPosRect);

        HRESULT ( __stdcall *EnumVerbs )(
                      IOleObject * This,
                                             IEnumOLEVERB **ppEnumOleVerb);

        HRESULT ( __stdcall *Update )(
                      IOleObject * This);

        HRESULT ( __stdcall *IsUpToDate )(
                      IOleObject * This);

        HRESULT ( __stdcall *GetUserClassID )(
                      IOleObject * This,
                                   CLSID *pClsid);

        HRESULT ( __stdcall *GetUserType )(
                      IOleObject * This,
                       DWORD dwFormOfType,
                                             LPOLESTR *pszUserType);

        HRESULT ( __stdcall *SetExtent )(
                      IOleObject * This,
                       DWORD dwDrawAspect,
                                 SIZEL *psizel);

        HRESULT ( __stdcall *GetExtent )(
                      IOleObject * This,
                       DWORD dwDrawAspect,
                                   SIZEL *psizel);

        HRESULT ( __stdcall *Advise )(
                      IOleObject * This,
                                             IAdviseSink *pAdvSink,
                                   DWORD *pdwConnection);

        HRESULT ( __stdcall *Unadvise )(
                      IOleObject * This,
                       DWORD dwConnection);

        HRESULT ( __stdcall *EnumAdvise )(
                      IOleObject * This,
                                             IEnumSTATDATA **ppenumAdvise);

        HRESULT ( __stdcall *GetMiscStatus )(
                      IOleObject * This,
                       DWORD dwAspect,
                                   DWORD *pdwStatus);

        HRESULT ( __stdcall *SetColorScheme )(
                      IOleObject * This,
                                 LOGPALETTE *pLogpal);


    } IOleObjectVtbl;

    struct IOleObject
    {
                   struct IOleObjectVtbl *lpVtbl;
    };
#line 1502 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oleidl.h"
typedef
enum tagOLERENDER
    {
        OLERENDER_NONE = 0,
        OLERENDER_DRAW = 1,
        OLERENDER_FORMAT = 2,
        OLERENDER_ASIS = 3
    } OLERENDER;

typedef OLERENDER *LPOLERENDER;

typedef struct tagOBJECTDESCRIPTOR
    {
    ULONG cbSize;
    CLSID clsid;
    DWORD dwDrawAspect;
    SIZEL sizel;
    POINTL pointl;
    DWORD dwStatus;
    DWORD dwFullUserTypeName;
    DWORD dwSrcOfCopy;
    } OBJECTDESCRIPTOR;

typedef struct tagOBJECTDESCRIPTOR *POBJECTDESCRIPTOR;

typedef struct tagOBJECTDESCRIPTOR *LPOBJECTDESCRIPTOR;

typedef struct tagOBJECTDESCRIPTOR LINKSRCDESCRIPTOR;

typedef struct tagOBJECTDESCRIPTOR *PLINKSRCDESCRIPTOR;

typedef struct tagOBJECTDESCRIPTOR *LPLINKSRCDESCRIPTOR;



extern RPC_IF_HANDLE IOLETypes_v0_0_c_ifspec;
extern RPC_IF_HANDLE IOLETypes_v0_0_s_ifspec;
#line 1547 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oleidl.h"
typedef IOleWindow *LPOLEWINDOW;


extern const IID IID_IOleWindow;
#line 1569 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oleidl.h"
    typedef struct IOleWindowVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      IOleWindow * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      IOleWindow * This);

        ULONG ( __stdcall *Release )(
                      IOleWindow * This);

                           HRESULT ( __stdcall *GetWindow )(
                      IOleWindow * This,
                                             HWND *phwnd);

        HRESULT ( __stdcall *ContextSensitiveHelp )(
                      IOleWindow * This,
                       BOOL fEnterMode);


    } IOleWindowVtbl;

    struct IOleWindow
    {
                   struct IOleWindowVtbl *lpVtbl;
    };
#line 1639 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oleidl.h"
typedef IOleLink *LPOLELINK;

typedef
enum tagOLEUPDATE
    {
        OLEUPDATE_ALWAYS = 1,
        OLEUPDATE_ONCALL = 3
    } OLEUPDATE;

typedef OLEUPDATE *LPOLEUPDATE;

typedef OLEUPDATE *POLEUPDATE;

typedef
enum tagOLELINKBIND
    {
        OLELINKBIND_EVENIFCLASSDIFF = 1
    } OLELINKBIND;


extern const IID IID_IOleLink;
#line 1705 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oleidl.h"
    typedef struct IOleLinkVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      IOleLink * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      IOleLink * This);

        ULONG ( __stdcall *Release )(
                      IOleLink * This);

        HRESULT ( __stdcall *SetUpdateOptions )(
                      IOleLink * This,
                       DWORD dwUpdateOpt);

        HRESULT ( __stdcall *GetUpdateOptions )(
                      IOleLink * This,
                                   DWORD *pdwUpdateOpt);

        HRESULT ( __stdcall *SetSourceMoniker )(
                      IOleLink * This,
                                             IMoniker *pmk,
                                 const IID * const rclsid);

        HRESULT ( __stdcall *GetSourceMoniker )(
                      IOleLink * This,
                                             IMoniker **ppmk);

        HRESULT ( __stdcall *SetSourceDisplayName )(
                      IOleLink * This,
                                 LPCOLESTR pszStatusText);

        HRESULT ( __stdcall *GetSourceDisplayName )(
                      IOleLink * This,
                                             LPOLESTR *ppszDisplayName);

        HRESULT ( __stdcall *BindToSource )(
                      IOleLink * This,
                       DWORD bindflags,
                                             IBindCtx *pbc);

        HRESULT ( __stdcall *BindIfRunning )(
                      IOleLink * This);

        HRESULT ( __stdcall *GetBoundSource )(
                      IOleLink * This,
                                             IUnknown **ppunk);

        HRESULT ( __stdcall *UnbindSource )(
                      IOleLink * This);

        HRESULT ( __stdcall *Update )(
                      IOleLink * This,
                                             IBindCtx *pbc);


    } IOleLinkVtbl;

    struct IOleLink
    {
                   struct IOleLinkVtbl *lpVtbl;
    };
#line 1838 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oleidl.h"
typedef IOleItemContainer *LPOLEITEMCONTAINER;

typedef
enum tagBINDSPEED
    {
        BINDSPEED_INDEFINITE = 1,
        BINDSPEED_MODERATE = 2,
        BINDSPEED_IMMEDIATE = 3
    } BINDSPEED;

typedef
enum tagOLECONTF
    {
        OLECONTF_EMBEDDINGS = 1,
        OLECONTF_LINKS = 2,
        OLECONTF_OTHERS = 4,
        OLECONTF_ONLYUSER = 8,
        OLECONTF_ONLYIFRUNNING = 16
    } OLECONTF;


extern const IID IID_IOleItemContainer;
#line 1888 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oleidl.h"
    typedef struct IOleItemContainerVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      IOleItemContainer * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      IOleItemContainer * This);

        ULONG ( __stdcall *Release )(
                      IOleItemContainer * This);

        HRESULT ( __stdcall *ParseDisplayName )(
                      IOleItemContainer * This,
                                             IBindCtx *pbc,
                                 LPOLESTR pszDisplayName,
                                   ULONG *pchEaten,
                                             IMoniker **ppmkOut);

        HRESULT ( __stdcall *EnumObjects )(
                      IOleItemContainer * This,
                       DWORD grfFlags,
                                             IEnumUnknown **ppenum);

        HRESULT ( __stdcall *LockContainer )(
                      IOleItemContainer * This,
                       BOOL fLock);

        HRESULT ( __stdcall *GetObjectW )(
                      IOleItemContainer * This,
                                 LPOLESTR pszItem,
                       DWORD dwSpeedNeeded,
                                             IBindCtx *pbc,
                                 const IID * const riid,
                                                     void **ppvObject);

        HRESULT ( __stdcall *GetObjectStorage )(
                      IOleItemContainer * This,
                                 LPOLESTR pszItem,
                                             IBindCtx *pbc,
                                 const IID * const riid,
                                                     void **ppvStorage);

        HRESULT ( __stdcall *IsRunning )(
                      IOleItemContainer * This,
                                 LPOLESTR pszItem);


    } IOleItemContainerVtbl;

    struct IOleItemContainer
    {
                   struct IOleItemContainerVtbl *lpVtbl;
    };
#line 1999 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oleidl.h"
typedef IOleInPlaceUIWindow *LPOLEINPLACEUIWINDOW;

typedef RECT BORDERWIDTHS;

typedef LPRECT LPBORDERWIDTHS;

typedef LPCRECT LPCBORDERWIDTHS;


extern const IID IID_IOleInPlaceUIWindow;
#line 2034 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oleidl.h"
    typedef struct IOleInPlaceUIWindowVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      IOleInPlaceUIWindow * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      IOleInPlaceUIWindow * This);

        ULONG ( __stdcall *Release )(
                      IOleInPlaceUIWindow * This);

                           HRESULT ( __stdcall *GetWindow )(
                      IOleInPlaceUIWindow * This,
                                             HWND *phwnd);

        HRESULT ( __stdcall *ContextSensitiveHelp )(
                      IOleInPlaceUIWindow * This,
                       BOOL fEnterMode);

                           HRESULT ( __stdcall *GetBorder )(
                      IOleInPlaceUIWindow * This,
                                   LPRECT lprectBorder);

                           HRESULT ( __stdcall *RequestBorderSpace )(
                      IOleInPlaceUIWindow * This,
                                             LPCBORDERWIDTHS pborderwidths);

                           HRESULT ( __stdcall *SetBorderSpace )(
                      IOleInPlaceUIWindow * This,
                                             LPCBORDERWIDTHS pborderwidths);

        HRESULT ( __stdcall *SetActiveObject )(
                      IOleInPlaceUIWindow * This,
                                             IOleInPlaceActiveObject *pActiveObject,
                                                            LPCOLESTR pszObjName);


    } IOleInPlaceUIWindowVtbl;

    struct IOleInPlaceUIWindow
    {
                   struct IOleInPlaceUIWindowVtbl *lpVtbl;
    };
#line 2134 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oleidl.h"
typedef IOleInPlaceActiveObject *LPOLEINPLACEACTIVEOBJECT;


extern const IID IID_IOleInPlaceActiveObject;
#line 2171 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oleidl.h"
    typedef struct IOleInPlaceActiveObjectVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      IOleInPlaceActiveObject * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      IOleInPlaceActiveObject * This);

        ULONG ( __stdcall *Release )(
                      IOleInPlaceActiveObject * This);

                           HRESULT ( __stdcall *GetWindow )(
                      IOleInPlaceActiveObject * This,
                                             HWND *phwnd);

        HRESULT ( __stdcall *ContextSensitiveHelp )(
                      IOleInPlaceActiveObject * This,
                       BOOL fEnterMode);

                      HRESULT ( __stdcall *TranslateAcceleratorW )(
            IOleInPlaceActiveObject * This,

                      LPMSG lpmsg);

                           HRESULT ( __stdcall *OnFrameWindowActivate )(
                      IOleInPlaceActiveObject * This,
                       BOOL fActivate);

                           HRESULT ( __stdcall *OnDocWindowActivate )(
                      IOleInPlaceActiveObject * This,
                       BOOL fActivate);

                      HRESULT ( __stdcall *ResizeBorder )(
            IOleInPlaceActiveObject * This,

                  LPCRECT prcBorder,

                  IOleInPlaceUIWindow *pUIWindow,

                  BOOL fFrameWindow);

        HRESULT ( __stdcall *EnableModeless )(
                      IOleInPlaceActiveObject * This,
                       BOOL fEnable);


    } IOleInPlaceActiveObjectVtbl;

    struct IOleInPlaceActiveObject
    {
                   struct IOleInPlaceActiveObjectVtbl *lpVtbl;
    };
#line 2273 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oleidl.h"
                HRESULT __stdcall IOleInPlaceActiveObject_RemoteTranslateAccelerator_Proxy(
              IOleInPlaceActiveObject * This);


void __stdcall IOleInPlaceActiveObject_RemoteTranslateAccelerator_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                            HRESULT __stdcall IOleInPlaceActiveObject_RemoteResizeBorder_Proxy(
              IOleInPlaceActiveObject * This,
                         LPCRECT prcBorder,
                         const IID * const riid,
                                             IOleInPlaceUIWindow *pUIWindow,
               BOOL fFrameWindow);


void __stdcall IOleInPlaceActiveObject_RemoteResizeBorder_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
#line 2309 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oleidl.h"
typedef IOleInPlaceFrame *LPOLEINPLACEFRAME;

typedef struct tagOIFI
    {
    UINT cb;
    BOOL fMDIApp;
    HWND hwndFrame;
    HACCEL haccel;
    UINT cAccelEntries;
    } OLEINPLACEFRAMEINFO;

typedef struct tagOIFI *LPOLEINPLACEFRAMEINFO;

typedef struct tagOleMenuGroupWidths
    {
    LONG width[ 6 ];
    } OLEMENUGROUPWIDTHS;

typedef struct tagOleMenuGroupWidths *LPOLEMENUGROUPWIDTHS;

typedef HGLOBAL HOLEMENU;


extern const IID IID_IOleInPlaceFrame;
#line 2367 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oleidl.h"
    typedef struct IOleInPlaceFrameVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      IOleInPlaceFrame * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      IOleInPlaceFrame * This);

        ULONG ( __stdcall *Release )(
                      IOleInPlaceFrame * This);

                           HRESULT ( __stdcall *GetWindow )(
                      IOleInPlaceFrame * This,
                                             HWND *phwnd);

        HRESULT ( __stdcall *ContextSensitiveHelp )(
                      IOleInPlaceFrame * This,
                       BOOL fEnterMode);

                           HRESULT ( __stdcall *GetBorder )(
                      IOleInPlaceFrame * This,
                                   LPRECT lprectBorder);

                           HRESULT ( __stdcall *RequestBorderSpace )(
                      IOleInPlaceFrame * This,
                                             LPCBORDERWIDTHS pborderwidths);

                           HRESULT ( __stdcall *SetBorderSpace )(
                      IOleInPlaceFrame * This,
                                             LPCBORDERWIDTHS pborderwidths);

        HRESULT ( __stdcall *SetActiveObject )(
                      IOleInPlaceFrame * This,
                                             IOleInPlaceActiveObject *pActiveObject,
                                                            LPCOLESTR pszObjName);

        HRESULT ( __stdcall *InsertMenus )(
                      IOleInPlaceFrame * This,
                                 HMENU hmenuShared,
                                         LPOLEMENUGROUPWIDTHS lpMenuWidths);

                           HRESULT ( __stdcall *SetMenu )(
                      IOleInPlaceFrame * This,
                                 HMENU hmenuShared,
                                 HOLEMENU holemenu,
                                 HWND hwndActiveObject);

        HRESULT ( __stdcall *RemoveMenus )(
                      IOleInPlaceFrame * This,
                                 HMENU hmenuShared);

                           HRESULT ( __stdcall *SetStatusText )(
                      IOleInPlaceFrame * This,
                                             LPCOLESTR pszStatusText);

        HRESULT ( __stdcall *EnableModeless )(
                      IOleInPlaceFrame * This,
                       BOOL fEnable);

        HRESULT ( __stdcall *TranslateAcceleratorW )(
                      IOleInPlaceFrame * This,
                                 LPMSG lpmsg,
                       WORD wID);


    } IOleInPlaceFrameVtbl;

    struct IOleInPlaceFrame
    {
                   struct IOleInPlaceFrameVtbl *lpVtbl;
    };
#line 2514 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oleidl.h"
typedef IOleInPlaceObject *LPOLEINPLACEOBJECT;


extern const IID IID_IOleInPlaceObject;
#line 2540 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oleidl.h"
    typedef struct IOleInPlaceObjectVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      IOleInPlaceObject * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      IOleInPlaceObject * This);

        ULONG ( __stdcall *Release )(
                      IOleInPlaceObject * This);

                           HRESULT ( __stdcall *GetWindow )(
                      IOleInPlaceObject * This,
                                             HWND *phwnd);

        HRESULT ( __stdcall *ContextSensitiveHelp )(
                      IOleInPlaceObject * This,
                       BOOL fEnterMode);

        HRESULT ( __stdcall *InPlaceDeactivate )(
                      IOleInPlaceObject * This);

        HRESULT ( __stdcall *UIDeactivate )(
                      IOleInPlaceObject * This);

                           HRESULT ( __stdcall *SetObjectRects )(
                      IOleInPlaceObject * This,
                                 LPCRECT lprcPosRect,
                                 LPCRECT lprcClipRect);

        HRESULT ( __stdcall *ReactivateAndUndo )(
                      IOleInPlaceObject * This);


    } IOleInPlaceObjectVtbl;

    struct IOleInPlaceObject
    {
                   struct IOleInPlaceObjectVtbl *lpVtbl;
    };
#line 2637 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oleidl.h"
typedef IOleInPlaceSite *LPOLEINPLACESITE;


extern const IID IID_IOleInPlaceSite;
#line 2681 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oleidl.h"
    typedef struct IOleInPlaceSiteVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      IOleInPlaceSite * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      IOleInPlaceSite * This);

        ULONG ( __stdcall *Release )(
                      IOleInPlaceSite * This);

                           HRESULT ( __stdcall *GetWindow )(
                      IOleInPlaceSite * This,
                                             HWND *phwnd);

        HRESULT ( __stdcall *ContextSensitiveHelp )(
                      IOleInPlaceSite * This,
                       BOOL fEnterMode);

        HRESULT ( __stdcall *CanInPlaceActivate )(
                      IOleInPlaceSite * This);

        HRESULT ( __stdcall *OnInPlaceActivate )(
                      IOleInPlaceSite * This);

        HRESULT ( __stdcall *OnUIActivate )(
                      IOleInPlaceSite * This);

        HRESULT ( __stdcall *GetWindowContext )(
                      IOleInPlaceSite * This,
                                             IOleInPlaceFrame **ppFrame,
                                             IOleInPlaceUIWindow **ppDoc,
                                   LPRECT lprcPosRect,
                                   LPRECT lprcClipRect,
                                         LPOLEINPLACEFRAMEINFO lpFrameInfo);

        HRESULT ( __stdcall *Scroll )(
                      IOleInPlaceSite * This,
                       SIZE scrollExtant);

        HRESULT ( __stdcall *OnUIDeactivate )(
                      IOleInPlaceSite * This,
                       BOOL fUndoable);

        HRESULT ( __stdcall *OnInPlaceDeactivate )(
                      IOleInPlaceSite * This);

        HRESULT ( __stdcall *DiscardUndoState )(
                      IOleInPlaceSite * This);

        HRESULT ( __stdcall *DeactivateAndUndo )(
                      IOleInPlaceSite * This);

        HRESULT ( __stdcall *OnPosRectChange )(
                      IOleInPlaceSite * This,
                                 LPCRECT lprcPosRect);


    } IOleInPlaceSiteVtbl;

    struct IOleInPlaceSite
    {
                   struct IOleInPlaceSiteVtbl *lpVtbl;
    };
#line 2821 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oleidl.h"
extern const IID IID_IContinue;
#line 2836 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oleidl.h"
    typedef struct IContinueVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      IContinue * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      IContinue * This);

        ULONG ( __stdcall *Release )(
                      IContinue * This);

        HRESULT ( __stdcall *FContinue )(
                      IContinue * This);


    } IContinueVtbl;

    struct IContinue
    {
                   struct IContinueVtbl *lpVtbl;
    };
#line 2898 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oleidl.h"
typedef IViewObject *LPVIEWOBJECT;


extern const IID IID_IViewObject;
#line 2977 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oleidl.h"
    typedef struct IViewObjectVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      IViewObject * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      IViewObject * This);

        ULONG ( __stdcall *Release )(
                      IViewObject * This);

                      HRESULT ( __stdcall *Draw )(
            IViewObject * This,

                  DWORD dwDrawAspect,

                  LONG lindex,

                    void *pvAspect,

                      DVTARGETDEVICE *ptd,

                      HDC hdcTargetDev,

                  HDC hdcDraw,

                      LPCRECTL lprcBounds,

                      LPCRECTL lprcWBounds,

                      BOOL ( __stdcall *pfnContinue )(
                ULONG_PTR dwContinue),

                  ULONG_PTR dwContinue);

                      HRESULT ( __stdcall *GetColorSet )(
            IViewObject * This,

                  DWORD dwDrawAspect,

                  LONG lindex,

                    void *pvAspect,

                      DVTARGETDEVICE *ptd,

                      HDC hicTargetDev,

                      LOGPALETTE **ppColorSet);

                      HRESULT ( __stdcall *Freeze )(
            IViewObject * This,

                  DWORD dwDrawAspect,

                  LONG lindex,

                    void *pvAspect,

                   DWORD *pdwFreeze);

        HRESULT ( __stdcall *Unfreeze )(
                      IViewObject * This,
                       DWORD dwFreeze);

        HRESULT ( __stdcall *SetAdvise )(
                      IViewObject * This,
                       DWORD aspects,
                       DWORD advf,
                                             IAdviseSink *pAdvSink);

                      HRESULT ( __stdcall *GetAdvise )(
            IViewObject * This,

                       DWORD *pAspects,

                       DWORD *pAdvf,

                      IAdviseSink **ppAdvSink);


    } IViewObjectVtbl;

    struct IViewObject
    {
                   struct IViewObjectVtbl *lpVtbl;
    };
#line 3110 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oleidl.h"
                HRESULT __stdcall IViewObject_RemoteDraw_Proxy(
              IViewObject * This,
               DWORD dwDrawAspect,
               LONG lindex,
               ULONG_PTR pvAspect,
                                     DVTARGETDEVICE *ptd,
                         HDC hdcTargetDev,
                         HDC hdcDraw,
                                     LPCRECTL lprcBounds,
                                     LPCRECTL lprcWBounds,
                             IContinue *pContinue);


void __stdcall IViewObject_RemoteDraw_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall IViewObject_RemoteGetColorSet_Proxy(
              IViewObject * This,
               DWORD dwDrawAspect,
               LONG lindex,
               ULONG_PTR pvAspect,
                                     DVTARGETDEVICE *ptd,
               ULONG_PTR hicTargetDev,
                                     LOGPALETTE **ppColorSet);


void __stdcall IViewObject_RemoteGetColorSet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall IViewObject_RemoteFreeze_Proxy(
              IViewObject * This,
               DWORD dwDrawAspect,
               LONG lindex,
               ULONG_PTR pvAspect,
                           DWORD *pdwFreeze);


void __stdcall IViewObject_RemoteFreeze_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall IViewObject_RemoteGetAdvise_Proxy(
              IViewObject * This,
                           DWORD *pAspects,
                           DWORD *pAdvf,
                                     IAdviseSink **ppAdvSink);


void __stdcall IViewObject_RemoteGetAdvise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
#line 3186 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oleidl.h"
typedef IViewObject2 *LPVIEWOBJECT2;


extern const IID IID_IViewObject2;
#line 3208 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oleidl.h"
    typedef struct IViewObject2Vtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      IViewObject2 * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      IViewObject2 * This);

        ULONG ( __stdcall *Release )(
                      IViewObject2 * This);

                      HRESULT ( __stdcall *Draw )(
            IViewObject2 * This,

                  DWORD dwDrawAspect,

                  LONG lindex,

                    void *pvAspect,

                      DVTARGETDEVICE *ptd,

                      HDC hdcTargetDev,

                  HDC hdcDraw,

                      LPCRECTL lprcBounds,

                      LPCRECTL lprcWBounds,

                      BOOL ( __stdcall *pfnContinue )(
                ULONG_PTR dwContinue),

                  ULONG_PTR dwContinue);

                      HRESULT ( __stdcall *GetColorSet )(
            IViewObject2 * This,

                  DWORD dwDrawAspect,

                  LONG lindex,

                    void *pvAspect,

                      DVTARGETDEVICE *ptd,

                      HDC hicTargetDev,

                      LOGPALETTE **ppColorSet);

                      HRESULT ( __stdcall *Freeze )(
            IViewObject2 * This,

                  DWORD dwDrawAspect,

                  LONG lindex,

                    void *pvAspect,

                   DWORD *pdwFreeze);

        HRESULT ( __stdcall *Unfreeze )(
                      IViewObject2 * This,
                       DWORD dwFreeze);

        HRESULT ( __stdcall *SetAdvise )(
                      IViewObject2 * This,
                       DWORD aspects,
                       DWORD advf,
                                             IAdviseSink *pAdvSink);

                      HRESULT ( __stdcall *GetAdvise )(
            IViewObject2 * This,

                       DWORD *pAspects,

                       DWORD *pAdvf,

                      IAdviseSink **ppAdvSink);

        HRESULT ( __stdcall *GetExtent )(
                      IViewObject2 * This,
                       DWORD dwDrawAspect,
                       LONG lindex,
                                             DVTARGETDEVICE *ptd,
                                   LPSIZEL lpsizel);


    } IViewObject2Vtbl;

    struct IViewObject2
    {
                   struct IViewObject2Vtbl *lpVtbl;
    };
#line 3362 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oleidl.h"
typedef IDropSource *LPDROPSOURCE;


extern const IID IID_IDropSource;
#line 3388 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oleidl.h"
    typedef struct IDropSourceVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IDropSource * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IDropSource * This);

        ULONG ( __stdcall *Release )(
            IDropSource * This);

        HRESULT ( __stdcall *QueryContinueDrag )(
            IDropSource * This,

                  BOOL fEscapePressed,

                  DWORD grfKeyState);

        HRESULT ( __stdcall *GiveFeedback )(
            IDropSource * This,

                  DWORD dwEffect);


    } IDropSourceVtbl;

    struct IDropSource
    {
                   struct IDropSourceVtbl *lpVtbl;
    };
#line 3462 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oleidl.h"
typedef IDropTarget *LPDROPTARGET;
#line 3497 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oleidl.h"
extern const IID IID_IDropTarget;
#line 3529 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oleidl.h"
    typedef struct IDropTargetVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      IDropTarget * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      IDropTarget * This);

        ULONG ( __stdcall *Release )(
                      IDropTarget * This);

        HRESULT ( __stdcall *DragEnter )(
                      IDropTarget * This,
                                             IDataObject *pDataObj,
                       DWORD grfKeyState,
                       POINTL pt,
                                         DWORD *pdwEffect);

        HRESULT ( __stdcall *DragOver )(
                      IDropTarget * This,
                       DWORD grfKeyState,
                       POINTL pt,
                                         DWORD *pdwEffect);

        HRESULT ( __stdcall *DragLeave )(
                      IDropTarget * This);

        HRESULT ( __stdcall *Drop )(
                      IDropTarget * This,
                                             IDataObject *pDataObj,
                       DWORD grfKeyState,
                       POINTL pt,
                                         DWORD *pdwEffect);


    } IDropTargetVtbl;

    struct IDropTarget
    {
                   struct IDropTargetVtbl *lpVtbl;
    };
#line 3621 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oleidl.h"
extern const IID IID_IDropSourceNotify;
#line 3640 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oleidl.h"
    typedef struct IDropSourceNotifyVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IDropSourceNotify * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IDropSourceNotify * This);

        ULONG ( __stdcall *Release )(
            IDropSourceNotify * This);

        HRESULT ( __stdcall *DragEnterTarget )(
            IDropSourceNotify * This,

                  HWND hwndTarget);

        HRESULT ( __stdcall *DragLeaveTarget )(
            IDropSourceNotify * This);


    } IDropSourceNotifyVtbl;

    struct IDropSourceNotify
    {
                   struct IDropSourceNotifyVtbl *lpVtbl;
    };
#line 3708 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oleidl.h"
#pragma endregion
#pragma region Application Family or OneCore Family



extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0023_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0023_v0_0_s_ifspec;







typedef IEnumOLEVERB *LPENUMOLEVERB;

typedef struct tagOLEVERB
    {
    LONG lVerb;
    LPOLESTR lpszVerbName;
    DWORD fuFlags;
    DWORD grfAttribs;
    } OLEVERB;

typedef struct tagOLEVERB *LPOLEVERB;

typedef
enum tagOLEVERBATTRIB
    {
        OLEVERBATTRIB_NEVERDIRTIES = 1,
        OLEVERBATTRIB_ONCONTAINERMENU = 2
    } OLEVERBATTRIB;


extern const IID IID_IEnumOLEVERB;
#line 3771 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oleidl.h"
    typedef struct IEnumOLEVERBVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      IEnumOLEVERB * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      IEnumOLEVERB * This);

        ULONG ( __stdcall *Release )(
                      IEnumOLEVERB * This);

                      HRESULT ( __stdcall *Next )(
            IEnumOLEVERB * This,

                  ULONG celt,

                                                  LPOLEVERB rgelt,

                       ULONG *pceltFetched);

        HRESULT ( __stdcall *Skip )(
                      IEnumOLEVERB * This,
                       ULONG celt);

        HRESULT ( __stdcall *Reset )(
                      IEnumOLEVERB * This);

        HRESULT ( __stdcall *Clone )(
                      IEnumOLEVERB * This,
                                             IEnumOLEVERB **ppenum);


    } IEnumOLEVERBVtbl;

    struct IEnumOLEVERB
    {
                   struct IEnumOLEVERBVtbl *lpVtbl;
    };
#line 3849 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oleidl.h"
                HRESULT __stdcall IEnumOLEVERB_RemoteNext_Proxy(
              IEnumOLEVERB * This,
               ULONG celt,
                                                                                LPOLEVERB rgelt,
                           ULONG *pceltFetched);


void __stdcall IEnumOLEVERB_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
#line 3871 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oleidl.h"
#pragma endregion





extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0024_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0024_v0_0_s_ifspec;



unsigned long __stdcall CLIPFORMAT_UserSize( unsigned long *, unsigned long , CLIPFORMAT * );
unsigned char * __stdcall CLIPFORMAT_UserMarshal( unsigned long *, unsigned char *, CLIPFORMAT * );
unsigned char * __stdcall CLIPFORMAT_UserUnmarshal( unsigned long *, unsigned char *, CLIPFORMAT * );
void __stdcall CLIPFORMAT_UserFree( unsigned long *, CLIPFORMAT * );

unsigned long __stdcall HACCEL_UserSize( unsigned long *, unsigned long , HACCEL * );
unsigned char * __stdcall HACCEL_UserMarshal( unsigned long *, unsigned char *, HACCEL * );
unsigned char * __stdcall HACCEL_UserUnmarshal( unsigned long *, unsigned char *, HACCEL * );
void __stdcall HACCEL_UserFree( unsigned long *, HACCEL * );

unsigned long __stdcall HDC_UserSize( unsigned long *, unsigned long , HDC * );
unsigned char * __stdcall HDC_UserMarshal( unsigned long *, unsigned char *, HDC * );
unsigned char * __stdcall HDC_UserUnmarshal( unsigned long *, unsigned char *, HDC * );
void __stdcall HDC_UserFree( unsigned long *, HDC * );

unsigned long __stdcall HGLOBAL_UserSize( unsigned long *, unsigned long , HGLOBAL * );
unsigned char * __stdcall HGLOBAL_UserMarshal( unsigned long *, unsigned char *, HGLOBAL * );
unsigned char * __stdcall HGLOBAL_UserUnmarshal( unsigned long *, unsigned char *, HGLOBAL * );
void __stdcall HGLOBAL_UserFree( unsigned long *, HGLOBAL * );

unsigned long __stdcall HMENU_UserSize( unsigned long *, unsigned long , HMENU * );
unsigned char * __stdcall HMENU_UserMarshal( unsigned long *, unsigned char *, HMENU * );
unsigned char * __stdcall HMENU_UserUnmarshal( unsigned long *, unsigned char *, HMENU * );
void __stdcall HMENU_UserFree( unsigned long *, HMENU * );

unsigned long __stdcall HWND_UserSize( unsigned long *, unsigned long , HWND * );
unsigned char * __stdcall HWND_UserMarshal( unsigned long *, unsigned char *, HWND * );
unsigned char * __stdcall HWND_UserUnmarshal( unsigned long *, unsigned char *, HWND * );
void __stdcall HWND_UserFree( unsigned long *, HWND * );

unsigned long __stdcall STGMEDIUM_UserSize( unsigned long *, unsigned long , STGMEDIUM * );
unsigned char * __stdcall STGMEDIUM_UserMarshal( unsigned long *, unsigned char *, STGMEDIUM * );
unsigned char * __stdcall STGMEDIUM_UserUnmarshal( unsigned long *, unsigned char *, STGMEDIUM * );
void __stdcall STGMEDIUM_UserFree( unsigned long *, STGMEDIUM * );

unsigned long __stdcall CLIPFORMAT_UserSize64( unsigned long *, unsigned long , CLIPFORMAT * );
unsigned char * __stdcall CLIPFORMAT_UserMarshal64( unsigned long *, unsigned char *, CLIPFORMAT * );
unsigned char * __stdcall CLIPFORMAT_UserUnmarshal64( unsigned long *, unsigned char *, CLIPFORMAT * );
void __stdcall CLIPFORMAT_UserFree64( unsigned long *, CLIPFORMAT * );

unsigned long __stdcall HACCEL_UserSize64( unsigned long *, unsigned long , HACCEL * );
unsigned char * __stdcall HACCEL_UserMarshal64( unsigned long *, unsigned char *, HACCEL * );
unsigned char * __stdcall HACCEL_UserUnmarshal64( unsigned long *, unsigned char *, HACCEL * );
void __stdcall HACCEL_UserFree64( unsigned long *, HACCEL * );

unsigned long __stdcall HDC_UserSize64( unsigned long *, unsigned long , HDC * );
unsigned char * __stdcall HDC_UserMarshal64( unsigned long *, unsigned char *, HDC * );
unsigned char * __stdcall HDC_UserUnmarshal64( unsigned long *, unsigned char *, HDC * );
void __stdcall HDC_UserFree64( unsigned long *, HDC * );

unsigned long __stdcall HGLOBAL_UserSize64( unsigned long *, unsigned long , HGLOBAL * );
unsigned char * __stdcall HGLOBAL_UserMarshal64( unsigned long *, unsigned char *, HGLOBAL * );
unsigned char * __stdcall HGLOBAL_UserUnmarshal64( unsigned long *, unsigned char *, HGLOBAL * );
void __stdcall HGLOBAL_UserFree64( unsigned long *, HGLOBAL * );

unsigned long __stdcall HMENU_UserSize64( unsigned long *, unsigned long , HMENU * );
unsigned char * __stdcall HMENU_UserMarshal64( unsigned long *, unsigned char *, HMENU * );
unsigned char * __stdcall HMENU_UserUnmarshal64( unsigned long *, unsigned char *, HMENU * );
void __stdcall HMENU_UserFree64( unsigned long *, HMENU * );

unsigned long __stdcall HWND_UserSize64( unsigned long *, unsigned long , HWND * );
unsigned char * __stdcall HWND_UserMarshal64( unsigned long *, unsigned char *, HWND * );
unsigned char * __stdcall HWND_UserUnmarshal64( unsigned long *, unsigned char *, HWND * );
void __stdcall HWND_UserFree64( unsigned long *, HWND * );

unsigned long __stdcall STGMEDIUM_UserSize64( unsigned long *, unsigned long , STGMEDIUM * );
unsigned char * __stdcall STGMEDIUM_UserMarshal64( unsigned long *, unsigned char *, STGMEDIUM * );
unsigned char * __stdcall STGMEDIUM_UserUnmarshal64( unsigned long *, unsigned char *, STGMEDIUM * );
void __stdcall STGMEDIUM_UserFree64( unsigned long *, STGMEDIUM * );

              HRESULT __stdcall IOleCache2_UpdateCache_Proxy(
    IOleCache2 * This,

          LPDATAOBJECT pDataObject,

          DWORD grfUpdf,

                LPVOID pReserved);


                HRESULT __stdcall IOleCache2_UpdateCache_Stub(
              IOleCache2 * This,
                             LPDATAOBJECT pDataObject,
               DWORD grfUpdf,
               LONG_PTR pReserved);

              HRESULT __stdcall IOleInPlaceActiveObject_TranslateAccelerator_Proxy(
    IOleInPlaceActiveObject * This,

              LPMSG lpmsg);


                HRESULT __stdcall IOleInPlaceActiveObject_TranslateAccelerator_Stub(
              IOleInPlaceActiveObject * This);

              HRESULT __stdcall IOleInPlaceActiveObject_ResizeBorder_Proxy(
    IOleInPlaceActiveObject * This,

          LPCRECT prcBorder,

          IOleInPlaceUIWindow *pUIWindow,

          BOOL fFrameWindow);


                            HRESULT __stdcall IOleInPlaceActiveObject_ResizeBorder_Stub(
              IOleInPlaceActiveObject * This,
                         LPCRECT prcBorder,
                         const IID * const riid,
                                             IOleInPlaceUIWindow *pUIWindow,
               BOOL fFrameWindow);

              HRESULT __stdcall IViewObject_Draw_Proxy(
    IViewObject * This,

          DWORD dwDrawAspect,

          LONG lindex,

            void *pvAspect,

              DVTARGETDEVICE *ptd,

              HDC hdcTargetDev,

          HDC hdcDraw,

              LPCRECTL lprcBounds,

              LPCRECTL lprcWBounds,

              BOOL ( __stdcall *pfnContinue )(
        ULONG_PTR dwContinue),

          ULONG_PTR dwContinue);


                HRESULT __stdcall IViewObject_Draw_Stub(
              IViewObject * This,
               DWORD dwDrawAspect,
               LONG lindex,
               ULONG_PTR pvAspect,
                                     DVTARGETDEVICE *ptd,
                         HDC hdcTargetDev,
                         HDC hdcDraw,
                                     LPCRECTL lprcBounds,
                                     LPCRECTL lprcWBounds,
                             IContinue *pContinue);

              HRESULT __stdcall IViewObject_GetColorSet_Proxy(
    IViewObject * This,

          DWORD dwDrawAspect,

          LONG lindex,

            void *pvAspect,

              DVTARGETDEVICE *ptd,

              HDC hicTargetDev,

              LOGPALETTE **ppColorSet);


                HRESULT __stdcall IViewObject_GetColorSet_Stub(
              IViewObject * This,
               DWORD dwDrawAspect,
               LONG lindex,
               ULONG_PTR pvAspect,
                                     DVTARGETDEVICE *ptd,
               ULONG_PTR hicTargetDev,
                                     LOGPALETTE **ppColorSet);

              HRESULT __stdcall IViewObject_Freeze_Proxy(
    IViewObject * This,

          DWORD dwDrawAspect,

          LONG lindex,

            void *pvAspect,

           DWORD *pdwFreeze);


                HRESULT __stdcall IViewObject_Freeze_Stub(
              IViewObject * This,
               DWORD dwDrawAspect,
               LONG lindex,
               ULONG_PTR pvAspect,
                           DWORD *pdwFreeze);

              HRESULT __stdcall IViewObject_GetAdvise_Proxy(
    IViewObject * This,

               DWORD *pAspects,

               DWORD *pAdvf,

              IAdviseSink **ppAdvSink);


                HRESULT __stdcall IViewObject_GetAdvise_Stub(
              IViewObject * This,
                           DWORD *pAspects,
                           DWORD *pAdvf,
                                     IAdviseSink **ppAdvSink);

              HRESULT __stdcall IEnumOLEVERB_Next_Proxy(
    IEnumOLEVERB * This,

          ULONG celt,

                                          LPOLEVERB rgelt,

               ULONG *pceltFetched);


                HRESULT __stdcall IEnumOLEVERB_Next_Stub(
              IEnumOLEVERB * This,
               ULONG celt,
                                                                                LPOLEVERB rgelt,
                           ULONG *pceltFetched);
#line 4118 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oleidl.h"
#pragma option pop
#line 430 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"

#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/servprov.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 22 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/servprov.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpc.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 227 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpc.h"
#pragma option pop
#line 22 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/servprov.h"

#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcndr.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 3292 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcndr.h"
#pragma option pop
#line 23 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/servprov.h"
#line 45 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/servprov.h"
typedef struct IServiceProvider IServiceProvider;






#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 22 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpc.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 227 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpc.h"
#pragma option pop
#line 22 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"

#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcndr.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 3292 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcndr.h"
#pragma option pop
#line 23 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
#line 15159 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
#pragma option pop
#line 51 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/servprov.h"
#line 73 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/servprov.h"
#pragma comment(lib,"uuid.lib")






#pragma region Desktop Family




extern RPC_IF_HANDLE __MIDL_itf_servprov_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_servprov_0000_0000_v0_0_s_ifspec;







typedef IServiceProvider *LPSERVICEPROVIDER;
#line 131 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/servprov.h"
extern const IID IID_IServiceProvider;
#line 152 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/servprov.h"
    typedef struct IServiceProviderVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      IServiceProvider * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      IServiceProvider * This);

        ULONG ( __stdcall *Release )(
                      IServiceProvider * This);

                      HRESULT ( __stdcall *QueryService )(
            IServiceProvider * This,

                  const GUID * const guidService,

                  const IID * const riid,

                      void **ppvObject);


    } IServiceProviderVtbl;

    struct IServiceProvider
    {
                   struct IServiceProviderVtbl *lpVtbl;
    };
#line 210 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/servprov.h"
                HRESULT __stdcall IServiceProvider_RemoteQueryService_Proxy(
              IServiceProvider * This,
                         const GUID * const guidService,
                         const IID * const riid,
                                             IUnknown **ppvObject);


void __stdcall IServiceProvider_RemoteQueryService_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
#line 233 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/servprov.h"
#pragma endregion


extern RPC_IF_HANDLE __MIDL_itf_servprov_0000_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_servprov_0000_0001_v0_0_s_ifspec;



              HRESULT __stdcall IServiceProvider_QueryService_Proxy(
    IServiceProvider * This,

          const GUID * const guidService,

          const IID * const riid,

              void **ppvObject);


                HRESULT __stdcall IServiceProvider_QueryService_Stub(
              IServiceProvider * This,
                         const GUID * const guidService,
                         const IID * const riid,
                                             IUnknown **ppvObject);
#line 268 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/servprov.h"
#pragma option pop
#line 431 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"

#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/msxml.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 22 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/msxml.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpc.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 227 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpc.h"
#pragma option pop
#line 22 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/msxml.h"

#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcndr.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 3292 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcndr.h"
#pragma option pop
#line 23 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/msxml.h"
#line 41 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/msxml.h"
typedef struct IXMLDOMImplementation IXMLDOMImplementation;






typedef struct IXMLDOMNode IXMLDOMNode;






typedef struct IXMLDOMDocumentFragment IXMLDOMDocumentFragment;






typedef struct IXMLDOMDocument IXMLDOMDocument;






typedef struct IXMLDOMNodeList IXMLDOMNodeList;






typedef struct IXMLDOMNamedNodeMap IXMLDOMNamedNodeMap;






typedef struct IXMLDOMCharacterData IXMLDOMCharacterData;






typedef struct IXMLDOMAttribute IXMLDOMAttribute;






typedef struct IXMLDOMElement IXMLDOMElement;






typedef struct IXMLDOMText IXMLDOMText;






typedef struct IXMLDOMComment IXMLDOMComment;






typedef struct IXMLDOMProcessingInstruction IXMLDOMProcessingInstruction;






typedef struct IXMLDOMCDATASection IXMLDOMCDATASection;






typedef struct IXMLDOMDocumentType IXMLDOMDocumentType;






typedef struct IXMLDOMNotation IXMLDOMNotation;






typedef struct IXMLDOMEntity IXMLDOMEntity;






typedef struct IXMLDOMEntityReference IXMLDOMEntityReference;






typedef struct IXMLDOMParseError IXMLDOMParseError;






typedef struct IXTLRuntime IXTLRuntime;






typedef struct XMLDOMDocumentEvents XMLDOMDocumentEvents;
#line 185 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/msxml.h"
typedef struct DOMDocument DOMDocument;
#line 197 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/msxml.h"
typedef struct DOMFreeThreadedDocument DOMFreeThreadedDocument;







typedef struct IXMLHttpRequest IXMLHttpRequest;
#line 216 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/msxml.h"
typedef struct XMLHTTPRequest XMLHTTPRequest;







typedef struct IXMLDSOControl IXMLDSOControl;
#line 235 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/msxml.h"
typedef struct XMLDSOControl XMLDSOControl;







typedef struct IXMLElementCollection IXMLElementCollection;






typedef struct IXMLDocument IXMLDocument;






typedef struct IXMLDocument2 IXMLDocument2;






typedef struct IXMLElement IXMLElement;






typedef struct IXMLElement2 IXMLElement2;






typedef struct IXMLAttribute IXMLAttribute;






typedef struct IXMLError IXMLError;
#line 296 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/msxml.h"
typedef struct XMLDocument XMLDocument;







#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/unknwn.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 22 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/unknwn.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpc.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 227 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpc.h"
#pragma option pop
#line 22 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/unknwn.h"

#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcndr.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 3292 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcndr.h"
#pragma option pop
#line 23 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/unknwn.h"
#line 599 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/unknwn.h"
#pragma option pop
#line 303 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/msxml.h"

#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 22 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpc.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 227 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpc.h"
#pragma option pop
#line 22 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"

#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcndr.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 3292 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcndr.h"
#pragma option pop
#line 23 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
#line 15159 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
#pragma option pop
#line 304 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/msxml.h"

#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oaidl.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 22 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oaidl.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpc.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 227 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpc.h"
#pragma option pop
#line 22 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oaidl.h"

#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcndr.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 3292 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcndr.h"
#pragma option pop
#line 23 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oaidl.h"
#line 5764 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oaidl.h"
#pragma option pop
#line 305 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/msxml.h"
#line 329 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/msxml.h"
#pragma region Desktop Family
#pragma endregion





#pragma region Desktop Family

typedef struct _xml_error
    {
    unsigned int _nLine;
    BSTR _pchBuf;
    unsigned int _cchBuf;
    unsigned int _ich;
    BSTR _pszFound;
    BSTR _pszExpected;
    DWORD _reserved1;
    DWORD _reserved2;
    } XML_ERROR;



extern RPC_IF_HANDLE __MIDL_itf_msxml_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_msxml_0000_0000_v0_0_s_ifspec;
#line 367 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/msxml.h"
#pragma region Desktop Family
#pragma endregion
#line 388 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/msxml.h"
typedef
enum tagDOMNodeType
    {
        NODE_INVALID = 0,
        NODE_ELEMENT = ( NODE_INVALID + 1 ) ,
        NODE_ATTRIBUTE = ( NODE_ELEMENT + 1 ) ,
        NODE_TEXT = ( NODE_ATTRIBUTE + 1 ) ,
        NODE_CDATA_SECTION = ( NODE_TEXT + 1 ) ,
        NODE_ENTITY_REFERENCE = ( NODE_CDATA_SECTION + 1 ) ,
        NODE_ENTITY = ( NODE_ENTITY_REFERENCE + 1 ) ,
        NODE_PROCESSING_INSTRUCTION = ( NODE_ENTITY + 1 ) ,
        NODE_COMMENT = ( NODE_PROCESSING_INSTRUCTION + 1 ) ,
        NODE_DOCUMENT = ( NODE_COMMENT + 1 ) ,
        NODE_DOCUMENT_TYPE = ( NODE_DOCUMENT + 1 ) ,
        NODE_DOCUMENT_FRAGMENT = ( NODE_DOCUMENT_TYPE + 1 ) ,
        NODE_NOTATION = ( NODE_DOCUMENT_FRAGMENT + 1 )
    } DOMNodeType;







#pragma region Desktop Family
#pragma endregion
#line 423 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/msxml.h"
typedef
enum tagXMLEMEM_TYPE
    {
        XMLELEMTYPE_ELEMENT = 0,
        XMLELEMTYPE_TEXT = ( XMLELEMTYPE_ELEMENT + 1 ) ,
        XMLELEMTYPE_COMMENT = ( XMLELEMTYPE_TEXT + 1 ) ,
        XMLELEMTYPE_DOCUMENT = ( XMLELEMTYPE_COMMENT + 1 ) ,
        XMLELEMTYPE_DTD = ( XMLELEMTYPE_DOCUMENT + 1 ) ,
        XMLELEMTYPE_PI = ( XMLELEMTYPE_DTD + 1 ) ,
        XMLELEMTYPE_OTHER = ( XMLELEMTYPE_PI + 1 )
    } XMLELEM_TYPE;


extern const IID LIBID_MSXML;
#line 445 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/msxml.h"
extern const IID IID_IXMLDOMImplementation;
#line 463 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/msxml.h"
    typedef struct IXMLDOMImplementationVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IXMLDOMImplementation * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IXMLDOMImplementation * This);

        ULONG ( __stdcall *Release )(
            IXMLDOMImplementation * This);

        HRESULT ( __stdcall *GetTypeInfoCount )(
            IXMLDOMImplementation * This,
                        UINT *pctinfo);

        HRESULT ( __stdcall *GetTypeInfo )(
            IXMLDOMImplementation * This,
                       UINT iTInfo,
                       LCID lcid,
                        ITypeInfo **ppTInfo);

        HRESULT ( __stdcall *GetIDsOfNames )(
            IXMLDOMImplementation * This,
                       const IID * const riid,
                                LPOLESTR *rgszNames,
                              UINT cNames,
                       LCID lcid,
                                 DISPID *rgDispId);

                      HRESULT ( __stdcall *Invoke )(
            IXMLDOMImplementation * This,

                  DISPID dispIdMember,

                  const IID * const riid,

                  LCID lcid,

                  WORD wFlags,

                  DISPPARAMS *pDispParams,

                       VARIANT *pVarResult,

                       EXCEPINFO *pExcepInfo,

                       UINT *puArgErr);

                   HRESULT ( __stdcall *hasFeature )(
            IXMLDOMImplementation * This,
                       BSTR feature,
                       BSTR version,
                                VARIANT_BOOL *hasFeature);


    } IXMLDOMImplementationVtbl;

    struct IXMLDOMImplementation
    {
                   struct IXMLDOMImplementationVtbl *lpVtbl;
    };
#line 579 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/msxml.h"
extern const IID IID_IXMLDOMNode;
#line 711 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/msxml.h"
    typedef struct IXMLDOMNodeVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IXMLDOMNode * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IXMLDOMNode * This);

        ULONG ( __stdcall *Release )(
            IXMLDOMNode * This);

        HRESULT ( __stdcall *GetTypeInfoCount )(
            IXMLDOMNode * This,
                        UINT *pctinfo);

        HRESULT ( __stdcall *GetTypeInfo )(
            IXMLDOMNode * This,
                       UINT iTInfo,
                       LCID lcid,
                        ITypeInfo **ppTInfo);

        HRESULT ( __stdcall *GetIDsOfNames )(
            IXMLDOMNode * This,
                       const IID * const riid,
                                LPOLESTR *rgszNames,
                              UINT cNames,
                       LCID lcid,
                                 DISPID *rgDispId);

                      HRESULT ( __stdcall *Invoke )(
            IXMLDOMNode * This,

                  DISPID dispIdMember,

                  const IID * const riid,

                  LCID lcid,

                  WORD wFlags,

                  DISPPARAMS *pDispParams,

                       VARIANT *pVarResult,

                       EXCEPINFO *pExcepInfo,

                       UINT *puArgErr);

                                        HRESULT ( __stdcall *get_nodeName )(
            IXMLDOMNode * This,
                                BSTR *name);

                                        HRESULT ( __stdcall *get_nodeValue )(
            IXMLDOMNode * This,
                                VARIANT *value);

                                        HRESULT ( __stdcall *put_nodeValue )(
            IXMLDOMNode * This,
                       VARIANT value);

                                        HRESULT ( __stdcall *get_nodeType )(
            IXMLDOMNode * This,
                                DOMNodeType *type);

                                        HRESULT ( __stdcall *get_parentNode )(
            IXMLDOMNode * This,
                                IXMLDOMNode **parent);

                                        HRESULT ( __stdcall *get_childNodes )(
            IXMLDOMNode * This,
                                IXMLDOMNodeList **childList);

                                        HRESULT ( __stdcall *get_firstChild )(
            IXMLDOMNode * This,
                                IXMLDOMNode **firstChild);

                                        HRESULT ( __stdcall *get_lastChild )(
            IXMLDOMNode * This,
                                IXMLDOMNode **lastChild);

                                        HRESULT ( __stdcall *get_previousSibling )(
            IXMLDOMNode * This,
                                IXMLDOMNode **previousSibling);

                                        HRESULT ( __stdcall *get_nextSibling )(
            IXMLDOMNode * This,
                                IXMLDOMNode **nextSibling);

                                        HRESULT ( __stdcall *get_attributes )(
            IXMLDOMNode * This,
                                IXMLDOMNamedNodeMap **attributeMap);

                               HRESULT ( __stdcall *insertBefore )(
            IXMLDOMNode * This,
                       IXMLDOMNode *newChild,
                       VARIANT refChild,
                                IXMLDOMNode **outNewChild);

                               HRESULT ( __stdcall *replaceChild )(
            IXMLDOMNode * This,
                       IXMLDOMNode *newChild,
                       IXMLDOMNode *oldChild,
                                IXMLDOMNode **outOldChild);

                               HRESULT ( __stdcall *removeChild )(
            IXMLDOMNode * This,
                       IXMLDOMNode *childNode,
                                IXMLDOMNode **oldChild);

                               HRESULT ( __stdcall *appendChild )(
            IXMLDOMNode * This,
                       IXMLDOMNode *newChild,
                                IXMLDOMNode **outNewChild);

                               HRESULT ( __stdcall *hasChildNodes )(
            IXMLDOMNode * This,
                                VARIANT_BOOL *hasChild);

                                        HRESULT ( __stdcall *get_ownerDocument )(
            IXMLDOMNode * This,
                                IXMLDOMDocument **XMLDOMDocument);

                               HRESULT ( __stdcall *cloneNode )(
            IXMLDOMNode * This,
                       VARIANT_BOOL deep,
                                IXMLDOMNode **cloneRoot);

                                        HRESULT ( __stdcall *get_nodeTypeString )(
            IXMLDOMNode * This,
                                BSTR *nodeType);

                                        HRESULT ( __stdcall *get_text )(
            IXMLDOMNode * This,
                                BSTR *text);

                                        HRESULT ( __stdcall *put_text )(
            IXMLDOMNode * This,
                       BSTR text);

                                        HRESULT ( __stdcall *get_specified )(
            IXMLDOMNode * This,
                                VARIANT_BOOL *isSpecified);

                                        HRESULT ( __stdcall *get_definition )(
            IXMLDOMNode * This,
                                IXMLDOMNode **definitionNode);

                                        HRESULT ( __stdcall *get_nodeTypedValue )(
            IXMLDOMNode * This,
                                VARIANT *typedValue);

                                        HRESULT ( __stdcall *put_nodeTypedValue )(
            IXMLDOMNode * This,
                       VARIANT typedValue);

                                        HRESULT ( __stdcall *get_dataType )(
            IXMLDOMNode * This,
                                VARIANT *dataTypeName);

                                        HRESULT ( __stdcall *put_dataType )(
            IXMLDOMNode * This,
                       BSTR dataTypeName);

                                        HRESULT ( __stdcall *get_xml )(
            IXMLDOMNode * This,
                                BSTR *xmlString);

                               HRESULT ( __stdcall *transformNode )(
            IXMLDOMNode * This,
                       IXMLDOMNode *stylesheet,
                                BSTR *xmlString);

                               HRESULT ( __stdcall *selectNodes )(
            IXMLDOMNode * This,
                       BSTR queryString,
                                IXMLDOMNodeList **resultList);

                               HRESULT ( __stdcall *selectSingleNode )(
            IXMLDOMNode * This,
                       BSTR queryString,
                                IXMLDOMNode **resultNode);

                                        HRESULT ( __stdcall *get_parsed )(
            IXMLDOMNode * This,
                                VARIANT_BOOL *isParsed);

                                        HRESULT ( __stdcall *get_namespaceURI )(
            IXMLDOMNode * This,
                                BSTR *namespaceURI);

                                        HRESULT ( __stdcall *get_prefix )(
            IXMLDOMNode * This,
                                BSTR *prefixString);

                                        HRESULT ( __stdcall *get_baseName )(
            IXMLDOMNode * This,
                                BSTR *nameString);

                               HRESULT ( __stdcall *transformNodeToObject )(
            IXMLDOMNode * This,
                       IXMLDOMNode *stylesheet,
                       VARIANT outputObject);


    } IXMLDOMNodeVtbl;

    struct IXMLDOMNode
    {
                   struct IXMLDOMNodeVtbl *lpVtbl;
    };
#line 1081 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/msxml.h"
extern const IID IID_IXMLDOMDocumentFragment;
#line 1094 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/msxml.h"
    typedef struct IXMLDOMDocumentFragmentVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IXMLDOMDocumentFragment * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IXMLDOMDocumentFragment * This);

        ULONG ( __stdcall *Release )(
            IXMLDOMDocumentFragment * This);

        HRESULT ( __stdcall *GetTypeInfoCount )(
            IXMLDOMDocumentFragment * This,
                        UINT *pctinfo);

        HRESULT ( __stdcall *GetTypeInfo )(
            IXMLDOMDocumentFragment * This,
                       UINT iTInfo,
                       LCID lcid,
                        ITypeInfo **ppTInfo);

        HRESULT ( __stdcall *GetIDsOfNames )(
            IXMLDOMDocumentFragment * This,
                       const IID * const riid,
                                LPOLESTR *rgszNames,
                              UINT cNames,
                       LCID lcid,
                                 DISPID *rgDispId);

                      HRESULT ( __stdcall *Invoke )(
            IXMLDOMDocumentFragment * This,

                  DISPID dispIdMember,

                  const IID * const riid,

                  LCID lcid,

                  WORD wFlags,

                  DISPPARAMS *pDispParams,

                       VARIANT *pVarResult,

                       EXCEPINFO *pExcepInfo,

                       UINT *puArgErr);

                                        HRESULT ( __stdcall *get_nodeName )(
            IXMLDOMDocumentFragment * This,
                                BSTR *name);

                                        HRESULT ( __stdcall *get_nodeValue )(
            IXMLDOMDocumentFragment * This,
                                VARIANT *value);

                                        HRESULT ( __stdcall *put_nodeValue )(
            IXMLDOMDocumentFragment * This,
                       VARIANT value);

                                        HRESULT ( __stdcall *get_nodeType )(
            IXMLDOMDocumentFragment * This,
                                DOMNodeType *type);

                                        HRESULT ( __stdcall *get_parentNode )(
            IXMLDOMDocumentFragment * This,
                                IXMLDOMNode **parent);

                                        HRESULT ( __stdcall *get_childNodes )(
            IXMLDOMDocumentFragment * This,
                                IXMLDOMNodeList **childList);

                                        HRESULT ( __stdcall *get_firstChild )(
            IXMLDOMDocumentFragment * This,
                                IXMLDOMNode **firstChild);

                                        HRESULT ( __stdcall *get_lastChild )(
            IXMLDOMDocumentFragment * This,
                                IXMLDOMNode **lastChild);

                                        HRESULT ( __stdcall *get_previousSibling )(
            IXMLDOMDocumentFragment * This,
                                IXMLDOMNode **previousSibling);

                                        HRESULT ( __stdcall *get_nextSibling )(
            IXMLDOMDocumentFragment * This,
                                IXMLDOMNode **nextSibling);

                                        HRESULT ( __stdcall *get_attributes )(
            IXMLDOMDocumentFragment * This,
                                IXMLDOMNamedNodeMap **attributeMap);

                               HRESULT ( __stdcall *insertBefore )(
            IXMLDOMDocumentFragment * This,
                       IXMLDOMNode *newChild,
                       VARIANT refChild,
                                IXMLDOMNode **outNewChild);

                               HRESULT ( __stdcall *replaceChild )(
            IXMLDOMDocumentFragment * This,
                       IXMLDOMNode *newChild,
                       IXMLDOMNode *oldChild,
                                IXMLDOMNode **outOldChild);

                               HRESULT ( __stdcall *removeChild )(
            IXMLDOMDocumentFragment * This,
                       IXMLDOMNode *childNode,
                                IXMLDOMNode **oldChild);

                               HRESULT ( __stdcall *appendChild )(
            IXMLDOMDocumentFragment * This,
                       IXMLDOMNode *newChild,
                                IXMLDOMNode **outNewChild);

                               HRESULT ( __stdcall *hasChildNodes )(
            IXMLDOMDocumentFragment * This,
                                VARIANT_BOOL *hasChild);

                                        HRESULT ( __stdcall *get_ownerDocument )(
            IXMLDOMDocumentFragment * This,
                                IXMLDOMDocument **XMLDOMDocument);

                               HRESULT ( __stdcall *cloneNode )(
            IXMLDOMDocumentFragment * This,
                       VARIANT_BOOL deep,
                                IXMLDOMNode **cloneRoot);

                                        HRESULT ( __stdcall *get_nodeTypeString )(
            IXMLDOMDocumentFragment * This,
                                BSTR *nodeType);

                                        HRESULT ( __stdcall *get_text )(
            IXMLDOMDocumentFragment * This,
                                BSTR *text);

                                        HRESULT ( __stdcall *put_text )(
            IXMLDOMDocumentFragment * This,
                       BSTR text);

                                        HRESULT ( __stdcall *get_specified )(
            IXMLDOMDocumentFragment * This,
                                VARIANT_BOOL *isSpecified);

                                        HRESULT ( __stdcall *get_definition )(
            IXMLDOMDocumentFragment * This,
                                IXMLDOMNode **definitionNode);

                                        HRESULT ( __stdcall *get_nodeTypedValue )(
            IXMLDOMDocumentFragment * This,
                                VARIANT *typedValue);

                                        HRESULT ( __stdcall *put_nodeTypedValue )(
            IXMLDOMDocumentFragment * This,
                       VARIANT typedValue);

                                        HRESULT ( __stdcall *get_dataType )(
            IXMLDOMDocumentFragment * This,
                                VARIANT *dataTypeName);

                                        HRESULT ( __stdcall *put_dataType )(
            IXMLDOMDocumentFragment * This,
                       BSTR dataTypeName);

                                        HRESULT ( __stdcall *get_xml )(
            IXMLDOMDocumentFragment * This,
                                BSTR *xmlString);

                               HRESULT ( __stdcall *transformNode )(
            IXMLDOMDocumentFragment * This,
                       IXMLDOMNode *stylesheet,
                                BSTR *xmlString);

                               HRESULT ( __stdcall *selectNodes )(
            IXMLDOMDocumentFragment * This,
                       BSTR queryString,
                                IXMLDOMNodeList **resultList);

                               HRESULT ( __stdcall *selectSingleNode )(
            IXMLDOMDocumentFragment * This,
                       BSTR queryString,
                                IXMLDOMNode **resultNode);

                                        HRESULT ( __stdcall *get_parsed )(
            IXMLDOMDocumentFragment * This,
                                VARIANT_BOOL *isParsed);

                                        HRESULT ( __stdcall *get_namespaceURI )(
            IXMLDOMDocumentFragment * This,
                                BSTR *namespaceURI);

                                        HRESULT ( __stdcall *get_prefix )(
            IXMLDOMDocumentFragment * This,
                                BSTR *prefixString);

                                        HRESULT ( __stdcall *get_baseName )(
            IXMLDOMDocumentFragment * This,
                                BSTR *nameString);

                               HRESULT ( __stdcall *transformNodeToObject )(
            IXMLDOMDocumentFragment * This,
                       IXMLDOMNode *stylesheet,
                       VARIANT outputObject);


    } IXMLDOMDocumentFragmentVtbl;

    struct IXMLDOMDocumentFragment
    {
                   struct IXMLDOMDocumentFragmentVtbl *lpVtbl;
    };
#line 1465 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/msxml.h"
extern const IID IID_IXMLDOMDocument;
#line 1591 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/msxml.h"
    typedef struct IXMLDOMDocumentVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IXMLDOMDocument * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IXMLDOMDocument * This);

        ULONG ( __stdcall *Release )(
            IXMLDOMDocument * This);

        HRESULT ( __stdcall *GetTypeInfoCount )(
            IXMLDOMDocument * This,
                        UINT *pctinfo);

        HRESULT ( __stdcall *GetTypeInfo )(
            IXMLDOMDocument * This,
                       UINT iTInfo,
                       LCID lcid,
                        ITypeInfo **ppTInfo);

        HRESULT ( __stdcall *GetIDsOfNames )(
            IXMLDOMDocument * This,
                       const IID * const riid,
                                LPOLESTR *rgszNames,
                              UINT cNames,
                       LCID lcid,
                                 DISPID *rgDispId);

                      HRESULT ( __stdcall *Invoke )(
            IXMLDOMDocument * This,

                  DISPID dispIdMember,

                  const IID * const riid,

                  LCID lcid,

                  WORD wFlags,

                  DISPPARAMS *pDispParams,

                       VARIANT *pVarResult,

                       EXCEPINFO *pExcepInfo,

                       UINT *puArgErr);

                                        HRESULT ( __stdcall *get_nodeName )(
            IXMLDOMDocument * This,
                                BSTR *name);

                                        HRESULT ( __stdcall *get_nodeValue )(
            IXMLDOMDocument * This,
                                VARIANT *value);

                                        HRESULT ( __stdcall *put_nodeValue )(
            IXMLDOMDocument * This,
                       VARIANT value);

                                        HRESULT ( __stdcall *get_nodeType )(
            IXMLDOMDocument * This,
                                DOMNodeType *type);

                                        HRESULT ( __stdcall *get_parentNode )(
            IXMLDOMDocument * This,
                                IXMLDOMNode **parent);

                                        HRESULT ( __stdcall *get_childNodes )(
            IXMLDOMDocument * This,
                                IXMLDOMNodeList **childList);

                                        HRESULT ( __stdcall *get_firstChild )(
            IXMLDOMDocument * This,
                                IXMLDOMNode **firstChild);

                                        HRESULT ( __stdcall *get_lastChild )(
            IXMLDOMDocument * This,
                                IXMLDOMNode **lastChild);

                                        HRESULT ( __stdcall *get_previousSibling )(
            IXMLDOMDocument * This,
                                IXMLDOMNode **previousSibling);

                                        HRESULT ( __stdcall *get_nextSibling )(
            IXMLDOMDocument * This,
                                IXMLDOMNode **nextSibling);

                                        HRESULT ( __stdcall *get_attributes )(
            IXMLDOMDocument * This,
                                IXMLDOMNamedNodeMap **attributeMap);

                               HRESULT ( __stdcall *insertBefore )(
            IXMLDOMDocument * This,
                       IXMLDOMNode *newChild,
                       VARIANT refChild,
                                IXMLDOMNode **outNewChild);

                               HRESULT ( __stdcall *replaceChild )(
            IXMLDOMDocument * This,
                       IXMLDOMNode *newChild,
                       IXMLDOMNode *oldChild,
                                IXMLDOMNode **outOldChild);

                               HRESULT ( __stdcall *removeChild )(
            IXMLDOMDocument * This,
                       IXMLDOMNode *childNode,
                                IXMLDOMNode **oldChild);

                               HRESULT ( __stdcall *appendChild )(
            IXMLDOMDocument * This,
                       IXMLDOMNode *newChild,
                                IXMLDOMNode **outNewChild);

                               HRESULT ( __stdcall *hasChildNodes )(
            IXMLDOMDocument * This,
                                VARIANT_BOOL *hasChild);

                                        HRESULT ( __stdcall *get_ownerDocument )(
            IXMLDOMDocument * This,
                                IXMLDOMDocument **XMLDOMDocument);

                               HRESULT ( __stdcall *cloneNode )(
            IXMLDOMDocument * This,
                       VARIANT_BOOL deep,
                                IXMLDOMNode **cloneRoot);

                                        HRESULT ( __stdcall *get_nodeTypeString )(
            IXMLDOMDocument * This,
                                BSTR *nodeType);

                                        HRESULT ( __stdcall *get_text )(
            IXMLDOMDocument * This,
                                BSTR *text);

                                        HRESULT ( __stdcall *put_text )(
            IXMLDOMDocument * This,
                       BSTR text);

                                        HRESULT ( __stdcall *get_specified )(
            IXMLDOMDocument * This,
                                VARIANT_BOOL *isSpecified);

                                        HRESULT ( __stdcall *get_definition )(
            IXMLDOMDocument * This,
                                IXMLDOMNode **definitionNode);

                                        HRESULT ( __stdcall *get_nodeTypedValue )(
            IXMLDOMDocument * This,
                                VARIANT *typedValue);

                                        HRESULT ( __stdcall *put_nodeTypedValue )(
            IXMLDOMDocument * This,
                       VARIANT typedValue);

                                        HRESULT ( __stdcall *get_dataType )(
            IXMLDOMDocument * This,
                                VARIANT *dataTypeName);

                                        HRESULT ( __stdcall *put_dataType )(
            IXMLDOMDocument * This,
                       BSTR dataTypeName);

                                        HRESULT ( __stdcall *get_xml )(
            IXMLDOMDocument * This,
                                BSTR *xmlString);

                               HRESULT ( __stdcall *transformNode )(
            IXMLDOMDocument * This,
                       IXMLDOMNode *stylesheet,
                                BSTR *xmlString);

                               HRESULT ( __stdcall *selectNodes )(
            IXMLDOMDocument * This,
                       BSTR queryString,
                                IXMLDOMNodeList **resultList);

                               HRESULT ( __stdcall *selectSingleNode )(
            IXMLDOMDocument * This,
                       BSTR queryString,
                                IXMLDOMNode **resultNode);

                                        HRESULT ( __stdcall *get_parsed )(
            IXMLDOMDocument * This,
                                VARIANT_BOOL *isParsed);

                                        HRESULT ( __stdcall *get_namespaceURI )(
            IXMLDOMDocument * This,
                                BSTR *namespaceURI);

                                        HRESULT ( __stdcall *get_prefix )(
            IXMLDOMDocument * This,
                                BSTR *prefixString);

                                        HRESULT ( __stdcall *get_baseName )(
            IXMLDOMDocument * This,
                                BSTR *nameString);

                               HRESULT ( __stdcall *transformNodeToObject )(
            IXMLDOMDocument * This,
                       IXMLDOMNode *stylesheet,
                       VARIANT outputObject);

                                        HRESULT ( __stdcall *get_doctype )(
            IXMLDOMDocument * This,
                                IXMLDOMDocumentType **documentType);

                                        HRESULT ( __stdcall *get_implementation )(
            IXMLDOMDocument * This,
                                IXMLDOMImplementation **impl);

                                        HRESULT ( __stdcall *get_documentElement )(
            IXMLDOMDocument * This,
                                IXMLDOMElement **DOMElement);

                                           HRESULT ( __stdcall *putref_documentElement )(
            IXMLDOMDocument * This,
                       IXMLDOMElement *DOMElement);

                               HRESULT ( __stdcall *createElement )(
            IXMLDOMDocument * This,
                       BSTR tagName,
                                IXMLDOMElement **element);

                               HRESULT ( __stdcall *createDocumentFragment )(
            IXMLDOMDocument * This,
                                IXMLDOMDocumentFragment **docFrag);

                               HRESULT ( __stdcall *createTextNode )(
            IXMLDOMDocument * This,
                       BSTR data,
                                IXMLDOMText **text);

                               HRESULT ( __stdcall *createComment )(
            IXMLDOMDocument * This,
                       BSTR data,
                                IXMLDOMComment **comment);

                               HRESULT ( __stdcall *createCDATASection )(
            IXMLDOMDocument * This,
                       BSTR data,
                                IXMLDOMCDATASection **cdata);

                               HRESULT ( __stdcall *createProcessingInstruction )(
            IXMLDOMDocument * This,
                       BSTR target,
                       BSTR data,
                                IXMLDOMProcessingInstruction **pi);

                               HRESULT ( __stdcall *createAttribute )(
            IXMLDOMDocument * This,
                       BSTR name,
                                IXMLDOMAttribute **attribute);

                               HRESULT ( __stdcall *createEntityReference )(
            IXMLDOMDocument * This,
                       BSTR name,
                                IXMLDOMEntityReference **entityRef);

                               HRESULT ( __stdcall *getElementsByTagName )(
            IXMLDOMDocument * This,
                       BSTR tagName,
                                IXMLDOMNodeList **resultList);

                               HRESULT ( __stdcall *createNode )(
            IXMLDOMDocument * This,
                       VARIANT Type,
                       BSTR name,
                       BSTR namespaceURI,
                                IXMLDOMNode **node);

                               HRESULT ( __stdcall *nodeFromID )(
            IXMLDOMDocument * This,
                       BSTR idString,
                                IXMLDOMNode **node);

                               HRESULT ( __stdcall *load )(
            IXMLDOMDocument * This,
                       VARIANT xmlSource,
                                VARIANT_BOOL *isSuccessful);

                                        HRESULT ( __stdcall *get_readyState )(
            IXMLDOMDocument * This,
                                long *value);

                                        HRESULT ( __stdcall *get_parseError )(
            IXMLDOMDocument * This,
                                IXMLDOMParseError **errorObj);

                                        HRESULT ( __stdcall *get_url )(
            IXMLDOMDocument * This,
                                BSTR *urlString);

                                        HRESULT ( __stdcall *get_async )(
            IXMLDOMDocument * This,
                                VARIANT_BOOL *isAsync);

                                        HRESULT ( __stdcall *put_async )(
            IXMLDOMDocument * This,
                       VARIANT_BOOL isAsync);

                               HRESULT ( __stdcall *abort )(
            IXMLDOMDocument * This);

                               HRESULT ( __stdcall *loadXML )(
            IXMLDOMDocument * This,
                       BSTR bstrXML,
                                VARIANT_BOOL *isSuccessful);

                               HRESULT ( __stdcall *save )(
            IXMLDOMDocument * This,
                       VARIANT destination);

                                        HRESULT ( __stdcall *get_validateOnParse )(
            IXMLDOMDocument * This,
                                VARIANT_BOOL *isValidating);

                                        HRESULT ( __stdcall *put_validateOnParse )(
            IXMLDOMDocument * This,
                       VARIANT_BOOL isValidating);

                                        HRESULT ( __stdcall *get_resolveExternals )(
            IXMLDOMDocument * This,
                                VARIANT_BOOL *isResolving);

                                        HRESULT ( __stdcall *put_resolveExternals )(
            IXMLDOMDocument * This,
                       VARIANT_BOOL isResolving);

                                        HRESULT ( __stdcall *get_preserveWhiteSpace )(
            IXMLDOMDocument * This,
                                VARIANT_BOOL *isPreserving);

                                        HRESULT ( __stdcall *put_preserveWhiteSpace )(
            IXMLDOMDocument * This,
                       VARIANT_BOOL isPreserving);

                                        HRESULT ( __stdcall *put_onreadystatechange )(
            IXMLDOMDocument * This,
                       VARIANT readystatechangeSink);

                                        HRESULT ( __stdcall *put_ondataavailable )(
            IXMLDOMDocument * This,
                       VARIANT ondataavailableSink);

                                        HRESULT ( __stdcall *put_ontransformnode )(
            IXMLDOMDocument * This,
                       VARIANT ontransformnodeSink);


    } IXMLDOMDocumentVtbl;

    struct IXMLDOMDocument
    {
                   struct IXMLDOMDocumentVtbl *lpVtbl;
    };
#line 2207 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/msxml.h"
extern const IID IID_IXMLDOMNodeList;
#line 2235 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/msxml.h"
    typedef struct IXMLDOMNodeListVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IXMLDOMNodeList * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IXMLDOMNodeList * This);

        ULONG ( __stdcall *Release )(
            IXMLDOMNodeList * This);

        HRESULT ( __stdcall *GetTypeInfoCount )(
            IXMLDOMNodeList * This,
                        UINT *pctinfo);

        HRESULT ( __stdcall *GetTypeInfo )(
            IXMLDOMNodeList * This,
                       UINT iTInfo,
                       LCID lcid,
                        ITypeInfo **ppTInfo);

        HRESULT ( __stdcall *GetIDsOfNames )(
            IXMLDOMNodeList * This,
                       const IID * const riid,
                                LPOLESTR *rgszNames,
                              UINT cNames,
                       LCID lcid,
                                 DISPID *rgDispId);

                      HRESULT ( __stdcall *Invoke )(
            IXMLDOMNodeList * This,

                  DISPID dispIdMember,

                  const IID * const riid,

                  LCID lcid,

                  WORD wFlags,

                  DISPPARAMS *pDispParams,

                       VARIANT *pVarResult,

                       EXCEPINFO *pExcepInfo,

                       UINT *puArgErr);

                                        HRESULT ( __stdcall *get_item )(
            IXMLDOMNodeList * This,
                       long index,
                                IXMLDOMNode **listItem);

                                        HRESULT ( __stdcall *get_length )(
            IXMLDOMNodeList * This,
                                long *listLength);

                               HRESULT ( __stdcall *nextNode )(
            IXMLDOMNodeList * This,
                                IXMLDOMNode **nextItem);

                               HRESULT ( __stdcall *reset )(
            IXMLDOMNodeList * This);

                                                HRESULT ( __stdcall *get__newEnum )(
            IXMLDOMNodeList * This,
                                IUnknown **ppUnk);


    } IXMLDOMNodeListVtbl;

    struct IXMLDOMNodeList
    {
                   struct IXMLDOMNodeListVtbl *lpVtbl;
    };
#line 2377 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/msxml.h"
extern const IID IID_IXMLDOMNamedNodeMap;
#line 2427 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/msxml.h"
    typedef struct IXMLDOMNamedNodeMapVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IXMLDOMNamedNodeMap * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IXMLDOMNamedNodeMap * This);

        ULONG ( __stdcall *Release )(
            IXMLDOMNamedNodeMap * This);

        HRESULT ( __stdcall *GetTypeInfoCount )(
            IXMLDOMNamedNodeMap * This,
                        UINT *pctinfo);

        HRESULT ( __stdcall *GetTypeInfo )(
            IXMLDOMNamedNodeMap * This,
                       UINT iTInfo,
                       LCID lcid,
                        ITypeInfo **ppTInfo);

        HRESULT ( __stdcall *GetIDsOfNames )(
            IXMLDOMNamedNodeMap * This,
                       const IID * const riid,
                                LPOLESTR *rgszNames,
                              UINT cNames,
                       LCID lcid,
                                 DISPID *rgDispId);

                      HRESULT ( __stdcall *Invoke )(
            IXMLDOMNamedNodeMap * This,

                  DISPID dispIdMember,

                  const IID * const riid,

                  LCID lcid,

                  WORD wFlags,

                  DISPPARAMS *pDispParams,

                       VARIANT *pVarResult,

                       EXCEPINFO *pExcepInfo,

                       UINT *puArgErr);

                               HRESULT ( __stdcall *getNamedItem )(
            IXMLDOMNamedNodeMap * This,
                       BSTR name,
                                IXMLDOMNode **namedItem);

                               HRESULT ( __stdcall *setNamedItem )(
            IXMLDOMNamedNodeMap * This,
                       IXMLDOMNode *newItem,
                                IXMLDOMNode **nameItem);

                               HRESULT ( __stdcall *removeNamedItem )(
            IXMLDOMNamedNodeMap * This,
                       BSTR name,
                                IXMLDOMNode **namedItem);

                                        HRESULT ( __stdcall *get_item )(
            IXMLDOMNamedNodeMap * This,
                       long index,
                                IXMLDOMNode **listItem);

                                        HRESULT ( __stdcall *get_length )(
            IXMLDOMNamedNodeMap * This,
                                long *listLength);

                               HRESULT ( __stdcall *getQualifiedItem )(
            IXMLDOMNamedNodeMap * This,
                       BSTR baseName,
                       BSTR namespaceURI,
                                IXMLDOMNode **qualifiedItem);

                               HRESULT ( __stdcall *removeQualifiedItem )(
            IXMLDOMNamedNodeMap * This,
                       BSTR baseName,
                       BSTR namespaceURI,
                                IXMLDOMNode **qualifiedItem);

                               HRESULT ( __stdcall *nextNode )(
            IXMLDOMNamedNodeMap * This,
                                IXMLDOMNode **nextItem);

                               HRESULT ( __stdcall *reset )(
            IXMLDOMNamedNodeMap * This);

                                                HRESULT ( __stdcall *get__newEnum )(
            IXMLDOMNamedNodeMap * This,
                                IUnknown **ppUnk);


    } IXMLDOMNamedNodeMapVtbl;

    struct IXMLDOMNamedNodeMap
    {
                   struct IXMLDOMNamedNodeMapVtbl *lpVtbl;
    };
#line 2611 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/msxml.h"
extern const IID IID_IXMLDOMCharacterData;
#line 2654 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/msxml.h"
    typedef struct IXMLDOMCharacterDataVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IXMLDOMCharacterData * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IXMLDOMCharacterData * This);

        ULONG ( __stdcall *Release )(
            IXMLDOMCharacterData * This);

        HRESULT ( __stdcall *GetTypeInfoCount )(
            IXMLDOMCharacterData * This,
                        UINT *pctinfo);

        HRESULT ( __stdcall *GetTypeInfo )(
            IXMLDOMCharacterData * This,
                       UINT iTInfo,
                       LCID lcid,
                        ITypeInfo **ppTInfo);

        HRESULT ( __stdcall *GetIDsOfNames )(
            IXMLDOMCharacterData * This,
                       const IID * const riid,
                                LPOLESTR *rgszNames,
                              UINT cNames,
                       LCID lcid,
                                 DISPID *rgDispId);

                      HRESULT ( __stdcall *Invoke )(
            IXMLDOMCharacterData * This,

                  DISPID dispIdMember,

                  const IID * const riid,

                  LCID lcid,

                  WORD wFlags,

                  DISPPARAMS *pDispParams,

                       VARIANT *pVarResult,

                       EXCEPINFO *pExcepInfo,

                       UINT *puArgErr);

                                        HRESULT ( __stdcall *get_nodeName )(
            IXMLDOMCharacterData * This,
                                BSTR *name);

                                        HRESULT ( __stdcall *get_nodeValue )(
            IXMLDOMCharacterData * This,
                                VARIANT *value);

                                        HRESULT ( __stdcall *put_nodeValue )(
            IXMLDOMCharacterData * This,
                       VARIANT value);

                                        HRESULT ( __stdcall *get_nodeType )(
            IXMLDOMCharacterData * This,
                                DOMNodeType *type);

                                        HRESULT ( __stdcall *get_parentNode )(
            IXMLDOMCharacterData * This,
                                IXMLDOMNode **parent);

                                        HRESULT ( __stdcall *get_childNodes )(
            IXMLDOMCharacterData * This,
                                IXMLDOMNodeList **childList);

                                        HRESULT ( __stdcall *get_firstChild )(
            IXMLDOMCharacterData * This,
                                IXMLDOMNode **firstChild);

                                        HRESULT ( __stdcall *get_lastChild )(
            IXMLDOMCharacterData * This,
                                IXMLDOMNode **lastChild);

                                        HRESULT ( __stdcall *get_previousSibling )(
            IXMLDOMCharacterData * This,
                                IXMLDOMNode **previousSibling);

                                        HRESULT ( __stdcall *get_nextSibling )(
            IXMLDOMCharacterData * This,
                                IXMLDOMNode **nextSibling);

                                        HRESULT ( __stdcall *get_attributes )(
            IXMLDOMCharacterData * This,
                                IXMLDOMNamedNodeMap **attributeMap);

                               HRESULT ( __stdcall *insertBefore )(
            IXMLDOMCharacterData * This,
                       IXMLDOMNode *newChild,
                       VARIANT refChild,
                                IXMLDOMNode **outNewChild);

                               HRESULT ( __stdcall *replaceChild )(
            IXMLDOMCharacterData * This,
                       IXMLDOMNode *newChild,
                       IXMLDOMNode *oldChild,
                                IXMLDOMNode **outOldChild);

                               HRESULT ( __stdcall *removeChild )(
            IXMLDOMCharacterData * This,
                       IXMLDOMNode *childNode,
                                IXMLDOMNode **oldChild);

                               HRESULT ( __stdcall *appendChild )(
            IXMLDOMCharacterData * This,
                       IXMLDOMNode *newChild,
                                IXMLDOMNode **outNewChild);

                               HRESULT ( __stdcall *hasChildNodes )(
            IXMLDOMCharacterData * This,
                                VARIANT_BOOL *hasChild);

                                        HRESULT ( __stdcall *get_ownerDocument )(
            IXMLDOMCharacterData * This,
                                IXMLDOMDocument **XMLDOMDocument);

                               HRESULT ( __stdcall *cloneNode )(
            IXMLDOMCharacterData * This,
                       VARIANT_BOOL deep,
                                IXMLDOMNode **cloneRoot);

                                        HRESULT ( __stdcall *get_nodeTypeString )(
            IXMLDOMCharacterData * This,
                                BSTR *nodeType);

                                        HRESULT ( __stdcall *get_text )(
            IXMLDOMCharacterData * This,
                                BSTR *text);

                                        HRESULT ( __stdcall *put_text )(
            IXMLDOMCharacterData * This,
                       BSTR text);

                                        HRESULT ( __stdcall *get_specified )(
            IXMLDOMCharacterData * This,
                                VARIANT_BOOL *isSpecified);

                                        HRESULT ( __stdcall *get_definition )(
            IXMLDOMCharacterData * This,
                                IXMLDOMNode **definitionNode);

                                        HRESULT ( __stdcall *get_nodeTypedValue )(
            IXMLDOMCharacterData * This,
                                VARIANT *typedValue);

                                        HRESULT ( __stdcall *put_nodeTypedValue )(
            IXMLDOMCharacterData * This,
                       VARIANT typedValue);

                                        HRESULT ( __stdcall *get_dataType )(
            IXMLDOMCharacterData * This,
                                VARIANT *dataTypeName);

                                        HRESULT ( __stdcall *put_dataType )(
            IXMLDOMCharacterData * This,
                       BSTR dataTypeName);

                                        HRESULT ( __stdcall *get_xml )(
            IXMLDOMCharacterData * This,
                                BSTR *xmlString);

                               HRESULT ( __stdcall *transformNode )(
            IXMLDOMCharacterData * This,
                       IXMLDOMNode *stylesheet,
                                BSTR *xmlString);

                               HRESULT ( __stdcall *selectNodes )(
            IXMLDOMCharacterData * This,
                       BSTR queryString,
                                IXMLDOMNodeList **resultList);

                               HRESULT ( __stdcall *selectSingleNode )(
            IXMLDOMCharacterData * This,
                       BSTR queryString,
                                IXMLDOMNode **resultNode);

                                        HRESULT ( __stdcall *get_parsed )(
            IXMLDOMCharacterData * This,
                                VARIANT_BOOL *isParsed);

                                        HRESULT ( __stdcall *get_namespaceURI )(
            IXMLDOMCharacterData * This,
                                BSTR *namespaceURI);

                                        HRESULT ( __stdcall *get_prefix )(
            IXMLDOMCharacterData * This,
                                BSTR *prefixString);

                                        HRESULT ( __stdcall *get_baseName )(
            IXMLDOMCharacterData * This,
                                BSTR *nameString);

                               HRESULT ( __stdcall *transformNodeToObject )(
            IXMLDOMCharacterData * This,
                       IXMLDOMNode *stylesheet,
                       VARIANT outputObject);

                                        HRESULT ( __stdcall *get_data )(
            IXMLDOMCharacterData * This,
                                BSTR *data);

                                        HRESULT ( __stdcall *put_data )(
            IXMLDOMCharacterData * This,
                       BSTR data);

                                        HRESULT ( __stdcall *get_length )(
            IXMLDOMCharacterData * This,
                                long *dataLength);

                               HRESULT ( __stdcall *substringData )(
            IXMLDOMCharacterData * This,
                       long offset,
                       long count,
                                BSTR *data);

                               HRESULT ( __stdcall *appendData )(
            IXMLDOMCharacterData * This,
                       BSTR data);

                               HRESULT ( __stdcall *insertData )(
            IXMLDOMCharacterData * This,
                       long offset,
                       BSTR data);

                               HRESULT ( __stdcall *deleteData )(
            IXMLDOMCharacterData * This,
                       long offset,
                       long count);

                               HRESULT ( __stdcall *replaceData )(
            IXMLDOMCharacterData * This,
                       long offset,
                       long count,
                       BSTR data);


    } IXMLDOMCharacterDataVtbl;

    struct IXMLDOMCharacterData
    {
                   struct IXMLDOMCharacterDataVtbl *lpVtbl;
    };
#line 3087 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/msxml.h"
extern const IID IID_IXMLDOMAttribute;
#line 3109 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/msxml.h"
    typedef struct IXMLDOMAttributeVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IXMLDOMAttribute * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IXMLDOMAttribute * This);

        ULONG ( __stdcall *Release )(
            IXMLDOMAttribute * This);

        HRESULT ( __stdcall *GetTypeInfoCount )(
            IXMLDOMAttribute * This,
                        UINT *pctinfo);

        HRESULT ( __stdcall *GetTypeInfo )(
            IXMLDOMAttribute * This,
                       UINT iTInfo,
                       LCID lcid,
                        ITypeInfo **ppTInfo);

        HRESULT ( __stdcall *GetIDsOfNames )(
            IXMLDOMAttribute * This,
                       const IID * const riid,
                                LPOLESTR *rgszNames,
                              UINT cNames,
                       LCID lcid,
                                 DISPID *rgDispId);

                      HRESULT ( __stdcall *Invoke )(
            IXMLDOMAttribute * This,

                  DISPID dispIdMember,

                  const IID * const riid,

                  LCID lcid,

                  WORD wFlags,

                  DISPPARAMS *pDispParams,

                       VARIANT *pVarResult,

                       EXCEPINFO *pExcepInfo,

                       UINT *puArgErr);

                                        HRESULT ( __stdcall *get_nodeName )(
            IXMLDOMAttribute * This,
                                BSTR *name);

                                        HRESULT ( __stdcall *get_nodeValue )(
            IXMLDOMAttribute * This,
                                VARIANT *value);

                                        HRESULT ( __stdcall *put_nodeValue )(
            IXMLDOMAttribute * This,
                       VARIANT value);

                                        HRESULT ( __stdcall *get_nodeType )(
            IXMLDOMAttribute * This,
                                DOMNodeType *type);

                                        HRESULT ( __stdcall *get_parentNode )(
            IXMLDOMAttribute * This,
                                IXMLDOMNode **parent);

                                        HRESULT ( __stdcall *get_childNodes )(
            IXMLDOMAttribute * This,
                                IXMLDOMNodeList **childList);

                                        HRESULT ( __stdcall *get_firstChild )(
            IXMLDOMAttribute * This,
                                IXMLDOMNode **firstChild);

                                        HRESULT ( __stdcall *get_lastChild )(
            IXMLDOMAttribute * This,
                                IXMLDOMNode **lastChild);

                                        HRESULT ( __stdcall *get_previousSibling )(
            IXMLDOMAttribute * This,
                                IXMLDOMNode **previousSibling);

                                        HRESULT ( __stdcall *get_nextSibling )(
            IXMLDOMAttribute * This,
                                IXMLDOMNode **nextSibling);

                                        HRESULT ( __stdcall *get_attributes )(
            IXMLDOMAttribute * This,
                                IXMLDOMNamedNodeMap **attributeMap);

                               HRESULT ( __stdcall *insertBefore )(
            IXMLDOMAttribute * This,
                       IXMLDOMNode *newChild,
                       VARIANT refChild,
                                IXMLDOMNode **outNewChild);

                               HRESULT ( __stdcall *replaceChild )(
            IXMLDOMAttribute * This,
                       IXMLDOMNode *newChild,
                       IXMLDOMNode *oldChild,
                                IXMLDOMNode **outOldChild);

                               HRESULT ( __stdcall *removeChild )(
            IXMLDOMAttribute * This,
                       IXMLDOMNode *childNode,
                                IXMLDOMNode **oldChild);

                               HRESULT ( __stdcall *appendChild )(
            IXMLDOMAttribute * This,
                       IXMLDOMNode *newChild,
                                IXMLDOMNode **outNewChild);

                               HRESULT ( __stdcall *hasChildNodes )(
            IXMLDOMAttribute * This,
                                VARIANT_BOOL *hasChild);

                                        HRESULT ( __stdcall *get_ownerDocument )(
            IXMLDOMAttribute * This,
                                IXMLDOMDocument **XMLDOMDocument);

                               HRESULT ( __stdcall *cloneNode )(
            IXMLDOMAttribute * This,
                       VARIANT_BOOL deep,
                                IXMLDOMNode **cloneRoot);

                                        HRESULT ( __stdcall *get_nodeTypeString )(
            IXMLDOMAttribute * This,
                                BSTR *nodeType);

                                        HRESULT ( __stdcall *get_text )(
            IXMLDOMAttribute * This,
                                BSTR *text);

                                        HRESULT ( __stdcall *put_text )(
            IXMLDOMAttribute * This,
                       BSTR text);

                                        HRESULT ( __stdcall *get_specified )(
            IXMLDOMAttribute * This,
                                VARIANT_BOOL *isSpecified);

                                        HRESULT ( __stdcall *get_definition )(
            IXMLDOMAttribute * This,
                                IXMLDOMNode **definitionNode);

                                        HRESULT ( __stdcall *get_nodeTypedValue )(
            IXMLDOMAttribute * This,
                                VARIANT *typedValue);

                                        HRESULT ( __stdcall *put_nodeTypedValue )(
            IXMLDOMAttribute * This,
                       VARIANT typedValue);

                                        HRESULT ( __stdcall *get_dataType )(
            IXMLDOMAttribute * This,
                                VARIANT *dataTypeName);

                                        HRESULT ( __stdcall *put_dataType )(
            IXMLDOMAttribute * This,
                       BSTR dataTypeName);

                                        HRESULT ( __stdcall *get_xml )(
            IXMLDOMAttribute * This,
                                BSTR *xmlString);

                               HRESULT ( __stdcall *transformNode )(
            IXMLDOMAttribute * This,
                       IXMLDOMNode *stylesheet,
                                BSTR *xmlString);

                               HRESULT ( __stdcall *selectNodes )(
            IXMLDOMAttribute * This,
                       BSTR queryString,
                                IXMLDOMNodeList **resultList);

                               HRESULT ( __stdcall *selectSingleNode )(
            IXMLDOMAttribute * This,
                       BSTR queryString,
                                IXMLDOMNode **resultNode);

                                        HRESULT ( __stdcall *get_parsed )(
            IXMLDOMAttribute * This,
                                VARIANT_BOOL *isParsed);

                                        HRESULT ( __stdcall *get_namespaceURI )(
            IXMLDOMAttribute * This,
                                BSTR *namespaceURI);

                                        HRESULT ( __stdcall *get_prefix )(
            IXMLDOMAttribute * This,
                                BSTR *prefixString);

                                        HRESULT ( __stdcall *get_baseName )(
            IXMLDOMAttribute * This,
                                BSTR *nameString);

                               HRESULT ( __stdcall *transformNodeToObject )(
            IXMLDOMAttribute * This,
                       IXMLDOMNode *stylesheet,
                       VARIANT outputObject);

                                        HRESULT ( __stdcall *get_name )(
            IXMLDOMAttribute * This,
                                BSTR *attributeName);

                                        HRESULT ( __stdcall *get_value )(
            IXMLDOMAttribute * This,
                                VARIANT *attributeValue);

                                        HRESULT ( __stdcall *put_value )(
            IXMLDOMAttribute * This,
                       VARIANT attributeValue);


    } IXMLDOMAttributeVtbl;

    struct IXMLDOMAttribute
    {
                   struct IXMLDOMAttributeVtbl *lpVtbl;
    };
#line 3501 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/msxml.h"
extern const IID IID_IXMLDOMElement;
#line 3546 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/msxml.h"
    typedef struct IXMLDOMElementVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IXMLDOMElement * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IXMLDOMElement * This);

        ULONG ( __stdcall *Release )(
            IXMLDOMElement * This);

        HRESULT ( __stdcall *GetTypeInfoCount )(
            IXMLDOMElement * This,
                        UINT *pctinfo);

        HRESULT ( __stdcall *GetTypeInfo )(
            IXMLDOMElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        ITypeInfo **ppTInfo);

        HRESULT ( __stdcall *GetIDsOfNames )(
            IXMLDOMElement * This,
                       const IID * const riid,
                                LPOLESTR *rgszNames,
                              UINT cNames,
                       LCID lcid,
                                 DISPID *rgDispId);

                      HRESULT ( __stdcall *Invoke )(
            IXMLDOMElement * This,

                  DISPID dispIdMember,

                  const IID * const riid,

                  LCID lcid,

                  WORD wFlags,

                  DISPPARAMS *pDispParams,

                       VARIANT *pVarResult,

                       EXCEPINFO *pExcepInfo,

                       UINT *puArgErr);

                                        HRESULT ( __stdcall *get_nodeName )(
            IXMLDOMElement * This,
                                BSTR *name);

                                        HRESULT ( __stdcall *get_nodeValue )(
            IXMLDOMElement * This,
                                VARIANT *value);

                                        HRESULT ( __stdcall *put_nodeValue )(
            IXMLDOMElement * This,
                       VARIANT value);

                                        HRESULT ( __stdcall *get_nodeType )(
            IXMLDOMElement * This,
                                DOMNodeType *type);

                                        HRESULT ( __stdcall *get_parentNode )(
            IXMLDOMElement * This,
                                IXMLDOMNode **parent);

                                        HRESULT ( __stdcall *get_childNodes )(
            IXMLDOMElement * This,
                                IXMLDOMNodeList **childList);

                                        HRESULT ( __stdcall *get_firstChild )(
            IXMLDOMElement * This,
                                IXMLDOMNode **firstChild);

                                        HRESULT ( __stdcall *get_lastChild )(
            IXMLDOMElement * This,
                                IXMLDOMNode **lastChild);

                                        HRESULT ( __stdcall *get_previousSibling )(
            IXMLDOMElement * This,
                                IXMLDOMNode **previousSibling);

                                        HRESULT ( __stdcall *get_nextSibling )(
            IXMLDOMElement * This,
                                IXMLDOMNode **nextSibling);

                                        HRESULT ( __stdcall *get_attributes )(
            IXMLDOMElement * This,
                                IXMLDOMNamedNodeMap **attributeMap);

                               HRESULT ( __stdcall *insertBefore )(
            IXMLDOMElement * This,
                       IXMLDOMNode *newChild,
                       VARIANT refChild,
                                IXMLDOMNode **outNewChild);

                               HRESULT ( __stdcall *replaceChild )(
            IXMLDOMElement * This,
                       IXMLDOMNode *newChild,
                       IXMLDOMNode *oldChild,
                                IXMLDOMNode **outOldChild);

                               HRESULT ( __stdcall *removeChild )(
            IXMLDOMElement * This,
                       IXMLDOMNode *childNode,
                                IXMLDOMNode **oldChild);

                               HRESULT ( __stdcall *appendChild )(
            IXMLDOMElement * This,
                       IXMLDOMNode *newChild,
                                IXMLDOMNode **outNewChild);

                               HRESULT ( __stdcall *hasChildNodes )(
            IXMLDOMElement * This,
                                VARIANT_BOOL *hasChild);

                                        HRESULT ( __stdcall *get_ownerDocument )(
            IXMLDOMElement * This,
                                IXMLDOMDocument **XMLDOMDocument);

                               HRESULT ( __stdcall *cloneNode )(
            IXMLDOMElement * This,
                       VARIANT_BOOL deep,
                                IXMLDOMNode **cloneRoot);

                                        HRESULT ( __stdcall *get_nodeTypeString )(
            IXMLDOMElement * This,
                                BSTR *nodeType);

                                        HRESULT ( __stdcall *get_text )(
            IXMLDOMElement * This,
                                BSTR *text);

                                        HRESULT ( __stdcall *put_text )(
            IXMLDOMElement * This,
                       BSTR text);

                                        HRESULT ( __stdcall *get_specified )(
            IXMLDOMElement * This,
                                VARIANT_BOOL *isSpecified);

                                        HRESULT ( __stdcall *get_definition )(
            IXMLDOMElement * This,
                                IXMLDOMNode **definitionNode);

                                        HRESULT ( __stdcall *get_nodeTypedValue )(
            IXMLDOMElement * This,
                                VARIANT *typedValue);

                                        HRESULT ( __stdcall *put_nodeTypedValue )(
            IXMLDOMElement * This,
                       VARIANT typedValue);

                                        HRESULT ( __stdcall *get_dataType )(
            IXMLDOMElement * This,
                                VARIANT *dataTypeName);

                                        HRESULT ( __stdcall *put_dataType )(
            IXMLDOMElement * This,
                       BSTR dataTypeName);

                                        HRESULT ( __stdcall *get_xml )(
            IXMLDOMElement * This,
                                BSTR *xmlString);

                               HRESULT ( __stdcall *transformNode )(
            IXMLDOMElement * This,
                       IXMLDOMNode *stylesheet,
                                BSTR *xmlString);

                               HRESULT ( __stdcall *selectNodes )(
            IXMLDOMElement * This,
                       BSTR queryString,
                                IXMLDOMNodeList **resultList);

                               HRESULT ( __stdcall *selectSingleNode )(
            IXMLDOMElement * This,
                       BSTR queryString,
                                IXMLDOMNode **resultNode);

                                        HRESULT ( __stdcall *get_parsed )(
            IXMLDOMElement * This,
                                VARIANT_BOOL *isParsed);

                                        HRESULT ( __stdcall *get_namespaceURI )(
            IXMLDOMElement * This,
                                BSTR *namespaceURI);

                                        HRESULT ( __stdcall *get_prefix )(
            IXMLDOMElement * This,
                                BSTR *prefixString);

                                        HRESULT ( __stdcall *get_baseName )(
            IXMLDOMElement * This,
                                BSTR *nameString);

                               HRESULT ( __stdcall *transformNodeToObject )(
            IXMLDOMElement * This,
                       IXMLDOMNode *stylesheet,
                       VARIANT outputObject);

                                        HRESULT ( __stdcall *get_tagName )(
            IXMLDOMElement * This,
                                BSTR *tagName);

                               HRESULT ( __stdcall *getAttribute )(
            IXMLDOMElement * This,
                       BSTR name,
                                VARIANT *value);

                               HRESULT ( __stdcall *setAttribute )(
            IXMLDOMElement * This,
                       BSTR name,
                       VARIANT value);

                               HRESULT ( __stdcall *removeAttribute )(
            IXMLDOMElement * This,
                       BSTR name);

                               HRESULT ( __stdcall *getAttributeNode )(
            IXMLDOMElement * This,
                       BSTR name,
                                IXMLDOMAttribute **attributeNode);

                               HRESULT ( __stdcall *setAttributeNode )(
            IXMLDOMElement * This,
                       IXMLDOMAttribute *DOMAttribute,
                                IXMLDOMAttribute **attributeNode);

                               HRESULT ( __stdcall *removeAttributeNode )(
            IXMLDOMElement * This,
                       IXMLDOMAttribute *DOMAttribute,
                                IXMLDOMAttribute **attributeNode);

                               HRESULT ( __stdcall *getElementsByTagName )(
            IXMLDOMElement * This,
                       BSTR tagName,
                                IXMLDOMNodeList **resultList);

                               HRESULT ( __stdcall *normalize )(
            IXMLDOMElement * This);


    } IXMLDOMElementVtbl;

    struct IXMLDOMElement
    {
                   struct IXMLDOMElementVtbl *lpVtbl;
    };
#line 3985 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/msxml.h"
extern const IID IID_IXMLDOMText;
#line 4002 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/msxml.h"
    typedef struct IXMLDOMTextVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IXMLDOMText * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IXMLDOMText * This);

        ULONG ( __stdcall *Release )(
            IXMLDOMText * This);

        HRESULT ( __stdcall *GetTypeInfoCount )(
            IXMLDOMText * This,
                        UINT *pctinfo);

        HRESULT ( __stdcall *GetTypeInfo )(
            IXMLDOMText * This,
                       UINT iTInfo,
                       LCID lcid,
                        ITypeInfo **ppTInfo);

        HRESULT ( __stdcall *GetIDsOfNames )(
            IXMLDOMText * This,
                       const IID * const riid,
                                LPOLESTR *rgszNames,
                              UINT cNames,
                       LCID lcid,
                                 DISPID *rgDispId);

                      HRESULT ( __stdcall *Invoke )(
            IXMLDOMText * This,

                  DISPID dispIdMember,

                  const IID * const riid,

                  LCID lcid,

                  WORD wFlags,

                  DISPPARAMS *pDispParams,

                       VARIANT *pVarResult,

                       EXCEPINFO *pExcepInfo,

                       UINT *puArgErr);

                                        HRESULT ( __stdcall *get_nodeName )(
            IXMLDOMText * This,
                                BSTR *name);

                                        HRESULT ( __stdcall *get_nodeValue )(
            IXMLDOMText * This,
                                VARIANT *value);

                                        HRESULT ( __stdcall *put_nodeValue )(
            IXMLDOMText * This,
                       VARIANT value);

                                        HRESULT ( __stdcall *get_nodeType )(
            IXMLDOMText * This,
                                DOMNodeType *type);

                                        HRESULT ( __stdcall *get_parentNode )(
            IXMLDOMText * This,
                                IXMLDOMNode **parent);

                                        HRESULT ( __stdcall *get_childNodes )(
            IXMLDOMText * This,
                                IXMLDOMNodeList **childList);

                                        HRESULT ( __stdcall *get_firstChild )(
            IXMLDOMText * This,
                                IXMLDOMNode **firstChild);

                                        HRESULT ( __stdcall *get_lastChild )(
            IXMLDOMText * This,
                                IXMLDOMNode **lastChild);

                                        HRESULT ( __stdcall *get_previousSibling )(
            IXMLDOMText * This,
                                IXMLDOMNode **previousSibling);

                                        HRESULT ( __stdcall *get_nextSibling )(
            IXMLDOMText * This,
                                IXMLDOMNode **nextSibling);

                                        HRESULT ( __stdcall *get_attributes )(
            IXMLDOMText * This,
                                IXMLDOMNamedNodeMap **attributeMap);

                               HRESULT ( __stdcall *insertBefore )(
            IXMLDOMText * This,
                       IXMLDOMNode *newChild,
                       VARIANT refChild,
                                IXMLDOMNode **outNewChild);

                               HRESULT ( __stdcall *replaceChild )(
            IXMLDOMText * This,
                       IXMLDOMNode *newChild,
                       IXMLDOMNode *oldChild,
                                IXMLDOMNode **outOldChild);

                               HRESULT ( __stdcall *removeChild )(
            IXMLDOMText * This,
                       IXMLDOMNode *childNode,
                                IXMLDOMNode **oldChild);

                               HRESULT ( __stdcall *appendChild )(
            IXMLDOMText * This,
                       IXMLDOMNode *newChild,
                                IXMLDOMNode **outNewChild);

                               HRESULT ( __stdcall *hasChildNodes )(
            IXMLDOMText * This,
                                VARIANT_BOOL *hasChild);

                                        HRESULT ( __stdcall *get_ownerDocument )(
            IXMLDOMText * This,
                                IXMLDOMDocument **XMLDOMDocument);

                               HRESULT ( __stdcall *cloneNode )(
            IXMLDOMText * This,
                       VARIANT_BOOL deep,
                                IXMLDOMNode **cloneRoot);

                                        HRESULT ( __stdcall *get_nodeTypeString )(
            IXMLDOMText * This,
                                BSTR *nodeType);

                                        HRESULT ( __stdcall *get_text )(
            IXMLDOMText * This,
                                BSTR *text);

                                        HRESULT ( __stdcall *put_text )(
            IXMLDOMText * This,
                       BSTR text);

                                        HRESULT ( __stdcall *get_specified )(
            IXMLDOMText * This,
                                VARIANT_BOOL *isSpecified);

                                        HRESULT ( __stdcall *get_definition )(
            IXMLDOMText * This,
                                IXMLDOMNode **definitionNode);

                                        HRESULT ( __stdcall *get_nodeTypedValue )(
            IXMLDOMText * This,
                                VARIANT *typedValue);

                                        HRESULT ( __stdcall *put_nodeTypedValue )(
            IXMLDOMText * This,
                       VARIANT typedValue);

                                        HRESULT ( __stdcall *get_dataType )(
            IXMLDOMText * This,
                                VARIANT *dataTypeName);

                                        HRESULT ( __stdcall *put_dataType )(
            IXMLDOMText * This,
                       BSTR dataTypeName);

                                        HRESULT ( __stdcall *get_xml )(
            IXMLDOMText * This,
                                BSTR *xmlString);

                               HRESULT ( __stdcall *transformNode )(
            IXMLDOMText * This,
                       IXMLDOMNode *stylesheet,
                                BSTR *xmlString);

                               HRESULT ( __stdcall *selectNodes )(
            IXMLDOMText * This,
                       BSTR queryString,
                                IXMLDOMNodeList **resultList);

                               HRESULT ( __stdcall *selectSingleNode )(
            IXMLDOMText * This,
                       BSTR queryString,
                                IXMLDOMNode **resultNode);

                                        HRESULT ( __stdcall *get_parsed )(
            IXMLDOMText * This,
                                VARIANT_BOOL *isParsed);

                                        HRESULT ( __stdcall *get_namespaceURI )(
            IXMLDOMText * This,
                                BSTR *namespaceURI);

                                        HRESULT ( __stdcall *get_prefix )(
            IXMLDOMText * This,
                                BSTR *prefixString);

                                        HRESULT ( __stdcall *get_baseName )(
            IXMLDOMText * This,
                                BSTR *nameString);

                               HRESULT ( __stdcall *transformNodeToObject )(
            IXMLDOMText * This,
                       IXMLDOMNode *stylesheet,
                       VARIANT outputObject);

                                        HRESULT ( __stdcall *get_data )(
            IXMLDOMText * This,
                                BSTR *data);

                                        HRESULT ( __stdcall *put_data )(
            IXMLDOMText * This,
                       BSTR data);

                                        HRESULT ( __stdcall *get_length )(
            IXMLDOMText * This,
                                long *dataLength);

                               HRESULT ( __stdcall *substringData )(
            IXMLDOMText * This,
                       long offset,
                       long count,
                                BSTR *data);

                               HRESULT ( __stdcall *appendData )(
            IXMLDOMText * This,
                       BSTR data);

                               HRESULT ( __stdcall *insertData )(
            IXMLDOMText * This,
                       long offset,
                       BSTR data);

                               HRESULT ( __stdcall *deleteData )(
            IXMLDOMText * This,
                       long offset,
                       long count);

                               HRESULT ( __stdcall *replaceData )(
            IXMLDOMText * This,
                       long offset,
                       long count,
                       BSTR data);

                               HRESULT ( __stdcall *splitText )(
            IXMLDOMText * This,
                       long offset,
                                IXMLDOMText **rightHandTextNode);


    } IXMLDOMTextVtbl;

    struct IXMLDOMText
    {
                   struct IXMLDOMTextVtbl *lpVtbl;
    };
#line 4444 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/msxml.h"
extern const IID IID_IXMLDOMComment;
#line 4457 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/msxml.h"
    typedef struct IXMLDOMCommentVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IXMLDOMComment * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IXMLDOMComment * This);

        ULONG ( __stdcall *Release )(
            IXMLDOMComment * This);

        HRESULT ( __stdcall *GetTypeInfoCount )(
            IXMLDOMComment * This,
                        UINT *pctinfo);

        HRESULT ( __stdcall *GetTypeInfo )(
            IXMLDOMComment * This,
                       UINT iTInfo,
                       LCID lcid,
                        ITypeInfo **ppTInfo);

        HRESULT ( __stdcall *GetIDsOfNames )(
            IXMLDOMComment * This,
                       const IID * const riid,
                                LPOLESTR *rgszNames,
                              UINT cNames,
                       LCID lcid,
                                 DISPID *rgDispId);

                      HRESULT ( __stdcall *Invoke )(
            IXMLDOMComment * This,

                  DISPID dispIdMember,

                  const IID * const riid,

                  LCID lcid,

                  WORD wFlags,

                  DISPPARAMS *pDispParams,

                       VARIANT *pVarResult,

                       EXCEPINFO *pExcepInfo,

                       UINT *puArgErr);

                                        HRESULT ( __stdcall *get_nodeName )(
            IXMLDOMComment * This,
                                BSTR *name);

                                        HRESULT ( __stdcall *get_nodeValue )(
            IXMLDOMComment * This,
                                VARIANT *value);

                                        HRESULT ( __stdcall *put_nodeValue )(
            IXMLDOMComment * This,
                       VARIANT value);

                                        HRESULT ( __stdcall *get_nodeType )(
            IXMLDOMComment * This,
                                DOMNodeType *type);

                                        HRESULT ( __stdcall *get_parentNode )(
            IXMLDOMComment * This,
                                IXMLDOMNode **parent);

                                        HRESULT ( __stdcall *get_childNodes )(
            IXMLDOMComment * This,
                                IXMLDOMNodeList **childList);

                                        HRESULT ( __stdcall *get_firstChild )(
            IXMLDOMComment * This,
                                IXMLDOMNode **firstChild);

                                        HRESULT ( __stdcall *get_lastChild )(
            IXMLDOMComment * This,
                                IXMLDOMNode **lastChild);

                                        HRESULT ( __stdcall *get_previousSibling )(
            IXMLDOMComment * This,
                                IXMLDOMNode **previousSibling);

                                        HRESULT ( __stdcall *get_nextSibling )(
            IXMLDOMComment * This,
                                IXMLDOMNode **nextSibling);

                                        HRESULT ( __stdcall *get_attributes )(
            IXMLDOMComment * This,
                                IXMLDOMNamedNodeMap **attributeMap);

                               HRESULT ( __stdcall *insertBefore )(
            IXMLDOMComment * This,
                       IXMLDOMNode *newChild,
                       VARIANT refChild,
                                IXMLDOMNode **outNewChild);

                               HRESULT ( __stdcall *replaceChild )(
            IXMLDOMComment * This,
                       IXMLDOMNode *newChild,
                       IXMLDOMNode *oldChild,
                                IXMLDOMNode **outOldChild);

                               HRESULT ( __stdcall *removeChild )(
            IXMLDOMComment * This,
                       IXMLDOMNode *childNode,
                                IXMLDOMNode **oldChild);

                               HRESULT ( __stdcall *appendChild )(
            IXMLDOMComment * This,
                       IXMLDOMNode *newChild,
                                IXMLDOMNode **outNewChild);

                               HRESULT ( __stdcall *hasChildNodes )(
            IXMLDOMComment * This,
                                VARIANT_BOOL *hasChild);

                                        HRESULT ( __stdcall *get_ownerDocument )(
            IXMLDOMComment * This,
                                IXMLDOMDocument **XMLDOMDocument);

                               HRESULT ( __stdcall *cloneNode )(
            IXMLDOMComment * This,
                       VARIANT_BOOL deep,
                                IXMLDOMNode **cloneRoot);

                                        HRESULT ( __stdcall *get_nodeTypeString )(
            IXMLDOMComment * This,
                                BSTR *nodeType);

                                        HRESULT ( __stdcall *get_text )(
            IXMLDOMComment * This,
                                BSTR *text);

                                        HRESULT ( __stdcall *put_text )(
            IXMLDOMComment * This,
                       BSTR text);

                                        HRESULT ( __stdcall *get_specified )(
            IXMLDOMComment * This,
                                VARIANT_BOOL *isSpecified);

                                        HRESULT ( __stdcall *get_definition )(
            IXMLDOMComment * This,
                                IXMLDOMNode **definitionNode);

                                        HRESULT ( __stdcall *get_nodeTypedValue )(
            IXMLDOMComment * This,
                                VARIANT *typedValue);

                                        HRESULT ( __stdcall *put_nodeTypedValue )(
            IXMLDOMComment * This,
                       VARIANT typedValue);

                                        HRESULT ( __stdcall *get_dataType )(
            IXMLDOMComment * This,
                                VARIANT *dataTypeName);

                                        HRESULT ( __stdcall *put_dataType )(
            IXMLDOMComment * This,
                       BSTR dataTypeName);

                                        HRESULT ( __stdcall *get_xml )(
            IXMLDOMComment * This,
                                BSTR *xmlString);

                               HRESULT ( __stdcall *transformNode )(
            IXMLDOMComment * This,
                       IXMLDOMNode *stylesheet,
                                BSTR *xmlString);

                               HRESULT ( __stdcall *selectNodes )(
            IXMLDOMComment * This,
                       BSTR queryString,
                                IXMLDOMNodeList **resultList);

                               HRESULT ( __stdcall *selectSingleNode )(
            IXMLDOMComment * This,
                       BSTR queryString,
                                IXMLDOMNode **resultNode);

                                        HRESULT ( __stdcall *get_parsed )(
            IXMLDOMComment * This,
                                VARIANT_BOOL *isParsed);

                                        HRESULT ( __stdcall *get_namespaceURI )(
            IXMLDOMComment * This,
                                BSTR *namespaceURI);

                                        HRESULT ( __stdcall *get_prefix )(
            IXMLDOMComment * This,
                                BSTR *prefixString);

                                        HRESULT ( __stdcall *get_baseName )(
            IXMLDOMComment * This,
                                BSTR *nameString);

                               HRESULT ( __stdcall *transformNodeToObject )(
            IXMLDOMComment * This,
                       IXMLDOMNode *stylesheet,
                       VARIANT outputObject);

                                        HRESULT ( __stdcall *get_data )(
            IXMLDOMComment * This,
                                BSTR *data);

                                        HRESULT ( __stdcall *put_data )(
            IXMLDOMComment * This,
                       BSTR data);

                                        HRESULT ( __stdcall *get_length )(
            IXMLDOMComment * This,
                                long *dataLength);

                               HRESULT ( __stdcall *substringData )(
            IXMLDOMComment * This,
                       long offset,
                       long count,
                                BSTR *data);

                               HRESULT ( __stdcall *appendData )(
            IXMLDOMComment * This,
                       BSTR data);

                               HRESULT ( __stdcall *insertData )(
            IXMLDOMComment * This,
                       long offset,
                       BSTR data);

                               HRESULT ( __stdcall *deleteData )(
            IXMLDOMComment * This,
                       long offset,
                       long count);

                               HRESULT ( __stdcall *replaceData )(
            IXMLDOMComment * This,
                       long offset,
                       long count,
                       BSTR data);


    } IXMLDOMCommentVtbl;

    struct IXMLDOMComment
    {
                   struct IXMLDOMCommentVtbl *lpVtbl;
    };
#line 4891 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/msxml.h"
extern const IID IID_IXMLDOMProcessingInstruction;
#line 4913 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/msxml.h"
    typedef struct IXMLDOMProcessingInstructionVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IXMLDOMProcessingInstruction * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IXMLDOMProcessingInstruction * This);

        ULONG ( __stdcall *Release )(
            IXMLDOMProcessingInstruction * This);

        HRESULT ( __stdcall *GetTypeInfoCount )(
            IXMLDOMProcessingInstruction * This,
                        UINT *pctinfo);

        HRESULT ( __stdcall *GetTypeInfo )(
            IXMLDOMProcessingInstruction * This,
                       UINT iTInfo,
                       LCID lcid,
                        ITypeInfo **ppTInfo);

        HRESULT ( __stdcall *GetIDsOfNames )(
            IXMLDOMProcessingInstruction * This,
                       const IID * const riid,
                                LPOLESTR *rgszNames,
                              UINT cNames,
                       LCID lcid,
                                 DISPID *rgDispId);

                      HRESULT ( __stdcall *Invoke )(
            IXMLDOMProcessingInstruction * This,

                  DISPID dispIdMember,

                  const IID * const riid,

                  LCID lcid,

                  WORD wFlags,

                  DISPPARAMS *pDispParams,

                       VARIANT *pVarResult,

                       EXCEPINFO *pExcepInfo,

                       UINT *puArgErr);

                                        HRESULT ( __stdcall *get_nodeName )(
            IXMLDOMProcessingInstruction * This,
                                BSTR *name);

                                        HRESULT ( __stdcall *get_nodeValue )(
            IXMLDOMProcessingInstruction * This,
                                VARIANT *value);

                                        HRESULT ( __stdcall *put_nodeValue )(
            IXMLDOMProcessingInstruction * This,
                       VARIANT value);

                                        HRESULT ( __stdcall *get_nodeType )(
            IXMLDOMProcessingInstruction * This,
                                DOMNodeType *type);

                                        HRESULT ( __stdcall *get_parentNode )(
            IXMLDOMProcessingInstruction * This,
                                IXMLDOMNode **parent);

                                        HRESULT ( __stdcall *get_childNodes )(
            IXMLDOMProcessingInstruction * This,
                                IXMLDOMNodeList **childList);

                                        HRESULT ( __stdcall *get_firstChild )(
            IXMLDOMProcessingInstruction * This,
                                IXMLDOMNode **firstChild);

                                        HRESULT ( __stdcall *get_lastChild )(
            IXMLDOMProcessingInstruction * This,
                                IXMLDOMNode **lastChild);

                                        HRESULT ( __stdcall *get_previousSibling )(
            IXMLDOMProcessingInstruction * This,
                                IXMLDOMNode **previousSibling);

                                        HRESULT ( __stdcall *get_nextSibling )(
            IXMLDOMProcessingInstruction * This,
                                IXMLDOMNode **nextSibling);

                                        HRESULT ( __stdcall *get_attributes )(
            IXMLDOMProcessingInstruction * This,
                                IXMLDOMNamedNodeMap **attributeMap);

                               HRESULT ( __stdcall *insertBefore )(
            IXMLDOMProcessingInstruction * This,
                       IXMLDOMNode *newChild,
                       VARIANT refChild,
                                IXMLDOMNode **outNewChild);

                               HRESULT ( __stdcall *replaceChild )(
            IXMLDOMProcessingInstruction * This,
                       IXMLDOMNode *newChild,
                       IXMLDOMNode *oldChild,
                                IXMLDOMNode **outOldChild);

                               HRESULT ( __stdcall *removeChild )(
            IXMLDOMProcessingInstruction * This,
                       IXMLDOMNode *childNode,
                                IXMLDOMNode **oldChild);

                               HRESULT ( __stdcall *appendChild )(
            IXMLDOMProcessingInstruction * This,
                       IXMLDOMNode *newChild,
                                IXMLDOMNode **outNewChild);

                               HRESULT ( __stdcall *hasChildNodes )(
            IXMLDOMProcessingInstruction * This,
                                VARIANT_BOOL *hasChild);

                                        HRESULT ( __stdcall *get_ownerDocument )(
            IXMLDOMProcessingInstruction * This,
                                IXMLDOMDocument **XMLDOMDocument);

                               HRESULT ( __stdcall *cloneNode )(
            IXMLDOMProcessingInstruction * This,
                       VARIANT_BOOL deep,
                                IXMLDOMNode **cloneRoot);

                                        HRESULT ( __stdcall *get_nodeTypeString )(
            IXMLDOMProcessingInstruction * This,
                                BSTR *nodeType);

                                        HRESULT ( __stdcall *get_text )(
            IXMLDOMProcessingInstruction * This,
                                BSTR *text);

                                        HRESULT ( __stdcall *put_text )(
            IXMLDOMProcessingInstruction * This,
                       BSTR text);

                                        HRESULT ( __stdcall *get_specified )(
            IXMLDOMProcessingInstruction * This,
                                VARIANT_BOOL *isSpecified);

                                        HRESULT ( __stdcall *get_definition )(
            IXMLDOMProcessingInstruction * This,
                                IXMLDOMNode **definitionNode);

                                        HRESULT ( __stdcall *get_nodeTypedValue )(
            IXMLDOMProcessingInstruction * This,
                                VARIANT *typedValue);

                                        HRESULT ( __stdcall *put_nodeTypedValue )(
            IXMLDOMProcessingInstruction * This,
                       VARIANT typedValue);

                                        HRESULT ( __stdcall *get_dataType )(
            IXMLDOMProcessingInstruction * This,
                                VARIANT *dataTypeName);

                                        HRESULT ( __stdcall *put_dataType )(
            IXMLDOMProcessingInstruction * This,
                       BSTR dataTypeName);

                                        HRESULT ( __stdcall *get_xml )(
            IXMLDOMProcessingInstruction * This,
                                BSTR *xmlString);

                               HRESULT ( __stdcall *transformNode )(
            IXMLDOMProcessingInstruction * This,
                       IXMLDOMNode *stylesheet,
                                BSTR *xmlString);

                               HRESULT ( __stdcall *selectNodes )(
            IXMLDOMProcessingInstruction * This,
                       BSTR queryString,
                                IXMLDOMNodeList **resultList);

                               HRESULT ( __stdcall *selectSingleNode )(
            IXMLDOMProcessingInstruction * This,
                       BSTR queryString,
                                IXMLDOMNode **resultNode);

                                        HRESULT ( __stdcall *get_parsed )(
            IXMLDOMProcessingInstruction * This,
                                VARIANT_BOOL *isParsed);

                                        HRESULT ( __stdcall *get_namespaceURI )(
            IXMLDOMProcessingInstruction * This,
                                BSTR *namespaceURI);

                                        HRESULT ( __stdcall *get_prefix )(
            IXMLDOMProcessingInstruction * This,
                                BSTR *prefixString);

                                        HRESULT ( __stdcall *get_baseName )(
            IXMLDOMProcessingInstruction * This,
                                BSTR *nameString);

                               HRESULT ( __stdcall *transformNodeToObject )(
            IXMLDOMProcessingInstruction * This,
                       IXMLDOMNode *stylesheet,
                       VARIANT outputObject);

                                        HRESULT ( __stdcall *get_target )(
            IXMLDOMProcessingInstruction * This,
                                BSTR *name);

                                        HRESULT ( __stdcall *get_data )(
            IXMLDOMProcessingInstruction * This,
                                BSTR *value);

                                        HRESULT ( __stdcall *put_data )(
            IXMLDOMProcessingInstruction * This,
                       BSTR value);


    } IXMLDOMProcessingInstructionVtbl;

    struct IXMLDOMProcessingInstruction
    {
                   struct IXMLDOMProcessingInstructionVtbl *lpVtbl;
    };
#line 5305 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/msxml.h"
extern const IID IID_IXMLDOMCDATASection;
#line 5318 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/msxml.h"
    typedef struct IXMLDOMCDATASectionVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IXMLDOMCDATASection * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IXMLDOMCDATASection * This);

        ULONG ( __stdcall *Release )(
            IXMLDOMCDATASection * This);

        HRESULT ( __stdcall *GetTypeInfoCount )(
            IXMLDOMCDATASection * This,
                        UINT *pctinfo);

        HRESULT ( __stdcall *GetTypeInfo )(
            IXMLDOMCDATASection * This,
                       UINT iTInfo,
                       LCID lcid,
                        ITypeInfo **ppTInfo);

        HRESULT ( __stdcall *GetIDsOfNames )(
            IXMLDOMCDATASection * This,
                       const IID * const riid,
                                LPOLESTR *rgszNames,
                              UINT cNames,
                       LCID lcid,
                                 DISPID *rgDispId);

                      HRESULT ( __stdcall *Invoke )(
            IXMLDOMCDATASection * This,

                  DISPID dispIdMember,

                  const IID * const riid,

                  LCID lcid,

                  WORD wFlags,

                  DISPPARAMS *pDispParams,

                       VARIANT *pVarResult,

                       EXCEPINFO *pExcepInfo,

                       UINT *puArgErr);

                                        HRESULT ( __stdcall *get_nodeName )(
            IXMLDOMCDATASection * This,
                                BSTR *name);

                                        HRESULT ( __stdcall *get_nodeValue )(
            IXMLDOMCDATASection * This,
                                VARIANT *value);

                                        HRESULT ( __stdcall *put_nodeValue )(
            IXMLDOMCDATASection * This,
                       VARIANT value);

                                        HRESULT ( __stdcall *get_nodeType )(
            IXMLDOMCDATASection * This,
                                DOMNodeType *type);

                                        HRESULT ( __stdcall *get_parentNode )(
            IXMLDOMCDATASection * This,
                                IXMLDOMNode **parent);

                                        HRESULT ( __stdcall *get_childNodes )(
            IXMLDOMCDATASection * This,
                                IXMLDOMNodeList **childList);

                                        HRESULT ( __stdcall *get_firstChild )(
            IXMLDOMCDATASection * This,
                                IXMLDOMNode **firstChild);

                                        HRESULT ( __stdcall *get_lastChild )(
            IXMLDOMCDATASection * This,
                                IXMLDOMNode **lastChild);

                                        HRESULT ( __stdcall *get_previousSibling )(
            IXMLDOMCDATASection * This,
                                IXMLDOMNode **previousSibling);

                                        HRESULT ( __stdcall *get_nextSibling )(
            IXMLDOMCDATASection * This,
                                IXMLDOMNode **nextSibling);

                                        HRESULT ( __stdcall *get_attributes )(
            IXMLDOMCDATASection * This,
                                IXMLDOMNamedNodeMap **attributeMap);

                               HRESULT ( __stdcall *insertBefore )(
            IXMLDOMCDATASection * This,
                       IXMLDOMNode *newChild,
                       VARIANT refChild,
                                IXMLDOMNode **outNewChild);

                               HRESULT ( __stdcall *replaceChild )(
            IXMLDOMCDATASection * This,
                       IXMLDOMNode *newChild,
                       IXMLDOMNode *oldChild,
                                IXMLDOMNode **outOldChild);

                               HRESULT ( __stdcall *removeChild )(
            IXMLDOMCDATASection * This,
                       IXMLDOMNode *childNode,
                                IXMLDOMNode **oldChild);

                               HRESULT ( __stdcall *appendChild )(
            IXMLDOMCDATASection * This,
                       IXMLDOMNode *newChild,
                                IXMLDOMNode **outNewChild);

                               HRESULT ( __stdcall *hasChildNodes )(
            IXMLDOMCDATASection * This,
                                VARIANT_BOOL *hasChild);

                                        HRESULT ( __stdcall *get_ownerDocument )(
            IXMLDOMCDATASection * This,
                                IXMLDOMDocument **XMLDOMDocument);

                               HRESULT ( __stdcall *cloneNode )(
            IXMLDOMCDATASection * This,
                       VARIANT_BOOL deep,
                                IXMLDOMNode **cloneRoot);

                                        HRESULT ( __stdcall *get_nodeTypeString )(
            IXMLDOMCDATASection * This,
                                BSTR *nodeType);

                                        HRESULT ( __stdcall *get_text )(
            IXMLDOMCDATASection * This,
                                BSTR *text);

                                        HRESULT ( __stdcall *put_text )(
            IXMLDOMCDATASection * This,
                       BSTR text);

                                        HRESULT ( __stdcall *get_specified )(
            IXMLDOMCDATASection * This,
                                VARIANT_BOOL *isSpecified);

                                        HRESULT ( __stdcall *get_definition )(
            IXMLDOMCDATASection * This,
                                IXMLDOMNode **definitionNode);

                                        HRESULT ( __stdcall *get_nodeTypedValue )(
            IXMLDOMCDATASection * This,
                                VARIANT *typedValue);

                                        HRESULT ( __stdcall *put_nodeTypedValue )(
            IXMLDOMCDATASection * This,
                       VARIANT typedValue);

                                        HRESULT ( __stdcall *get_dataType )(
            IXMLDOMCDATASection * This,
                                VARIANT *dataTypeName);

                                        HRESULT ( __stdcall *put_dataType )(
            IXMLDOMCDATASection * This,
                       BSTR dataTypeName);

                                        HRESULT ( __stdcall *get_xml )(
            IXMLDOMCDATASection * This,
                                BSTR *xmlString);

                               HRESULT ( __stdcall *transformNode )(
            IXMLDOMCDATASection * This,
                       IXMLDOMNode *stylesheet,
                                BSTR *xmlString);

                               HRESULT ( __stdcall *selectNodes )(
            IXMLDOMCDATASection * This,
                       BSTR queryString,
                                IXMLDOMNodeList **resultList);

                               HRESULT ( __stdcall *selectSingleNode )(
            IXMLDOMCDATASection * This,
                       BSTR queryString,
                                IXMLDOMNode **resultNode);

                                        HRESULT ( __stdcall *get_parsed )(
            IXMLDOMCDATASection * This,
                                VARIANT_BOOL *isParsed);

                                        HRESULT ( __stdcall *get_namespaceURI )(
            IXMLDOMCDATASection * This,
                                BSTR *namespaceURI);

                                        HRESULT ( __stdcall *get_prefix )(
            IXMLDOMCDATASection * This,
                                BSTR *prefixString);

                                        HRESULT ( __stdcall *get_baseName )(
            IXMLDOMCDATASection * This,
                                BSTR *nameString);

                               HRESULT ( __stdcall *transformNodeToObject )(
            IXMLDOMCDATASection * This,
                       IXMLDOMNode *stylesheet,
                       VARIANT outputObject);

                                        HRESULT ( __stdcall *get_data )(
            IXMLDOMCDATASection * This,
                                BSTR *data);

                                        HRESULT ( __stdcall *put_data )(
            IXMLDOMCDATASection * This,
                       BSTR data);

                                        HRESULT ( __stdcall *get_length )(
            IXMLDOMCDATASection * This,
                                long *dataLength);

                               HRESULT ( __stdcall *substringData )(
            IXMLDOMCDATASection * This,
                       long offset,
                       long count,
                                BSTR *data);

                               HRESULT ( __stdcall *appendData )(
            IXMLDOMCDATASection * This,
                       BSTR data);

                               HRESULT ( __stdcall *insertData )(
            IXMLDOMCDATASection * This,
                       long offset,
                       BSTR data);

                               HRESULT ( __stdcall *deleteData )(
            IXMLDOMCDATASection * This,
                       long offset,
                       long count);

                               HRESULT ( __stdcall *replaceData )(
            IXMLDOMCDATASection * This,
                       long offset,
                       long count,
                       BSTR data);

                               HRESULT ( __stdcall *splitText )(
            IXMLDOMCDATASection * This,
                       long offset,
                                IXMLDOMText **rightHandTextNode);


    } IXMLDOMCDATASectionVtbl;

    struct IXMLDOMCDATASection
    {
                   struct IXMLDOMCDATASectionVtbl *lpVtbl;
    };
#line 5761 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/msxml.h"
extern const IID IID_IXMLDOMDocumentType;
#line 5783 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/msxml.h"
    typedef struct IXMLDOMDocumentTypeVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IXMLDOMDocumentType * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IXMLDOMDocumentType * This);

        ULONG ( __stdcall *Release )(
            IXMLDOMDocumentType * This);

        HRESULT ( __stdcall *GetTypeInfoCount )(
            IXMLDOMDocumentType * This,
                        UINT *pctinfo);

        HRESULT ( __stdcall *GetTypeInfo )(
            IXMLDOMDocumentType * This,
                       UINT iTInfo,
                       LCID lcid,
                        ITypeInfo **ppTInfo);

        HRESULT ( __stdcall *GetIDsOfNames )(
            IXMLDOMDocumentType * This,
                       const IID * const riid,
                                LPOLESTR *rgszNames,
                              UINT cNames,
                       LCID lcid,
                                 DISPID *rgDispId);

                      HRESULT ( __stdcall *Invoke )(
            IXMLDOMDocumentType * This,

                  DISPID dispIdMember,

                  const IID * const riid,

                  LCID lcid,

                  WORD wFlags,

                  DISPPARAMS *pDispParams,

                       VARIANT *pVarResult,

                       EXCEPINFO *pExcepInfo,

                       UINT *puArgErr);

                                        HRESULT ( __stdcall *get_nodeName )(
            IXMLDOMDocumentType * This,
                                BSTR *name);

                                        HRESULT ( __stdcall *get_nodeValue )(
            IXMLDOMDocumentType * This,
                                VARIANT *value);

                                        HRESULT ( __stdcall *put_nodeValue )(
            IXMLDOMDocumentType * This,
                       VARIANT value);

                                        HRESULT ( __stdcall *get_nodeType )(
            IXMLDOMDocumentType * This,
                                DOMNodeType *type);

                                        HRESULT ( __stdcall *get_parentNode )(
            IXMLDOMDocumentType * This,
                                IXMLDOMNode **parent);

                                        HRESULT ( __stdcall *get_childNodes )(
            IXMLDOMDocumentType * This,
                                IXMLDOMNodeList **childList);

                                        HRESULT ( __stdcall *get_firstChild )(
            IXMLDOMDocumentType * This,
                                IXMLDOMNode **firstChild);

                                        HRESULT ( __stdcall *get_lastChild )(
            IXMLDOMDocumentType * This,
                                IXMLDOMNode **lastChild);

                                        HRESULT ( __stdcall *get_previousSibling )(
            IXMLDOMDocumentType * This,
                                IXMLDOMNode **previousSibling);

                                        HRESULT ( __stdcall *get_nextSibling )(
            IXMLDOMDocumentType * This,
                                IXMLDOMNode **nextSibling);

                                        HRESULT ( __stdcall *get_attributes )(
            IXMLDOMDocumentType * This,
                                IXMLDOMNamedNodeMap **attributeMap);

                               HRESULT ( __stdcall *insertBefore )(
            IXMLDOMDocumentType * This,
                       IXMLDOMNode *newChild,
                       VARIANT refChild,
                                IXMLDOMNode **outNewChild);

                               HRESULT ( __stdcall *replaceChild )(
            IXMLDOMDocumentType * This,
                       IXMLDOMNode *newChild,
                       IXMLDOMNode *oldChild,
                                IXMLDOMNode **outOldChild);

                               HRESULT ( __stdcall *removeChild )(
            IXMLDOMDocumentType * This,
                       IXMLDOMNode *childNode,
                                IXMLDOMNode **oldChild);

                               HRESULT ( __stdcall *appendChild )(
            IXMLDOMDocumentType * This,
                       IXMLDOMNode *newChild,
                                IXMLDOMNode **outNewChild);

                               HRESULT ( __stdcall *hasChildNodes )(
            IXMLDOMDocumentType * This,
                                VARIANT_BOOL *hasChild);

                                        HRESULT ( __stdcall *get_ownerDocument )(
            IXMLDOMDocumentType * This,
                                IXMLDOMDocument **XMLDOMDocument);

                               HRESULT ( __stdcall *cloneNode )(
            IXMLDOMDocumentType * This,
                       VARIANT_BOOL deep,
                                IXMLDOMNode **cloneRoot);

                                        HRESULT ( __stdcall *get_nodeTypeString )(
            IXMLDOMDocumentType * This,
                                BSTR *nodeType);

                                        HRESULT ( __stdcall *get_text )(
            IXMLDOMDocumentType * This,
                                BSTR *text);

                                        HRESULT ( __stdcall *put_text )(
            IXMLDOMDocumentType * This,
                       BSTR text);

                                        HRESULT ( __stdcall *get_specified )(
            IXMLDOMDocumentType * This,
                                VARIANT_BOOL *isSpecified);

                                        HRESULT ( __stdcall *get_definition )(
            IXMLDOMDocumentType * This,
                                IXMLDOMNode **definitionNode);

                                        HRESULT ( __stdcall *get_nodeTypedValue )(
            IXMLDOMDocumentType * This,
                                VARIANT *typedValue);

                                        HRESULT ( __stdcall *put_nodeTypedValue )(
            IXMLDOMDocumentType * This,
                       VARIANT typedValue);

                                        HRESULT ( __stdcall *get_dataType )(
            IXMLDOMDocumentType * This,
                                VARIANT *dataTypeName);

                                        HRESULT ( __stdcall *put_dataType )(
            IXMLDOMDocumentType * This,
                       BSTR dataTypeName);

                                        HRESULT ( __stdcall *get_xml )(
            IXMLDOMDocumentType * This,
                                BSTR *xmlString);

                               HRESULT ( __stdcall *transformNode )(
            IXMLDOMDocumentType * This,
                       IXMLDOMNode *stylesheet,
                                BSTR *xmlString);

                               HRESULT ( __stdcall *selectNodes )(
            IXMLDOMDocumentType * This,
                       BSTR queryString,
                                IXMLDOMNodeList **resultList);

                               HRESULT ( __stdcall *selectSingleNode )(
            IXMLDOMDocumentType * This,
                       BSTR queryString,
                                IXMLDOMNode **resultNode);

                                        HRESULT ( __stdcall *get_parsed )(
            IXMLDOMDocumentType * This,
                                VARIANT_BOOL *isParsed);

                                        HRESULT ( __stdcall *get_namespaceURI )(
            IXMLDOMDocumentType * This,
                                BSTR *namespaceURI);

                                        HRESULT ( __stdcall *get_prefix )(
            IXMLDOMDocumentType * This,
                                BSTR *prefixString);

                                        HRESULT ( __stdcall *get_baseName )(
            IXMLDOMDocumentType * This,
                                BSTR *nameString);

                               HRESULT ( __stdcall *transformNodeToObject )(
            IXMLDOMDocumentType * This,
                       IXMLDOMNode *stylesheet,
                       VARIANT outputObject);

                                        HRESULT ( __stdcall *get_name )(
            IXMLDOMDocumentType * This,
                                BSTR *rootName);

                                        HRESULT ( __stdcall *get_entities )(
            IXMLDOMDocumentType * This,
                                IXMLDOMNamedNodeMap **entityMap);

                                        HRESULT ( __stdcall *get_notations )(
            IXMLDOMDocumentType * This,
                                IXMLDOMNamedNodeMap **notationMap);


    } IXMLDOMDocumentTypeVtbl;

    struct IXMLDOMDocumentType
    {
                   struct IXMLDOMDocumentTypeVtbl *lpVtbl;
    };
#line 6175 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/msxml.h"
extern const IID IID_IXMLDOMNotation;
#line 6194 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/msxml.h"
    typedef struct IXMLDOMNotationVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IXMLDOMNotation * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IXMLDOMNotation * This);

        ULONG ( __stdcall *Release )(
            IXMLDOMNotation * This);

        HRESULT ( __stdcall *GetTypeInfoCount )(
            IXMLDOMNotation * This,
                        UINT *pctinfo);

        HRESULT ( __stdcall *GetTypeInfo )(
            IXMLDOMNotation * This,
                       UINT iTInfo,
                       LCID lcid,
                        ITypeInfo **ppTInfo);

        HRESULT ( __stdcall *GetIDsOfNames )(
            IXMLDOMNotation * This,
                       const IID * const riid,
                                LPOLESTR *rgszNames,
                              UINT cNames,
                       LCID lcid,
                                 DISPID *rgDispId);

                      HRESULT ( __stdcall *Invoke )(
            IXMLDOMNotation * This,

                  DISPID dispIdMember,

                  const IID * const riid,

                  LCID lcid,

                  WORD wFlags,

                  DISPPARAMS *pDispParams,

                       VARIANT *pVarResult,

                       EXCEPINFO *pExcepInfo,

                       UINT *puArgErr);

                                        HRESULT ( __stdcall *get_nodeName )(
            IXMLDOMNotation * This,
                                BSTR *name);

                                        HRESULT ( __stdcall *get_nodeValue )(
            IXMLDOMNotation * This,
                                VARIANT *value);

                                        HRESULT ( __stdcall *put_nodeValue )(
            IXMLDOMNotation * This,
                       VARIANT value);

                                        HRESULT ( __stdcall *get_nodeType )(
            IXMLDOMNotation * This,
                                DOMNodeType *type);

                                        HRESULT ( __stdcall *get_parentNode )(
            IXMLDOMNotation * This,
                                IXMLDOMNode **parent);

                                        HRESULT ( __stdcall *get_childNodes )(
            IXMLDOMNotation * This,
                                IXMLDOMNodeList **childList);

                                        HRESULT ( __stdcall *get_firstChild )(
            IXMLDOMNotation * This,
                                IXMLDOMNode **firstChild);

                                        HRESULT ( __stdcall *get_lastChild )(
            IXMLDOMNotation * This,
                                IXMLDOMNode **lastChild);

                                        HRESULT ( __stdcall *get_previousSibling )(
            IXMLDOMNotation * This,
                                IXMLDOMNode **previousSibling);

                                        HRESULT ( __stdcall *get_nextSibling )(
            IXMLDOMNotation * This,
                                IXMLDOMNode **nextSibling);

                                        HRESULT ( __stdcall *get_attributes )(
            IXMLDOMNotation * This,
                                IXMLDOMNamedNodeMap **attributeMap);

                               HRESULT ( __stdcall *insertBefore )(
            IXMLDOMNotation * This,
                       IXMLDOMNode *newChild,
                       VARIANT refChild,
                                IXMLDOMNode **outNewChild);

                               HRESULT ( __stdcall *replaceChild )(
            IXMLDOMNotation * This,
                       IXMLDOMNode *newChild,
                       IXMLDOMNode *oldChild,
                                IXMLDOMNode **outOldChild);

                               HRESULT ( __stdcall *removeChild )(
            IXMLDOMNotation * This,
                       IXMLDOMNode *childNode,
                                IXMLDOMNode **oldChild);

                               HRESULT ( __stdcall *appendChild )(
            IXMLDOMNotation * This,
                       IXMLDOMNode *newChild,
                                IXMLDOMNode **outNewChild);

                               HRESULT ( __stdcall *hasChildNodes )(
            IXMLDOMNotation * This,
                                VARIANT_BOOL *hasChild);

                                        HRESULT ( __stdcall *get_ownerDocument )(
            IXMLDOMNotation * This,
                                IXMLDOMDocument **XMLDOMDocument);

                               HRESULT ( __stdcall *cloneNode )(
            IXMLDOMNotation * This,
                       VARIANT_BOOL deep,
                                IXMLDOMNode **cloneRoot);

                                        HRESULT ( __stdcall *get_nodeTypeString )(
            IXMLDOMNotation * This,
                                BSTR *nodeType);

                                        HRESULT ( __stdcall *get_text )(
            IXMLDOMNotation * This,
                                BSTR *text);

                                        HRESULT ( __stdcall *put_text )(
            IXMLDOMNotation * This,
                       BSTR text);

                                        HRESULT ( __stdcall *get_specified )(
            IXMLDOMNotation * This,
                                VARIANT_BOOL *isSpecified);

                                        HRESULT ( __stdcall *get_definition )(
            IXMLDOMNotation * This,
                                IXMLDOMNode **definitionNode);

                                        HRESULT ( __stdcall *get_nodeTypedValue )(
            IXMLDOMNotation * This,
                                VARIANT *typedValue);

                                        HRESULT ( __stdcall *put_nodeTypedValue )(
            IXMLDOMNotation * This,
                       VARIANT typedValue);

                                        HRESULT ( __stdcall *get_dataType )(
            IXMLDOMNotation * This,
                                VARIANT *dataTypeName);

                                        HRESULT ( __stdcall *put_dataType )(
            IXMLDOMNotation * This,
                       BSTR dataTypeName);

                                        HRESULT ( __stdcall *get_xml )(
            IXMLDOMNotation * This,
                                BSTR *xmlString);

                               HRESULT ( __stdcall *transformNode )(
            IXMLDOMNotation * This,
                       IXMLDOMNode *stylesheet,
                                BSTR *xmlString);

                               HRESULT ( __stdcall *selectNodes )(
            IXMLDOMNotation * This,
                       BSTR queryString,
                                IXMLDOMNodeList **resultList);

                               HRESULT ( __stdcall *selectSingleNode )(
            IXMLDOMNotation * This,
                       BSTR queryString,
                                IXMLDOMNode **resultNode);

                                        HRESULT ( __stdcall *get_parsed )(
            IXMLDOMNotation * This,
                                VARIANT_BOOL *isParsed);

                                        HRESULT ( __stdcall *get_namespaceURI )(
            IXMLDOMNotation * This,
                                BSTR *namespaceURI);

                                        HRESULT ( __stdcall *get_prefix )(
            IXMLDOMNotation * This,
                                BSTR *prefixString);

                                        HRESULT ( __stdcall *get_baseName )(
            IXMLDOMNotation * This,
                                BSTR *nameString);

                               HRESULT ( __stdcall *transformNodeToObject )(
            IXMLDOMNotation * This,
                       IXMLDOMNode *stylesheet,
                       VARIANT outputObject);

                                        HRESULT ( __stdcall *get_publicId )(
            IXMLDOMNotation * This,
                                VARIANT *publicID);

                                        HRESULT ( __stdcall *get_systemId )(
            IXMLDOMNotation * This,
                                VARIANT *systemID);


    } IXMLDOMNotationVtbl;

    struct IXMLDOMNotation
    {
                   struct IXMLDOMNotationVtbl *lpVtbl;
    };
#line 6579 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/msxml.h"
extern const IID IID_IXMLDOMEntity;
#line 6601 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/msxml.h"
    typedef struct IXMLDOMEntityVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IXMLDOMEntity * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IXMLDOMEntity * This);

        ULONG ( __stdcall *Release )(
            IXMLDOMEntity * This);

        HRESULT ( __stdcall *GetTypeInfoCount )(
            IXMLDOMEntity * This,
                        UINT *pctinfo);

        HRESULT ( __stdcall *GetTypeInfo )(
            IXMLDOMEntity * This,
                       UINT iTInfo,
                       LCID lcid,
                        ITypeInfo **ppTInfo);

        HRESULT ( __stdcall *GetIDsOfNames )(
            IXMLDOMEntity * This,
                       const IID * const riid,
                                LPOLESTR *rgszNames,
                              UINT cNames,
                       LCID lcid,
                                 DISPID *rgDispId);

                      HRESULT ( __stdcall *Invoke )(
            IXMLDOMEntity * This,

                  DISPID dispIdMember,

                  const IID * const riid,

                  LCID lcid,

                  WORD wFlags,

                  DISPPARAMS *pDispParams,

                       VARIANT *pVarResult,

                       EXCEPINFO *pExcepInfo,

                       UINT *puArgErr);

                                        HRESULT ( __stdcall *get_nodeName )(
            IXMLDOMEntity * This,
                                BSTR *name);

                                        HRESULT ( __stdcall *get_nodeValue )(
            IXMLDOMEntity * This,
                                VARIANT *value);

                                        HRESULT ( __stdcall *put_nodeValue )(
            IXMLDOMEntity * This,
                       VARIANT value);

                                        HRESULT ( __stdcall *get_nodeType )(
            IXMLDOMEntity * This,
                                DOMNodeType *type);

                                        HRESULT ( __stdcall *get_parentNode )(
            IXMLDOMEntity * This,
                                IXMLDOMNode **parent);

                                        HRESULT ( __stdcall *get_childNodes )(
            IXMLDOMEntity * This,
                                IXMLDOMNodeList **childList);

                                        HRESULT ( __stdcall *get_firstChild )(
            IXMLDOMEntity * This,
                                IXMLDOMNode **firstChild);

                                        HRESULT ( __stdcall *get_lastChild )(
            IXMLDOMEntity * This,
                                IXMLDOMNode **lastChild);

                                        HRESULT ( __stdcall *get_previousSibling )(
            IXMLDOMEntity * This,
                                IXMLDOMNode **previousSibling);

                                        HRESULT ( __stdcall *get_nextSibling )(
            IXMLDOMEntity * This,
                                IXMLDOMNode **nextSibling);

                                        HRESULT ( __stdcall *get_attributes )(
            IXMLDOMEntity * This,
                                IXMLDOMNamedNodeMap **attributeMap);

                               HRESULT ( __stdcall *insertBefore )(
            IXMLDOMEntity * This,
                       IXMLDOMNode *newChild,
                       VARIANT refChild,
                                IXMLDOMNode **outNewChild);

                               HRESULT ( __stdcall *replaceChild )(
            IXMLDOMEntity * This,
                       IXMLDOMNode *newChild,
                       IXMLDOMNode *oldChild,
                                IXMLDOMNode **outOldChild);

                               HRESULT ( __stdcall *removeChild )(
            IXMLDOMEntity * This,
                       IXMLDOMNode *childNode,
                                IXMLDOMNode **oldChild);

                               HRESULT ( __stdcall *appendChild )(
            IXMLDOMEntity * This,
                       IXMLDOMNode *newChild,
                                IXMLDOMNode **outNewChild);

                               HRESULT ( __stdcall *hasChildNodes )(
            IXMLDOMEntity * This,
                                VARIANT_BOOL *hasChild);

                                        HRESULT ( __stdcall *get_ownerDocument )(
            IXMLDOMEntity * This,
                                IXMLDOMDocument **XMLDOMDocument);

                               HRESULT ( __stdcall *cloneNode )(
            IXMLDOMEntity * This,
                       VARIANT_BOOL deep,
                                IXMLDOMNode **cloneRoot);

                                        HRESULT ( __stdcall *get_nodeTypeString )(
            IXMLDOMEntity * This,
                                BSTR *nodeType);

                                        HRESULT ( __stdcall *get_text )(
            IXMLDOMEntity * This,
                                BSTR *text);

                                        HRESULT ( __stdcall *put_text )(
            IXMLDOMEntity * This,
                       BSTR text);

                                        HRESULT ( __stdcall *get_specified )(
            IXMLDOMEntity * This,
                                VARIANT_BOOL *isSpecified);

                                        HRESULT ( __stdcall *get_definition )(
            IXMLDOMEntity * This,
                                IXMLDOMNode **definitionNode);

                                        HRESULT ( __stdcall *get_nodeTypedValue )(
            IXMLDOMEntity * This,
                                VARIANT *typedValue);

                                        HRESULT ( __stdcall *put_nodeTypedValue )(
            IXMLDOMEntity * This,
                       VARIANT typedValue);

                                        HRESULT ( __stdcall *get_dataType )(
            IXMLDOMEntity * This,
                                VARIANT *dataTypeName);

                                        HRESULT ( __stdcall *put_dataType )(
            IXMLDOMEntity * This,
                       BSTR dataTypeName);

                                        HRESULT ( __stdcall *get_xml )(
            IXMLDOMEntity * This,
                                BSTR *xmlString);

                               HRESULT ( __stdcall *transformNode )(
            IXMLDOMEntity * This,
                       IXMLDOMNode *stylesheet,
                                BSTR *xmlString);

                               HRESULT ( __stdcall *selectNodes )(
            IXMLDOMEntity * This,
                       BSTR queryString,
                                IXMLDOMNodeList **resultList);

                               HRESULT ( __stdcall *selectSingleNode )(
            IXMLDOMEntity * This,
                       BSTR queryString,
                                IXMLDOMNode **resultNode);

                                        HRESULT ( __stdcall *get_parsed )(
            IXMLDOMEntity * This,
                                VARIANT_BOOL *isParsed);

                                        HRESULT ( __stdcall *get_namespaceURI )(
            IXMLDOMEntity * This,
                                BSTR *namespaceURI);

                                        HRESULT ( __stdcall *get_prefix )(
            IXMLDOMEntity * This,
                                BSTR *prefixString);

                                        HRESULT ( __stdcall *get_baseName )(
            IXMLDOMEntity * This,
                                BSTR *nameString);

                               HRESULT ( __stdcall *transformNodeToObject )(
            IXMLDOMEntity * This,
                       IXMLDOMNode *stylesheet,
                       VARIANT outputObject);

                                        HRESULT ( __stdcall *get_publicId )(
            IXMLDOMEntity * This,
                                VARIANT *publicID);

                                        HRESULT ( __stdcall *get_systemId )(
            IXMLDOMEntity * This,
                                VARIANT *systemID);

                                        HRESULT ( __stdcall *get_notationName )(
            IXMLDOMEntity * This,
                                BSTR *name);


    } IXMLDOMEntityVtbl;

    struct IXMLDOMEntity
    {
                   struct IXMLDOMEntityVtbl *lpVtbl;
    };
#line 6993 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/msxml.h"
extern const IID IID_IXMLDOMEntityReference;
#line 7006 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/msxml.h"
    typedef struct IXMLDOMEntityReferenceVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IXMLDOMEntityReference * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IXMLDOMEntityReference * This);

        ULONG ( __stdcall *Release )(
            IXMLDOMEntityReference * This);

        HRESULT ( __stdcall *GetTypeInfoCount )(
            IXMLDOMEntityReference * This,
                        UINT *pctinfo);

        HRESULT ( __stdcall *GetTypeInfo )(
            IXMLDOMEntityReference * This,
                       UINT iTInfo,
                       LCID lcid,
                        ITypeInfo **ppTInfo);

        HRESULT ( __stdcall *GetIDsOfNames )(
            IXMLDOMEntityReference * This,
                       const IID * const riid,
                                LPOLESTR *rgszNames,
                              UINT cNames,
                       LCID lcid,
                                 DISPID *rgDispId);

                      HRESULT ( __stdcall *Invoke )(
            IXMLDOMEntityReference * This,

                  DISPID dispIdMember,

                  const IID * const riid,

                  LCID lcid,

                  WORD wFlags,

                  DISPPARAMS *pDispParams,

                       VARIANT *pVarResult,

                       EXCEPINFO *pExcepInfo,

                       UINT *puArgErr);

                                        HRESULT ( __stdcall *get_nodeName )(
            IXMLDOMEntityReference * This,
                                BSTR *name);

                                        HRESULT ( __stdcall *get_nodeValue )(
            IXMLDOMEntityReference * This,
                                VARIANT *value);

                                        HRESULT ( __stdcall *put_nodeValue )(
            IXMLDOMEntityReference * This,
                       VARIANT value);

                                        HRESULT ( __stdcall *get_nodeType )(
            IXMLDOMEntityReference * This,
                                DOMNodeType *type);

                                        HRESULT ( __stdcall *get_parentNode )(
            IXMLDOMEntityReference * This,
                                IXMLDOMNode **parent);

                                        HRESULT ( __stdcall *get_childNodes )(
            IXMLDOMEntityReference * This,
                                IXMLDOMNodeList **childList);

                                        HRESULT ( __stdcall *get_firstChild )(
            IXMLDOMEntityReference * This,
                                IXMLDOMNode **firstChild);

                                        HRESULT ( __stdcall *get_lastChild )(
            IXMLDOMEntityReference * This,
                                IXMLDOMNode **lastChild);

                                        HRESULT ( __stdcall *get_previousSibling )(
            IXMLDOMEntityReference * This,
                                IXMLDOMNode **previousSibling);

                                        HRESULT ( __stdcall *get_nextSibling )(
            IXMLDOMEntityReference * This,
                                IXMLDOMNode **nextSibling);

                                        HRESULT ( __stdcall *get_attributes )(
            IXMLDOMEntityReference * This,
                                IXMLDOMNamedNodeMap **attributeMap);

                               HRESULT ( __stdcall *insertBefore )(
            IXMLDOMEntityReference * This,
                       IXMLDOMNode *newChild,
                       VARIANT refChild,
                                IXMLDOMNode **outNewChild);

                               HRESULT ( __stdcall *replaceChild )(
            IXMLDOMEntityReference * This,
                       IXMLDOMNode *newChild,
                       IXMLDOMNode *oldChild,
                                IXMLDOMNode **outOldChild);

                               HRESULT ( __stdcall *removeChild )(
            IXMLDOMEntityReference * This,
                       IXMLDOMNode *childNode,
                                IXMLDOMNode **oldChild);

                               HRESULT ( __stdcall *appendChild )(
            IXMLDOMEntityReference * This,
                       IXMLDOMNode *newChild,
                                IXMLDOMNode **outNewChild);

                               HRESULT ( __stdcall *hasChildNodes )(
            IXMLDOMEntityReference * This,
                                VARIANT_BOOL *hasChild);

                                        HRESULT ( __stdcall *get_ownerDocument )(
            IXMLDOMEntityReference * This,
                                IXMLDOMDocument **XMLDOMDocument);

                               HRESULT ( __stdcall *cloneNode )(
            IXMLDOMEntityReference * This,
                       VARIANT_BOOL deep,
                                IXMLDOMNode **cloneRoot);

                                        HRESULT ( __stdcall *get_nodeTypeString )(
            IXMLDOMEntityReference * This,
                                BSTR *nodeType);

                                        HRESULT ( __stdcall *get_text )(
            IXMLDOMEntityReference * This,
                                BSTR *text);

                                        HRESULT ( __stdcall *put_text )(
            IXMLDOMEntityReference * This,
                       BSTR text);

                                        HRESULT ( __stdcall *get_specified )(
            IXMLDOMEntityReference * This,
                                VARIANT_BOOL *isSpecified);

                                        HRESULT ( __stdcall *get_definition )(
            IXMLDOMEntityReference * This,
                                IXMLDOMNode **definitionNode);

                                        HRESULT ( __stdcall *get_nodeTypedValue )(
            IXMLDOMEntityReference * This,
                                VARIANT *typedValue);

                                        HRESULT ( __stdcall *put_nodeTypedValue )(
            IXMLDOMEntityReference * This,
                       VARIANT typedValue);

                                        HRESULT ( __stdcall *get_dataType )(
            IXMLDOMEntityReference * This,
                                VARIANT *dataTypeName);

                                        HRESULT ( __stdcall *put_dataType )(
            IXMLDOMEntityReference * This,
                       BSTR dataTypeName);

                                        HRESULT ( __stdcall *get_xml )(
            IXMLDOMEntityReference * This,
                                BSTR *xmlString);

                               HRESULT ( __stdcall *transformNode )(
            IXMLDOMEntityReference * This,
                       IXMLDOMNode *stylesheet,
                                BSTR *xmlString);

                               HRESULT ( __stdcall *selectNodes )(
            IXMLDOMEntityReference * This,
                       BSTR queryString,
                                IXMLDOMNodeList **resultList);

                               HRESULT ( __stdcall *selectSingleNode )(
            IXMLDOMEntityReference * This,
                       BSTR queryString,
                                IXMLDOMNode **resultNode);

                                        HRESULT ( __stdcall *get_parsed )(
            IXMLDOMEntityReference * This,
                                VARIANT_BOOL *isParsed);

                                        HRESULT ( __stdcall *get_namespaceURI )(
            IXMLDOMEntityReference * This,
                                BSTR *namespaceURI);

                                        HRESULT ( __stdcall *get_prefix )(
            IXMLDOMEntityReference * This,
                                BSTR *prefixString);

                                        HRESULT ( __stdcall *get_baseName )(
            IXMLDOMEntityReference * This,
                                BSTR *nameString);

                               HRESULT ( __stdcall *transformNodeToObject )(
            IXMLDOMEntityReference * This,
                       IXMLDOMNode *stylesheet,
                       VARIANT outputObject);


    } IXMLDOMEntityReferenceVtbl;

    struct IXMLDOMEntityReference
    {
                   struct IXMLDOMEntityReferenceVtbl *lpVtbl;
    };
#line 7377 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/msxml.h"
extern const IID IID_IXMLDOMParseError;
#line 7411 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/msxml.h"
    typedef struct IXMLDOMParseErrorVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IXMLDOMParseError * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IXMLDOMParseError * This);

        ULONG ( __stdcall *Release )(
            IXMLDOMParseError * This);

        HRESULT ( __stdcall *GetTypeInfoCount )(
            IXMLDOMParseError * This,
                        UINT *pctinfo);

        HRESULT ( __stdcall *GetTypeInfo )(
            IXMLDOMParseError * This,
                       UINT iTInfo,
                       LCID lcid,
                        ITypeInfo **ppTInfo);

        HRESULT ( __stdcall *GetIDsOfNames )(
            IXMLDOMParseError * This,
                       const IID * const riid,
                                LPOLESTR *rgszNames,
                              UINT cNames,
                       LCID lcid,
                                 DISPID *rgDispId);

                      HRESULT ( __stdcall *Invoke )(
            IXMLDOMParseError * This,

                  DISPID dispIdMember,

                  const IID * const riid,

                  LCID lcid,

                  WORD wFlags,

                  DISPPARAMS *pDispParams,

                       VARIANT *pVarResult,

                       EXCEPINFO *pExcepInfo,

                       UINT *puArgErr);

                                        HRESULT ( __stdcall *get_errorCode )(
            IXMLDOMParseError * This,
                                long *errorCode);

                                        HRESULT ( __stdcall *get_url )(
            IXMLDOMParseError * This,
                                BSTR *urlString);

                                        HRESULT ( __stdcall *get_reason )(
            IXMLDOMParseError * This,
                                BSTR *reasonString);

                                        HRESULT ( __stdcall *get_srcText )(
            IXMLDOMParseError * This,
                                BSTR *sourceString);

                                        HRESULT ( __stdcall *get_line )(
            IXMLDOMParseError * This,
                                long *lineNumber);

                                        HRESULT ( __stdcall *get_linepos )(
            IXMLDOMParseError * This,
                                long *linePosition);

                                        HRESULT ( __stdcall *get_filepos )(
            IXMLDOMParseError * This,
                                long *filePosition);


    } IXMLDOMParseErrorVtbl;

    struct IXMLDOMParseError
    {
                   struct IXMLDOMParseErrorVtbl *lpVtbl;
    };
#line 7567 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/msxml.h"
extern const IID IID_IXTLRuntime;
#line 7623 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/msxml.h"
    typedef struct IXTLRuntimeVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IXTLRuntime * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IXTLRuntime * This);

        ULONG ( __stdcall *Release )(
            IXTLRuntime * This);

        HRESULT ( __stdcall *GetTypeInfoCount )(
            IXTLRuntime * This,
                        UINT *pctinfo);

        HRESULT ( __stdcall *GetTypeInfo )(
            IXTLRuntime * This,
                       UINT iTInfo,
                       LCID lcid,
                        ITypeInfo **ppTInfo);

        HRESULT ( __stdcall *GetIDsOfNames )(
            IXTLRuntime * This,
                       const IID * const riid,
                                LPOLESTR *rgszNames,
                              UINT cNames,
                       LCID lcid,
                                 DISPID *rgDispId);

                      HRESULT ( __stdcall *Invoke )(
            IXTLRuntime * This,

                  DISPID dispIdMember,

                  const IID * const riid,

                  LCID lcid,

                  WORD wFlags,

                  DISPPARAMS *pDispParams,

                       VARIANT *pVarResult,

                       EXCEPINFO *pExcepInfo,

                       UINT *puArgErr);

                                        HRESULT ( __stdcall *get_nodeName )(
            IXTLRuntime * This,
                                BSTR *name);

                                        HRESULT ( __stdcall *get_nodeValue )(
            IXTLRuntime * This,
                                VARIANT *value);

                                        HRESULT ( __stdcall *put_nodeValue )(
            IXTLRuntime * This,
                       VARIANT value);

                                        HRESULT ( __stdcall *get_nodeType )(
            IXTLRuntime * This,
                                DOMNodeType *type);

                                        HRESULT ( __stdcall *get_parentNode )(
            IXTLRuntime * This,
                                IXMLDOMNode **parent);

                                        HRESULT ( __stdcall *get_childNodes )(
            IXTLRuntime * This,
                                IXMLDOMNodeList **childList);

                                        HRESULT ( __stdcall *get_firstChild )(
            IXTLRuntime * This,
                                IXMLDOMNode **firstChild);

                                        HRESULT ( __stdcall *get_lastChild )(
            IXTLRuntime * This,
                                IXMLDOMNode **lastChild);

                                        HRESULT ( __stdcall *get_previousSibling )(
            IXTLRuntime * This,
                                IXMLDOMNode **previousSibling);

                                        HRESULT ( __stdcall *get_nextSibling )(
            IXTLRuntime * This,
                                IXMLDOMNode **nextSibling);

                                        HRESULT ( __stdcall *get_attributes )(
            IXTLRuntime * This,
                                IXMLDOMNamedNodeMap **attributeMap);

                               HRESULT ( __stdcall *insertBefore )(
            IXTLRuntime * This,
                       IXMLDOMNode *newChild,
                       VARIANT refChild,
                                IXMLDOMNode **outNewChild);

                               HRESULT ( __stdcall *replaceChild )(
            IXTLRuntime * This,
                       IXMLDOMNode *newChild,
                       IXMLDOMNode *oldChild,
                                IXMLDOMNode **outOldChild);

                               HRESULT ( __stdcall *removeChild )(
            IXTLRuntime * This,
                       IXMLDOMNode *childNode,
                                IXMLDOMNode **oldChild);

                               HRESULT ( __stdcall *appendChild )(
            IXTLRuntime * This,
                       IXMLDOMNode *newChild,
                                IXMLDOMNode **outNewChild);

                               HRESULT ( __stdcall *hasChildNodes )(
            IXTLRuntime * This,
                                VARIANT_BOOL *hasChild);

                                        HRESULT ( __stdcall *get_ownerDocument )(
            IXTLRuntime * This,
                                IXMLDOMDocument **XMLDOMDocument);

                               HRESULT ( __stdcall *cloneNode )(
            IXTLRuntime * This,
                       VARIANT_BOOL deep,
                                IXMLDOMNode **cloneRoot);

                                        HRESULT ( __stdcall *get_nodeTypeString )(
            IXTLRuntime * This,
                                BSTR *nodeType);

                                        HRESULT ( __stdcall *get_text )(
            IXTLRuntime * This,
                                BSTR *text);

                                        HRESULT ( __stdcall *put_text )(
            IXTLRuntime * This,
                       BSTR text);

                                        HRESULT ( __stdcall *get_specified )(
            IXTLRuntime * This,
                                VARIANT_BOOL *isSpecified);

                                        HRESULT ( __stdcall *get_definition )(
            IXTLRuntime * This,
                                IXMLDOMNode **definitionNode);

                                        HRESULT ( __stdcall *get_nodeTypedValue )(
            IXTLRuntime * This,
                                VARIANT *typedValue);

                                        HRESULT ( __stdcall *put_nodeTypedValue )(
            IXTLRuntime * This,
                       VARIANT typedValue);

                                        HRESULT ( __stdcall *get_dataType )(
            IXTLRuntime * This,
                                VARIANT *dataTypeName);

                                        HRESULT ( __stdcall *put_dataType )(
            IXTLRuntime * This,
                       BSTR dataTypeName);

                                        HRESULT ( __stdcall *get_xml )(
            IXTLRuntime * This,
                                BSTR *xmlString);

                               HRESULT ( __stdcall *transformNode )(
            IXTLRuntime * This,
                       IXMLDOMNode *stylesheet,
                                BSTR *xmlString);

                               HRESULT ( __stdcall *selectNodes )(
            IXTLRuntime * This,
                       BSTR queryString,
                                IXMLDOMNodeList **resultList);

                               HRESULT ( __stdcall *selectSingleNode )(
            IXTLRuntime * This,
                       BSTR queryString,
                                IXMLDOMNode **resultNode);

                                        HRESULT ( __stdcall *get_parsed )(
            IXTLRuntime * This,
                                VARIANT_BOOL *isParsed);

                                        HRESULT ( __stdcall *get_namespaceURI )(
            IXTLRuntime * This,
                                BSTR *namespaceURI);

                                        HRESULT ( __stdcall *get_prefix )(
            IXTLRuntime * This,
                                BSTR *prefixString);

                                        HRESULT ( __stdcall *get_baseName )(
            IXTLRuntime * This,
                                BSTR *nameString);

                               HRESULT ( __stdcall *transformNodeToObject )(
            IXTLRuntime * This,
                       IXMLDOMNode *stylesheet,
                       VARIANT outputObject);

                               HRESULT ( __stdcall *uniqueID )(
            IXTLRuntime * This,
                       IXMLDOMNode *pNode,
                                long *pID);

                               HRESULT ( __stdcall *depth )(
            IXTLRuntime * This,
                       IXMLDOMNode *pNode,
                                long *pDepth);

                               HRESULT ( __stdcall *childNumber )(
            IXTLRuntime * This,
                       IXMLDOMNode *pNode,
                                long *pNumber);

                               HRESULT ( __stdcall *ancestorChildNumber )(
            IXTLRuntime * This,
                       BSTR bstrNodeName,
                       IXMLDOMNode *pNode,
                                long *pNumber);

                               HRESULT ( __stdcall *absoluteChildNumber )(
            IXTLRuntime * This,
                       IXMLDOMNode *pNode,
                                long *pNumber);

                               HRESULT ( __stdcall *formatIndex )(
            IXTLRuntime * This,
                       long lIndex,
                       BSTR bstrFormat,
                                BSTR *pbstrFormattedString);

                               HRESULT ( __stdcall *formatNumber )(
            IXTLRuntime * This,
                       double dblNumber,
                       BSTR bstrFormat,
                                BSTR *pbstrFormattedString);

                               HRESULT ( __stdcall *formatDate )(
            IXTLRuntime * This,
                       VARIANT varDate,
                       BSTR bstrFormat,
                                 VARIANT varDestLocale,
                                BSTR *pbstrFormattedString);

                               HRESULT ( __stdcall *formatTime )(
            IXTLRuntime * This,
                       VARIANT varTime,
                       BSTR bstrFormat,
                                 VARIANT varDestLocale,
                                BSTR *pbstrFormattedString);


    } IXTLRuntimeVtbl;

    struct IXTLRuntime
    {
                   struct IXTLRuntimeVtbl *lpVtbl;
    };
#line 8073 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/msxml.h"
extern const IID DIID_XMLDOMDocumentEvents;
#line 8084 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/msxml.h"
    typedef struct XMLDOMDocumentEventsVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      XMLDOMDocumentEvents * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      XMLDOMDocumentEvents * This);

        ULONG ( __stdcall *Release )(
                      XMLDOMDocumentEvents * This);

        HRESULT ( __stdcall *GetTypeInfoCount )(
                      XMLDOMDocumentEvents * This,
                                   UINT *pctinfo);

        HRESULT ( __stdcall *GetTypeInfo )(
                      XMLDOMDocumentEvents * This,
                       UINT iTInfo,
                       LCID lcid,
                                             ITypeInfo **ppTInfo);

        HRESULT ( __stdcall *GetIDsOfNames )(
                      XMLDOMDocumentEvents * This,
                                 const IID * const riid,
                                                              LPOLESTR *rgszNames,
                                                       UINT cNames,
                       LCID lcid,
                                                                DISPID *rgDispId);

                      HRESULT ( __stdcall *Invoke )(
            XMLDOMDocumentEvents * This,

                  DISPID dispIdMember,

                  const IID * const riid,

                  LCID lcid,

                  WORD wFlags,

                  DISPPARAMS *pDispParams,

                       VARIANT *pVarResult,

                       EXCEPINFO *pExcepInfo,

                       UINT *puArgErr);


    } XMLDOMDocumentEventsVtbl;

    struct XMLDOMDocumentEvents
    {
                   struct XMLDOMDocumentEventsVtbl *lpVtbl;
    };
#line 8181 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/msxml.h"
extern const CLSID CLSID_DOMDocument;







extern const CLSID CLSID_DOMFreeThreadedDocument;
#line 8204 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/msxml.h"
extern const IID IID_IXMLHttpRequest;
#line 8264 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/msxml.h"
    typedef struct IXMLHttpRequestVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      IXMLHttpRequest * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      IXMLHttpRequest * This);

        ULONG ( __stdcall *Release )(
                      IXMLHttpRequest * This);

        HRESULT ( __stdcall *GetTypeInfoCount )(
                      IXMLHttpRequest * This,
                                   UINT *pctinfo);

        HRESULT ( __stdcall *GetTypeInfo )(
                      IXMLHttpRequest * This,
                       UINT iTInfo,
                       LCID lcid,
                                             ITypeInfo **ppTInfo);

        HRESULT ( __stdcall *GetIDsOfNames )(
                      IXMLHttpRequest * This,
                                 const IID * const riid,
                                                              LPOLESTR *rgszNames,
                                                       UINT cNames,
                       LCID lcid,
                                                                DISPID *rgDispId);

                      HRESULT ( __stdcall *Invoke )(
            IXMLHttpRequest * This,

                  DISPID dispIdMember,

                  const IID * const riid,

                  LCID lcid,

                  WORD wFlags,

                  DISPPARAMS *pDispParams,

                       VARIANT *pVarResult,

                       EXCEPINFO *pExcepInfo,

                       UINT *puArgErr);

                               HRESULT ( __stdcall *open )(
                      IXMLHttpRequest * This,
                                 BSTR bstrMethod,
                                 BSTR bstrUrl,
                                 VARIANT varAsync,
                                 VARIANT bstrUser,
                                 VARIANT bstrPassword);

                               HRESULT ( __stdcall *setRequestHeader )(
                      IXMLHttpRequest * This,
                                 BSTR bstrHeader,
                                 BSTR bstrValue);

                               HRESULT ( __stdcall *getResponseHeader )(
                      IXMLHttpRequest * This,
                                 BSTR bstrHeader,
                                                     BSTR *pbstrValue);

                               HRESULT ( __stdcall *getAllResponseHeaders )(
                      IXMLHttpRequest * This,
                                                     BSTR *pbstrHeaders);

                               HRESULT ( __stdcall *send )(
                      IXMLHttpRequest * This,
                                 VARIANT varBody);

                               HRESULT ( __stdcall *abort )(
                      IXMLHttpRequest * This);

                                        HRESULT ( __stdcall *get_status )(
                      IXMLHttpRequest * This,
                                           long *plStatus);

                                        HRESULT ( __stdcall *get_statusText )(
                      IXMLHttpRequest * This,
                                                     BSTR *pbstrStatus);

                                        HRESULT ( __stdcall *get_responseXML )(
                      IXMLHttpRequest * This,
                                                     IDispatch **ppBody);

                                        HRESULT ( __stdcall *get_responseText )(
                      IXMLHttpRequest * This,
                                                     BSTR *pbstrBody);

                                        HRESULT ( __stdcall *get_responseBody )(
                      IXMLHttpRequest * This,
                                           VARIANT *pvarBody);

                                        HRESULT ( __stdcall *get_responseStream )(
                      IXMLHttpRequest * This,
                                           VARIANT *pvarBody);

                                        HRESULT ( __stdcall *get_readyState )(
                      IXMLHttpRequest * This,
                                           long *plState);

                                        HRESULT ( __stdcall *put_onreadystatechange )(
                      IXMLHttpRequest * This,
                                     IDispatch *pReadyStateSink);


    } IXMLHttpRequestVtbl;

    struct IXMLHttpRequest
    {
                   struct IXMLHttpRequestVtbl *lpVtbl;
    };
#line 8467 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/msxml.h"
extern const CLSID CLSID_XMLHTTPRequest;
#line 8482 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/msxml.h"
extern const IID IID_IXMLDSOControl;
#line 8510 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/msxml.h"
    typedef struct IXMLDSOControlVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IXMLDSOControl * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IXMLDSOControl * This);

        ULONG ( __stdcall *Release )(
            IXMLDSOControl * This);

        HRESULT ( __stdcall *GetTypeInfoCount )(
            IXMLDSOControl * This,
                        UINT *pctinfo);

        HRESULT ( __stdcall *GetTypeInfo )(
            IXMLDSOControl * This,
                       UINT iTInfo,
                       LCID lcid,
                        ITypeInfo **ppTInfo);

        HRESULT ( __stdcall *GetIDsOfNames )(
            IXMLDSOControl * This,
                       const IID * const riid,
                                LPOLESTR *rgszNames,
                              UINT cNames,
                       LCID lcid,
                                 DISPID *rgDispId);

                      HRESULT ( __stdcall *Invoke )(
            IXMLDSOControl * This,

                  DISPID dispIdMember,

                  const IID * const riid,

                  LCID lcid,

                  WORD wFlags,

                  DISPPARAMS *pDispParams,

                       VARIANT *pVarResult,

                       EXCEPINFO *pExcepInfo,

                       UINT *puArgErr);

                            HRESULT ( __stdcall *get_XMLDocument )(
            IXMLDSOControl * This,
                                IXMLDOMDocument **ppDoc);

                            HRESULT ( __stdcall *put_XMLDocument )(
            IXMLDSOControl * This,
                       IXMLDOMDocument *ppDoc);

                            HRESULT ( __stdcall *get_JavaDSOCompatible )(
            IXMLDSOControl * This,
                                BOOL *fJavaDSOCompatible);

                            HRESULT ( __stdcall *put_JavaDSOCompatible )(
            IXMLDSOControl * This,
                       BOOL fJavaDSOCompatible);

                            HRESULT ( __stdcall *get_readyState )(
            IXMLDSOControl * This,
                                long *state);


    } IXMLDSOControlVtbl;

    struct IXMLDSOControl
    {
                   struct IXMLDSOControlVtbl *lpVtbl;
    };
#line 8645 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/msxml.h"
extern const CLSID CLSID_XMLDSOControl;
#line 8660 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/msxml.h"
extern const IID IID_IXMLElementCollection;
#line 8687 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/msxml.h"
    typedef struct IXMLElementCollectionVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IXMLElementCollection * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IXMLElementCollection * This);

        ULONG ( __stdcall *Release )(
            IXMLElementCollection * This);

        HRESULT ( __stdcall *GetTypeInfoCount )(
            IXMLElementCollection * This,
                        UINT *pctinfo);

        HRESULT ( __stdcall *GetTypeInfo )(
            IXMLElementCollection * This,
                       UINT iTInfo,
                       LCID lcid,
                        ITypeInfo **ppTInfo);

        HRESULT ( __stdcall *GetIDsOfNames )(
            IXMLElementCollection * This,
                       const IID * const riid,
                                LPOLESTR *rgszNames,
                              UINT cNames,
                       LCID lcid,
                                 DISPID *rgDispId);

                      HRESULT ( __stdcall *Invoke )(
            IXMLElementCollection * This,

                  DISPID dispIdMember,

                  const IID * const riid,

                  LCID lcid,

                  WORD wFlags,

                  DISPPARAMS *pDispParams,

                       VARIANT *pVarResult,

                       EXCEPINFO *pExcepInfo,

                       UINT *puArgErr);

                                                HRESULT ( __stdcall *put_length )(
            IXMLElementCollection * This,
                       long v);

                                        HRESULT ( __stdcall *get_length )(
            IXMLElementCollection * This,
                                long *p);

                                                HRESULT ( __stdcall *get__newEnum )(
            IXMLElementCollection * This,
                                IUnknown **ppUnk);

                               HRESULT ( __stdcall *item )(
            IXMLElementCollection * This,
                                 VARIANT var1,
                                 VARIANT var2,
                                IDispatch **ppDisp);


    } IXMLElementCollectionVtbl;

    struct IXMLElementCollection
    {
                   struct IXMLElementCollectionVtbl *lpVtbl;
    };
#line 8824 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/msxml.h"
extern const IID IID_IXMLDocument;
#line 8881 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/msxml.h"
    typedef struct IXMLDocumentVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IXMLDocument * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IXMLDocument * This);

        ULONG ( __stdcall *Release )(
            IXMLDocument * This);

        HRESULT ( __stdcall *GetTypeInfoCount )(
            IXMLDocument * This,
                        UINT *pctinfo);

        HRESULT ( __stdcall *GetTypeInfo )(
            IXMLDocument * This,
                       UINT iTInfo,
                       LCID lcid,
                        ITypeInfo **ppTInfo);

        HRESULT ( __stdcall *GetIDsOfNames )(
            IXMLDocument * This,
                       const IID * const riid,
                                LPOLESTR *rgszNames,
                              UINT cNames,
                       LCID lcid,
                                 DISPID *rgDispId);

                      HRESULT ( __stdcall *Invoke )(
            IXMLDocument * This,

                  DISPID dispIdMember,

                  const IID * const riid,

                  LCID lcid,

                  WORD wFlags,

                  DISPPARAMS *pDispParams,

                       VARIANT *pVarResult,

                       EXCEPINFO *pExcepInfo,

                       UINT *puArgErr);

                                        HRESULT ( __stdcall *get_root )(
            IXMLDocument * This,
                                IXMLElement **p);

                                                HRESULT ( __stdcall *get_fileSize )(
            IXMLDocument * This,
                                BSTR *p);

                                                HRESULT ( __stdcall *get_fileModifiedDate )(
            IXMLDocument * This,
                                BSTR *p);

                                                HRESULT ( __stdcall *get_fileUpdatedDate )(
            IXMLDocument * This,
                                BSTR *p);

                                        HRESULT ( __stdcall *get_URL )(
            IXMLDocument * This,
                                BSTR *p);

                                        HRESULT ( __stdcall *put_URL )(
            IXMLDocument * This,
                       BSTR p);

                                                HRESULT ( __stdcall *get_mimeType )(
            IXMLDocument * This,
                                BSTR *p);

                                        HRESULT ( __stdcall *get_readyState )(
            IXMLDocument * This,
                                long *pl);

                                        HRESULT ( __stdcall *get_charset )(
            IXMLDocument * This,
                                BSTR *p);

                                        HRESULT ( __stdcall *put_charset )(
            IXMLDocument * This,
                       BSTR p);

                                        HRESULT ( __stdcall *get_version )(
            IXMLDocument * This,
                                BSTR *p);

                                        HRESULT ( __stdcall *get_doctype )(
            IXMLDocument * This,
                                BSTR *p);

                                                HRESULT ( __stdcall *get_dtdURL )(
            IXMLDocument * This,
                                BSTR *p);

                               HRESULT ( __stdcall *createElement )(
            IXMLDocument * This,
                       VARIANT vType,
                                 VARIANT var1,
                                IXMLElement **ppElem);


    } IXMLDocumentVtbl;

    struct IXMLDocument
    {
                   struct IXMLDocumentVtbl *lpVtbl;
    };
#line 9088 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/msxml.h"
extern const IID IID_IXMLDocument2;
#line 9151 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/msxml.h"
    typedef struct IXMLDocument2Vtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IXMLDocument2 * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IXMLDocument2 * This);

        ULONG ( __stdcall *Release )(
            IXMLDocument2 * This);

        HRESULT ( __stdcall *GetTypeInfoCount )(
            IXMLDocument2 * This,
                        UINT *pctinfo);

        HRESULT ( __stdcall *GetTypeInfo )(
            IXMLDocument2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        ITypeInfo **ppTInfo);

        HRESULT ( __stdcall *GetIDsOfNames )(
            IXMLDocument2 * This,
                       const IID * const riid,
                                LPOLESTR *rgszNames,
                              UINT cNames,
                       LCID lcid,
                                 DISPID *rgDispId);

                      HRESULT ( __stdcall *Invoke )(
            IXMLDocument2 * This,

                  DISPID dispIdMember,

                  const IID * const riid,

                  LCID lcid,

                  WORD wFlags,

                  DISPPARAMS *pDispParams,

                       VARIANT *pVarResult,

                       EXCEPINFO *pExcepInfo,

                       UINT *puArgErr);

                                        HRESULT ( __stdcall *get_root )(
            IXMLDocument2 * This,
                                IXMLElement2 **p);

                                                HRESULT ( __stdcall *get_fileSize )(
            IXMLDocument2 * This,
                                BSTR *p);

                                                HRESULT ( __stdcall *get_fileModifiedDate )(
            IXMLDocument2 * This,
                                BSTR *p);

                                                HRESULT ( __stdcall *get_fileUpdatedDate )(
            IXMLDocument2 * This,
                                BSTR *p);

                                        HRESULT ( __stdcall *get_URL )(
            IXMLDocument2 * This,
                                BSTR *p);

                                        HRESULT ( __stdcall *put_URL )(
            IXMLDocument2 * This,
                       BSTR p);

                                                HRESULT ( __stdcall *get_mimeType )(
            IXMLDocument2 * This,
                                BSTR *p);

                                        HRESULT ( __stdcall *get_readyState )(
            IXMLDocument2 * This,
                                long *pl);

                                        HRESULT ( __stdcall *get_charset )(
            IXMLDocument2 * This,
                                BSTR *p);

                                        HRESULT ( __stdcall *put_charset )(
            IXMLDocument2 * This,
                       BSTR p);

                                        HRESULT ( __stdcall *get_version )(
            IXMLDocument2 * This,
                                BSTR *p);

                                        HRESULT ( __stdcall *get_doctype )(
            IXMLDocument2 * This,
                                BSTR *p);

                                                HRESULT ( __stdcall *get_dtdURL )(
            IXMLDocument2 * This,
                                BSTR *p);

                               HRESULT ( __stdcall *createElement )(
            IXMLDocument2 * This,
                       VARIANT vType,
                                 VARIANT var1,
                                IXMLElement2 **ppElem);

                                        HRESULT ( __stdcall *get_async )(
            IXMLDocument2 * This,
                                VARIANT_BOOL *pf);

                                        HRESULT ( __stdcall *put_async )(
            IXMLDocument2 * This,
                       VARIANT_BOOL f);


    } IXMLDocument2Vtbl;

    struct IXMLDocument2
    {
                   struct IXMLDocument2Vtbl *lpVtbl;
    };
#line 9372 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/msxml.h"
extern const IID IID_IXMLElement;
#line 9425 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/msxml.h"
    typedef struct IXMLElementVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IXMLElement * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IXMLElement * This);

        ULONG ( __stdcall *Release )(
            IXMLElement * This);

        HRESULT ( __stdcall *GetTypeInfoCount )(
            IXMLElement * This,
                        UINT *pctinfo);

        HRESULT ( __stdcall *GetTypeInfo )(
            IXMLElement * This,
                       UINT iTInfo,
                       LCID lcid,
                        ITypeInfo **ppTInfo);

        HRESULT ( __stdcall *GetIDsOfNames )(
            IXMLElement * This,
                       const IID * const riid,
                                LPOLESTR *rgszNames,
                              UINT cNames,
                       LCID lcid,
                                 DISPID *rgDispId);

                      HRESULT ( __stdcall *Invoke )(
            IXMLElement * This,

                  DISPID dispIdMember,

                  const IID * const riid,

                  LCID lcid,

                  WORD wFlags,

                  DISPPARAMS *pDispParams,

                       VARIANT *pVarResult,

                       EXCEPINFO *pExcepInfo,

                       UINT *puArgErr);

                                        HRESULT ( __stdcall *get_tagName )(
            IXMLElement * This,
                                BSTR *p);

                                        HRESULT ( __stdcall *put_tagName )(
            IXMLElement * This,
                       BSTR p);

                                        HRESULT ( __stdcall *get_parent )(
            IXMLElement * This,
                                IXMLElement **ppParent);

                               HRESULT ( __stdcall *setAttribute )(
            IXMLElement * This,
                       BSTR strPropertyName,
                       VARIANT PropertyValue);

                               HRESULT ( __stdcall *getAttribute )(
            IXMLElement * This,
                       BSTR strPropertyName,
                                VARIANT *PropertyValue);

                               HRESULT ( __stdcall *removeAttribute )(
            IXMLElement * This,
                       BSTR strPropertyName);

                                        HRESULT ( __stdcall *get_children )(
            IXMLElement * This,
                                IXMLElementCollection **pp);

                                        HRESULT ( __stdcall *get_type )(
            IXMLElement * This,
                                long *plType);

                                        HRESULT ( __stdcall *get_text )(
            IXMLElement * This,
                                BSTR *p);

                                        HRESULT ( __stdcall *put_text )(
            IXMLElement * This,
                       BSTR p);

                               HRESULT ( __stdcall *addChild )(
            IXMLElement * This,
                       IXMLElement *pChildElem,
            long lIndex,
            long lReserved);

                               HRESULT ( __stdcall *removeChild )(
            IXMLElement * This,
                       IXMLElement *pChildElem);


    } IXMLElementVtbl;

    struct IXMLElement
    {
                   struct IXMLElementVtbl *lpVtbl;
    };
#line 9620 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/msxml.h"
extern const IID IID_IXMLElement2;
#line 9676 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/msxml.h"
    typedef struct IXMLElement2Vtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IXMLElement2 * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IXMLElement2 * This);

        ULONG ( __stdcall *Release )(
            IXMLElement2 * This);

        HRESULT ( __stdcall *GetTypeInfoCount )(
            IXMLElement2 * This,
                        UINT *pctinfo);

        HRESULT ( __stdcall *GetTypeInfo )(
            IXMLElement2 * This,
                       UINT iTInfo,
                       LCID lcid,
                        ITypeInfo **ppTInfo);

        HRESULT ( __stdcall *GetIDsOfNames )(
            IXMLElement2 * This,
                       const IID * const riid,
                                LPOLESTR *rgszNames,
                              UINT cNames,
                       LCID lcid,
                                 DISPID *rgDispId);

                      HRESULT ( __stdcall *Invoke )(
            IXMLElement2 * This,

                  DISPID dispIdMember,

                  const IID * const riid,

                  LCID lcid,

                  WORD wFlags,

                  DISPPARAMS *pDispParams,

                       VARIANT *pVarResult,

                       EXCEPINFO *pExcepInfo,

                       UINT *puArgErr);

                                        HRESULT ( __stdcall *get_tagName )(
            IXMLElement2 * This,
                                BSTR *p);

                                        HRESULT ( __stdcall *put_tagName )(
            IXMLElement2 * This,
                       BSTR p);

                                        HRESULT ( __stdcall *get_parent )(
            IXMLElement2 * This,
                                IXMLElement2 **ppParent);

                               HRESULT ( __stdcall *setAttribute )(
            IXMLElement2 * This,
                       BSTR strPropertyName,
                       VARIANT PropertyValue);

                               HRESULT ( __stdcall *getAttribute )(
            IXMLElement2 * This,
                       BSTR strPropertyName,
                                VARIANT *PropertyValue);

                               HRESULT ( __stdcall *removeAttribute )(
            IXMLElement2 * This,
                       BSTR strPropertyName);

                                        HRESULT ( __stdcall *get_children )(
            IXMLElement2 * This,
                                IXMLElementCollection **pp);

                                        HRESULT ( __stdcall *get_type )(
            IXMLElement2 * This,
                                long *plType);

                                        HRESULT ( __stdcall *get_text )(
            IXMLElement2 * This,
                                BSTR *p);

                                        HRESULT ( __stdcall *put_text )(
            IXMLElement2 * This,
                       BSTR p);

                               HRESULT ( __stdcall *addChild )(
            IXMLElement2 * This,
                       IXMLElement2 *pChildElem,
            long lIndex,
            long lReserved);

                               HRESULT ( __stdcall *removeChild )(
            IXMLElement2 * This,
                       IXMLElement2 *pChildElem);

                                        HRESULT ( __stdcall *get_attributes )(
            IXMLElement2 * This,
                                IXMLElementCollection **pp);


    } IXMLElement2Vtbl;

    struct IXMLElement2
    {
                   struct IXMLElement2Vtbl *lpVtbl;
    };
#line 9878 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/msxml.h"
extern const IID IID_IXMLAttribute;
#line 9897 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/msxml.h"
    typedef struct IXMLAttributeVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IXMLAttribute * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IXMLAttribute * This);

        ULONG ( __stdcall *Release )(
            IXMLAttribute * This);

        HRESULT ( __stdcall *GetTypeInfoCount )(
            IXMLAttribute * This,
                        UINT *pctinfo);

        HRESULT ( __stdcall *GetTypeInfo )(
            IXMLAttribute * This,
                       UINT iTInfo,
                       LCID lcid,
                        ITypeInfo **ppTInfo);

        HRESULT ( __stdcall *GetIDsOfNames )(
            IXMLAttribute * This,
                       const IID * const riid,
                                LPOLESTR *rgszNames,
                              UINT cNames,
                       LCID lcid,
                                 DISPID *rgDispId);

                      HRESULT ( __stdcall *Invoke )(
            IXMLAttribute * This,

                  DISPID dispIdMember,

                  const IID * const riid,

                  LCID lcid,

                  WORD wFlags,

                  DISPPARAMS *pDispParams,

                       VARIANT *pVarResult,

                       EXCEPINFO *pExcepInfo,

                       UINT *puArgErr);

                                        HRESULT ( __stdcall *get_name )(
            IXMLAttribute * This,
                                BSTR *n);

                                        HRESULT ( __stdcall *get_value )(
            IXMLAttribute * This,
                                BSTR *v);


    } IXMLAttributeVtbl;

    struct IXMLAttribute
    {
                   struct IXMLAttributeVtbl *lpVtbl;
    };
#line 10018 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/msxml.h"
extern const IID IID_IXMLError;
#line 10034 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/msxml.h"
    typedef struct IXMLErrorVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IXMLError * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IXMLError * This);

        ULONG ( __stdcall *Release )(
            IXMLError * This);

        HRESULT ( __stdcall *GetErrorInfo )(
            IXMLError * This,
            XML_ERROR *pErrorReturn);


    } IXMLErrorVtbl;

    struct IXMLError
    {
                   struct IXMLErrorVtbl *lpVtbl;
    };
#line 10091 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/msxml.h"
extern const CLSID CLSID_XMLDocument;
#line 10104 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/msxml.h"
#pragma endregion





extern RPC_IF_HANDLE __MIDL_itf_msxml_0000_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_msxml_0000_0001_v0_0_s_ifspec;
#line 10124 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/msxml.h"
#pragma option pop
#line 432 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
#line 454 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
#pragma comment(lib,"uuid.lib")
#line 468 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
#pragma region Desktop Family
#line 485 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
extern const IID CLSID_SBS_StdURLMoniker;
extern const IID CLSID_SBS_HttpProtocol;
extern const IID CLSID_SBS_FtpProtocol;
extern const IID CLSID_SBS_GopherProtocol;
extern const IID CLSID_SBS_HttpSProtocol;
extern const IID CLSID_SBS_FileProtocol;
extern const IID CLSID_SBS_MkProtocol;
extern const IID CLSID_SBS_UrlMkBindCtx;
extern const IID CLSID_SBS_SoftDistExt;
extern const IID CLSID_SBS_CdlProtocol;
extern const IID CLSID_SBS_ClassInstallFilter;
extern const IID CLSID_SBS_InternetSecurityManager;
extern const IID CLSID_SBS_InternetZoneManager;







extern const IID IID_IAsyncMoniker;
extern const IID CLSID_StdURLMoniker;
extern const IID CLSID_HttpProtocol;
extern const IID CLSID_FtpProtocol;
extern const IID CLSID_GopherProtocol;
extern const IID CLSID_HttpSProtocol;
extern const IID CLSID_FileProtocol;
extern const IID CLSID_ResProtocol;
extern const IID CLSID_AboutProtocol;
extern const IID CLSID_JSProtocol;
extern const IID CLSID_MailtoProtocol;
extern const IID CLSID_IE4_PROTOCOLS;
extern const IID CLSID_MkProtocol;
extern const IID CLSID_StdURLProtocol;
extern const IID CLSID_TBAuthProtocol;
extern const IID CLSID_UrlMkBindCtx;
extern const IID CLSID_CdlProtocol;
extern const IID CLSID_ClassInstallFilter;
extern const IID IID_IAsyncBindCtx;
#line 532 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
extern HRESULT __stdcall CreateURLMoniker( LPMONIKER pMkCtx, LPCWSTR szURL, LPMONIKER * ppmk);
extern HRESULT __stdcall CreateURLMonikerEx( LPMONIKER pMkCtx, LPCWSTR szURL, LPMONIKER * ppmk, DWORD dwFlags);
extern HRESULT __stdcall GetClassURL( LPCWSTR szURL, CLSID *pClsID);
extern HRESULT __stdcall CreateAsyncBindCtx(DWORD reserved, IBindStatusCallback *pBSCb,
                                         IEnumFORMATETC *pEFetc, IBindCtx **ppBC);



extern HRESULT __stdcall CreateAsyncBindCtxEx( IBindCtx *pbc, DWORD dwOptions, IBindStatusCallback *pBSCb, IEnumFORMATETC *pEnum,
                                     IBindCtx **ppBC, DWORD reserved);
extern HRESULT __stdcall MkParseDisplayNameEx( IBindCtx *pbc, LPCWSTR szDisplayName, ULONG *pchEaten,
                                         LPMONIKER *ppmk);
extern HRESULT __stdcall RegisterBindStatusCallback( LPBC pBC, IBindStatusCallback *pBSCb,
                                         IBindStatusCallback** ppBSCBPrev, DWORD dwReserved);
extern HRESULT __stdcall RevokeBindStatusCallback( LPBC pBC, IBindStatusCallback *pBSCb);
extern HRESULT __stdcall GetClassFileOrMime( LPBC pBC, LPCWSTR szFilename, LPVOID pBuffer, DWORD cbSize, LPCWSTR szMime, DWORD dwReserved, CLSID *pclsid);
extern HRESULT __stdcall IsValidURL( LPBC pBC, LPCWSTR szURL, DWORD dwReserved);
extern HRESULT __stdcall CoGetClassObjectFromURL( const IID * const rCLASSID,
                 LPCWSTR szCODE, DWORD dwFileVersionMS,
            DWORD dwFileVersionLS, LPCWSTR szTYPE,
                 LPBINDCTX pBindCtx, DWORD dwClsContext,
                       LPVOID pvReserved, const IID * const riid, LPVOID * ppv);
extern HRESULT __stdcall IEInstallScope( LPDWORD pdwScope);
extern HRESULT __stdcall FaultInIEFeature( HWND hWnd,
                 uCLSSPEC *pClassSpec,
                        QUERYCONTEXT *pQuery, DWORD dwFlags);
extern HRESULT __stdcall GetComponentIDFromCLSSPEC( uCLSSPEC *pClassspec,
                     LPSTR * ppszComponentID);
#line 570 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
extern HRESULT __stdcall IsAsyncMoniker( IMoniker* pmk);
extern HRESULT __stdcall CreateURLBinding(LPCWSTR lpszUrl, IBindCtx *pbc, IBinding **ppBdg);

extern HRESULT __stdcall RegisterMediaTypes( UINT ctypes, const LPCSTR* rgszTypes, CLIPFORMAT* rgcfTypes);
extern HRESULT __stdcall FindMediaType( LPCSTR rgszTypes, CLIPFORMAT* rgcfTypes);
extern HRESULT __stdcall CreateFormatEnumerator( UINT cfmtetc, FORMATETC* rgfmtetc, IEnumFORMATETC** ppenumfmtetc);
extern HRESULT __stdcall RegisterFormatEnumerator( LPBC pBC, IEnumFORMATETC *pEFetc, DWORD reserved);
extern HRESULT __stdcall RevokeFormatEnumerator( LPBC pBC, IEnumFORMATETC *pEFetc);
extern HRESULT __stdcall RegisterMediaTypeClass( LPBC pBC, UINT ctypes, const LPCSTR* rgszTypes, CLSID *rgclsID, DWORD reserved);
extern HRESULT __stdcall FindMediaTypeClass( LPBC pBC, LPCSTR szType, CLSID *pclsID, DWORD reserved);
extern HRESULT __stdcall UrlMkSetSessionOption(DWORD dwOption, LPVOID pBuffer, DWORD dwBufferLength, DWORD dwReserved);
extern HRESULT __stdcall UrlMkGetSessionOption(DWORD dwOption, LPVOID pBuffer, DWORD dwBufferLength, DWORD *pdwBufferLengthOut, DWORD dwReserved);
extern HRESULT __stdcall FindMimeFromData(
                                 LPBC pBC,
                                 LPCWSTR pwzUrl,
                                 LPVOID pBuffer,
                                 DWORD cbSize,
                                 LPCWSTR pwzMimeProposed,
                                 DWORD dwMimeFlags,
                                 LPWSTR *ppwzMimeOut,
                                 DWORD dwReserved);
#line 602 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
extern HRESULT __stdcall ObtainUserAgentString(
                                         DWORD dwOption,
                                         LPSTR pszUAOut,
                                         DWORD *cbSize);
extern HRESULT __stdcall CompareSecurityIds( BYTE* pbSecurityId1, DWORD dwLen1, BYTE* pbSecurityId2, DWORD dwLen2, DWORD dwReserved);
extern HRESULT __stdcall CompatFlagsFromClsid( CLSID *pclsid, LPDWORD pdwCompatFlags, LPDWORD pdwMiscStatusFlags);
#line 642 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
#pragma endregion
#pragma region Application Family
#line 765 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
#pragma endregion
#pragma region Desktop Family





extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0000_v0_0_s_ifspec;







typedef IPersistMoniker *LPPERSISTMONIKER;


extern const IID IID_IPersistMoniker;
#line 820 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
    typedef struct IPersistMonikerVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      IPersistMoniker * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      IPersistMoniker * This);

        ULONG ( __stdcall *Release )(
                      IPersistMoniker * This);

        HRESULT ( __stdcall *GetClassID )(
                      IPersistMoniker * This,
                                   CLSID *pClassID);

        HRESULT ( __stdcall *IsDirty )(
                      IPersistMoniker * This);

        HRESULT ( __stdcall *Load )(
                      IPersistMoniker * This,
                       BOOL fFullyAvailable,
                                     IMoniker *pimkName,
                                     LPBC pibc,
                       DWORD grfMode);

        HRESULT ( __stdcall *Save )(
                      IPersistMoniker * This,
                                     IMoniker *pimkName,
                                     LPBC pbc,
                       BOOL fRemember);

        HRESULT ( __stdcall *SaveCompleted )(
                      IPersistMoniker * This,
                                     IMoniker *pimkName,
                                     LPBC pibc);

        HRESULT ( __stdcall *GetCurMoniker )(
                      IPersistMoniker * This,
                                             IMoniker **ppimkName);


    } IPersistMonikerVtbl;

    struct IPersistMoniker
    {
                   struct IPersistMonikerVtbl *lpVtbl;
    };
#line 925 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0001_v0_0_s_ifspec;







typedef IMonikerProp *LPMONIKERPROP;

typedef
enum __MIDL_IMonikerProp_0001
    {
        MIMETYPEPROP = 0,
        USE_SRC_URL = 0x1,
        CLASSIDPROP = 0x2,
        TRUSTEDDOWNLOADPROP = 0x3,
        POPUPLEVELPROP = 0x4
    } MONIKERPROPERTY;


extern const IID IID_IMonikerProp;
#line 964 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
    typedef struct IMonikerPropVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      IMonikerProp * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      IMonikerProp * This);

        ULONG ( __stdcall *Release )(
                      IMonikerProp * This);

        HRESULT ( __stdcall *PutProperty )(
                      IMonikerProp * This,
                       MONIKERPROPERTY mkp,
                                 LPCWSTR val);


    } IMonikerPropVtbl;

    struct IMonikerProp
    {
                   struct IMonikerPropVtbl *lpVtbl;
    };
#line 1030 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0002_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0002_v0_0_s_ifspec;







typedef IBindProtocol *LPBINDPROTOCOL;


extern const IID IID_IBindProtocol;
#line 1060 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
    typedef struct IBindProtocolVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IBindProtocol * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IBindProtocol * This);

        ULONG ( __stdcall *Release )(
            IBindProtocol * This);

        HRESULT ( __stdcall *CreateBinding )(
            IBindProtocol * This,
                       LPCWSTR szUrl,
                       IBindCtx *pbc,
                        IBinding **ppb);


    } IBindProtocolVtbl;

    struct IBindProtocol
    {
                   struct IBindProtocolVtbl *lpVtbl;
    };
#line 1127 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0003_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0003_v0_0_s_ifspec;







typedef IBinding *LPBINDING;


extern const IID IID_IBinding;
#line 1171 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
    typedef struct IBindingVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      IBinding * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      IBinding * This);

        ULONG ( __stdcall *Release )(
                      IBinding * This);

        HRESULT ( __stdcall *Abort )(
                      IBinding * This);

        HRESULT ( __stdcall *Suspend )(
                      IBinding * This);

        HRESULT ( __stdcall *Resume )(
                      IBinding * This);

        HRESULT ( __stdcall *SetPriority )(
                      IBinding * This,
                       LONG nPriority);

        HRESULT ( __stdcall *GetPriority )(
                      IBinding * This,
                                   LONG *pnPriority);

                      HRESULT ( __stdcall *GetBindResult )(
            IBinding * This,
                        CLSID *pclsidProtocol,
                        DWORD *pdwResult,

                        LPOLESTR *pszResult,
                            DWORD *pdwReserved);


    } IBindingVtbl;

    struct IBinding
    {
                   struct IBindingVtbl *lpVtbl;
    };
#line 1260 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
                HRESULT __stdcall IBinding_RemoteGetBindResult_Proxy(
              IBinding * This,
                           CLSID *pclsidProtocol,
                           DWORD *pdwResult,
                                     LPOLESTR *pszResult,
               DWORD dwReserved);


void __stdcall IBinding_RemoteGetBindResult_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
#line 1284 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
#pragma endregion
#pragma region Application Family





extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0004_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0004_v0_0_s_ifspec;







typedef IBindStatusCallback *LPBINDSTATUSCALLBACK;

typedef
enum __MIDL_IBindStatusCallback_0001
    {
        BINDVERB_GET = 0,
        BINDVERB_POST = 0x1,
        BINDVERB_PUT = 0x2,
        BINDVERB_CUSTOM = 0x3,
        BINDVERB_RESERVED1 = 0x4
    } BINDVERB;

typedef
enum __MIDL_IBindStatusCallback_0002
    {
        BINDINFOF_URLENCODESTGMEDDATA = 0x1,
        BINDINFOF_URLENCODEDEXTRAINFO = 0x2
    } BINDINFOF;

typedef
enum __MIDL_IBindStatusCallback_0003
    {
        BINDF_ASYNCHRONOUS = 0x1,
        BINDF_ASYNCSTORAGE = 0x2,
        BINDF_NOPROGRESSIVERENDERING = 0x4,
        BINDF_OFFLINEOPERATION = 0x8,
        BINDF_GETNEWESTVERSION = 0x10,
        BINDF_NOWRITECACHE = 0x20,
        BINDF_NEEDFILE = 0x40,
        BINDF_PULLDATA = 0x80,
        BINDF_IGNORESECURITYPROBLEM = 0x100,
        BINDF_RESYNCHRONIZE = 0x200,
        BINDF_HYPERLINK = 0x400,
        BINDF_NO_UI = 0x800,
        BINDF_SILENTOPERATION = 0x1000,
        BINDF_PRAGMA_NO_CACHE = 0x2000,
        BINDF_GETCLASSOBJECT = 0x4000,
        BINDF_RESERVED_1 = 0x8000,
        BINDF_FREE_THREADED = 0x10000,
        BINDF_DIRECT_READ = 0x20000,
        BINDF_FORMS_SUBMIT = 0x40000,
        BINDF_GETFROMCACHE_IF_NET_FAIL = 0x80000,
        BINDF_FROMURLMON = 0x100000,
        BINDF_FWD_BACK = 0x200000,
        BINDF_PREFERDEFAULTHANDLER = 0x400000,
        BINDF_ENFORCERESTRICTED = 0x800000,
        BINDF_RESERVED_2 = 0x80000000,
        BINDF_RESERVED_3 = 0x1000000,
        BINDF_RESERVED_4 = 0x2000000,
        BINDF_RESERVED_5 = 0x4000000,
        BINDF_RESERVED_6 = 0x8000000,
        BINDF_RESERVED_7 = 0x40000000,
        BINDF_RESERVED_8 = 0x20000000
    } BINDF;

typedef
enum __MIDL_IBindStatusCallback_0004
    {
        URL_ENCODING_NONE = 0,
        URL_ENCODING_ENABLE_UTF8 = 0x10000000,
        URL_ENCODING_DISABLE_UTF8 = 0x20000000
    } URL_ENCODING;

typedef struct _tagBINDINFO
    {
    ULONG cbSize;
    LPWSTR szExtraInfo;
    STGMEDIUM stgmedData;
    DWORD grfBindInfoF;
    DWORD dwBindVerb;
    LPWSTR szCustomVerb;
    DWORD cbstgmedData;
    DWORD dwOptions;
    DWORD dwOptionsFlags;
    DWORD dwCodePage;
    SECURITY_ATTRIBUTES securityAttributes;
    IID iid;
    IUnknown *pUnk;
    DWORD dwReserved;
    } BINDINFO;

typedef struct _REMSECURITY_ATTRIBUTES
    {
    DWORD nLength;
    DWORD lpSecurityDescriptor;
    BOOL bInheritHandle;
    } REMSECURITY_ATTRIBUTES;

typedef struct _REMSECURITY_ATTRIBUTES *PREMSECURITY_ATTRIBUTES;

typedef struct _REMSECURITY_ATTRIBUTES *LPREMSECURITY_ATTRIBUTES;

typedef struct _tagRemBINDINFO
    {
    ULONG cbSize;
    LPWSTR szExtraInfo;
    DWORD grfBindInfoF;
    DWORD dwBindVerb;
    LPWSTR szCustomVerb;
    DWORD cbstgmedData;
    DWORD dwOptions;
    DWORD dwOptionsFlags;
    DWORD dwCodePage;
    REMSECURITY_ATTRIBUTES securityAttributes;
    IID iid;
    IUnknown *pUnk;
    DWORD dwReserved;
    } RemBINDINFO;

typedef struct tagRemFORMATETC
    {
    DWORD cfFormat;
    DWORD ptd;
    DWORD dwAspect;
    LONG lindex;
    DWORD tymed;
    } RemFORMATETC;

typedef struct tagRemFORMATETC *LPREMFORMATETC;

typedef
enum __MIDL_IBindStatusCallback_0005
    {
        BINDINFO_OPTIONS_WININETFLAG = 0x10000,
        BINDINFO_OPTIONS_ENABLE_UTF8 = 0x20000,
        BINDINFO_OPTIONS_DISABLE_UTF8 = 0x40000,
        BINDINFO_OPTIONS_USE_IE_ENCODING = 0x80000,
        BINDINFO_OPTIONS_BINDTOOBJECT = 0x100000,
        BINDINFO_OPTIONS_SECURITYOPTOUT = 0x200000,
        BINDINFO_OPTIONS_IGNOREMIMETEXTPLAIN = 0x400000,
        BINDINFO_OPTIONS_USEBINDSTRINGCREDS = 0x800000,
        BINDINFO_OPTIONS_IGNOREHTTPHTTPSREDIRECTS = 0x1000000,
        BINDINFO_OPTIONS_IGNORE_SSLERRORS_ONCE = 0x2000000,
        BINDINFO_WPC_DOWNLOADBLOCKED = 0x8000000,
        BINDINFO_WPC_LOGGING_ENABLED = 0x10000000,
        BINDINFO_OPTIONS_ALLOWCONNECTDATA = 0x20000000,
        BINDINFO_OPTIONS_DISABLEAUTOREDIRECTS = 0x40000000,
        BINDINFO_OPTIONS_SHDOCVW_NAVIGATE = ( int )0x80000000
    } BINDINFO_OPTIONS;

typedef
enum __MIDL_IBindStatusCallback_0006
    {
        BSCF_FIRSTDATANOTIFICATION = 0x1,
        BSCF_INTERMEDIATEDATANOTIFICATION = 0x2,
        BSCF_LASTDATANOTIFICATION = 0x4,
        BSCF_DATAFULLYAVAILABLE = 0x8,
        BSCF_AVAILABLEDATASIZEUNKNOWN = 0x10,
        BSCF_SKIPDRAINDATAFORFILEURLS = 0x20,
        BSCF_64BITLENGTHDOWNLOAD = 0x40
    } BSCF;

typedef
enum tagBINDSTATUS
    {
        BINDSTATUS_FINDINGRESOURCE = 1,
        BINDSTATUS_CONNECTING = ( BINDSTATUS_FINDINGRESOURCE + 1 ) ,
        BINDSTATUS_REDIRECTING = ( BINDSTATUS_CONNECTING + 1 ) ,
        BINDSTATUS_BEGINDOWNLOADDATA = ( BINDSTATUS_REDIRECTING + 1 ) ,
        BINDSTATUS_DOWNLOADINGDATA = ( BINDSTATUS_BEGINDOWNLOADDATA + 1 ) ,
        BINDSTATUS_ENDDOWNLOADDATA = ( BINDSTATUS_DOWNLOADINGDATA + 1 ) ,
        BINDSTATUS_BEGINDOWNLOADCOMPONENTS = ( BINDSTATUS_ENDDOWNLOADDATA + 1 ) ,
        BINDSTATUS_INSTALLINGCOMPONENTS = ( BINDSTATUS_BEGINDOWNLOADCOMPONENTS + 1 ) ,
        BINDSTATUS_ENDDOWNLOADCOMPONENTS = ( BINDSTATUS_INSTALLINGCOMPONENTS + 1 ) ,
        BINDSTATUS_USINGCACHEDCOPY = ( BINDSTATUS_ENDDOWNLOADCOMPONENTS + 1 ) ,
        BINDSTATUS_SENDINGREQUEST = ( BINDSTATUS_USINGCACHEDCOPY + 1 ) ,
        BINDSTATUS_CLASSIDAVAILABLE = ( BINDSTATUS_SENDINGREQUEST + 1 ) ,
        BINDSTATUS_MIMETYPEAVAILABLE = ( BINDSTATUS_CLASSIDAVAILABLE + 1 ) ,
        BINDSTATUS_CACHEFILENAMEAVAILABLE = ( BINDSTATUS_MIMETYPEAVAILABLE + 1 ) ,
        BINDSTATUS_BEGINSYNCOPERATION = ( BINDSTATUS_CACHEFILENAMEAVAILABLE + 1 ) ,
        BINDSTATUS_ENDSYNCOPERATION = ( BINDSTATUS_BEGINSYNCOPERATION + 1 ) ,
        BINDSTATUS_BEGINUPLOADDATA = ( BINDSTATUS_ENDSYNCOPERATION + 1 ) ,
        BINDSTATUS_UPLOADINGDATA = ( BINDSTATUS_BEGINUPLOADDATA + 1 ) ,
        BINDSTATUS_ENDUPLOADDATA = ( BINDSTATUS_UPLOADINGDATA + 1 ) ,
        BINDSTATUS_PROTOCOLCLASSID = ( BINDSTATUS_ENDUPLOADDATA + 1 ) ,
        BINDSTATUS_ENCODING = ( BINDSTATUS_PROTOCOLCLASSID + 1 ) ,
        BINDSTATUS_VERIFIEDMIMETYPEAVAILABLE = ( BINDSTATUS_ENCODING + 1 ) ,
        BINDSTATUS_CLASSINSTALLLOCATION = ( BINDSTATUS_VERIFIEDMIMETYPEAVAILABLE + 1 ) ,
        BINDSTATUS_DECODING = ( BINDSTATUS_CLASSINSTALLLOCATION + 1 ) ,
        BINDSTATUS_LOADINGMIMEHANDLER = ( BINDSTATUS_DECODING + 1 ) ,
        BINDSTATUS_CONTENTDISPOSITIONATTACH = ( BINDSTATUS_LOADINGMIMEHANDLER + 1 ) ,
        BINDSTATUS_FILTERREPORTMIMETYPE = ( BINDSTATUS_CONTENTDISPOSITIONATTACH + 1 ) ,
        BINDSTATUS_CLSIDCANINSTANTIATE = ( BINDSTATUS_FILTERREPORTMIMETYPE + 1 ) ,
        BINDSTATUS_IUNKNOWNAVAILABLE = ( BINDSTATUS_CLSIDCANINSTANTIATE + 1 ) ,
        BINDSTATUS_DIRECTBIND = ( BINDSTATUS_IUNKNOWNAVAILABLE + 1 ) ,
        BINDSTATUS_RAWMIMETYPE = ( BINDSTATUS_DIRECTBIND + 1 ) ,
        BINDSTATUS_PROXYDETECTING = ( BINDSTATUS_RAWMIMETYPE + 1 ) ,
        BINDSTATUS_ACCEPTRANGES = ( BINDSTATUS_PROXYDETECTING + 1 ) ,
        BINDSTATUS_COOKIE_SENT = ( BINDSTATUS_ACCEPTRANGES + 1 ) ,
        BINDSTATUS_COMPACT_POLICY_RECEIVED = ( BINDSTATUS_COOKIE_SENT + 1 ) ,
        BINDSTATUS_COOKIE_SUPPRESSED = ( BINDSTATUS_COMPACT_POLICY_RECEIVED + 1 ) ,
        BINDSTATUS_COOKIE_STATE_UNKNOWN = ( BINDSTATUS_COOKIE_SUPPRESSED + 1 ) ,
        BINDSTATUS_COOKIE_STATE_ACCEPT = ( BINDSTATUS_COOKIE_STATE_UNKNOWN + 1 ) ,
        BINDSTATUS_COOKIE_STATE_REJECT = ( BINDSTATUS_COOKIE_STATE_ACCEPT + 1 ) ,
        BINDSTATUS_COOKIE_STATE_PROMPT = ( BINDSTATUS_COOKIE_STATE_REJECT + 1 ) ,
        BINDSTATUS_COOKIE_STATE_LEASH = ( BINDSTATUS_COOKIE_STATE_PROMPT + 1 ) ,
        BINDSTATUS_COOKIE_STATE_DOWNGRADE = ( BINDSTATUS_COOKIE_STATE_LEASH + 1 ) ,
        BINDSTATUS_POLICY_HREF = ( BINDSTATUS_COOKIE_STATE_DOWNGRADE + 1 ) ,
        BINDSTATUS_P3P_HEADER = ( BINDSTATUS_POLICY_HREF + 1 ) ,
        BINDSTATUS_SESSION_COOKIE_RECEIVED = ( BINDSTATUS_P3P_HEADER + 1 ) ,
        BINDSTATUS_PERSISTENT_COOKIE_RECEIVED = ( BINDSTATUS_SESSION_COOKIE_RECEIVED + 1 ) ,
        BINDSTATUS_SESSION_COOKIES_ALLOWED = ( BINDSTATUS_PERSISTENT_COOKIE_RECEIVED + 1 ) ,
        BINDSTATUS_CACHECONTROL = ( BINDSTATUS_SESSION_COOKIES_ALLOWED + 1 ) ,
        BINDSTATUS_CONTENTDISPOSITIONFILENAME = ( BINDSTATUS_CACHECONTROL + 1 ) ,
        BINDSTATUS_MIMETEXTPLAINMISMATCH = ( BINDSTATUS_CONTENTDISPOSITIONFILENAME + 1 ) ,
        BINDSTATUS_PUBLISHERAVAILABLE = ( BINDSTATUS_MIMETEXTPLAINMISMATCH + 1 ) ,
        BINDSTATUS_DISPLAYNAMEAVAILABLE = ( BINDSTATUS_PUBLISHERAVAILABLE + 1 ) ,
        BINDSTATUS_SSLUX_NAVBLOCKED = ( BINDSTATUS_DISPLAYNAMEAVAILABLE + 1 ) ,
        BINDSTATUS_SERVER_MIMETYPEAVAILABLE = ( BINDSTATUS_SSLUX_NAVBLOCKED + 1 ) ,
        BINDSTATUS_SNIFFED_CLASSIDAVAILABLE = ( BINDSTATUS_SERVER_MIMETYPEAVAILABLE + 1 ) ,
        BINDSTATUS_64BIT_PROGRESS = ( BINDSTATUS_SNIFFED_CLASSIDAVAILABLE + 1 ) ,
        BINDSTATUS_SSLUX_HSTSFATALERROR = ( BINDSTATUS_64BIT_PROGRESS + 1 ) ,
        BINDSTATUS_LAST = BINDSTATUS_SSLUX_HSTSFATALERROR,
        BINDSTATUS_RESERVED_0 = ( BINDSTATUS_LAST + 1 ) ,
        BINDSTATUS_RESERVED_1 = ( BINDSTATUS_RESERVED_0 + 1 ) ,
        BINDSTATUS_RESERVED_2 = ( BINDSTATUS_RESERVED_1 + 1 ) ,
        BINDSTATUS_RESERVED_3 = ( BINDSTATUS_RESERVED_2 + 1 ) ,
        BINDSTATUS_RESERVED_4 = ( BINDSTATUS_RESERVED_3 + 1 ) ,
        BINDSTATUS_RESERVED_5 = ( BINDSTATUS_RESERVED_4 + 1 ) ,
        BINDSTATUS_RESERVED_6 = ( BINDSTATUS_RESERVED_5 + 1 ) ,
        BINDSTATUS_RESERVED_7 = ( BINDSTATUS_RESERVED_6 + 1 ) ,
        BINDSTATUS_RESERVED_8 = ( BINDSTATUS_RESERVED_7 + 1 ) ,
        BINDSTATUS_RESERVED_9 = ( BINDSTATUS_RESERVED_8 + 1 ) ,
        BINDSTATUS_RESERVED_A = ( BINDSTATUS_RESERVED_9 + 1 ) ,
        BINDSTATUS_RESERVED_B = ( BINDSTATUS_RESERVED_A + 1 ) ,
        BINDSTATUS_RESERVED_C = ( BINDSTATUS_RESERVED_B + 1 ) ,
        BINDSTATUS_RESERVED_D = ( BINDSTATUS_RESERVED_C + 1 ) ,
        BINDSTATUS_RESERVED_E = ( BINDSTATUS_RESERVED_D + 1 ) ,
        BINDSTATUS_RESERVED_F = ( BINDSTATUS_RESERVED_E + 1 ) ,
        BINDSTATUS_LAST_PRIVATE = BINDSTATUS_RESERVED_F
    } BINDSTATUS;


extern const IID IID_IBindStatusCallback;
#line 1580 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
    typedef struct IBindStatusCallbackVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      IBindStatusCallback * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      IBindStatusCallback * This);

        ULONG ( __stdcall *Release )(
                      IBindStatusCallback * This);

        HRESULT ( __stdcall *OnStartBinding )(
                      IBindStatusCallback * This,
                       DWORD dwReserved,
                                     IBinding *pib);

        HRESULT ( __stdcall *GetPriority )(
                      IBindStatusCallback * This,
                                   LONG *pnPriority);

        HRESULT ( __stdcall *OnLowResource )(
                      IBindStatusCallback * This,
                       DWORD reserved);

        HRESULT ( __stdcall *OnProgress )(
                      IBindStatusCallback * This,
                       ULONG ulProgress,
                       ULONG ulProgressMax,
                       ULONG ulStatusCode,
                                             LPCWSTR szStatusText);

        HRESULT ( __stdcall *OnStopBinding )(
                      IBindStatusCallback * This,
                       HRESULT hresult,
                                             LPCWSTR szError);

                      HRESULT ( __stdcall *GetBindInfo )(
            IBindStatusCallback * This,
                        DWORD *grfBINDF,
                                    BINDINFO *pbindinfo);

                      HRESULT ( __stdcall *OnDataAvailable )(
            IBindStatusCallback * This,
                       DWORD grfBSCF,
                       DWORD dwSize,
                       FORMATETC *pformatetc,
                       STGMEDIUM *pstgmed);

        HRESULT ( __stdcall *OnObjectAvailable )(
                      IBindStatusCallback * This,
                                 const IID * const riid,
                                             IUnknown *punk);


    } IBindStatusCallbackVtbl;

    struct IBindStatusCallback
    {
                   struct IBindStatusCallbackVtbl *lpVtbl;
    };
#line 1692 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
                HRESULT __stdcall IBindStatusCallback_RemoteGetBindInfo_Proxy(
              IBindStatusCallback * This,
                           DWORD *grfBINDF,
                                             RemBINDINFO *pbindinfo,
                                             RemSTGMEDIUM *pstgmed);


void __stdcall IBindStatusCallback_RemoteGetBindInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall IBindStatusCallback_RemoteOnDataAvailable_Proxy(
              IBindStatusCallback * This,
               DWORD grfBSCF,
               DWORD dwSize,
                         RemFORMATETC *pformatetc,
                         RemSTGMEDIUM *pstgmed);


void __stdcall IBindStatusCallback_RemoteOnDataAvailable_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
#line 1730 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
#pragma endregion
#pragma region Desktop Family





extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0005_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0005_v0_0_s_ifspec;







typedef IBindStatusCallbackEx *LPBINDSTATUSCALLBACKEX;

typedef
enum __MIDL_IBindStatusCallbackEx_0001
    {
        BINDF2_DISABLEBASICOVERHTTP = 0x1,
        BINDF2_DISABLEAUTOCOOKIEHANDLING = 0x2,
        BINDF2_READ_DATA_GREATER_THAN_4GB = 0x4,
        BINDF2_DISABLE_HTTP_REDIRECT_XSECURITYID = 0x8,
        BINDF2_SETDOWNLOADMODE = 0x20,
        BINDF2_DISABLE_HTTP_REDIRECT_CACHING = 0x40,
        BINDF2_KEEP_CALLBACK_MODULE_LOADED = 0x80,
        BINDF2_ALLOW_PROXY_CRED_PROMPT = 0x100,
        BINDF2_RESERVED_15 = 0x800,
        BINDF2_RESERVED_14 = 0x1000,
        BINDF2_RESERVED_13 = 0x2000,
        BINDF2_RESERVED_12 = 0x4000,
        BINDF2_RESERVED_11 = 0x8000,
        BINDF2_RESERVED_10 = 0x10000,
        BINDF2_RESERVED_F = 0x20000,
        BINDF2_RESERVED_E = 0x40000,
        BINDF2_RESERVED_D = 0x80000,
        BINDF2_RESERVED_C = 0x100000,
        BINDF2_RESERVED_B = 0x200000,
        BINDF2_RESERVED_A = 0x400000,
        BINDF2_RESERVED_9 = 0x800000,
        BINDF2_RESERVED_8 = 0x1000000,
        BINDF2_RESERVED_7 = 0x2000000,
        BINDF2_RESERVED_6 = 0x4000000,
        BINDF2_RESERVED_5 = 0x8000000,
        BINDF2_RESERVED_4 = 0x10000000,
        BINDF2_RESERVED_3 = 0x20000000,
        BINDF2_RESERVED_2 = 0x40000000,
        BINDF2_RESERVED_1 = 0x80000000
    } BINDF2;


extern const IID IID_IBindStatusCallbackEx;
#line 1802 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
    typedef struct IBindStatusCallbackExVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      IBindStatusCallbackEx * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      IBindStatusCallbackEx * This);

        ULONG ( __stdcall *Release )(
                      IBindStatusCallbackEx * This);

        HRESULT ( __stdcall *OnStartBinding )(
                      IBindStatusCallbackEx * This,
                       DWORD dwReserved,
                                     IBinding *pib);

        HRESULT ( __stdcall *GetPriority )(
                      IBindStatusCallbackEx * This,
                                   LONG *pnPriority);

        HRESULT ( __stdcall *OnLowResource )(
                      IBindStatusCallbackEx * This,
                       DWORD reserved);

        HRESULT ( __stdcall *OnProgress )(
                      IBindStatusCallbackEx * This,
                       ULONG ulProgress,
                       ULONG ulProgressMax,
                       ULONG ulStatusCode,
                                             LPCWSTR szStatusText);

        HRESULT ( __stdcall *OnStopBinding )(
                      IBindStatusCallbackEx * This,
                       HRESULT hresult,
                                             LPCWSTR szError);

                      HRESULT ( __stdcall *GetBindInfo )(
            IBindStatusCallbackEx * This,
                        DWORD *grfBINDF,
                                    BINDINFO *pbindinfo);

                      HRESULT ( __stdcall *OnDataAvailable )(
            IBindStatusCallbackEx * This,
                       DWORD grfBSCF,
                       DWORD dwSize,
                       FORMATETC *pformatetc,
                       STGMEDIUM *pstgmed);

        HRESULT ( __stdcall *OnObjectAvailable )(
                      IBindStatusCallbackEx * This,
                                 const IID * const riid,
                                             IUnknown *punk);

                      HRESULT ( __stdcall *GetBindInfoEx )(
            IBindStatusCallbackEx * This,
                        DWORD *grfBINDF,
                                    BINDINFO *pbindinfo,
                        DWORD *grfBINDF2,
                        DWORD *pdwReserved);


    } IBindStatusCallbackExVtbl;

    struct IBindStatusCallbackEx
    {
                   struct IBindStatusCallbackExVtbl *lpVtbl;
    };
#line 1925 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
                HRESULT __stdcall IBindStatusCallbackEx_RemoteGetBindInfoEx_Proxy(
              IBindStatusCallbackEx * This,
                           DWORD *grfBINDF,
                                             RemBINDINFO *pbindinfo,
                                             RemSTGMEDIUM *pstgmed,
                           DWORD *grfBINDF2,
                           DWORD *pdwReserved);


void __stdcall IBindStatusCallbackEx_RemoteGetBindInfoEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
#line 1953 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0006_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0006_v0_0_s_ifspec;







typedef IAuthenticate *LPAUTHENTICATION;


extern const IID IID_IAuthenticate;
#line 1983 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
    typedef struct IAuthenticateVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      IAuthenticate * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      IAuthenticate * This);

        ULONG ( __stdcall *Release )(
                      IAuthenticate * This);

        HRESULT ( __stdcall *Authenticate )(
                      IAuthenticate * This,
                                             HWND *phwnd,
                                             LPWSTR *pszUsername,
                                             LPWSTR *pszPassword);


    } IAuthenticateVtbl;

    struct IAuthenticate
    {
                   struct IAuthenticateVtbl *lpVtbl;
    };
#line 2050 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0007_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0007_v0_0_s_ifspec;







typedef IAuthenticateEx *LPAUTHENTICATIONEX;

typedef
enum __MIDL_IAuthenticateEx_0001
    {
        AUTHENTICATEF_PROXY = 0x1,
        AUTHENTICATEF_BASIC = 0x2,
        AUTHENTICATEF_HTTP = 0x4
    } AUTHENTICATEF;

typedef struct _tagAUTHENTICATEINFO
    {
    DWORD dwFlags;
    DWORD dwReserved;
    } AUTHENTICATEINFO;


extern const IID IID_IAuthenticateEx;
#line 2095 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
    typedef struct IAuthenticateExVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      IAuthenticateEx * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      IAuthenticateEx * This);

        ULONG ( __stdcall *Release )(
                      IAuthenticateEx * This);

        HRESULT ( __stdcall *Authenticate )(
                      IAuthenticateEx * This,
                                             HWND *phwnd,
                                             LPWSTR *pszUsername,
                                             LPWSTR *pszPassword);

        HRESULT ( __stdcall *AuthenticateEx )(
                      IAuthenticateEx * This,
                                             HWND *phwnd,
                                             LPWSTR *pszUsername,
                                             LPWSTR *pszPassword,
                                 AUTHENTICATEINFO *pauthinfo);


    } IAuthenticateExVtbl;

    struct IAuthenticateEx
    {
                   struct IAuthenticateExVtbl *lpVtbl;
    };
#line 2173 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0008_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0008_v0_0_s_ifspec;







typedef IHttpNegotiate *LPHTTPNEGOTIATE;


extern const IID IID_IHttpNegotiate;
#line 2210 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
    typedef struct IHttpNegotiateVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      IHttpNegotiate * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      IHttpNegotiate * This);

        ULONG ( __stdcall *Release )(
                      IHttpNegotiate * This);

        HRESULT ( __stdcall *BeginningTransaction )(
                      IHttpNegotiate * This,
                                 LPCWSTR szURL,
                                             LPCWSTR szHeaders,
                       DWORD dwReserved,
                                             LPWSTR *pszAdditionalHeaders);

        HRESULT ( __stdcall *OnResponse )(
                      IHttpNegotiate * This,
                       DWORD dwResponseCode,
                                             LPCWSTR szResponseHeaders,
                                             LPCWSTR szRequestHeaders,
                                             LPWSTR *pszAdditionalRequestHeaders);


    } IHttpNegotiateVtbl;

    struct IHttpNegotiate
    {
                   struct IHttpNegotiateVtbl *lpVtbl;
    };
#line 2288 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0009_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0009_v0_0_s_ifspec;







typedef IHttpNegotiate2 *LPHTTPNEGOTIATE2;


extern const IID IID_IHttpNegotiate2;
#line 2318 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
    typedef struct IHttpNegotiate2Vtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      IHttpNegotiate2 * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      IHttpNegotiate2 * This);

        ULONG ( __stdcall *Release )(
                      IHttpNegotiate2 * This);

        HRESULT ( __stdcall *BeginningTransaction )(
                      IHttpNegotiate2 * This,
                                 LPCWSTR szURL,
                                             LPCWSTR szHeaders,
                       DWORD dwReserved,
                                             LPWSTR *pszAdditionalHeaders);

        HRESULT ( __stdcall *OnResponse )(
                      IHttpNegotiate2 * This,
                       DWORD dwResponseCode,
                                             LPCWSTR szResponseHeaders,
                                             LPCWSTR szRequestHeaders,
                                             LPWSTR *pszAdditionalRequestHeaders);

        HRESULT ( __stdcall *GetRootSecurityId )(
                      IHttpNegotiate2 * This,
                                                                        BYTE *pbSecurityId,
                                         DWORD *pcbSecurityId,
                       DWORD_PTR dwReserved);


    } IHttpNegotiate2Vtbl;

    struct IHttpNegotiate2
    {
                   struct IHttpNegotiate2Vtbl *lpVtbl;
    };
#line 2406 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0010_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0010_v0_0_s_ifspec;







typedef IHttpNegotiate3 *LPHTTPNEGOTIATE3;


extern const IID IID_IHttpNegotiate3;
#line 2435 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
    typedef struct IHttpNegotiate3Vtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      IHttpNegotiate3 * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      IHttpNegotiate3 * This);

        ULONG ( __stdcall *Release )(
                      IHttpNegotiate3 * This);

        HRESULT ( __stdcall *BeginningTransaction )(
                      IHttpNegotiate3 * This,
                                 LPCWSTR szURL,
                                             LPCWSTR szHeaders,
                       DWORD dwReserved,
                                             LPWSTR *pszAdditionalHeaders);

        HRESULT ( __stdcall *OnResponse )(
                      IHttpNegotiate3 * This,
                       DWORD dwResponseCode,
                                             LPCWSTR szResponseHeaders,
                                             LPCWSTR szRequestHeaders,
                                             LPWSTR *pszAdditionalRequestHeaders);

        HRESULT ( __stdcall *GetRootSecurityId )(
                      IHttpNegotiate3 * This,
                                                                        BYTE *pbSecurityId,
                                         DWORD *pcbSecurityId,
                       DWORD_PTR dwReserved);

        HRESULT ( __stdcall *GetSerializedClientCertContext )(
                      IHttpNegotiate3 * This,
                                                                                     BYTE **ppbCert,
                                   DWORD *pcbCert);


    } IHttpNegotiate3Vtbl;

    struct IHttpNegotiate3
    {
                   struct IHttpNegotiate3Vtbl *lpVtbl;
    };
#line 2532 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0011_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0011_v0_0_s_ifspec;







typedef IWinInetFileStream *LPWININETFILESTREAM;


extern const IID IID_IWinInetFileStream;
#line 2564 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
    typedef struct IWinInetFileStreamVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      IWinInetFileStream * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      IWinInetFileStream * This);

        ULONG ( __stdcall *Release )(
                      IWinInetFileStream * This);

        HRESULT ( __stdcall *SetHandleForUnlock )(
                      IWinInetFileStream * This,
                       DWORD_PTR hWinInetLockHandle,
                       DWORD_PTR dwReserved);

        HRESULT ( __stdcall *SetDeleteFile )(
                      IWinInetFileStream * This,
                       DWORD_PTR dwReserved);


    } IWinInetFileStreamVtbl;

    struct IWinInetFileStream
    {
                   struct IWinInetFileStreamVtbl *lpVtbl;
    };
#line 2637 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0012_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0012_v0_0_s_ifspec;







typedef IWindowForBindingUI *LPWINDOWFORBINDINGUI;


extern const IID IID_IWindowForBindingUI;
#line 2666 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
    typedef struct IWindowForBindingUIVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IWindowForBindingUI * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IWindowForBindingUI * This);

        ULONG ( __stdcall *Release )(
            IWindowForBindingUI * This);

        HRESULT ( __stdcall *GetWindow )(
            IWindowForBindingUI * This,
                       const GUID * const rguidReason,
                        HWND *phwnd);


    } IWindowForBindingUIVtbl;

    struct IWindowForBindingUI
    {
                   struct IWindowForBindingUIVtbl *lpVtbl;
    };
#line 2732 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0013_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0013_v0_0_s_ifspec;







typedef ICodeInstall *LPCODEINSTALL;

typedef
enum __MIDL_ICodeInstall_0001
    {
        CIP_DISK_FULL = 0,
        CIP_ACCESS_DENIED = ( CIP_DISK_FULL + 1 ) ,
        CIP_NEWER_VERSION_EXISTS = ( CIP_ACCESS_DENIED + 1 ) ,
        CIP_OLDER_VERSION_EXISTS = ( CIP_NEWER_VERSION_EXISTS + 1 ) ,
        CIP_NAME_CONFLICT = ( CIP_OLDER_VERSION_EXISTS + 1 ) ,
        CIP_TRUST_VERIFICATION_COMPONENT_MISSING = ( CIP_NAME_CONFLICT + 1 ) ,
        CIP_EXE_SELF_REGISTERATION_TIMEOUT = ( CIP_TRUST_VERIFICATION_COMPONENT_MISSING + 1 ) ,
        CIP_UNSAFE_TO_ABORT = ( CIP_EXE_SELF_REGISTERATION_TIMEOUT + 1 ) ,
        CIP_NEED_REBOOT = ( CIP_UNSAFE_TO_ABORT + 1 ) ,
        CIP_NEED_REBOOT_UI_PERMISSION = ( CIP_NEED_REBOOT + 1 )
    } CIP_STATUS;


extern const IID IID_ICodeInstall;
#line 2778 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
    typedef struct ICodeInstallVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            ICodeInstall * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            ICodeInstall * This);

        ULONG ( __stdcall *Release )(
            ICodeInstall * This);

        HRESULT ( __stdcall *GetWindow )(
            ICodeInstall * This,
                       const GUID * const rguidReason,
                        HWND *phwnd);

        HRESULT ( __stdcall *OnCodeInstallProblem )(
            ICodeInstall * This,
                       ULONG ulStatusCode,
                               LPCWSTR szDestination,
                               LPCWSTR szSource,
                       DWORD dwReserved);


    } ICodeInstallVtbl;

    struct ICodeInstall
    {
                   struct ICodeInstallVtbl *lpVtbl;
    };
#line 2852 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
#pragma endregion
#line 3939 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
#pragma region Desktop Family





extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0018_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0018_v0_0_s_ifspec;







typedef IWinInetInfo *LPWININETINFO;


extern const IID IID_IWinInetInfo;
#line 3975 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
    typedef struct IWinInetInfoVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      IWinInetInfo * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      IWinInetInfo * This);

        ULONG ( __stdcall *Release )(
                      IWinInetInfo * This);

                      HRESULT ( __stdcall *QueryOption )(
            IWinInetInfo * This,
                       DWORD dwOption,
                                     LPVOID pBuffer,
                            DWORD *pcbBuf);


    } IWinInetInfoVtbl;

    struct IWinInetInfo
    {
                   struct IWinInetInfoVtbl *lpVtbl;
    };
#line 4030 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
                HRESULT __stdcall IWinInetInfo_RemoteQueryOption_Proxy(
              IWinInetInfo * This,
               DWORD dwOption,
                                                               BYTE *pBuffer,
                                 DWORD *pcbBuf);


void __stdcall IWinInetInfo_RemoteQueryOption_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
#line 4057 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0019_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0019_v0_0_s_ifspec;







typedef IHttpSecurity *LPHTTPSECURITY;


extern const IID IID_IHttpSecurity;
#line 4085 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
    typedef struct IHttpSecurityVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IHttpSecurity * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IHttpSecurity * This);

        ULONG ( __stdcall *Release )(
            IHttpSecurity * This);

        HRESULT ( __stdcall *GetWindow )(
            IHttpSecurity * This,
                       const GUID * const rguidReason,
                        HWND *phwnd);

        HRESULT ( __stdcall *OnSecurityProblem )(
            IHttpSecurity * This,
                       DWORD dwProblem);


    } IHttpSecurityVtbl;

    struct IHttpSecurity
    {
                   struct IHttpSecurityVtbl *lpVtbl;
    };
#line 4159 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0020_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0020_v0_0_s_ifspec;







typedef IWinInetHttpInfo *LPWININETHTTPINFO;


extern const IID IID_IWinInetHttpInfo;
#line 4191 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
    typedef struct IWinInetHttpInfoVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      IWinInetHttpInfo * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      IWinInetHttpInfo * This);

        ULONG ( __stdcall *Release )(
                      IWinInetHttpInfo * This);

                      HRESULT ( __stdcall *QueryOption )(
            IWinInetHttpInfo * This,
                       DWORD dwOption,
                                     LPVOID pBuffer,
                            DWORD *pcbBuf);

                      HRESULT ( __stdcall *QueryInfo )(
            IWinInetHttpInfo * This,
                       DWORD dwOption,
                                     LPVOID pBuffer,
                            DWORD *pcbBuf,
                            DWORD *pdwFlags,
                            DWORD *pdwReserved);


    } IWinInetHttpInfoVtbl;

    struct IWinInetHttpInfo
    {
                   struct IWinInetHttpInfoVtbl *lpVtbl;
    };
#line 4258 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
                HRESULT __stdcall IWinInetHttpInfo_RemoteQueryInfo_Proxy(
              IWinInetHttpInfo * This,
               DWORD dwOption,
                                                               BYTE *pBuffer,
                                 DWORD *pcbBuf,
                                 DWORD *pdwFlags,
                                 DWORD *pdwReserved);


void __stdcall IWinInetHttpInfo_RemoteQueryInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
#line 4286 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0021_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0021_v0_0_s_ifspec;
#line 4296 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
extern const IID IID_IWinInetHttpTimeouts;
#line 4317 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
    typedef struct IWinInetHttpTimeoutsVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IWinInetHttpTimeouts * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IWinInetHttpTimeouts * This);

        ULONG ( __stdcall *Release )(
            IWinInetHttpTimeouts * This);

                           HRESULT ( __stdcall *GetRequestTimeouts )(
            IWinInetHttpTimeouts * This,

                   DWORD *pdwConnectTimeout,

                   DWORD *pdwSendTimeout,

                   DWORD *pdwReceiveTimeout);


    } IWinInetHttpTimeoutsVtbl;

    struct IWinInetHttpTimeouts
    {
                   struct IWinInetHttpTimeoutsVtbl *lpVtbl;
    };
#line 4607 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
extern const GUID SID_BindHost;


extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0024_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0024_v0_0_s_ifspec;







typedef IBindHost *LPBINDHOST;


extern const IID IID_IBindHost;
#line 4655 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
    typedef struct IBindHostVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      IBindHost * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      IBindHost * This);

        ULONG ( __stdcall *Release )(
                      IBindHost * This);

        HRESULT ( __stdcall *CreateMoniker )(
                      IBindHost * This,
                                 LPOLESTR szName,
                                     IBindCtx *pBC,
                                             IMoniker **ppmk,
                       DWORD dwReserved);

                      HRESULT ( __stdcall *MonikerBindToStorage )(
            IBindHost * This,
                       IMoniker *pMk,
                       IBindCtx *pBC,
                       IBindStatusCallback *pBSC,
                       const IID * const riid,
                        void **ppvObj);

                      HRESULT ( __stdcall *MonikerBindToObject )(
            IBindHost * This,
                       IMoniker *pMk,
                       IBindCtx *pBC,
                       IBindStatusCallback *pBSC,
                       const IID * const riid,
                        void **ppvObj);


    } IBindHostVtbl;

    struct IBindHost
    {
                   struct IBindHostVtbl *lpVtbl;
    };
#line 4733 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
                HRESULT __stdcall IBindHost_RemoteMonikerBindToStorage_Proxy(
              IBindHost * This,
                                     IMoniker *pMk,
                                     IBindCtx *pBC,
                                     IBindStatusCallback *pBSC,
                         const IID * const riid,
                                             IUnknown **ppvObj);


void __stdcall IBindHost_RemoteMonikerBindToStorage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall IBindHost_RemoteMonikerBindToObject_Proxy(
              IBindHost * This,
                                     IMoniker *pMk,
                                     IBindCtx *pBC,
                                     IBindStatusCallback *pBSC,
                         const IID * const riid,
                                             IUnknown **ppvObj);


void __stdcall IBindHost_RemoteMonikerBindToObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
#line 4781 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
struct IBindStatusCallback;
extern HRESULT __stdcall HlinkSimpleNavigateToString(
             LPCWSTR szTarget,
             LPCWSTR szLocation,
             LPCWSTR szTargetFrameName,
             IUnknown *pUnk,
             IBindCtx *pbc,
             IBindStatusCallback *,
               DWORD grfHLNF,
               DWORD dwReserved
);

extern HRESULT __stdcall HlinkSimpleNavigateToMoniker(
             IMoniker *pmkTarget,
             LPCWSTR szLocation,
             LPCWSTR szTargetFrameName,
             IUnknown *pUnk,
             IBindCtx *pbc,
             IBindStatusCallback *,
               DWORD grfHLNF,
               DWORD dwReserved
);

extern HRESULT __stdcall URLOpenStreamA( LPUNKNOWN, LPCSTR,DWORD, LPBINDSTATUSCALLBACK);
extern HRESULT __stdcall URLOpenStreamW( LPUNKNOWN, LPCWSTR,DWORD, LPBINDSTATUSCALLBACK);
extern HRESULT __stdcall URLOpenPullStreamA( LPUNKNOWN, LPCSTR,DWORD, LPBINDSTATUSCALLBACK);
extern HRESULT __stdcall URLOpenPullStreamW( LPUNKNOWN, LPCWSTR,DWORD, LPBINDSTATUSCALLBACK);
extern HRESULT __stdcall URLDownloadToFileA( LPUNKNOWN, LPCSTR, LPCSTR,DWORD, LPBINDSTATUSCALLBACK);
extern HRESULT __stdcall URLDownloadToFileW( LPUNKNOWN, LPCWSTR, LPCWSTR,DWORD, LPBINDSTATUSCALLBACK);
extern HRESULT __stdcall URLDownloadToCacheFileA( LPUNKNOWN, LPCSTR, LPSTR, DWORD cchFileName, DWORD, LPBINDSTATUSCALLBACK);
extern HRESULT __stdcall URLDownloadToCacheFileW( LPUNKNOWN, LPCWSTR, LPWSTR, DWORD cchFileName, DWORD, LPBINDSTATUSCALLBACK);
extern HRESULT __stdcall URLOpenBlockingStreamA( LPUNKNOWN, LPCSTR, LPSTREAM*,DWORD, LPBINDSTATUSCALLBACK);
extern HRESULT __stdcall URLOpenBlockingStreamW( LPUNKNOWN, LPCWSTR, LPSTREAM*,DWORD, LPBINDSTATUSCALLBACK);
#line 4830 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
extern HRESULT __stdcall HlinkGoBack( IUnknown *pUnk);
extern HRESULT __stdcall HlinkGoForward( IUnknown *pUnk);
extern HRESULT __stdcall HlinkNavigateString( IUnknown *pUnk, LPCWSTR szTarget);
extern HRESULT __stdcall HlinkNavigateMoniker( IUnknown *pUnk, IMoniker *pmkTarget);
#line 4850 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0025_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0025_v0_0_s_ifspec;







typedef IInternet *LPIINTERNET;


extern const IID IID_IInternet;
#line 4875 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
    typedef struct IInternetVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IInternet * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IInternet * This);

        ULONG ( __stdcall *Release )(
            IInternet * This);


    } IInternetVtbl;

    struct IInternet
    {
                   struct IInternetVtbl *lpVtbl;
    };
#line 4933 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0026_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0026_v0_0_s_ifspec;







typedef IInternetBindInfo *LPIINTERNETBINDINFO;

typedef
enum tagBINDSTRING
    {
        BINDSTRING_HEADERS = 1,
        BINDSTRING_ACCEPT_MIMES = ( BINDSTRING_HEADERS + 1 ) ,
        BINDSTRING_EXTRA_URL = ( BINDSTRING_ACCEPT_MIMES + 1 ) ,
        BINDSTRING_LANGUAGE = ( BINDSTRING_EXTRA_URL + 1 ) ,
        BINDSTRING_USERNAME = ( BINDSTRING_LANGUAGE + 1 ) ,
        BINDSTRING_PASSWORD = ( BINDSTRING_USERNAME + 1 ) ,
        BINDSTRING_UA_PIXELS = ( BINDSTRING_PASSWORD + 1 ) ,
        BINDSTRING_UA_COLOR = ( BINDSTRING_UA_PIXELS + 1 ) ,
        BINDSTRING_OS = ( BINDSTRING_UA_COLOR + 1 ) ,
        BINDSTRING_USER_AGENT = ( BINDSTRING_OS + 1 ) ,
        BINDSTRING_ACCEPT_ENCODINGS = ( BINDSTRING_USER_AGENT + 1 ) ,
        BINDSTRING_POST_COOKIE = ( BINDSTRING_ACCEPT_ENCODINGS + 1 ) ,
        BINDSTRING_POST_DATA_MIME = ( BINDSTRING_POST_COOKIE + 1 ) ,
        BINDSTRING_URL = ( BINDSTRING_POST_DATA_MIME + 1 ) ,
        BINDSTRING_IID = ( BINDSTRING_URL + 1 ) ,
        BINDSTRING_FLAG_BIND_TO_OBJECT = ( BINDSTRING_IID + 1 ) ,
        BINDSTRING_PTR_BIND_CONTEXT = ( BINDSTRING_FLAG_BIND_TO_OBJECT + 1 ) ,
        BINDSTRING_XDR_ORIGIN = ( BINDSTRING_PTR_BIND_CONTEXT + 1 ) ,
        BINDSTRING_DOWNLOADPATH = ( BINDSTRING_XDR_ORIGIN + 1 ) ,
        BINDSTRING_ROOTDOC_URL = ( BINDSTRING_DOWNLOADPATH + 1 ) ,
        BINDSTRING_INITIAL_FILENAME = ( BINDSTRING_ROOTDOC_URL + 1 ) ,
        BINDSTRING_PROXY_USERNAME = ( BINDSTRING_INITIAL_FILENAME + 1 ) ,
        BINDSTRING_PROXY_PASSWORD = ( BINDSTRING_PROXY_USERNAME + 1 ) ,
        BINDSTRING_ENTERPRISE_ID = ( BINDSTRING_PROXY_PASSWORD + 1 )
    } BINDSTRING;


extern const IID IID_IInternetBindInfo;
#line 4998 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
    typedef struct IInternetBindInfoVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IInternetBindInfo * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IInternetBindInfo * This);

        ULONG ( __stdcall *Release )(
            IInternetBindInfo * This);

        HRESULT ( __stdcall *GetBindInfo )(
            IInternetBindInfo * This,
                        DWORD *grfBINDF,
                                    BINDINFO *pbindinfo);

        HRESULT ( __stdcall *GetBindString )(
            IInternetBindInfo * This,
                       ULONG ulStringType,

                        LPOLESTR *ppwzStr,
                       ULONG cEl,
                            ULONG *pcElFetched);


    } IInternetBindInfoVtbl;

    struct IInternetBindInfo
    {
                   struct IInternetBindInfoVtbl *lpVtbl;
    };
#line 5075 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0027_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0027_v0_0_s_ifspec;







typedef IInternetBindInfoEx *LPIINTERNETBINDINFOEX;


extern const IID IID_IInternetBindInfoEx;
#line 5106 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
    typedef struct IInternetBindInfoExVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IInternetBindInfoEx * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IInternetBindInfoEx * This);

        ULONG ( __stdcall *Release )(
            IInternetBindInfoEx * This);

        HRESULT ( __stdcall *GetBindInfo )(
            IInternetBindInfoEx * This,
                        DWORD *grfBINDF,
                                    BINDINFO *pbindinfo);

        HRESULT ( __stdcall *GetBindString )(
            IInternetBindInfoEx * This,
                       ULONG ulStringType,

                        LPOLESTR *ppwzStr,
                       ULONG cEl,
                            ULONG *pcElFetched);

        HRESULT ( __stdcall *GetBindInfoEx )(
            IInternetBindInfoEx * This,
                        DWORD *grfBINDF,
                                    BINDINFO *pbindinfo,
                        DWORD *grfBINDF2,
                        DWORD *pdwReserved);


    } IInternetBindInfoExVtbl;

    struct IInternetBindInfoEx
    {
                   struct IInternetBindInfoExVtbl *lpVtbl;
    };
#line 5194 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0028_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0028_v0_0_s_ifspec;







typedef IInternetProtocolRoot *LPIINTERNETPROTOCOLROOT;

typedef
enum _tagPI_FLAGS
    {
        PI_PARSE_URL = 0x1,
        PI_FILTER_MODE = 0x2,
        PI_FORCE_ASYNC = 0x4,
        PI_USE_WORKERTHREAD = 0x8,
        PI_MIMEVERIFICATION = 0x10,
        PI_CLSIDLOOKUP = 0x20,
        PI_DATAPROGRESS = 0x40,
        PI_SYNCHRONOUS = 0x80,
        PI_APARTMENTTHREADED = 0x100,
        PI_CLASSINSTALL = 0x200,
        PI_PASSONBINDCTX = 0x2000,
        PI_NOMIMEHANDLER = 0x8000,
        PI_LOADAPPDIRECT = 0x4000,
        PD_FORCE_SWITCH = 0x10000,
        PI_PREFERDEFAULTHANDLER = 0x20000
    } PI_FLAGS;

typedef struct _tagPROTOCOLDATA
    {
    DWORD grfFlags;
    DWORD dwState;
    LPVOID pData;
    ULONG cbData;
    } PROTOCOLDATA;

typedef struct _tagStartParam
    {
    IID iid;
    IBindCtx *pIBindCtx;
    IUnknown *pItf;
    } StartParam;


extern const IID IID_IInternetProtocolRoot;
#line 5275 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
    typedef struct IInternetProtocolRootVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IInternetProtocolRoot * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IInternetProtocolRoot * This);

        ULONG ( __stdcall *Release )(
            IInternetProtocolRoot * This);

        HRESULT ( __stdcall *Start )(
            IInternetProtocolRoot * This,
                       LPCWSTR szUrl,
                       IInternetProtocolSink *pOIProtSink,
                       IInternetBindInfo *pOIBindInfo,
                       DWORD grfPI,
                       HANDLE_PTR dwReserved);

        HRESULT ( __stdcall *Continue )(
            IInternetProtocolRoot * This,
                       PROTOCOLDATA *pProtocolData);

        HRESULT ( __stdcall *Abort )(
            IInternetProtocolRoot * This,
                       HRESULT hrReason,
                       DWORD dwOptions);

        HRESULT ( __stdcall *Terminate )(
            IInternetProtocolRoot * This,
                       DWORD dwOptions);

        HRESULT ( __stdcall *Suspend )(
            IInternetProtocolRoot * This);

        HRESULT ( __stdcall *Resume )(
            IInternetProtocolRoot * This);


    } IInternetProtocolRootVtbl;

    struct IInternetProtocolRoot
    {
                   struct IInternetProtocolRootVtbl *lpVtbl;
    };
#line 5378 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0029_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0029_v0_0_s_ifspec;







typedef IInternetProtocol *LPIINTERNETPROTOCOL;


extern const IID IID_IInternetProtocol;
#line 5418 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
    typedef struct IInternetProtocolVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IInternetProtocol * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IInternetProtocol * This);

        ULONG ( __stdcall *Release )(
            IInternetProtocol * This);

        HRESULT ( __stdcall *Start )(
            IInternetProtocol * This,
                       LPCWSTR szUrl,
                       IInternetProtocolSink *pOIProtSink,
                       IInternetBindInfo *pOIBindInfo,
                       DWORD grfPI,
                       HANDLE_PTR dwReserved);

        HRESULT ( __stdcall *Continue )(
            IInternetProtocol * This,
                       PROTOCOLDATA *pProtocolData);

        HRESULT ( __stdcall *Abort )(
            IInternetProtocol * This,
                       HRESULT hrReason,
                       DWORD dwOptions);

        HRESULT ( __stdcall *Terminate )(
            IInternetProtocol * This,
                       DWORD dwOptions);

        HRESULT ( __stdcall *Suspend )(
            IInternetProtocol * This);

        HRESULT ( __stdcall *Resume )(
            IInternetProtocol * This);

        HRESULT ( __stdcall *Read )(
            IInternetProtocol * This,
                                                void *pv,
                       ULONG cb,
                        ULONG *pcbRead);

        HRESULT ( __stdcall *Seek )(
            IInternetProtocol * This,
                       LARGE_INTEGER dlibMove,
                       DWORD dwOrigin,
                        ULARGE_INTEGER *plibNewPosition);

        HRESULT ( __stdcall *LockRequest )(
            IInternetProtocol * This,
                       DWORD dwOptions);

        HRESULT ( __stdcall *UnlockRequest )(
            IInternetProtocol * This);


    } IInternetProtocolVtbl;

    struct IInternetProtocol
    {
                   struct IInternetProtocolVtbl *lpVtbl;
    };
#line 5732 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0031_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0031_v0_0_s_ifspec;







typedef IInternetProtocolSink *LPIINTERNETPROTOCOLSINK;


extern const IID IID_IInternetProtocolSink;
#line 5774 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
    typedef struct IInternetProtocolSinkVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IInternetProtocolSink * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IInternetProtocolSink * This);

        ULONG ( __stdcall *Release )(
            IInternetProtocolSink * This);

        HRESULT ( __stdcall *Switch )(
            IInternetProtocolSink * This,
                       PROTOCOLDATA *pProtocolData);

        HRESULT ( __stdcall *ReportProgress )(
            IInternetProtocolSink * This,
                       ULONG ulStatusCode,
                       LPCWSTR szStatusText);

        HRESULT ( __stdcall *ReportData )(
            IInternetProtocolSink * This,
                       DWORD grfBSCF,
                       ULONG ulProgress,
                       ULONG ulProgressMax);

        HRESULT ( __stdcall *ReportResult )(
            IInternetProtocolSink * This,
                       HRESULT hrResult,
                       DWORD dwError,
                       LPCWSTR szResult);


    } IInternetProtocolSinkVtbl;

    struct IInternetProtocolSink
    {
                   struct IInternetProtocolSinkVtbl *lpVtbl;
    };
#line 5865 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0032_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0032_v0_0_s_ifspec;







typedef IInternetProtocolSinkStackable *LPIINTERNETPROTOCOLSINKStackable;


extern const IID IID_IInternetProtocolSinkStackable;
#line 5897 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
    typedef struct IInternetProtocolSinkStackableVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IInternetProtocolSinkStackable * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IInternetProtocolSinkStackable * This);

        ULONG ( __stdcall *Release )(
            IInternetProtocolSinkStackable * This);

        HRESULT ( __stdcall *SwitchSink )(
            IInternetProtocolSinkStackable * This,
                       IInternetProtocolSink *pOIProtSink);

        HRESULT ( __stdcall *CommitSwitch )(
            IInternetProtocolSinkStackable * This);

        HRESULT ( __stdcall *RollbackSwitch )(
            IInternetProtocolSinkStackable * This);


    } IInternetProtocolSinkStackableVtbl;

    struct IInternetProtocolSinkStackable
    {
                   struct IInternetProtocolSinkStackableVtbl *lpVtbl;
    };
#line 5974 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0033_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0033_v0_0_s_ifspec;







typedef IInternetSession *LPIINTERNETSESSION;

typedef
enum _tagOIBDG_FLAGS
    {
        OIBDG_APARTMENTTHREADED = 0x100,
        OIBDG_DATAONLY = 0x1000
    } OIBDG_FLAGS;


extern const IID IID_IInternetSession;
#line 6047 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
    typedef struct IInternetSessionVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IInternetSession * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IInternetSession * This);

        ULONG ( __stdcall *Release )(
            IInternetSession * This);

        HRESULT ( __stdcall *RegisterNameSpace )(
            IInternetSession * This,
                       IClassFactory *pCF,
                       const IID * const rclsid,
                       LPCWSTR pwzProtocol,
                       ULONG cPatterns,
                       const LPCWSTR *ppwzPatterns,
                       DWORD dwReserved);

        HRESULT ( __stdcall *UnregisterNameSpace )(
            IInternetSession * This,
                       IClassFactory *pCF,
                       LPCWSTR pszProtocol);

        HRESULT ( __stdcall *RegisterMimeFilter )(
            IInternetSession * This,
                       IClassFactory *pCF,
                       const IID * const rclsid,
                       LPCWSTR pwzType);

        HRESULT ( __stdcall *UnregisterMimeFilter )(
            IInternetSession * This,
                       IClassFactory *pCF,
                       LPCWSTR pwzType);

        HRESULT ( __stdcall *CreateBinding )(
            IInternetSession * This,
                       LPBC pBC,
                       LPCWSTR szUrl,
                       IUnknown *pUnkOuter,
                                IUnknown **ppUnk,
                                IInternetProtocol **ppOInetProt,
                       DWORD dwOption);

        HRESULT ( __stdcall *SetSessionOption )(
            IInternetSession * This,
                       DWORD dwOption,
                       LPVOID pBuffer,
                       DWORD dwBufferLength,
                       DWORD dwReserved);

        HRESULT ( __stdcall *GetSessionOption )(
            IInternetSession * This,
                       DWORD dwOption,
                            LPVOID pBuffer,
                            DWORD *pdwBufferLength,
                       DWORD dwReserved);


    } IInternetSessionVtbl;

    struct IInternetSession
    {
                   struct IInternetSessionVtbl *lpVtbl;
    };
#line 6174 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0034_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0034_v0_0_s_ifspec;







typedef IInternetThreadSwitch *LPIINTERNETTHREADSWITCH;


extern const IID IID_IInternetThreadSwitch;
#line 6203 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
    typedef struct IInternetThreadSwitchVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IInternetThreadSwitch * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IInternetThreadSwitch * This);

        ULONG ( __stdcall *Release )(
            IInternetThreadSwitch * This);

        HRESULT ( __stdcall *Prepare )(
            IInternetThreadSwitch * This);

        HRESULT ( __stdcall *Continue )(
            IInternetThreadSwitch * This);


    } IInternetThreadSwitchVtbl;

    struct IInternetThreadSwitch
    {
                   struct IInternetThreadSwitchVtbl *lpVtbl;
    };
#line 6273 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0035_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0035_v0_0_s_ifspec;







typedef IInternetPriority *LPIINTERNETPRIORITY;


extern const IID IID_IInternetPriority;
#line 6304 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
    typedef struct IInternetPriorityVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IInternetPriority * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IInternetPriority * This);

        ULONG ( __stdcall *Release )(
            IInternetPriority * This);

        HRESULT ( __stdcall *SetPriority )(
            IInternetPriority * This,
                       LONG nPriority);

        HRESULT ( __stdcall *GetPriority )(
            IInternetPriority * This,
                        LONG *pnPriority);


    } IInternetPriorityVtbl;

    struct IInternetPriority
    {
                   struct IInternetPriorityVtbl *lpVtbl;
    };
#line 6376 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0036_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0036_v0_0_s_ifspec;







typedef IInternetProtocolInfo *LPIINTERNETPROTOCOLINFO;

typedef
enum _tagPARSEACTION
    {
        PARSE_CANONICALIZE = 1,
        PARSE_FRIENDLY = ( PARSE_CANONICALIZE + 1 ) ,
        PARSE_SECURITY_URL = ( PARSE_FRIENDLY + 1 ) ,
        PARSE_ROOTDOCUMENT = ( PARSE_SECURITY_URL + 1 ) ,
        PARSE_DOCUMENT = ( PARSE_ROOTDOCUMENT + 1 ) ,
        PARSE_ANCHOR = ( PARSE_DOCUMENT + 1 ) ,
        PARSE_ENCODE_IS_UNESCAPE = ( PARSE_ANCHOR + 1 ) ,
        PARSE_DECODE_IS_ESCAPE = ( PARSE_ENCODE_IS_UNESCAPE + 1 ) ,
        PARSE_PATH_FROM_URL = ( PARSE_DECODE_IS_ESCAPE + 1 ) ,
        PARSE_URL_FROM_PATH = ( PARSE_PATH_FROM_URL + 1 ) ,
        PARSE_MIME = ( PARSE_URL_FROM_PATH + 1 ) ,
        PARSE_SERVER = ( PARSE_MIME + 1 ) ,
        PARSE_SCHEMA = ( PARSE_SERVER + 1 ) ,
        PARSE_SITE = ( PARSE_SCHEMA + 1 ) ,
        PARSE_DOMAIN = ( PARSE_SITE + 1 ) ,
        PARSE_LOCATION = ( PARSE_DOMAIN + 1 ) ,
        PARSE_SECURITY_DOMAIN = ( PARSE_LOCATION + 1 ) ,
        PARSE_ESCAPE = ( PARSE_SECURITY_DOMAIN + 1 ) ,
        PARSE_UNESCAPE = ( PARSE_ESCAPE + 1 )
    } PARSEACTION;

typedef
enum _tagPSUACTION
    {
        PSU_DEFAULT = 1,
        PSU_SECURITY_URL_ONLY = ( PSU_DEFAULT + 1 )
    } PSUACTION;

typedef
enum _tagQUERYOPTION
    {
        QUERY_EXPIRATION_DATE = 1,
        QUERY_TIME_OF_LAST_CHANGE = ( QUERY_EXPIRATION_DATE + 1 ) ,
        QUERY_CONTENT_ENCODING = ( QUERY_TIME_OF_LAST_CHANGE + 1 ) ,
        QUERY_CONTENT_TYPE = ( QUERY_CONTENT_ENCODING + 1 ) ,
        QUERY_REFRESH = ( QUERY_CONTENT_TYPE + 1 ) ,
        QUERY_RECOMBINE = ( QUERY_REFRESH + 1 ) ,
        QUERY_CAN_NAVIGATE = ( QUERY_RECOMBINE + 1 ) ,
        QUERY_USES_NETWORK = ( QUERY_CAN_NAVIGATE + 1 ) ,
        QUERY_IS_CACHED = ( QUERY_USES_NETWORK + 1 ) ,
        QUERY_IS_INSTALLEDENTRY = ( QUERY_IS_CACHED + 1 ) ,
        QUERY_IS_CACHED_OR_MAPPED = ( QUERY_IS_INSTALLEDENTRY + 1 ) ,
        QUERY_USES_CACHE = ( QUERY_IS_CACHED_OR_MAPPED + 1 ) ,
        QUERY_IS_SECURE = ( QUERY_USES_CACHE + 1 ) ,
        QUERY_IS_SAFE = ( QUERY_IS_SECURE + 1 ) ,
        QUERY_USES_HISTORYFOLDER = ( QUERY_IS_SAFE + 1 ) ,
        QUERY_IS_CACHED_AND_USABLE_OFFLINE = ( QUERY_USES_HISTORYFOLDER + 1 )
    } QUERYOPTION;


extern const IID IID_IInternetProtocolInfo;
#line 6487 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
    typedef struct IInternetProtocolInfoVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IInternetProtocolInfo * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IInternetProtocolInfo * This);

        ULONG ( __stdcall *Release )(
            IInternetProtocolInfo * This);

        HRESULT ( __stdcall *ParseUrl )(
            IInternetProtocolInfo * This,
                       LPCWSTR pwzUrl,
                       PARSEACTION ParseAction,
                       DWORD dwParseFlags,

                        LPWSTR pwzResult,
                       DWORD cchResult,
                        DWORD *pcchResult,
                       DWORD dwReserved);

        HRESULT ( __stdcall *CombineUrl )(
            IInternetProtocolInfo * This,
                       LPCWSTR pwzBaseUrl,
                       LPCWSTR pwzRelativeUrl,
                       DWORD dwCombineFlags,

                       LPWSTR pwzResult,
                       DWORD cchResult,
                        DWORD *pcchResult,
                       DWORD dwReserved);

        HRESULT ( __stdcall *CompareUrl )(
            IInternetProtocolInfo * This,
                       LPCWSTR pwzUrl1,
                       LPCWSTR pwzUrl2,
                       DWORD dwCompareFlags);

        HRESULT ( __stdcall *QueryInfo )(
            IInternetProtocolInfo * This,
                       LPCWSTR pwzUrl,
                       QUERYOPTION OueryOption,
                       DWORD dwQueryFlags,
                                     LPVOID pBuffer,
                       DWORD cbBuffer,
                            DWORD *pcbBuf,
                       DWORD dwReserved);


    } IInternetProtocolInfoVtbl;

    struct IInternetProtocolInfo
    {
                   struct IInternetProtocolInfoVtbl *lpVtbl;
    };
#line 6639 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
extern HRESULT __stdcall CoInternetParseUrl(
                                             LPCWSTR pwzUrl,
                                             PARSEACTION ParseAction,
                                             DWORD dwFlags,
                                             LPWSTR pszResult,
                                             DWORD cchResult,
                                             DWORD *pcchResult,
                                             DWORD dwReserved
    );
#line 6659 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
extern HRESULT __stdcall CoInternetCombineUrl(
                                             LPCWSTR pwzBaseUrl,
                                             LPCWSTR pwzRelativeUrl,
                                             DWORD dwCombineFlags,
                                             LPWSTR pszResult,
                                             DWORD cchResult,
                                             DWORD *pcchResult,
                                             DWORD dwReserved
    );
#line 6684 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
extern HRESULT __stdcall CoInternetCompareUrl(
    LPCWSTR pwzUrl1,
    LPCWSTR pwzUrl2,
    DWORD dwFlags
    );
extern HRESULT __stdcall CoInternetGetProtocolFlags(
             LPCWSTR pwzUrl,
             DWORD *pdwFlags,
             DWORD dwReserved
    );
extern HRESULT __stdcall CoInternetQueryInfo(
                                                 LPCWSTR pwzUrl,
                                                 QUERYOPTION QueryOptions,
                                                 DWORD dwQueryFlags,
                                                 LPVOID pvBuffer,
                                                 DWORD cbBuffer,
                                                 DWORD *pcbBuffer,
                                                 DWORD dwReserved
    );
extern HRESULT __stdcall CoInternetGetSession(
                 DWORD dwSessionMode,
                 IInternetSession **ppIInternetSession,
                 DWORD dwReserved
    );
extern HRESULT __stdcall CoInternetGetSecurityUrl(
                 LPCWSTR pwszUrl,
                 LPWSTR *ppwszSecUrl,
                 PSUACTION psuAction,
                 DWORD dwReserved
    );
extern HRESULT __stdcall AsyncInstallDistributionUnit(
         LPCWSTR szDistUnit,
             LPCWSTR szTYPE,
             LPCWSTR szExt,
    DWORD dwFileVersionMS,
    DWORD dwFileVersionLS,
             LPCWSTR szURL,
         IBindCtx *pbc,
               LPVOID pvReserved,
    DWORD flags
    );
#line 6827 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
extern HRESULT __stdcall CopyStgMedium( const STGMEDIUM * pcstgmedSrc,
                                STGMEDIUM * pstgmedDest);
extern HRESULT __stdcall CopyBindInfo( const BINDINFO * pcbiSrc,
                               BINDINFO * pbiDest );
extern void __stdcall ReleaseBindInfo( BINDINFO * pbindinfo );
#line 6854 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
extern PWSTR __stdcall IEGetUserPrivateNamespaceName(void);



extern HRESULT __stdcall CoInternetCreateSecurityManager( IServiceProvider *pSP, IInternetSecurityManager **ppSM, DWORD dwReserved);

extern HRESULT __stdcall CoInternetCreateZoneManager( IServiceProvider *pSP, IInternetZoneManager **ppZM, DWORD dwReserved);



extern const IID CLSID_InternetSecurityManager;
extern const IID CLSID_InternetZoneManager;
#line 6886 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0037_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0037_v0_0_s_ifspec;
#line 6896 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
extern const IID IID_IInternetSecurityMgrSite;
#line 6915 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
    typedef struct IInternetSecurityMgrSiteVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IInternetSecurityMgrSite * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IInternetSecurityMgrSite * This);

        ULONG ( __stdcall *Release )(
            IInternetSecurityMgrSite * This);

        HRESULT ( __stdcall *GetWindow )(
            IInternetSecurityMgrSite * This,
                        HWND *phwnd);

        HRESULT ( __stdcall *EnableModeless )(
            IInternetSecurityMgrSite * This,
                       BOOL fEnable);


    } IInternetSecurityMgrSiteVtbl;

    struct IInternetSecurityMgrSite
    {
                   struct IInternetSecurityMgrSiteVtbl *lpVtbl;
    };
#line 6987 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0038_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0038_v0_0_s_ifspec;
#line 7008 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
typedef
enum __MIDL_IInternetSecurityManager_0001
    {
        PUAF_DEFAULT = 0,
        PUAF_NOUI = 0x1,
        PUAF_ISFILE = 0x2,
        PUAF_WARN_IF_DENIED = 0x4,
        PUAF_FORCEUI_FOREGROUND = 0x8,
        PUAF_CHECK_TIFS = 0x10,
        PUAF_DONTCHECKBOXINDIALOG = 0x20,
        PUAF_TRUSTED = 0x40,
        PUAF_ACCEPT_WILDCARD_SCHEME = 0x80,
        PUAF_ENFORCERESTRICTED = 0x100,
        PUAF_NOSAVEDFILECHECK = 0x200,
        PUAF_REQUIRESAVEDFILECHECK = 0x400,
        PUAF_DONT_USE_CACHE = 0x1000,
        PUAF_RESERVED1 = 0x2000,
        PUAF_RESERVED2 = 0x4000,
        PUAF_LMZ_UNLOCKED = 0x10000,
        PUAF_LMZ_LOCKED = 0x20000,
        PUAF_DEFAULTZONEPOL = 0x40000,
        PUAF_NPL_USE_LOCKED_IF_RESTRICTED = 0x80000,
        PUAF_NOUIIFLOCKED = 0x100000,
        PUAF_DRAGPROTOCOLCHECK = 0x200000
    } PUAF;

typedef
enum __MIDL_IInternetSecurityManager_0002
    {
        PUAFOUT_DEFAULT = 0,
        PUAFOUT_ISLOCKZONEPOLICY = 0x1
    } PUAFOUT;







typedef
enum __MIDL_IInternetSecurityManager_0003
    {
        SZM_CREATE = 0,
        SZM_DELETE = 0x1
    } SZM_FLAGS;
#line 7069 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
extern const IID IID_IInternetSecurityManager;
#line 7128 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
    typedef struct IInternetSecurityManagerVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      IInternetSecurityManager * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      IInternetSecurityManager * This);

        ULONG ( __stdcall *Release )(
                      IInternetSecurityManager * This);

        HRESULT ( __stdcall *SetSecuritySite )(
                      IInternetSecurityManager * This,
                                             IInternetSecurityMgrSite *pSite);

        HRESULT ( __stdcall *GetSecuritySite )(
                      IInternetSecurityManager * This,
                                             IInternetSecurityMgrSite **ppSite);

        HRESULT ( __stdcall *MapUrlToZone )(
                      IInternetSecurityManager * This,
                                 LPCWSTR pwszUrl,
                                   DWORD *pdwZone,
                       DWORD dwFlags);

        HRESULT ( __stdcall *GetSecurityId )(
                      IInternetSecurityManager * This,
                                 LPCWSTR pwszUrl,
                                                                        BYTE *pbSecurityId,
                                         DWORD *pcbSecurityId,
                       DWORD_PTR dwReserved);

        HRESULT ( __stdcall *ProcessUrlAction )(
                      IInternetSecurityManager * This,
                                 LPCWSTR pwszUrl,
                       DWORD dwAction,
                                                                  BYTE *pPolicy,
                       DWORD cbPolicy,
                                             BYTE *pContext,
                       DWORD cbContext,
                       DWORD dwFlags,
                       DWORD dwReserved);

        HRESULT ( __stdcall *QueryCustomPolicy )(
                      IInternetSecurityManager * This,
                                 LPCWSTR pwszUrl,
                                 const GUID * const guidKey,
                                                                                       BYTE **ppPolicy,
                                   DWORD *pcbPolicy,
                                 BYTE *pContext,
                       DWORD cbContext,
                       DWORD dwReserved);

        HRESULT ( __stdcall *SetZoneMapping )(
                      IInternetSecurityManager * This,
                       DWORD dwZone,
                                 LPCWSTR lpszPattern,
                       DWORD dwFlags);

        HRESULT ( __stdcall *GetZoneMappings )(
                      IInternetSecurityManager * This,
                       DWORD dwZone,
                                             IEnumString **ppenumString,
                       DWORD dwFlags);


    } IInternetSecurityManagerVtbl;

    struct IInternetSecurityManager
    {
                   struct IInternetSecurityManagerVtbl *lpVtbl;
    };
#line 7971 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0043_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0043_v0_0_s_ifspec;
#line 7981 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
extern const IID IID_IInternetHostSecurityManager;
#line 8023 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
    typedef struct IInternetHostSecurityManagerVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IInternetHostSecurityManager * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IInternetHostSecurityManager * This);

        ULONG ( __stdcall *Release )(
            IInternetHostSecurityManager * This);

        HRESULT ( __stdcall *GetSecurityId )(
            IInternetHostSecurityManager * This,

                                          BYTE *pbSecurityId,

                                                                                                                 DWORD *pcbSecurityId,
                       DWORD_PTR dwReserved);

        HRESULT ( __stdcall *ProcessUrlAction )(
            IInternetHostSecurityManager * This,
                       DWORD dwAction,

                                        BYTE *pPolicy,
                       DWORD cbPolicy,

                                       BYTE *pContext,
                       DWORD cbContext,
                       DWORD dwFlags,
                       DWORD dwReserved);

        HRESULT ( __stdcall *QueryCustomPolicy )(
            IInternetHostSecurityManager * This,
                       const GUID * const guidKey,

                                                              BYTE **ppPolicy,

                   DWORD *pcbPolicy,

                                   BYTE *pContext,
                       DWORD cbContext,
                       DWORD dwReserved);


    } IInternetHostSecurityManagerVtbl;

    struct IInternetHostSecurityManager
    {
                   struct IInternetHostSecurityManagerVtbl *lpVtbl;
    };
#line 8385 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0044_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0044_v0_0_s_ifspec;







typedef IInternetZoneManager *LPURLZONEMANAGER;

typedef
enum tagURLZONE
    {
        URLZONE_INVALID = -1,
        URLZONE_PREDEFINED_MIN = 0,
        URLZONE_LOCAL_MACHINE = 0,
        URLZONE_INTRANET = ( URLZONE_LOCAL_MACHINE + 1 ) ,
        URLZONE_TRUSTED = ( URLZONE_INTRANET + 1 ) ,
        URLZONE_INTERNET = ( URLZONE_TRUSTED + 1 ) ,
        URLZONE_UNTRUSTED = ( URLZONE_INTERNET + 1 ) ,
        URLZONE_PREDEFINED_MAX = 999,
        URLZONE_USER_MIN = 1000,
        URLZONE_USER_MAX = 10000
    } URLZONE;



typedef
enum tagURLTEMPLATE
    {
        URLTEMPLATE_CUSTOM = 0,
        URLTEMPLATE_PREDEFINED_MIN = 0x10000,
        URLTEMPLATE_LOW = 0x10000,
        URLTEMPLATE_MEDLOW = 0x10500,
        URLTEMPLATE_MEDIUM = 0x11000,
        URLTEMPLATE_MEDHIGH = 0x11500,
        URLTEMPLATE_HIGH = 0x12000,
        URLTEMPLATE_PREDEFINED_MAX = 0x20000
    } URLTEMPLATE;


enum __MIDL_IInternetZoneManager_0001
    {
        MAX_ZONE_PATH = 260,
        MAX_ZONE_DESCRIPTION = 200
    } ;
typedef
enum __MIDL_IInternetZoneManager_0002
    {
        ZAFLAGS_CUSTOM_EDIT = 0x1,
        ZAFLAGS_ADD_SITES = 0x2,
        ZAFLAGS_REQUIRE_VERIFICATION = 0x4,
        ZAFLAGS_INCLUDE_PROXY_OVERRIDE = 0x8,
        ZAFLAGS_INCLUDE_INTRANET_SITES = 0x10,
        ZAFLAGS_NO_UI = 0x20,
        ZAFLAGS_SUPPORTS_VERIFICATION = 0x40,
        ZAFLAGS_UNC_AS_INTRANET = 0x80,
        ZAFLAGS_DETECT_INTRANET = 0x100,
        ZAFLAGS_USE_LOCKED_ZONES = 0x10000,
        ZAFLAGS_VERIFY_TEMPLATE_SETTINGS = 0x20000,
        ZAFLAGS_NO_CACHE = 0x40000
    } ZAFLAGS;

typedef struct _ZONEATTRIBUTES
    {
    ULONG cbSize;
    WCHAR szDisplayName[ 260 ];
    WCHAR szDescription[ 200 ];
    WCHAR szIconPath[ 260 ];
    DWORD dwTemplateMinLevel;
    DWORD dwTemplateRecommended;
    DWORD dwTemplateCurrentLevel;
    DWORD dwFlags;
    } ZONEATTRIBUTES;

typedef struct _ZONEATTRIBUTES *LPZONEATTRIBUTES;
#line 8479 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
typedef
enum _URLZONEREG
    {
        URLZONEREG_DEFAULT = 0,
        URLZONEREG_HKLM = ( URLZONEREG_DEFAULT + 1 ) ,
        URLZONEREG_HKCU = ( URLZONEREG_HKLM + 1 )
    } URLZONEREG;
#line 8518 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
extern const IID IID_IInternetZoneManager;
#line 8605 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
    typedef struct IInternetZoneManagerVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IInternetZoneManager * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IInternetZoneManager * This);

        ULONG ( __stdcall *Release )(
            IInternetZoneManager * This);

        HRESULT ( __stdcall *GetZoneAttributes )(
            IInternetZoneManager * This,
                       DWORD dwZone,

                     ZONEATTRIBUTES *pZoneAttributes);

        HRESULT ( __stdcall *SetZoneAttributes )(
            IInternetZoneManager * This,
                       DWORD dwZone,

                  ZONEATTRIBUTES *pZoneAttributes);

        HRESULT ( __stdcall *GetZoneCustomPolicy )(
            IInternetZoneManager * This,
                       DWORD dwZone,
                       const GUID * const guidKey,

                                                BYTE **ppPolicy,

                   DWORD *pcbPolicy,
                       URLZONEREG urlZoneReg);

        HRESULT ( __stdcall *SetZoneCustomPolicy )(
            IInternetZoneManager * This,
                       DWORD dwZone,
                       const GUID * const guidKey,

                                  BYTE *pPolicy,
                       DWORD cbPolicy,
                       URLZONEREG urlZoneReg);

        HRESULT ( __stdcall *GetZoneActionPolicy )(
            IInternetZoneManager * This,
                       DWORD dwZone,
                       DWORD dwAction,

                                    BYTE *pPolicy,
                       DWORD cbPolicy,
                       URLZONEREG urlZoneReg);

        HRESULT ( __stdcall *SetZoneActionPolicy )(
            IInternetZoneManager * This,
                       DWORD dwZone,
                       DWORD dwAction,

                                  BYTE *pPolicy,
                       DWORD cbPolicy,
                       URLZONEREG urlZoneReg);

        HRESULT ( __stdcall *PromptAction )(
            IInternetZoneManager * This,
                       DWORD dwAction,
                       HWND hwndParent,
                       LPCWSTR pwszUrl,
                       LPCWSTR pwszText,
                       DWORD dwPromptFlags);

        HRESULT ( __stdcall *LogAction )(
            IInternetZoneManager * This,
                       DWORD dwAction,
                       LPCWSTR pwszUrl,
                       LPCWSTR pwszText,
                       DWORD dwLogFlags);

        HRESULT ( __stdcall *CreateZoneEnumerator )(
            IInternetZoneManager * This,
                        DWORD *pdwEnum,
                        DWORD *pdwCount,
                       DWORD dwFlags);

        HRESULT ( __stdcall *GetZoneAt )(
            IInternetZoneManager * This,
                       DWORD dwEnum,
                       DWORD dwIndex,
                        DWORD *pdwZone);

        HRESULT ( __stdcall *DestroyZoneEnumerator )(
            IInternetZoneManager * This,
                       DWORD dwEnum);

        HRESULT ( __stdcall *CopyTemplatePoliciesToZone )(
            IInternetZoneManager * This,
                       DWORD dwTemplate,
                       DWORD dwZone,
                       DWORD dwReserved);


    } IInternetZoneManagerVtbl;

    struct IInternetZoneManager
    {
                   struct IInternetZoneManagerVtbl *lpVtbl;
    };
#line 9331 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
extern const IID CLSID_SoftDistExt;
#line 9346 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
typedef struct _tagCODEBASEHOLD
    {
    ULONG cbSize;
    LPWSTR szDistUnit;
    LPWSTR szCodeBase;
    DWORD dwVersionMS;
    DWORD dwVersionLS;
    DWORD dwStyle;
    } CODEBASEHOLD;

typedef struct _tagCODEBASEHOLD *LPCODEBASEHOLD;

typedef struct _tagSOFTDISTINFO
    {
    ULONG cbSize;
    DWORD dwFlags;
    DWORD dwAdState;
    LPWSTR szTitle;
    LPWSTR szAbstract;
    LPWSTR szHREF;
    DWORD dwInstalledVersionMS;
    DWORD dwInstalledVersionLS;
    DWORD dwUpdateVersionMS;
    DWORD dwUpdateVersionLS;
    DWORD dwAdvertisedVersionMS;
    DWORD dwAdvertisedVersionLS;
    DWORD dwReserved;
    } SOFTDISTINFO;

typedef struct _tagSOFTDISTINFO *LPSOFTDISTINFO;



extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0047_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0047_v0_0_s_ifspec;
#line 9389 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
extern const IID IID_ISoftDistExt;
#line 9423 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
    typedef struct ISoftDistExtVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            ISoftDistExt * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            ISoftDistExt * This);

        ULONG ( __stdcall *Release )(
            ISoftDistExt * This);

        HRESULT ( __stdcall *ProcessSoftDist )(
            ISoftDistExt * This,
                       LPCWSTR szCDFURL,
                       IXMLElement *pSoftDistElement,
                            LPSOFTDISTINFO lpsdi);

        HRESULT ( __stdcall *GetFirstCodeBase )(
            ISoftDistExt * This,

                       LPWSTR *szCodeBase,
                       LPDWORD dwMaxSize);

        HRESULT ( __stdcall *GetNextCodeBase )(
            ISoftDistExt * This,

                       LPWSTR *szCodeBase,
                       LPDWORD dwMaxSize);

        HRESULT ( __stdcall *AsyncInstallDistributionUnit )(
            ISoftDistExt * This,
                       IBindCtx *pbc,
                       LPVOID pvReserved,
                       DWORD flags,
                       LPCODEBASEHOLD lpcbh);


    } ISoftDistExtVtbl;

    struct ISoftDistExt
    {
                   struct ISoftDistExtVtbl *lpVtbl;
    };
#line 9513 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
extern HRESULT __stdcall GetSoftwareUpdateInfo( LPCWSTR szDistUnit, LPSOFTDISTINFO psdi );
extern HRESULT __stdcall SetSoftwareUpdateAdvertisementState( LPCWSTR szDistUnit, DWORD dwAdState, DWORD dwAdvertisedVersionMS, DWORD dwAdvertisedVersionLS );





extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0048_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0048_v0_0_s_ifspec;







typedef ICatalogFileInfo *LPCATALOGFILEINFO;


extern const IID IID_ICatalogFileInfo;
#line 9552 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
    typedef struct ICatalogFileInfoVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            ICatalogFileInfo * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            ICatalogFileInfo * This);

        ULONG ( __stdcall *Release )(
            ICatalogFileInfo * This);

        HRESULT ( __stdcall *GetCatalogFile )(
            ICatalogFileInfo * This,

                        LPSTR *ppszCatalogFile);

        HRESULT ( __stdcall *GetJavaTrust )(
            ICatalogFileInfo * This,
                        void **ppJavaTrust);


    } ICatalogFileInfoVtbl;

    struct ICatalogFileInfo
    {
                   struct ICatalogFileInfoVtbl *lpVtbl;
    };
#line 9625 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0049_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0049_v0_0_s_ifspec;







typedef IDataFilter *LPDATAFILTER;


extern const IID IID_IDataFilter;
#line 9675 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
    typedef struct IDataFilterVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      IDataFilter * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      IDataFilter * This);

        ULONG ( __stdcall *Release )(
                      IDataFilter * This);

        HRESULT ( __stdcall *DoEncode )(
                      IDataFilter * This,
                       DWORD dwFlags,
                       LONG lInBufferSize,
                                                                     BYTE *pbInBuffer,
                       LONG lOutBufferSize,
                                                                        BYTE *pbOutBuffer,
                       LONG lInBytesAvailable,
                                   LONG *plInBytesRead,
                                   LONG *plOutBytesWritten,
                       DWORD dwReserved);

        HRESULT ( __stdcall *DoDecode )(
                      IDataFilter * This,
                       DWORD dwFlags,
                       LONG lInBufferSize,
                                                                     BYTE *pbInBuffer,
                       LONG lOutBufferSize,
                                                                        BYTE *pbOutBuffer,
                       LONG lInBytesAvailable,
                                   LONG *plInBytesRead,
                                   LONG *plOutBytesWritten,
                       DWORD dwReserved);

        HRESULT ( __stdcall *SetEncodingLevel )(
                      IDataFilter * This,
                       DWORD dwEncLevel);


    } IDataFilterVtbl;

    struct IDataFilter
    {
                   struct IDataFilterVtbl *lpVtbl;
    };
#line 9768 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
typedef struct _tagPROTOCOLFILTERDATA
    {
    DWORD cbSize;
    IInternetProtocolSink *pProtocolSink;
    IInternetProtocol *pProtocol;
    IUnknown *pUnk;
    DWORD dwFilterFlags;
    } PROTOCOLFILTERDATA;



extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0050_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0050_v0_0_s_ifspec;







typedef IEncodingFilterFactory *LPENCODINGFILTERFACTORY;

typedef struct _tagDATAINFO
    {
    ULONG ulTotalSize;
    ULONG ulavrPacketSize;
    ULONG ulConnectSpeed;
    ULONG ulProcessorSpeed;
    } DATAINFO;


extern const IID IID_IEncodingFilterFactory;
#line 9823 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
    typedef struct IEncodingFilterFactoryVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IEncodingFilterFactory * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IEncodingFilterFactory * This);

        ULONG ( __stdcall *Release )(
            IEncodingFilterFactory * This);

        HRESULT ( __stdcall *FindBestFilter )(
            IEncodingFilterFactory * This,
                       LPCWSTR pwzCodeIn,
                       LPCWSTR pwzCodeOut,
                       DATAINFO info,
                        IDataFilter **ppDF);

        HRESULT ( __stdcall *GetDefaultFilter )(
            IEncodingFilterFactory * This,
                       LPCWSTR pwzCodeIn,
                       LPCWSTR pwzCodeOut,
                        IDataFilter **ppDF);


    } IEncodingFilterFactoryVtbl;

    struct IEncodingFilterFactory
    {
                   struct IEncodingFilterFactoryVtbl *lpVtbl;
    };
#line 9899 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
BOOL __stdcall IsLoggingEnabledA( LPCSTR pszUrl);
BOOL __stdcall IsLoggingEnabledW( LPCWSTR pwszUrl);





typedef struct _tagHIT_LOGGING_INFO
    {
    DWORD dwStructSize;
    LPSTR lpszLoggedUrlName;
    SYSTEMTIME StartTime;
    SYSTEMTIME EndTime;
    LPSTR lpszExtendedInfo;
    } HIT_LOGGING_INFO;

typedef struct _tagHIT_LOGGING_INFO *LPHIT_LOGGING_INFO;

BOOL __stdcall WriteHitLogging( LPHIT_LOGGING_INFO lpLogginginfo);

struct CONFIRMSAFETY
    {
    CLSID clsid;
    IUnknown *pUnk;
    DWORD dwFlags;
    } ;
extern const GUID GUID_CUSTOM_CONFIRMOBJECTSAFETY;





extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0051_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0051_v0_0_s_ifspec;







typedef IWrappedProtocol *LPIWRAPPEDPROTOCOL;


extern const IID IID_IWrappedProtocol;
#line 9960 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
    typedef struct IWrappedProtocolVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IWrappedProtocol * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IWrappedProtocol * This);

        ULONG ( __stdcall *Release )(
            IWrappedProtocol * This);

        HRESULT ( __stdcall *GetWrapperCode )(
            IWrappedProtocol * This,
                        LONG *pnCode,
                       DWORD_PTR dwReserved);


    } IWrappedProtocolVtbl;

    struct IWrappedProtocol
    {
                   struct IWrappedProtocolVtbl *lpVtbl;
    };
#line 10026 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0052_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0052_v0_0_s_ifspec;







typedef IGetBindHandle *LPGETBINDHANDLE;

typedef
enum __MIDL_IGetBindHandle_0001
    {
        BINDHANDLETYPES_APPCACHE = 0,
        BINDHANDLETYPES_DEPENDENCY = 0x1,
        BINDHANDLETYPES_COUNT = ( BINDHANDLETYPES_DEPENDENCY + 1 )
    } BINDHANDLETYPES;


extern const IID IID_IGetBindHandle;
#line 10063 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
    typedef struct IGetBindHandleVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IGetBindHandle * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IGetBindHandle * This);

        ULONG ( __stdcall *Release )(
            IGetBindHandle * This);

        HRESULT ( __stdcall *GetBindHandle )(
            IGetBindHandle * This,
                       BINDHANDLETYPES enumRequestedHandle,
                        HANDLE *pRetHandle);


    } IGetBindHandleVtbl;

    struct IGetBindHandle
    {
                   struct IGetBindHandleVtbl *lpVtbl;
    };
#line 10127 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
typedef struct _tagPROTOCOL_ARGUMENT
    {
    LPCWSTR szMethod;
    LPCWSTR szTargetUrl;
    } PROTOCOL_ARGUMENT;

typedef struct _tagPROTOCOL_ARGUMENT *LPPROTOCOL_ARGUMENT;






extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0053_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0053_v0_0_s_ifspec;







typedef IBindCallbackRedirect *LPBINDCALLBACKREDIRECT;


extern const IID IID_IBindCallbackRedirect;
#line 10169 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
    typedef struct IBindCallbackRedirectVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
            IBindCallbackRedirect * This,
                       const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
            IBindCallbackRedirect * This);

        ULONG ( __stdcall *Release )(
            IBindCallbackRedirect * This);

        HRESULT ( __stdcall *Redirect )(
            IBindCallbackRedirect * This,
                       LPCWSTR lpcUrl,
                        VARIANT_BOOL *vbCancel);


    } IBindCallbackRedirectVtbl;

    struct IBindCallbackRedirect
    {
                   struct IBindCallbackRedirectVtbl *lpVtbl;
    };
#line 10235 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0054_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0054_v0_0_s_ifspec;
#line 10245 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
extern const IID IID_IBindHttpSecurity;
#line 10261 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
    typedef struct IBindHttpSecurityVtbl
    {


        HRESULT ( __stdcall *QueryInterface )(
                      IBindHttpSecurity * This,
                                 const IID * const riid,

                          void **ppvObject);

        ULONG ( __stdcall *AddRef )(
                      IBindHttpSecurity * This);

        ULONG ( __stdcall *Release )(
                      IBindHttpSecurity * This);

        HRESULT ( __stdcall *GetIgnoreCertMask )(
                      IBindHttpSecurity * This,
                                        DWORD *pdwIgnoreCertMask);


    } IBindHttpSecurityVtbl;

    struct IBindHttpSecurity
    {
                   struct IBindHttpSecurityVtbl *lpVtbl;
    };
#line 10323 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
#pragma endregion





extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0055_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0055_v0_0_s_ifspec;



unsigned long __stdcall BSTR_UserSize( unsigned long *, unsigned long , BSTR * );
unsigned char * __stdcall BSTR_UserMarshal( unsigned long *, unsigned char *, BSTR * );
unsigned char * __stdcall BSTR_UserUnmarshal( unsigned long *, unsigned char *, BSTR * );
void __stdcall BSTR_UserFree( unsigned long *, BSTR * );

unsigned long __stdcall HWND_UserSize( unsigned long *, unsigned long , HWND * );
unsigned char * __stdcall HWND_UserMarshal( unsigned long *, unsigned char *, HWND * );
unsigned char * __stdcall HWND_UserUnmarshal( unsigned long *, unsigned char *, HWND * );
void __stdcall HWND_UserFree( unsigned long *, HWND * );

unsigned long __stdcall BSTR_UserSize64( unsigned long *, unsigned long , BSTR * );
unsigned char * __stdcall BSTR_UserMarshal64( unsigned long *, unsigned char *, BSTR * );
unsigned char * __stdcall BSTR_UserUnmarshal64( unsigned long *, unsigned char *, BSTR * );
void __stdcall BSTR_UserFree64( unsigned long *, BSTR * );

unsigned long __stdcall HWND_UserSize64( unsigned long *, unsigned long , HWND * );
unsigned char * __stdcall HWND_UserMarshal64( unsigned long *, unsigned char *, HWND * );
unsigned char * __stdcall HWND_UserUnmarshal64( unsigned long *, unsigned char *, HWND * );
void __stdcall HWND_UserFree64( unsigned long *, HWND * );

              HRESULT __stdcall IBinding_GetBindResult_Proxy(
    IBinding * This,
                CLSID *pclsidProtocol,
                DWORD *pdwResult,

                LPOLESTR *pszResult,
                    DWORD *pdwReserved);


                HRESULT __stdcall IBinding_GetBindResult_Stub(
              IBinding * This,
                           CLSID *pclsidProtocol,
                           DWORD *pdwResult,
                                     LPOLESTR *pszResult,
               DWORD dwReserved);

              HRESULT __stdcall IBindStatusCallback_GetBindInfo_Proxy(
    IBindStatusCallback * This,
                DWORD *grfBINDF,
                            BINDINFO *pbindinfo);


                HRESULT __stdcall IBindStatusCallback_GetBindInfo_Stub(
              IBindStatusCallback * This,
                           DWORD *grfBINDF,
                                             RemBINDINFO *pbindinfo,
                                             RemSTGMEDIUM *pstgmed);

              HRESULT __stdcall IBindStatusCallback_OnDataAvailable_Proxy(
    IBindStatusCallback * This,
               DWORD grfBSCF,
               DWORD dwSize,
               FORMATETC *pformatetc,
               STGMEDIUM *pstgmed);


                HRESULT __stdcall IBindStatusCallback_OnDataAvailable_Stub(
              IBindStatusCallback * This,
               DWORD grfBSCF,
               DWORD dwSize,
                         RemFORMATETC *pformatetc,
                         RemSTGMEDIUM *pstgmed);

              HRESULT __stdcall IBindStatusCallbackEx_GetBindInfoEx_Proxy(
    IBindStatusCallbackEx * This,
                DWORD *grfBINDF,
                            BINDINFO *pbindinfo,
                DWORD *grfBINDF2,
                DWORD *pdwReserved);


                HRESULT __stdcall IBindStatusCallbackEx_GetBindInfoEx_Stub(
              IBindStatusCallbackEx * This,
                           DWORD *grfBINDF,
                                             RemBINDINFO *pbindinfo,
                                             RemSTGMEDIUM *pstgmed,
                           DWORD *grfBINDF2,
                           DWORD *pdwReserved);

              HRESULT __stdcall IWinInetInfo_QueryOption_Proxy(
    IWinInetInfo * This,
               DWORD dwOption,
                             LPVOID pBuffer,
                    DWORD *pcbBuf);


                HRESULT __stdcall IWinInetInfo_QueryOption_Stub(
              IWinInetInfo * This,
               DWORD dwOption,
                                                               BYTE *pBuffer,
                                 DWORD *pcbBuf);

              HRESULT __stdcall IWinInetHttpInfo_QueryInfo_Proxy(
    IWinInetHttpInfo * This,
               DWORD dwOption,
                             LPVOID pBuffer,
                    DWORD *pcbBuf,
                    DWORD *pdwFlags,
                    DWORD *pdwReserved);


                HRESULT __stdcall IWinInetHttpInfo_QueryInfo_Stub(
              IWinInetHttpInfo * This,
               DWORD dwOption,
                                                               BYTE *pBuffer,
                                 DWORD *pcbBuf,
                                 DWORD *pdwFlags,
                                 DWORD *pdwReserved);

              HRESULT __stdcall IBindHost_MonikerBindToStorage_Proxy(
    IBindHost * This,
               IMoniker *pMk,
               IBindCtx *pBC,
               IBindStatusCallback *pBSC,
               const IID * const riid,
                void **ppvObj);


                HRESULT __stdcall IBindHost_MonikerBindToStorage_Stub(
              IBindHost * This,
                                     IMoniker *pMk,
                                     IBindCtx *pBC,
                                     IBindStatusCallback *pBSC,
                         const IID * const riid,
                                             IUnknown **ppvObj);

              HRESULT __stdcall IBindHost_MonikerBindToObject_Proxy(
    IBindHost * This,
               IMoniker *pMk,
               IBindCtx *pBC,
               IBindStatusCallback *pBSC,
               const IID * const riid,
                void **ppvObj);


                HRESULT __stdcall IBindHost_MonikerBindToObject_Stub(
              IBindHost * This,
                                     IMoniker *pMk,
                                     IBindCtx *pBC,
                                     IBindStatusCallback *pBSC,
                         const IID * const riid,
                                             IUnknown **ppvObj);
#line 10488 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\urlmon.h"
#pragma option pop
#line 258 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objbase.h"

#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\propidl.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 22 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\propidl.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpc.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 227 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpc.h"
#pragma option pop
#line 22 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\propidl.h"

#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcndr.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 3292 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcndr.h"
#pragma option pop
#line 23 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\propidl.h"
#line 72 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\propidl.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 22 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpc.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 227 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpc.h"
#pragma option pop
#line 22 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"

#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcndr.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 3292 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcndr.h"
#pragma option pop
#line 23 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
#line 15159 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objidl.h"
#pragma option pop
#line 72 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\propidl.h"

#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oaidl.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 22 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oaidl.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpc.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 227 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpc.h"
#pragma option pop
#line 22 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oaidl.h"

#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcndr.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 3292 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\rpcndr.h"
#pragma option pop
#line 23 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oaidl.h"
#line 5764 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/oaidl.h"
#pragma option pop
#line 73 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\propidl.h"
#line 1094 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\propidl.h"
#pragma region Desktop Family or OneCore Family
#line 1155 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\propidl.h"
enum PIDMSI_STATUS_VALUE
    {
        PIDMSI_STATUS_NORMAL = 0,
        PIDMSI_STATUS_NEW = ( PIDMSI_STATUS_NORMAL + 1 ) ,
        PIDMSI_STATUS_PRELIM = ( PIDMSI_STATUS_NEW + 1 ) ,
        PIDMSI_STATUS_DRAFT = ( PIDMSI_STATUS_PRELIM + 1 ) ,
        PIDMSI_STATUS_INPROGRESS = ( PIDMSI_STATUS_DRAFT + 1 ) ,
        PIDMSI_STATUS_EDIT = ( PIDMSI_STATUS_INPROGRESS + 1 ) ,
        PIDMSI_STATUS_REVIEW = ( PIDMSI_STATUS_EDIT + 1 ) ,
        PIDMSI_STATUS_PROOF = ( PIDMSI_STATUS_REVIEW + 1 ) ,
        PIDMSI_STATUS_FINAL = ( PIDMSI_STATUS_PROOF + 1 ) ,
        PIDMSI_STATUS_OTHER = 0x7fff
    } ;

#pragma endregion
#pragma region Application Family or OneCore Family

 extern HRESULT __stdcall PropVariantCopy(
                  PROPVARIANT* pvarDest,
                 const PROPVARIANT * pvarSrc);

extern HRESULT __stdcall PropVariantClear( PROPVARIANT* pvar);

extern HRESULT __stdcall FreePropVariantArray(
                 ULONG cVariants,
                                       PROPVARIANT* rgvars);
#line 1205 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\propidl.h"
#pragma endregion

#pragma region Desktop Family




typedef struct tagSERIALIZEDPROPERTYVALUE
{
    DWORD dwType;
    BYTE rgb[1];
} SERIALIZEDPROPERTYVALUE;


extern

SERIALIZEDPROPERTYVALUE* __stdcall
StgConvertVariantToProperty(
                 const PROPVARIANT* pvar,
                 USHORT CodePage,
                                         SERIALIZEDPROPERTYVALUE* pprop,
                    ULONG* pcb,
                 PROPID pid,
                       BOOLEAN fReserved,
                        ULONG* pcIndirect);
#line 1245 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\propidl.h"
#pragma endregion
#line 1255 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\propidl.h"
extern RPC_IF_HANDLE __MIDL_itf_propidl_0000_0004_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_propidl_0000_0004_v0_0_s_ifspec;



unsigned long __stdcall BSTR_UserSize( unsigned long *, unsigned long , BSTR * );
unsigned char * __stdcall BSTR_UserMarshal( unsigned long *, unsigned char *, BSTR * );
unsigned char * __stdcall BSTR_UserUnmarshal( unsigned long *, unsigned char *, BSTR * );
void __stdcall BSTR_UserFree( unsigned long *, BSTR * );

unsigned long __stdcall LPSAFEARRAY_UserSize( unsigned long *, unsigned long , LPSAFEARRAY * );
unsigned char * __stdcall LPSAFEARRAY_UserMarshal( unsigned long *, unsigned char *, LPSAFEARRAY * );
unsigned char * __stdcall LPSAFEARRAY_UserUnmarshal( unsigned long *, unsigned char *, LPSAFEARRAY * );
void __stdcall LPSAFEARRAY_UserFree( unsigned long *, LPSAFEARRAY * );

unsigned long __stdcall BSTR_UserSize64( unsigned long *, unsigned long , BSTR * );
unsigned char * __stdcall BSTR_UserMarshal64( unsigned long *, unsigned char *, BSTR * );
unsigned char * __stdcall BSTR_UserUnmarshal64( unsigned long *, unsigned char *, BSTR * );
void __stdcall BSTR_UserFree64( unsigned long *, BSTR * );

unsigned long __stdcall LPSAFEARRAY_UserSize64( unsigned long *, unsigned long , LPSAFEARRAY * );
unsigned char * __stdcall LPSAFEARRAY_UserMarshal64( unsigned long *, unsigned char *, LPSAFEARRAY * );
unsigned char * __stdcall LPSAFEARRAY_UserUnmarshal64( unsigned long *, unsigned char *, LPSAFEARRAY * );
void __stdcall LPSAFEARRAY_UserFree64( unsigned long *, LPSAFEARRAY * );

              HRESULT __stdcall IEnumSTATPROPSTG_Next_Proxy(
    IEnumSTATPROPSTG * This,
               ULONG celt,

                                          STATPROPSTG *rgelt,

                                          ULONG *pceltFetched);


                HRESULT __stdcall IEnumSTATPROPSTG_Next_Stub(
              IEnumSTATPROPSTG * This,
               ULONG celt,
                                                                                STATPROPSTG *rgelt,
                           ULONG *pceltFetched);

              HRESULT __stdcall IEnumSTATPROPSETSTG_Next_Proxy(
    IEnumSTATPROPSETSTG * This,
               ULONG celt,

                                          STATPROPSETSTG *rgelt,

                                          ULONG *pceltFetched);


                HRESULT __stdcall IEnumSTATPROPSETSTG_Next_Stub(
              IEnumSTATPROPSETSTG * This,
               ULONG celt,
                                                                                STATPROPSETSTG *rgelt,
                           ULONG *pceltFetched);
#line 1321 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\propidl.h"
#pragma option pop
#line 259 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objbase.h"


#pragma region Desktop Family





extern HRESULT __stdcall CreateStdProgressIndicator( HWND hwndParent,
                                        LPCOLESTR pszTitle,
                                        IBindStatusCallback * pIbscCaller,
                                            IBindStatusCallback ** ppIbsc);


#pragma endregion




#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/poppack.h"
#line 29 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk/poppack.h"
#pragma pack(pop)
#line 277 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\objbase.h"




#pragma option pop
#line 20 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\dinput.h"
#line 30 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\dinput.h"
#pragma region Desktop Family
#line 61 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\dinput.h"
extern const GUID CLSID_DirectInput;
extern const GUID CLSID_DirectInputDevice;

extern const GUID CLSID_DirectInput8;
extern const GUID CLSID_DirectInputDevice8;







extern const GUID IID_IDirectInputA;
extern const GUID IID_IDirectInputW;
extern const GUID IID_IDirectInput2A;
extern const GUID IID_IDirectInput2W;
extern const GUID IID_IDirectInput7A;
extern const GUID IID_IDirectInput7W;
extern const GUID IID_IDirectInput8A;
extern const GUID IID_IDirectInput8W;
extern const GUID IID_IDirectInputDeviceA;
extern const GUID IID_IDirectInputDeviceW;
extern const GUID IID_IDirectInputDevice2A;
extern const GUID IID_IDirectInputDevice2W;
extern const GUID IID_IDirectInputDevice7A;
extern const GUID IID_IDirectInputDevice7W;
extern const GUID IID_IDirectInputDevice8A;
extern const GUID IID_IDirectInputDevice8W;
extern const GUID IID_IDirectInputEffect;







extern const GUID GUID_XAxis;
extern const GUID GUID_YAxis;
extern const GUID GUID_ZAxis;
extern const GUID GUID_RxAxis;
extern const GUID GUID_RyAxis;
extern const GUID GUID_RzAxis;
extern const GUID GUID_Slider;

extern const GUID GUID_Button;
extern const GUID GUID_Key;

extern const GUID GUID_POV;

extern const GUID GUID_Unknown;







extern const GUID GUID_SysMouse;
extern const GUID GUID_SysKeyboard;
extern const GUID GUID_Joystick;
extern const GUID GUID_SysMouseEm;
extern const GUID GUID_SysMouseEm2;
extern const GUID GUID_SysKeyboardEm;
extern const GUID GUID_SysKeyboardEm2;







extern const GUID GUID_ConstantForce;
extern const GUID GUID_RampForce;
extern const GUID GUID_Square;
extern const GUID GUID_Sine;
extern const GUID GUID_Triangle;
extern const GUID GUID_SawtoothUp;
extern const GUID GUID_SawtoothDown;
extern const GUID GUID_Spring;
extern const GUID GUID_Damper;
extern const GUID GUID_Inertia;
extern const GUID GUID_Friction;
extern const GUID GUID_CustomForce;
#line 182 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\dinput.h"
typedef struct DICONSTANTFORCE {
    LONG lMagnitude;
} DICONSTANTFORCE, *LPDICONSTANTFORCE;
typedef const DICONSTANTFORCE *LPCDICONSTANTFORCE;

typedef struct DIRAMPFORCE {
    LONG lStart;
    LONG lEnd;
} DIRAMPFORCE, *LPDIRAMPFORCE;
typedef const DIRAMPFORCE *LPCDIRAMPFORCE;

typedef struct DIPERIODIC {
    DWORD dwMagnitude;
    LONG lOffset;
    DWORD dwPhase;
    DWORD dwPeriod;
} DIPERIODIC, *LPDIPERIODIC;
typedef const DIPERIODIC *LPCDIPERIODIC;

typedef struct DICONDITION {
    LONG lOffset;
    LONG lPositiveCoefficient;
    LONG lNegativeCoefficient;
    DWORD dwPositiveSaturation;
    DWORD dwNegativeSaturation;
    LONG lDeadBand;
} DICONDITION, *LPDICONDITION;
typedef const DICONDITION *LPCDICONDITION;

typedef struct DICUSTOMFORCE {
    DWORD cChannels;
    DWORD dwSamplePeriod;
    DWORD cSamples;
    LPLONG rglForceData;
} DICUSTOMFORCE, *LPDICUSTOMFORCE;
typedef const DICUSTOMFORCE *LPCDICUSTOMFORCE;


typedef struct DIENVELOPE {
    DWORD dwSize;
    DWORD dwAttackLevel;
    DWORD dwAttackTime;
    DWORD dwFadeLevel;
    DWORD dwFadeTime;
} DIENVELOPE, *LPDIENVELOPE;
typedef const DIENVELOPE *LPCDIENVELOPE;



typedef struct DIEFFECT_DX5 {
    DWORD dwSize;
    DWORD dwFlags;
    DWORD dwDuration;
    DWORD dwSamplePeriod;
    DWORD dwGain;
    DWORD dwTriggerButton;
    DWORD dwTriggerRepeatInterval;
    DWORD cAxes;
    LPDWORD rgdwAxes;
    LPLONG rglDirection;
    LPDIENVELOPE lpEnvelope;
    DWORD cbTypeSpecificParams;
    LPVOID lpvTypeSpecificParams;
} DIEFFECT_DX5, *LPDIEFFECT_DX5;
typedef const DIEFFECT_DX5 *LPCDIEFFECT_DX5;

typedef struct DIEFFECT {
    DWORD dwSize;
    DWORD dwFlags;
    DWORD dwDuration;
    DWORD dwSamplePeriod;
    DWORD dwGain;
    DWORD dwTriggerButton;
    DWORD dwTriggerRepeatInterval;
    DWORD cAxes;
    LPDWORD rgdwAxes;
    LPLONG rglDirection;
    LPDIENVELOPE lpEnvelope;
    DWORD cbTypeSpecificParams;
    LPVOID lpvTypeSpecificParams;

    DWORD dwStartDelay;

} DIEFFECT, *LPDIEFFECT;
typedef DIEFFECT DIEFFECT_DX6;
typedef LPDIEFFECT LPDIEFFECT_DX6;
typedef const DIEFFECT *LPCDIEFFECT;




typedef struct DIFILEEFFECT{
    DWORD dwSize;
    GUID GuidEffect;
    LPCDIEFFECT lpDiEffect;
    CHAR szFriendlyName[260];
}DIFILEEFFECT, *LPDIFILEEFFECT;
typedef const DIFILEEFFECT *LPCDIFILEEFFECT;
typedef BOOL ( __stdcall * LPDIENUMEFFECTSINFILECALLBACK)(LPCDIFILEEFFECT , LPVOID);
#line 317 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\dinput.h"
typedef struct DIEFFESCAPE {
    DWORD dwSize;
    DWORD dwCommand;
    LPVOID lpvInBuffer;
    DWORD cbInBuffer;
    LPVOID lpvOutBuffer;
    DWORD cbOutBuffer;
} DIEFFESCAPE, *LPDIEFFESCAPE;






typedef struct IDirectInputEffect { struct IDirectInputEffectVtbl * lpVtbl; } IDirectInputEffect; typedef struct IDirectInputEffectVtbl IDirectInputEffectVtbl; struct IDirectInputEffectVtbl
{

    HRESULT (__stdcall * QueryInterface)(IDirectInputEffect * This, const IID * const riid, LPVOID * ppvObj) ;
    ULONG (__stdcall * AddRef)(IDirectInputEffect * This) ;
    ULONG (__stdcall * Release)(IDirectInputEffect * This) ;


    HRESULT (__stdcall * Initialize)(IDirectInputEffect * This, HINSTANCE,DWORD,const GUID * const) ;
    HRESULT (__stdcall * GetEffectGuid)(IDirectInputEffect * This, LPGUID) ;
    HRESULT (__stdcall * GetParameters)(IDirectInputEffect * This, LPDIEFFECT,DWORD) ;
    HRESULT (__stdcall * SetParameters)(IDirectInputEffect * This, LPCDIEFFECT,DWORD) ;
    HRESULT (__stdcall * Start)(IDirectInputEffect * This, DWORD,DWORD) ;
    HRESULT (__stdcall * Stop)(IDirectInputEffect * This) ;
    HRESULT (__stdcall * GetEffectStatus)(IDirectInputEffect * This, LPDWORD) ;
    HRESULT (__stdcall * Download)(IDirectInputEffect * This) ;
    HRESULT (__stdcall * Unload)(IDirectInputEffect * This) ;
    HRESULT (__stdcall * Escape)(IDirectInputEffect * This, LPDIEFFESCAPE) ;
};

typedef struct IDirectInputEffect *LPDIRECTINPUTEFFECT;
#line 528 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\dinput.h"
typedef struct DIDEVCAPS_DX3 {
    DWORD dwSize;
    DWORD dwFlags;
    DWORD dwDevType;
    DWORD dwAxes;
    DWORD dwButtons;
    DWORD dwPOVs;
} DIDEVCAPS_DX3, *LPDIDEVCAPS_DX3;


typedef struct DIDEVCAPS {
    DWORD dwSize;
    DWORD dwFlags;
    DWORD dwDevType;
    DWORD dwAxes;
    DWORD dwButtons;
    DWORD dwPOVs;

    DWORD dwFFSamplePeriod;
    DWORD dwFFMinTimeResolution;
    DWORD dwFirmwareRevision;
    DWORD dwHardwareRevision;
    DWORD dwFFDriverVersion;

} DIDEVCAPS, *LPDIDEVCAPS;
#line 608 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\dinput.h"
typedef struct _DIOBJECTDATAFORMAT {
    const GUID *pguid;
    DWORD dwOfs;
    DWORD dwType;
    DWORD dwFlags;
} DIOBJECTDATAFORMAT, *LPDIOBJECTDATAFORMAT;
typedef const DIOBJECTDATAFORMAT *LPCDIOBJECTDATAFORMAT;

typedef struct _DIDATAFORMAT {
    DWORD dwSize;
    DWORD dwObjSize;
    DWORD dwFlags;
    DWORD dwDataSize;
    DWORD dwNumObjs;
    LPDIOBJECTDATAFORMAT rgodf;
} DIDATAFORMAT, *LPDIDATAFORMAT;
typedef const DIDATAFORMAT *LPCDIDATAFORMAT;







extern const DIDATAFORMAT c_dfDIMouse;


extern const DIDATAFORMAT c_dfDIMouse2;


extern const DIDATAFORMAT c_dfDIKeyboard;


extern const DIDATAFORMAT c_dfDIJoystick;
extern const DIDATAFORMAT c_dfDIJoystick2;
#line 652 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\dinput.h"
typedef struct _DIACTIONA {
                UINT_PTR uAppData;
                DWORD dwSemantic;
                DWORD dwFlags;
                union {
                    LPCSTR lptszActionName;
                    UINT uResIdString;
                };
                GUID guidInstance;
                DWORD dwObjID;
                DWORD dwHow;
} DIACTIONA, *LPDIACTIONA ;
typedef struct _DIACTIONW {
                UINT_PTR uAppData;
                DWORD dwSemantic;
                DWORD dwFlags;
                union {
                    LPCWSTR lptszActionName;
                    UINT uResIdString;
                };
                GUID guidInstance;
                DWORD dwObjID;
                DWORD dwHow;
} DIACTIONW, *LPDIACTIONW ;

typedef DIACTIONW DIACTION;
typedef LPDIACTIONW LPDIACTION;





typedef const DIACTIONA *LPCDIACTIONA;
typedef const DIACTIONW *LPCDIACTIONW;

typedef DIACTIONW DIACTION;
typedef LPCDIACTIONW LPCDIACTION;




typedef const DIACTION *LPCDIACTION;
#line 710 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\dinput.h"
typedef struct _DIACTIONFORMATA {
                DWORD dwSize;
                DWORD dwActionSize;
                DWORD dwDataSize;
                DWORD dwNumActions;
                LPDIACTIONA rgoAction;
                GUID guidActionMap;
                DWORD dwGenre;
                DWORD dwBufferSize;
                LONG lAxisMin;
                LONG lAxisMax;
                HINSTANCE hInstString;
                FILETIME ftTimeStamp;
                DWORD dwCRC;
                CHAR tszActionMap[260];
} DIACTIONFORMATA, *LPDIACTIONFORMATA;
typedef struct _DIACTIONFORMATW {
                DWORD dwSize;
                DWORD dwActionSize;
                DWORD dwDataSize;
                DWORD dwNumActions;
                LPDIACTIONW rgoAction;
                GUID guidActionMap;
                DWORD dwGenre;
                DWORD dwBufferSize;
                LONG lAxisMin;
                LONG lAxisMax;
                HINSTANCE hInstString;
                FILETIME ftTimeStamp;
                DWORD dwCRC;
                WCHAR tszActionMap[260];
} DIACTIONFORMATW, *LPDIACTIONFORMATW;

typedef DIACTIONFORMATW DIACTIONFORMAT;
typedef LPDIACTIONFORMATW LPDIACTIONFORMAT;




typedef const DIACTIONFORMATA *LPCDIACTIONFORMATA;
typedef const DIACTIONFORMATW *LPCDIACTIONFORMATW;

typedef DIACTIONFORMATW DIACTIONFORMAT;
typedef LPCDIACTIONFORMATW LPCDIACTIONFORMAT;




typedef const DIACTIONFORMAT *LPCDIACTIONFORMAT;
#line 781 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\dinput.h"
typedef DWORD D3DCOLOR;



typedef struct _DICOLORSET{
    DWORD dwSize;
    D3DCOLOR cTextFore;
    D3DCOLOR cTextHighlight;
    D3DCOLOR cCalloutLine;
    D3DCOLOR cCalloutHighlight;
    D3DCOLOR cBorder;
    D3DCOLOR cControlFill;
    D3DCOLOR cHighlightFill;
    D3DCOLOR cAreaFill;
} DICOLORSET, *LPDICOLORSET;
typedef const DICOLORSET *LPCDICOLORSET;


typedef struct _DICONFIGUREDEVICESPARAMSA{
     DWORD dwSize;
     DWORD dwcUsers;
     LPSTR lptszUserNames;
     DWORD dwcFormats;
     LPDIACTIONFORMATA lprgFormats;
     HWND hwnd;
     DICOLORSET dics;
     IUnknown * lpUnkDDSTarget;
} DICONFIGUREDEVICESPARAMSA, *LPDICONFIGUREDEVICESPARAMSA;
typedef struct _DICONFIGUREDEVICESPARAMSW{
     DWORD dwSize;
     DWORD dwcUsers;
     LPWSTR lptszUserNames;
     DWORD dwcFormats;
     LPDIACTIONFORMATW lprgFormats;
     HWND hwnd;
     DICOLORSET dics;
     IUnknown * lpUnkDDSTarget;
} DICONFIGUREDEVICESPARAMSW, *LPDICONFIGUREDEVICESPARAMSW;

typedef DICONFIGUREDEVICESPARAMSW DICONFIGUREDEVICESPARAMS;
typedef LPDICONFIGUREDEVICESPARAMSW LPDICONFIGUREDEVICESPARAMS;




typedef const DICONFIGUREDEVICESPARAMSA *LPCDICONFIGUREDEVICESPARAMSA;
typedef const DICONFIGUREDEVICESPARAMSW *LPCDICONFIGUREDEVICESPARAMSW;

typedef DICONFIGUREDEVICESPARAMSW DICONFIGUREDEVICESPARAMS;
typedef LPCDICONFIGUREDEVICESPARAMSW LPCDICONFIGUREDEVICESPARAMS;




typedef const DICONFIGUREDEVICESPARAMS *LPCDICONFIGUREDEVICESPARAMS;
#line 848 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\dinput.h"
typedef struct _DIDEVICEIMAGEINFOA {
    CHAR tszImagePath[260];
    DWORD dwFlags;

    DWORD dwViewID;
    RECT rcOverlay;
    DWORD dwObjID;
    DWORD dwcValidPts;
    POINT rgptCalloutLine[5];
    RECT rcCalloutRect;
    DWORD dwTextAlign;
} DIDEVICEIMAGEINFOA, *LPDIDEVICEIMAGEINFOA;
typedef struct _DIDEVICEIMAGEINFOW {
    WCHAR tszImagePath[260];
    DWORD dwFlags;

    DWORD dwViewID;
    RECT rcOverlay;
    DWORD dwObjID;
    DWORD dwcValidPts;
    POINT rgptCalloutLine[5];
    RECT rcCalloutRect;
    DWORD dwTextAlign;
} DIDEVICEIMAGEINFOW, *LPDIDEVICEIMAGEINFOW;

typedef DIDEVICEIMAGEINFOW DIDEVICEIMAGEINFO;
typedef LPDIDEVICEIMAGEINFOW LPDIDEVICEIMAGEINFO;




typedef const DIDEVICEIMAGEINFOA *LPCDIDEVICEIMAGEINFOA;
typedef const DIDEVICEIMAGEINFOW *LPCDIDEVICEIMAGEINFOW;

typedef DIDEVICEIMAGEINFOW DIDEVICEIMAGEINFO;
typedef LPCDIDEVICEIMAGEINFOW LPCDIDEVICEIMAGEINFO;




typedef const DIDEVICEIMAGEINFO *LPCDIDEVICEIMAGEINFO;

typedef struct _DIDEVICEIMAGEINFOHEADERA {
    DWORD dwSize;
    DWORD dwSizeImageInfo;
    DWORD dwcViews;
    DWORD dwcButtons;
    DWORD dwcAxes;
    DWORD dwcPOVs;
    DWORD dwBufferSize;
    DWORD dwBufferUsed;
    LPDIDEVICEIMAGEINFOA lprgImageInfoArray;
} DIDEVICEIMAGEINFOHEADERA, *LPDIDEVICEIMAGEINFOHEADERA;
typedef struct _DIDEVICEIMAGEINFOHEADERW {
    DWORD dwSize;
    DWORD dwSizeImageInfo;
    DWORD dwcViews;
    DWORD dwcButtons;
    DWORD dwcAxes;
    DWORD dwcPOVs;
    DWORD dwBufferSize;
    DWORD dwBufferUsed;
    LPDIDEVICEIMAGEINFOW lprgImageInfoArray;
} DIDEVICEIMAGEINFOHEADERW, *LPDIDEVICEIMAGEINFOHEADERW;

typedef DIDEVICEIMAGEINFOHEADERW DIDEVICEIMAGEINFOHEADER;
typedef LPDIDEVICEIMAGEINFOHEADERW LPDIDEVICEIMAGEINFOHEADER;




typedef const DIDEVICEIMAGEINFOHEADERA *LPCDIDEVICEIMAGEINFOHEADERA;
typedef const DIDEVICEIMAGEINFOHEADERW *LPCDIDEVICEIMAGEINFOHEADERW;

typedef DIDEVICEIMAGEINFOHEADERW DIDEVICEIMAGEINFOHEADER;
typedef LPCDIDEVICEIMAGEINFOHEADERW LPCDIDEVICEIMAGEINFOHEADER;




typedef const DIDEVICEIMAGEINFOHEADER *LPCDIDEVICEIMAGEINFOHEADER;






typedef struct DIDEVICEOBJECTINSTANCE_DX3A {
    DWORD dwSize;
    GUID guidType;
    DWORD dwOfs;
    DWORD dwType;
    DWORD dwFlags;
    CHAR tszName[260];
} DIDEVICEOBJECTINSTANCE_DX3A, *LPDIDEVICEOBJECTINSTANCE_DX3A;
typedef struct DIDEVICEOBJECTINSTANCE_DX3W {
    DWORD dwSize;
    GUID guidType;
    DWORD dwOfs;
    DWORD dwType;
    DWORD dwFlags;
    WCHAR tszName[260];
} DIDEVICEOBJECTINSTANCE_DX3W, *LPDIDEVICEOBJECTINSTANCE_DX3W;

typedef DIDEVICEOBJECTINSTANCE_DX3W DIDEVICEOBJECTINSTANCE_DX3;
typedef LPDIDEVICEOBJECTINSTANCE_DX3W LPDIDEVICEOBJECTINSTANCE_DX3;




typedef const DIDEVICEOBJECTINSTANCE_DX3A *LPCDIDEVICEOBJECTINSTANCE_DX3A;
typedef const DIDEVICEOBJECTINSTANCE_DX3W *LPCDIDEVICEOBJECTINSTANCE_DX3W;
typedef const DIDEVICEOBJECTINSTANCE_DX3 *LPCDIDEVICEOBJECTINSTANCE_DX3;


typedef struct DIDEVICEOBJECTINSTANCEA {
    DWORD dwSize;
    GUID guidType;
    DWORD dwOfs;
    DWORD dwType;
    DWORD dwFlags;
    CHAR tszName[260];

    DWORD dwFFMaxForce;
    DWORD dwFFForceResolution;
    WORD wCollectionNumber;
    WORD wDesignatorIndex;
    WORD wUsagePage;
    WORD wUsage;
    DWORD dwDimension;
    WORD wExponent;
    WORD wReportId;

} DIDEVICEOBJECTINSTANCEA, *LPDIDEVICEOBJECTINSTANCEA;
typedef struct DIDEVICEOBJECTINSTANCEW {
    DWORD dwSize;
    GUID guidType;
    DWORD dwOfs;
    DWORD dwType;
    DWORD dwFlags;
    WCHAR tszName[260];

    DWORD dwFFMaxForce;
    DWORD dwFFForceResolution;
    WORD wCollectionNumber;
    WORD wDesignatorIndex;
    WORD wUsagePage;
    WORD wUsage;
    DWORD dwDimension;
    WORD wExponent;
    WORD wReportId;

} DIDEVICEOBJECTINSTANCEW, *LPDIDEVICEOBJECTINSTANCEW;

typedef DIDEVICEOBJECTINSTANCEW DIDEVICEOBJECTINSTANCE;
typedef LPDIDEVICEOBJECTINSTANCEW LPDIDEVICEOBJECTINSTANCE;




typedef const DIDEVICEOBJECTINSTANCEA *LPCDIDEVICEOBJECTINSTANCEA;
typedef const DIDEVICEOBJECTINSTANCEW *LPCDIDEVICEOBJECTINSTANCEW;
typedef const DIDEVICEOBJECTINSTANCE *LPCDIDEVICEOBJECTINSTANCE;

typedef BOOL ( __stdcall * LPDIENUMDEVICEOBJECTSCALLBACKA)(LPCDIDEVICEOBJECTINSTANCEA, LPVOID);
typedef BOOL ( __stdcall * LPDIENUMDEVICEOBJECTSCALLBACKW)(LPCDIDEVICEOBJECTINSTANCEW, LPVOID);
#line 1034 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\dinput.h"
typedef struct DIPROPHEADER {
    DWORD dwSize;
    DWORD dwHeaderSize;
    DWORD dwObj;
    DWORD dwHow;
} DIPROPHEADER, *LPDIPROPHEADER;
typedef const DIPROPHEADER *LPCDIPROPHEADER;
#line 1054 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\dinput.h"
typedef struct DIPROPDWORD {
    DIPROPHEADER diph;
    DWORD dwData;
} DIPROPDWORD, *LPDIPROPDWORD;
typedef const DIPROPDWORD *LPCDIPROPDWORD;


typedef struct DIPROPPOINTER {
    DIPROPHEADER diph;
    UINT_PTR uData;
} DIPROPPOINTER, *LPDIPROPPOINTER;
typedef const DIPROPPOINTER *LPCDIPROPPOINTER;


typedef struct DIPROPRANGE {
    DIPROPHEADER diph;
    LONG lMin;
    LONG lMax;
} DIPROPRANGE, *LPDIPROPRANGE;
typedef const DIPROPRANGE *LPCDIPROPRANGE;





typedef struct DIPROPCAL {
    DIPROPHEADER diph;
    LONG lMin;
    LONG lCenter;
    LONG lMax;
} DIPROPCAL, *LPDIPROPCAL;
typedef const DIPROPCAL *LPCDIPROPCAL;

typedef struct DIPROPCALPOV {
    DIPROPHEADER diph;
    LONG lMin[5];
    LONG lMax[5];
} DIPROPCALPOV, *LPDIPROPCALPOV;
typedef const DIPROPCALPOV *LPCDIPROPCALPOV;

typedef struct DIPROPGUIDANDPATH {
    DIPROPHEADER diph;
    GUID guidClass;
    WCHAR wszPath[260];
} DIPROPGUIDANDPATH, *LPDIPROPGUIDANDPATH;
typedef const DIPROPGUIDANDPATH *LPCDIPROPGUIDANDPATH;

typedef struct DIPROPSTRING {
    DIPROPHEADER diph;
    WCHAR wsz[260];
} DIPROPSTRING, *LPDIPROPSTRING;
typedef const DIPROPSTRING *LPCDIPROPSTRING;






typedef struct _CPOINT
{
    LONG lP;
    DWORD dwLog;
} CPOINT, *PCPOINT;

typedef struct DIPROPCPOINTS {
    DIPROPHEADER diph;
    DWORD dwCPointsNum;
    CPOINT cp[8];
} DIPROPCPOINTS, *LPDIPROPCPOINTS;
typedef const DIPROPCPOINTS *LPCDIPROPCPOINTS;
#line 1202 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\dinput.h"
typedef struct DIDEVICEOBJECTDATA_DX3 {
    DWORD dwOfs;
    DWORD dwData;
    DWORD dwTimeStamp;
    DWORD dwSequence;
} DIDEVICEOBJECTDATA_DX3, *LPDIDEVICEOBJECTDATA_DX3;
typedef const DIDEVICEOBJECTDATA_DX3 *LPCDIDEVICEOBJECTDATA_DX;

typedef struct DIDEVICEOBJECTDATA {
    DWORD dwOfs;
    DWORD dwData;
    DWORD dwTimeStamp;
    DWORD dwSequence;

    UINT_PTR uAppData;

} DIDEVICEOBJECTDATA, *LPDIDEVICEOBJECTDATA;
typedef const DIDEVICEOBJECTDATA *LPCDIDEVICEOBJECTDATA;
#line 1234 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\dinput.h"
typedef struct DIDEVICEINSTANCE_DX3A {
    DWORD dwSize;
    GUID guidInstance;
    GUID guidProduct;
    DWORD dwDevType;
    CHAR tszInstanceName[260];
    CHAR tszProductName[260];
} DIDEVICEINSTANCE_DX3A, *LPDIDEVICEINSTANCE_DX3A;
typedef struct DIDEVICEINSTANCE_DX3W {
    DWORD dwSize;
    GUID guidInstance;
    GUID guidProduct;
    DWORD dwDevType;
    WCHAR tszInstanceName[260];
    WCHAR tszProductName[260];
} DIDEVICEINSTANCE_DX3W, *LPDIDEVICEINSTANCE_DX3W;

typedef DIDEVICEINSTANCE_DX3W DIDEVICEINSTANCE_DX3;
typedef LPDIDEVICEINSTANCE_DX3W LPDIDEVICEINSTANCE_DX3;




typedef const DIDEVICEINSTANCE_DX3A *LPCDIDEVICEINSTANCE_DX3A;
typedef const DIDEVICEINSTANCE_DX3W *LPCDIDEVICEINSTANCE_DX3W;
typedef const DIDEVICEINSTANCE_DX3 *LPCDIDEVICEINSTANCE_DX3;


typedef struct DIDEVICEINSTANCEA {
    DWORD dwSize;
    GUID guidInstance;
    GUID guidProduct;
    DWORD dwDevType;
    CHAR tszInstanceName[260];
    CHAR tszProductName[260];

    GUID guidFFDriver;
    WORD wUsagePage;
    WORD wUsage;

} DIDEVICEINSTANCEA, *LPDIDEVICEINSTANCEA;
typedef struct DIDEVICEINSTANCEW {
    DWORD dwSize;
    GUID guidInstance;
    GUID guidProduct;
    DWORD dwDevType;
    WCHAR tszInstanceName[260];
    WCHAR tszProductName[260];

    GUID guidFFDriver;
    WORD wUsagePage;
    WORD wUsage;

} DIDEVICEINSTANCEW, *LPDIDEVICEINSTANCEW;

typedef DIDEVICEINSTANCEW DIDEVICEINSTANCE;
typedef LPDIDEVICEINSTANCEW LPDIDEVICEINSTANCE;





typedef const DIDEVICEINSTANCEA *LPCDIDEVICEINSTANCEA;
typedef const DIDEVICEINSTANCEW *LPCDIDEVICEINSTANCEW;

typedef DIDEVICEINSTANCEW DIDEVICEINSTANCE;
typedef LPCDIDEVICEINSTANCEW LPCDIDEVICEINSTANCE;




typedef const DIDEVICEINSTANCE *LPCDIDEVICEINSTANCE;




typedef struct IDirectInputDeviceW { struct IDirectInputDeviceWVtbl * lpVtbl; } IDirectInputDeviceW; typedef struct IDirectInputDeviceWVtbl IDirectInputDeviceWVtbl; struct IDirectInputDeviceWVtbl
{

    HRESULT (__stdcall * QueryInterface)(IDirectInputDeviceW * This, const IID * const riid, LPVOID * ppvObj) ;
    ULONG (__stdcall * AddRef)(IDirectInputDeviceW * This) ;
    ULONG (__stdcall * Release)(IDirectInputDeviceW * This) ;


    HRESULT (__stdcall * GetCapabilities)(IDirectInputDeviceW * This, LPDIDEVCAPS) ;
    HRESULT (__stdcall * EnumObjects)(IDirectInputDeviceW * This, LPDIENUMDEVICEOBJECTSCALLBACKW,LPVOID,DWORD) ;
    HRESULT (__stdcall * GetProperty)(IDirectInputDeviceW * This, const GUID * const,LPDIPROPHEADER) ;
    HRESULT (__stdcall * SetProperty)(IDirectInputDeviceW * This, const GUID * const,LPCDIPROPHEADER) ;
    HRESULT (__stdcall * Acquire)(IDirectInputDeviceW * This) ;
    HRESULT (__stdcall * Unacquire)(IDirectInputDeviceW * This) ;
    HRESULT (__stdcall * GetDeviceState)(IDirectInputDeviceW * This, DWORD,LPVOID) ;
    HRESULT (__stdcall * GetDeviceData)(IDirectInputDeviceW * This, DWORD,LPDIDEVICEOBJECTDATA,LPDWORD,DWORD) ;
    HRESULT (__stdcall * SetDataFormat)(IDirectInputDeviceW * This, LPCDIDATAFORMAT) ;
    HRESULT (__stdcall * SetEventNotification)(IDirectInputDeviceW * This, HANDLE) ;
    HRESULT (__stdcall * SetCooperativeLevel)(IDirectInputDeviceW * This, HWND,DWORD) ;
    HRESULT (__stdcall * GetObjectInfo)(IDirectInputDeviceW * This, LPDIDEVICEOBJECTINSTANCEW,DWORD,DWORD) ;
    HRESULT (__stdcall * GetDeviceInfo)(IDirectInputDeviceW * This, LPDIDEVICEINSTANCEW) ;
    HRESULT (__stdcall * RunControlPanel)(IDirectInputDeviceW * This, HWND,DWORD) ;
    HRESULT (__stdcall * Initialize)(IDirectInputDeviceW * This, HINSTANCE,DWORD,const GUID * const) ;
};

typedef struct IDirectInputDeviceW *LPDIRECTINPUTDEVICEW;




typedef struct IDirectInputDeviceA { struct IDirectInputDeviceAVtbl * lpVtbl; } IDirectInputDeviceA; typedef struct IDirectInputDeviceAVtbl IDirectInputDeviceAVtbl; struct IDirectInputDeviceAVtbl
{

    HRESULT (__stdcall * QueryInterface)(IDirectInputDeviceA * This, const IID * const riid, LPVOID * ppvObj) ;
    ULONG (__stdcall * AddRef)(IDirectInputDeviceA * This) ;
    ULONG (__stdcall * Release)(IDirectInputDeviceA * This) ;


    HRESULT (__stdcall * GetCapabilities)(IDirectInputDeviceA * This, LPDIDEVCAPS) ;
    HRESULT (__stdcall * EnumObjects)(IDirectInputDeviceA * This, LPDIENUMDEVICEOBJECTSCALLBACKA,LPVOID,DWORD) ;
    HRESULT (__stdcall * GetProperty)(IDirectInputDeviceA * This, const GUID * const,LPDIPROPHEADER) ;
    HRESULT (__stdcall * SetProperty)(IDirectInputDeviceA * This, const GUID * const,LPCDIPROPHEADER) ;
    HRESULT (__stdcall * Acquire)(IDirectInputDeviceA * This) ;
    HRESULT (__stdcall * Unacquire)(IDirectInputDeviceA * This) ;
    HRESULT (__stdcall * GetDeviceState)(IDirectInputDeviceA * This, DWORD,LPVOID) ;
    HRESULT (__stdcall * GetDeviceData)(IDirectInputDeviceA * This, DWORD,LPDIDEVICEOBJECTDATA,LPDWORD,DWORD) ;
    HRESULT (__stdcall * SetDataFormat)(IDirectInputDeviceA * This, LPCDIDATAFORMAT) ;
    HRESULT (__stdcall * SetEventNotification)(IDirectInputDeviceA * This, HANDLE) ;
    HRESULT (__stdcall * SetCooperativeLevel)(IDirectInputDeviceA * This, HWND,DWORD) ;
    HRESULT (__stdcall * GetObjectInfo)(IDirectInputDeviceA * This, LPDIDEVICEOBJECTINSTANCEA,DWORD,DWORD) ;
    HRESULT (__stdcall * GetDeviceInfo)(IDirectInputDeviceA * This, LPDIDEVICEINSTANCEA) ;
    HRESULT (__stdcall * RunControlPanel)(IDirectInputDeviceA * This, HWND,DWORD) ;
    HRESULT (__stdcall * Initialize)(IDirectInputDeviceA * This, HINSTANCE,DWORD,const GUID * const) ;
};

typedef struct IDirectInputDeviceA *LPDIRECTINPUTDEVICEA;
#line 1376 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\dinput.h"
typedef struct IDirectInputDeviceW *LPDIRECTINPUTDEVICE;
#line 1445 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\dinput.h"
typedef struct DIEFFECTINFOA {
    DWORD dwSize;
    GUID guid;
    DWORD dwEffType;
    DWORD dwStaticParams;
    DWORD dwDynamicParams;
    CHAR tszName[260];
} DIEFFECTINFOA, *LPDIEFFECTINFOA;
typedef struct DIEFFECTINFOW {
    DWORD dwSize;
    GUID guid;
    DWORD dwEffType;
    DWORD dwStaticParams;
    DWORD dwDynamicParams;
    WCHAR tszName[260];
} DIEFFECTINFOW, *LPDIEFFECTINFOW;

typedef DIEFFECTINFOW DIEFFECTINFO;
typedef LPDIEFFECTINFOW LPDIEFFECTINFO;




typedef const DIEFFECTINFOA *LPCDIEFFECTINFOA;
typedef const DIEFFECTINFOW *LPCDIEFFECTINFOW;
typedef const DIEFFECTINFO *LPCDIEFFECTINFO;



typedef BOOL ( __stdcall * LPDIENUMEFFECTSCALLBACKA)(LPCDIEFFECTINFOA, LPVOID);
typedef BOOL ( __stdcall * LPDIENUMEFFECTSCALLBACKW)(LPCDIEFFECTINFOW, LPVOID);





typedef BOOL ( __stdcall * LPDIENUMCREATEDEFFECTOBJECTSCALLBACK)(LPDIRECTINPUTEFFECT, LPVOID);




typedef struct IDirectInputDevice2W { struct IDirectInputDevice2WVtbl * lpVtbl; } IDirectInputDevice2W; typedef struct IDirectInputDevice2WVtbl IDirectInputDevice2WVtbl; struct IDirectInputDevice2WVtbl
{

    HRESULT (__stdcall * QueryInterface)(IDirectInputDevice2W * This, const IID * const riid, LPVOID * ppvObj) ;
    ULONG (__stdcall * AddRef)(IDirectInputDevice2W * This) ;
    ULONG (__stdcall * Release)(IDirectInputDevice2W * This) ;


    HRESULT (__stdcall * GetCapabilities)(IDirectInputDevice2W * This, LPDIDEVCAPS) ;
    HRESULT (__stdcall * EnumObjects)(IDirectInputDevice2W * This, LPDIENUMDEVICEOBJECTSCALLBACKW,LPVOID,DWORD) ;
    HRESULT (__stdcall * GetProperty)(IDirectInputDevice2W * This, const GUID * const,LPDIPROPHEADER) ;
    HRESULT (__stdcall * SetProperty)(IDirectInputDevice2W * This, const GUID * const,LPCDIPROPHEADER) ;
    HRESULT (__stdcall * Acquire)(IDirectInputDevice2W * This) ;
    HRESULT (__stdcall * Unacquire)(IDirectInputDevice2W * This) ;
    HRESULT (__stdcall * GetDeviceState)(IDirectInputDevice2W * This, DWORD,LPVOID) ;
    HRESULT (__stdcall * GetDeviceData)(IDirectInputDevice2W * This, DWORD,LPDIDEVICEOBJECTDATA,LPDWORD,DWORD) ;
    HRESULT (__stdcall * SetDataFormat)(IDirectInputDevice2W * This, LPCDIDATAFORMAT) ;
    HRESULT (__stdcall * SetEventNotification)(IDirectInputDevice2W * This, HANDLE) ;
    HRESULT (__stdcall * SetCooperativeLevel)(IDirectInputDevice2W * This, HWND,DWORD) ;
    HRESULT (__stdcall * GetObjectInfo)(IDirectInputDevice2W * This, LPDIDEVICEOBJECTINSTANCEW,DWORD,DWORD) ;
    HRESULT (__stdcall * GetDeviceInfo)(IDirectInputDevice2W * This, LPDIDEVICEINSTANCEW) ;
    HRESULT (__stdcall * RunControlPanel)(IDirectInputDevice2W * This, HWND,DWORD) ;
    HRESULT (__stdcall * Initialize)(IDirectInputDevice2W * This, HINSTANCE,DWORD,const GUID * const) ;


    HRESULT (__stdcall * CreateEffect)(IDirectInputDevice2W * This, const GUID * const,LPCDIEFFECT,LPDIRECTINPUTEFFECT *,LPUNKNOWN) ;
    HRESULT (__stdcall * EnumEffects)(IDirectInputDevice2W * This, LPDIENUMEFFECTSCALLBACKW,LPVOID,DWORD) ;
    HRESULT (__stdcall * GetEffectInfo)(IDirectInputDevice2W * This, LPDIEFFECTINFOW,const GUID * const) ;
    HRESULT (__stdcall * GetForceFeedbackState)(IDirectInputDevice2W * This, LPDWORD) ;
    HRESULT (__stdcall * SendForceFeedbackCommand)(IDirectInputDevice2W * This, DWORD) ;
    HRESULT (__stdcall * EnumCreatedEffectObjects)(IDirectInputDevice2W * This, LPDIENUMCREATEDEFFECTOBJECTSCALLBACK,LPVOID,DWORD) ;
    HRESULT (__stdcall * Escape)(IDirectInputDevice2W * This, LPDIEFFESCAPE) ;
    HRESULT (__stdcall * Poll)(IDirectInputDevice2W * This) ;
    HRESULT (__stdcall * SendDeviceData)(IDirectInputDevice2W * This, DWORD,LPCDIDEVICEOBJECTDATA,LPDWORD,DWORD) ;
};

typedef struct IDirectInputDevice2W *LPDIRECTINPUTDEVICE2W;




typedef struct IDirectInputDevice2A { struct IDirectInputDevice2AVtbl * lpVtbl; } IDirectInputDevice2A; typedef struct IDirectInputDevice2AVtbl IDirectInputDevice2AVtbl; struct IDirectInputDevice2AVtbl
{

    HRESULT (__stdcall * QueryInterface)(IDirectInputDevice2A * This, const IID * const riid, LPVOID * ppvObj) ;
    ULONG (__stdcall * AddRef)(IDirectInputDevice2A * This) ;
    ULONG (__stdcall * Release)(IDirectInputDevice2A * This) ;


    HRESULT (__stdcall * GetCapabilities)(IDirectInputDevice2A * This, LPDIDEVCAPS) ;
    HRESULT (__stdcall * EnumObjects)(IDirectInputDevice2A * This, LPDIENUMDEVICEOBJECTSCALLBACKA,LPVOID,DWORD) ;
    HRESULT (__stdcall * GetProperty)(IDirectInputDevice2A * This, const GUID * const,LPDIPROPHEADER) ;
    HRESULT (__stdcall * SetProperty)(IDirectInputDevice2A * This, const GUID * const,LPCDIPROPHEADER) ;
    HRESULT (__stdcall * Acquire)(IDirectInputDevice2A * This) ;
    HRESULT (__stdcall * Unacquire)(IDirectInputDevice2A * This) ;
    HRESULT (__stdcall * GetDeviceState)(IDirectInputDevice2A * This, DWORD,LPVOID) ;
    HRESULT (__stdcall * GetDeviceData)(IDirectInputDevice2A * This, DWORD,LPDIDEVICEOBJECTDATA,LPDWORD,DWORD) ;
    HRESULT (__stdcall * SetDataFormat)(IDirectInputDevice2A * This, LPCDIDATAFORMAT) ;
    HRESULT (__stdcall * SetEventNotification)(IDirectInputDevice2A * This, HANDLE) ;
    HRESULT (__stdcall * SetCooperativeLevel)(IDirectInputDevice2A * This, HWND,DWORD) ;
    HRESULT (__stdcall * GetObjectInfo)(IDirectInputDevice2A * This, LPDIDEVICEOBJECTINSTANCEA,DWORD,DWORD) ;
    HRESULT (__stdcall * GetDeviceInfo)(IDirectInputDevice2A * This, LPDIDEVICEINSTANCEA) ;
    HRESULT (__stdcall * RunControlPanel)(IDirectInputDevice2A * This, HWND,DWORD) ;
    HRESULT (__stdcall * Initialize)(IDirectInputDevice2A * This, HINSTANCE,DWORD,const GUID * const) ;


    HRESULT (__stdcall * CreateEffect)(IDirectInputDevice2A * This, const GUID * const,LPCDIEFFECT,LPDIRECTINPUTEFFECT *,LPUNKNOWN) ;
    HRESULT (__stdcall * EnumEffects)(IDirectInputDevice2A * This, LPDIENUMEFFECTSCALLBACKA,LPVOID,DWORD) ;
    HRESULT (__stdcall * GetEffectInfo)(IDirectInputDevice2A * This, LPDIEFFECTINFOA,const GUID * const) ;
    HRESULT (__stdcall * GetForceFeedbackState)(IDirectInputDevice2A * This, LPDWORD) ;
    HRESULT (__stdcall * SendForceFeedbackCommand)(IDirectInputDevice2A * This, DWORD) ;
    HRESULT (__stdcall * EnumCreatedEffectObjects)(IDirectInputDevice2A * This, LPDIENUMCREATEDEFFECTOBJECTSCALLBACK,LPVOID,DWORD) ;
    HRESULT (__stdcall * Escape)(IDirectInputDevice2A * This, LPDIEFFESCAPE) ;
    HRESULT (__stdcall * Poll)(IDirectInputDevice2A * This) ;
    HRESULT (__stdcall * SendDeviceData)(IDirectInputDevice2A * This, DWORD,LPCDIDEVICEOBJECTDATA,LPDWORD,DWORD) ;
};

typedef struct IDirectInputDevice2A *LPDIRECTINPUTDEVICE2A;
#line 1574 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\dinput.h"
typedef struct IDirectInputDevice2W *LPDIRECTINPUTDEVICE2;
#line 1648 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\dinput.h"
typedef struct IDirectInputDevice7W { struct IDirectInputDevice7WVtbl * lpVtbl; } IDirectInputDevice7W; typedef struct IDirectInputDevice7WVtbl IDirectInputDevice7WVtbl; struct IDirectInputDevice7WVtbl
{

    HRESULT (__stdcall * QueryInterface)(IDirectInputDevice7W * This, const IID * const riid, LPVOID * ppvObj) ;
    ULONG (__stdcall * AddRef)(IDirectInputDevice7W * This) ;
    ULONG (__stdcall * Release)(IDirectInputDevice7W * This) ;


    HRESULT (__stdcall * GetCapabilities)(IDirectInputDevice7W * This, LPDIDEVCAPS) ;
    HRESULT (__stdcall * EnumObjects)(IDirectInputDevice7W * This, LPDIENUMDEVICEOBJECTSCALLBACKW,LPVOID,DWORD) ;
    HRESULT (__stdcall * GetProperty)(IDirectInputDevice7W * This, const GUID * const,LPDIPROPHEADER) ;
    HRESULT (__stdcall * SetProperty)(IDirectInputDevice7W * This, const GUID * const,LPCDIPROPHEADER) ;
    HRESULT (__stdcall * Acquire)(IDirectInputDevice7W * This) ;
    HRESULT (__stdcall * Unacquire)(IDirectInputDevice7W * This) ;
    HRESULT (__stdcall * GetDeviceState)(IDirectInputDevice7W * This, DWORD,LPVOID) ;
    HRESULT (__stdcall * GetDeviceData)(IDirectInputDevice7W * This, DWORD,LPDIDEVICEOBJECTDATA,LPDWORD,DWORD) ;
    HRESULT (__stdcall * SetDataFormat)(IDirectInputDevice7W * This, LPCDIDATAFORMAT) ;
    HRESULT (__stdcall * SetEventNotification)(IDirectInputDevice7W * This, HANDLE) ;
    HRESULT (__stdcall * SetCooperativeLevel)(IDirectInputDevice7W * This, HWND,DWORD) ;
    HRESULT (__stdcall * GetObjectInfo)(IDirectInputDevice7W * This, LPDIDEVICEOBJECTINSTANCEW,DWORD,DWORD) ;
    HRESULT (__stdcall * GetDeviceInfo)(IDirectInputDevice7W * This, LPDIDEVICEINSTANCEW) ;
    HRESULT (__stdcall * RunControlPanel)(IDirectInputDevice7W * This, HWND,DWORD) ;
    HRESULT (__stdcall * Initialize)(IDirectInputDevice7W * This, HINSTANCE,DWORD,const GUID * const) ;
    HRESULT (__stdcall * CreateEffect)(IDirectInputDevice7W * This, const GUID * const,LPCDIEFFECT,LPDIRECTINPUTEFFECT *,LPUNKNOWN) ;
    HRESULT (__stdcall * EnumEffects)(IDirectInputDevice7W * This, LPDIENUMEFFECTSCALLBACKW,LPVOID,DWORD) ;
    HRESULT (__stdcall * GetEffectInfo)(IDirectInputDevice7W * This, LPDIEFFECTINFOW,const GUID * const) ;
    HRESULT (__stdcall * GetForceFeedbackState)(IDirectInputDevice7W * This, LPDWORD) ;
    HRESULT (__stdcall * SendForceFeedbackCommand)(IDirectInputDevice7W * This, DWORD) ;
    HRESULT (__stdcall * EnumCreatedEffectObjects)(IDirectInputDevice7W * This, LPDIENUMCREATEDEFFECTOBJECTSCALLBACK,LPVOID,DWORD) ;
    HRESULT (__stdcall * Escape)(IDirectInputDevice7W * This, LPDIEFFESCAPE) ;
    HRESULT (__stdcall * Poll)(IDirectInputDevice7W * This) ;
    HRESULT (__stdcall * SendDeviceData)(IDirectInputDevice7W * This, DWORD,LPCDIDEVICEOBJECTDATA,LPDWORD,DWORD) ;


    HRESULT (__stdcall * EnumEffectsInFile)(IDirectInputDevice7W * This, LPCWSTR,LPDIENUMEFFECTSINFILECALLBACK,LPVOID,DWORD) ;
    HRESULT (__stdcall * WriteEffectToFile)(IDirectInputDevice7W * This, LPCWSTR,DWORD,LPDIFILEEFFECT,DWORD) ;
};

typedef struct IDirectInputDevice7W *LPDIRECTINPUTDEVICE7W;




typedef struct IDirectInputDevice7A { struct IDirectInputDevice7AVtbl * lpVtbl; } IDirectInputDevice7A; typedef struct IDirectInputDevice7AVtbl IDirectInputDevice7AVtbl; struct IDirectInputDevice7AVtbl
{

    HRESULT (__stdcall * QueryInterface)(IDirectInputDevice7A * This, const IID * const riid, LPVOID * ppvObj) ;
    ULONG (__stdcall * AddRef)(IDirectInputDevice7A * This) ;
    ULONG (__stdcall * Release)(IDirectInputDevice7A * This) ;


    HRESULT (__stdcall * GetCapabilities)(IDirectInputDevice7A * This, LPDIDEVCAPS) ;
    HRESULT (__stdcall * EnumObjects)(IDirectInputDevice7A * This, LPDIENUMDEVICEOBJECTSCALLBACKA,LPVOID,DWORD) ;
    HRESULT (__stdcall * GetProperty)(IDirectInputDevice7A * This, const GUID * const,LPDIPROPHEADER) ;
    HRESULT (__stdcall * SetProperty)(IDirectInputDevice7A * This, const GUID * const,LPCDIPROPHEADER) ;
    HRESULT (__stdcall * Acquire)(IDirectInputDevice7A * This) ;
    HRESULT (__stdcall * Unacquire)(IDirectInputDevice7A * This) ;
    HRESULT (__stdcall * GetDeviceState)(IDirectInputDevice7A * This, DWORD,LPVOID) ;
    HRESULT (__stdcall * GetDeviceData)(IDirectInputDevice7A * This, DWORD,LPDIDEVICEOBJECTDATA,LPDWORD,DWORD) ;
    HRESULT (__stdcall * SetDataFormat)(IDirectInputDevice7A * This, LPCDIDATAFORMAT) ;
    HRESULT (__stdcall * SetEventNotification)(IDirectInputDevice7A * This, HANDLE) ;
    HRESULT (__stdcall * SetCooperativeLevel)(IDirectInputDevice7A * This, HWND,DWORD) ;
    HRESULT (__stdcall * GetObjectInfo)(IDirectInputDevice7A * This, LPDIDEVICEOBJECTINSTANCEA,DWORD,DWORD) ;
    HRESULT (__stdcall * GetDeviceInfo)(IDirectInputDevice7A * This, LPDIDEVICEINSTANCEA) ;
    HRESULT (__stdcall * RunControlPanel)(IDirectInputDevice7A * This, HWND,DWORD) ;
    HRESULT (__stdcall * Initialize)(IDirectInputDevice7A * This, HINSTANCE,DWORD,const GUID * const) ;
    HRESULT (__stdcall * CreateEffect)(IDirectInputDevice7A * This, const GUID * const,LPCDIEFFECT,LPDIRECTINPUTEFFECT *,LPUNKNOWN) ;
    HRESULT (__stdcall * EnumEffects)(IDirectInputDevice7A * This, LPDIENUMEFFECTSCALLBACKA,LPVOID,DWORD) ;
    HRESULT (__stdcall * GetEffectInfo)(IDirectInputDevice7A * This, LPDIEFFECTINFOA,const GUID * const) ;
    HRESULT (__stdcall * GetForceFeedbackState)(IDirectInputDevice7A * This, LPDWORD) ;
    HRESULT (__stdcall * SendForceFeedbackCommand)(IDirectInputDevice7A * This, DWORD) ;
    HRESULT (__stdcall * EnumCreatedEffectObjects)(IDirectInputDevice7A * This, LPDIENUMCREATEDEFFECTOBJECTSCALLBACK,LPVOID,DWORD) ;
    HRESULT (__stdcall * Escape)(IDirectInputDevice7A * This, LPDIEFFESCAPE) ;
    HRESULT (__stdcall * Poll)(IDirectInputDevice7A * This) ;
    HRESULT (__stdcall * SendDeviceData)(IDirectInputDevice7A * This, DWORD,LPCDIDEVICEOBJECTDATA,LPDWORD,DWORD) ;


    HRESULT (__stdcall * EnumEffectsInFile)(IDirectInputDevice7A * This, LPCSTR,LPDIENUMEFFECTSINFILECALLBACK,LPVOID,DWORD) ;
    HRESULT (__stdcall * WriteEffectToFile)(IDirectInputDevice7A * This, LPCSTR,DWORD,LPDIFILEEFFECT,DWORD) ;
};

typedef struct IDirectInputDevice7A *LPDIRECTINPUTDEVICE7A;
#line 1740 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\dinput.h"
typedef struct IDirectInputDevice7W *LPDIRECTINPUTDEVICE7;
#line 1815 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\dinput.h"
typedef struct IDirectInputDevice8W { struct IDirectInputDevice8WVtbl * lpVtbl; } IDirectInputDevice8W; typedef struct IDirectInputDevice8WVtbl IDirectInputDevice8WVtbl; struct IDirectInputDevice8WVtbl
{

    HRESULT (__stdcall * QueryInterface)(IDirectInputDevice8W * This, const IID * const riid, LPVOID * ppvObj) ;
    ULONG (__stdcall * AddRef)(IDirectInputDevice8W * This) ;
    ULONG (__stdcall * Release)(IDirectInputDevice8W * This) ;


    HRESULT (__stdcall * GetCapabilities)(IDirectInputDevice8W * This, LPDIDEVCAPS) ;
    HRESULT (__stdcall * EnumObjects)(IDirectInputDevice8W * This, LPDIENUMDEVICEOBJECTSCALLBACKW,LPVOID,DWORD) ;
    HRESULT (__stdcall * GetProperty)(IDirectInputDevice8W * This, const GUID * const,LPDIPROPHEADER) ;
    HRESULT (__stdcall * SetProperty)(IDirectInputDevice8W * This, const GUID * const,LPCDIPROPHEADER) ;
    HRESULT (__stdcall * Acquire)(IDirectInputDevice8W * This) ;
    HRESULT (__stdcall * Unacquire)(IDirectInputDevice8W * This) ;
    HRESULT (__stdcall * GetDeviceState)(IDirectInputDevice8W * This, DWORD,LPVOID) ;
    HRESULT (__stdcall * GetDeviceData)(IDirectInputDevice8W * This, DWORD,LPDIDEVICEOBJECTDATA,LPDWORD,DWORD) ;
    HRESULT (__stdcall * SetDataFormat)(IDirectInputDevice8W * This, LPCDIDATAFORMAT) ;
    HRESULT (__stdcall * SetEventNotification)(IDirectInputDevice8W * This, HANDLE) ;
    HRESULT (__stdcall * SetCooperativeLevel)(IDirectInputDevice8W * This, HWND,DWORD) ;
    HRESULT (__stdcall * GetObjectInfo)(IDirectInputDevice8W * This, LPDIDEVICEOBJECTINSTANCEW,DWORD,DWORD) ;
    HRESULT (__stdcall * GetDeviceInfo)(IDirectInputDevice8W * This, LPDIDEVICEINSTANCEW) ;
    HRESULT (__stdcall * RunControlPanel)(IDirectInputDevice8W * This, HWND,DWORD) ;
    HRESULT (__stdcall * Initialize)(IDirectInputDevice8W * This, HINSTANCE,DWORD,const GUID * const) ;
    HRESULT (__stdcall * CreateEffect)(IDirectInputDevice8W * This, const GUID * const,LPCDIEFFECT,LPDIRECTINPUTEFFECT *,LPUNKNOWN) ;
    HRESULT (__stdcall * EnumEffects)(IDirectInputDevice8W * This, LPDIENUMEFFECTSCALLBACKW,LPVOID,DWORD) ;
    HRESULT (__stdcall * GetEffectInfo)(IDirectInputDevice8W * This, LPDIEFFECTINFOW,const GUID * const) ;
    HRESULT (__stdcall * GetForceFeedbackState)(IDirectInputDevice8W * This, LPDWORD) ;
    HRESULT (__stdcall * SendForceFeedbackCommand)(IDirectInputDevice8W * This, DWORD) ;
    HRESULT (__stdcall * EnumCreatedEffectObjects)(IDirectInputDevice8W * This, LPDIENUMCREATEDEFFECTOBJECTSCALLBACK,LPVOID,DWORD) ;
    HRESULT (__stdcall * Escape)(IDirectInputDevice8W * This, LPDIEFFESCAPE) ;
    HRESULT (__stdcall * Poll)(IDirectInputDevice8W * This) ;
    HRESULT (__stdcall * SendDeviceData)(IDirectInputDevice8W * This, DWORD,LPCDIDEVICEOBJECTDATA,LPDWORD,DWORD) ;
    HRESULT (__stdcall * EnumEffectsInFile)(IDirectInputDevice8W * This, LPCWSTR,LPDIENUMEFFECTSINFILECALLBACK,LPVOID,DWORD) ;
    HRESULT (__stdcall * WriteEffectToFile)(IDirectInputDevice8W * This, LPCWSTR,DWORD,LPDIFILEEFFECT,DWORD) ;
    HRESULT (__stdcall * BuildActionMap)(IDirectInputDevice8W * This, LPDIACTIONFORMATW,LPCWSTR,DWORD) ;
    HRESULT (__stdcall * SetActionMap)(IDirectInputDevice8W * This, LPDIACTIONFORMATW,LPCWSTR,DWORD) ;
    HRESULT (__stdcall * GetImageInfo)(IDirectInputDevice8W * This, LPDIDEVICEIMAGEINFOHEADERW) ;
};

typedef struct IDirectInputDevice8W *LPDIRECTINPUTDEVICE8W;




typedef struct IDirectInputDevice8A { struct IDirectInputDevice8AVtbl * lpVtbl; } IDirectInputDevice8A; typedef struct IDirectInputDevice8AVtbl IDirectInputDevice8AVtbl; struct IDirectInputDevice8AVtbl
{

    HRESULT (__stdcall * QueryInterface)(IDirectInputDevice8A * This, const IID * const riid, LPVOID * ppvObj) ;
    ULONG (__stdcall * AddRef)(IDirectInputDevice8A * This) ;
    ULONG (__stdcall * Release)(IDirectInputDevice8A * This) ;


    HRESULT (__stdcall * GetCapabilities)(IDirectInputDevice8A * This, LPDIDEVCAPS) ;
    HRESULT (__stdcall * EnumObjects)(IDirectInputDevice8A * This, LPDIENUMDEVICEOBJECTSCALLBACKA,LPVOID,DWORD) ;
    HRESULT (__stdcall * GetProperty)(IDirectInputDevice8A * This, const GUID * const,LPDIPROPHEADER) ;
    HRESULT (__stdcall * SetProperty)(IDirectInputDevice8A * This, const GUID * const,LPCDIPROPHEADER) ;
    HRESULT (__stdcall * Acquire)(IDirectInputDevice8A * This) ;
    HRESULT (__stdcall * Unacquire)(IDirectInputDevice8A * This) ;
    HRESULT (__stdcall * GetDeviceState)(IDirectInputDevice8A * This, DWORD,LPVOID) ;
    HRESULT (__stdcall * GetDeviceData)(IDirectInputDevice8A * This, DWORD,LPDIDEVICEOBJECTDATA,LPDWORD,DWORD) ;
    HRESULT (__stdcall * SetDataFormat)(IDirectInputDevice8A * This, LPCDIDATAFORMAT) ;
    HRESULT (__stdcall * SetEventNotification)(IDirectInputDevice8A * This, HANDLE) ;
    HRESULT (__stdcall * SetCooperativeLevel)(IDirectInputDevice8A * This, HWND,DWORD) ;
    HRESULT (__stdcall * GetObjectInfo)(IDirectInputDevice8A * This, LPDIDEVICEOBJECTINSTANCEA,DWORD,DWORD) ;
    HRESULT (__stdcall * GetDeviceInfo)(IDirectInputDevice8A * This, LPDIDEVICEINSTANCEA) ;
    HRESULT (__stdcall * RunControlPanel)(IDirectInputDevice8A * This, HWND,DWORD) ;
    HRESULT (__stdcall * Initialize)(IDirectInputDevice8A * This, HINSTANCE,DWORD,const GUID * const) ;
    HRESULT (__stdcall * CreateEffect)(IDirectInputDevice8A * This, const GUID * const,LPCDIEFFECT,LPDIRECTINPUTEFFECT *,LPUNKNOWN) ;
    HRESULT (__stdcall * EnumEffects)(IDirectInputDevice8A * This, LPDIENUMEFFECTSCALLBACKA,LPVOID,DWORD) ;
    HRESULT (__stdcall * GetEffectInfo)(IDirectInputDevice8A * This, LPDIEFFECTINFOA,const GUID * const) ;
    HRESULT (__stdcall * GetForceFeedbackState)(IDirectInputDevice8A * This, LPDWORD) ;
    HRESULT (__stdcall * SendForceFeedbackCommand)(IDirectInputDevice8A * This, DWORD) ;
    HRESULT (__stdcall * EnumCreatedEffectObjects)(IDirectInputDevice8A * This, LPDIENUMCREATEDEFFECTOBJECTSCALLBACK,LPVOID,DWORD) ;
    HRESULT (__stdcall * Escape)(IDirectInputDevice8A * This, LPDIEFFESCAPE) ;
    HRESULT (__stdcall * Poll)(IDirectInputDevice8A * This) ;
    HRESULT (__stdcall * SendDeviceData)(IDirectInputDevice8A * This, DWORD,LPCDIDEVICEOBJECTDATA,LPDWORD,DWORD) ;
    HRESULT (__stdcall * EnumEffectsInFile)(IDirectInputDevice8A * This, LPCSTR,LPDIENUMEFFECTSINFILECALLBACK,LPVOID,DWORD) ;
    HRESULT (__stdcall * WriteEffectToFile)(IDirectInputDevice8A * This, LPCSTR,DWORD,LPDIFILEEFFECT,DWORD) ;
    HRESULT (__stdcall * BuildActionMap)(IDirectInputDevice8A * This, LPDIACTIONFORMATA,LPCSTR,DWORD) ;
    HRESULT (__stdcall * SetActionMap)(IDirectInputDevice8A * This, LPDIACTIONFORMATA,LPCSTR,DWORD) ;
    HRESULT (__stdcall * GetImageInfo)(IDirectInputDevice8A * This, LPDIDEVICEIMAGEINFOHEADERA) ;
};

typedef struct IDirectInputDevice8A *LPDIRECTINPUTDEVICE8A;
#line 1909 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\dinput.h"
typedef struct IDirectInputDevice8W *LPDIRECTINPUTDEVICE8;
#line 1991 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\dinput.h"
typedef struct _DIMOUSESTATE {
    LONG lX;
    LONG lY;
    LONG lZ;
    BYTE rgbButtons[4];
} DIMOUSESTATE, *LPDIMOUSESTATE;


typedef struct _DIMOUSESTATE2 {
    LONG lX;
    LONG lY;
    LONG lZ;
    BYTE rgbButtons[8];
} DIMOUSESTATE2, *LPDIMOUSESTATE2;
#line 2218 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\dinput.h"
typedef struct DIJOYSTATE {
    LONG lX;
    LONG lY;
    LONG lZ;
    LONG lRx;
    LONG lRy;
    LONG lRz;
    LONG rglSlider[2];
    DWORD rgdwPOV[4];
    BYTE rgbButtons[32];
} DIJOYSTATE, *LPDIJOYSTATE;

typedef struct DIJOYSTATE2 {
    LONG lX;
    LONG lY;
    LONG lZ;
    LONG lRx;
    LONG lRy;
    LONG lRz;
    LONG rglSlider[2];
    DWORD rgdwPOV[4];
    BYTE rgbButtons[128];
    LONG lVX;
    LONG lVY;
    LONG lVZ;
    LONG lVRx;
    LONG lVRy;
    LONG lVRz;
    LONG rglVSlider[2];
    LONG lAX;
    LONG lAY;
    LONG lAZ;
    LONG lARx;
    LONG lARy;
    LONG lARz;
    LONG rglASlider[2];
    LONG lFX;
    LONG lFY;
    LONG lFZ;
    LONG lFRx;
    LONG lFRy;
    LONG lFRz;
    LONG rglFSlider[2];
} DIJOYSTATE2, *LPDIJOYSTATE2;
#line 2321 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\dinput.h"
typedef BOOL ( __stdcall * LPDIENUMDEVICESCALLBACKA)(LPCDIDEVICEINSTANCEA, LPVOID);
typedef BOOL ( __stdcall * LPDIENUMDEVICESCALLBACKW)(LPCDIDEVICEINSTANCEW, LPVOID);





typedef BOOL ( __stdcall * LPDICONFIGUREDEVICESCALLBACK)(IUnknown *, LPVOID);
#line 2345 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\dinput.h"
typedef BOOL ( __stdcall * LPDIENUMDEVICESBYSEMANTICSCBA)(LPCDIDEVICEINSTANCEA, LPDIRECTINPUTDEVICE8A, DWORD, DWORD, LPVOID);
typedef BOOL ( __stdcall * LPDIENUMDEVICESBYSEMANTICSCBW)(LPCDIDEVICEINSTANCEW, LPDIRECTINPUTDEVICE8W, DWORD, DWORD, LPVOID);
#line 2374 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\dinput.h"
typedef struct IDirectInputW { struct IDirectInputWVtbl * lpVtbl; } IDirectInputW; typedef struct IDirectInputWVtbl IDirectInputWVtbl; struct IDirectInputWVtbl
{

    HRESULT (__stdcall * QueryInterface)(IDirectInputW * This, const IID * const riid, LPVOID * ppvObj) ;
    ULONG (__stdcall * AddRef)(IDirectInputW * This) ;
    ULONG (__stdcall * Release)(IDirectInputW * This) ;


    HRESULT (__stdcall * CreateDevice)(IDirectInputW * This, const GUID * const,LPDIRECTINPUTDEVICEW *,LPUNKNOWN) ;
    HRESULT (__stdcall * EnumDevices)(IDirectInputW * This, DWORD,LPDIENUMDEVICESCALLBACKW,LPVOID,DWORD) ;
    HRESULT (__stdcall * GetDeviceStatus)(IDirectInputW * This, const GUID * const) ;
    HRESULT (__stdcall * RunControlPanel)(IDirectInputW * This, HWND,DWORD) ;
    HRESULT (__stdcall * Initialize)(IDirectInputW * This, HINSTANCE,DWORD) ;
};

typedef struct IDirectInputW *LPDIRECTINPUTW;




typedef struct IDirectInputA { struct IDirectInputAVtbl * lpVtbl; } IDirectInputA; typedef struct IDirectInputAVtbl IDirectInputAVtbl; struct IDirectInputAVtbl
{

    HRESULT (__stdcall * QueryInterface)(IDirectInputA * This, const IID * const riid, LPVOID * ppvObj) ;
    ULONG (__stdcall * AddRef)(IDirectInputA * This) ;
    ULONG (__stdcall * Release)(IDirectInputA * This) ;


    HRESULT (__stdcall * CreateDevice)(IDirectInputA * This, const GUID * const,LPDIRECTINPUTDEVICEA *,LPUNKNOWN) ;
    HRESULT (__stdcall * EnumDevices)(IDirectInputA * This, DWORD,LPDIENUMDEVICESCALLBACKA,LPVOID,DWORD) ;
    HRESULT (__stdcall * GetDeviceStatus)(IDirectInputA * This, const GUID * const) ;
    HRESULT (__stdcall * RunControlPanel)(IDirectInputA * This, HWND,DWORD) ;
    HRESULT (__stdcall * Initialize)(IDirectInputA * This, HINSTANCE,DWORD) ;
};

typedef struct IDirectInputA *LPDIRECTINPUTA;
#line 2420 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\dinput.h"
typedef struct IDirectInputW *LPDIRECTINPUT;
#line 2445 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\dinput.h"
typedef struct IDirectInput2W { struct IDirectInput2WVtbl * lpVtbl; } IDirectInput2W; typedef struct IDirectInput2WVtbl IDirectInput2WVtbl; struct IDirectInput2WVtbl
{

    HRESULT (__stdcall * QueryInterface)(IDirectInput2W * This, const IID * const riid, LPVOID * ppvObj) ;
    ULONG (__stdcall * AddRef)(IDirectInput2W * This) ;
    ULONG (__stdcall * Release)(IDirectInput2W * This) ;


    HRESULT (__stdcall * CreateDevice)(IDirectInput2W * This, const GUID * const,LPDIRECTINPUTDEVICEW *,LPUNKNOWN) ;
    HRESULT (__stdcall * EnumDevices)(IDirectInput2W * This, DWORD,LPDIENUMDEVICESCALLBACKW,LPVOID,DWORD) ;
    HRESULT (__stdcall * GetDeviceStatus)(IDirectInput2W * This, const GUID * const) ;
    HRESULT (__stdcall * RunControlPanel)(IDirectInput2W * This, HWND,DWORD) ;
    HRESULT (__stdcall * Initialize)(IDirectInput2W * This, HINSTANCE,DWORD) ;


    HRESULT (__stdcall * FindDevice)(IDirectInput2W * This, const GUID * const,LPCWSTR,LPGUID) ;
};

typedef struct IDirectInput2W *LPDIRECTINPUT2W;




typedef struct IDirectInput2A { struct IDirectInput2AVtbl * lpVtbl; } IDirectInput2A; typedef struct IDirectInput2AVtbl IDirectInput2AVtbl; struct IDirectInput2AVtbl
{

    HRESULT (__stdcall * QueryInterface)(IDirectInput2A * This, const IID * const riid, LPVOID * ppvObj) ;
    ULONG (__stdcall * AddRef)(IDirectInput2A * This) ;
    ULONG (__stdcall * Release)(IDirectInput2A * This) ;


    HRESULT (__stdcall * CreateDevice)(IDirectInput2A * This, const GUID * const,LPDIRECTINPUTDEVICEA *,LPUNKNOWN) ;
    HRESULT (__stdcall * EnumDevices)(IDirectInput2A * This, DWORD,LPDIENUMDEVICESCALLBACKA,LPVOID,DWORD) ;
    HRESULT (__stdcall * GetDeviceStatus)(IDirectInput2A * This, const GUID * const) ;
    HRESULT (__stdcall * RunControlPanel)(IDirectInput2A * This, HWND,DWORD) ;
    HRESULT (__stdcall * Initialize)(IDirectInput2A * This, HINSTANCE,DWORD) ;


    HRESULT (__stdcall * FindDevice)(IDirectInput2A * This, const GUID * const,LPCSTR,LPGUID) ;
};

typedef struct IDirectInput2A *LPDIRECTINPUT2A;
#line 2497 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\dinput.h"
typedef struct IDirectInput2W *LPDIRECTINPUT2;
#line 2525 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\dinput.h"
typedef struct IDirectInput7W { struct IDirectInput7WVtbl * lpVtbl; } IDirectInput7W; typedef struct IDirectInput7WVtbl IDirectInput7WVtbl; struct IDirectInput7WVtbl
{

    HRESULT (__stdcall * QueryInterface)(IDirectInput7W * This, const IID * const riid, LPVOID * ppvObj) ;
    ULONG (__stdcall * AddRef)(IDirectInput7W * This) ;
    ULONG (__stdcall * Release)(IDirectInput7W * This) ;


    HRESULT (__stdcall * CreateDevice)(IDirectInput7W * This, const GUID * const,LPDIRECTINPUTDEVICEW *,LPUNKNOWN) ;
    HRESULT (__stdcall * EnumDevices)(IDirectInput7W * This, DWORD,LPDIENUMDEVICESCALLBACKW,LPVOID,DWORD) ;
    HRESULT (__stdcall * GetDeviceStatus)(IDirectInput7W * This, const GUID * const) ;
    HRESULT (__stdcall * RunControlPanel)(IDirectInput7W * This, HWND,DWORD) ;
    HRESULT (__stdcall * Initialize)(IDirectInput7W * This, HINSTANCE,DWORD) ;
    HRESULT (__stdcall * FindDevice)(IDirectInput7W * This, const GUID * const,LPCWSTR,LPGUID) ;


    HRESULT (__stdcall * CreateDeviceEx)(IDirectInput7W * This, const GUID * const,const IID * const,LPVOID *,LPUNKNOWN) ;
};

typedef struct IDirectInput7W *LPDIRECTINPUT7W;




typedef struct IDirectInput7A { struct IDirectInput7AVtbl * lpVtbl; } IDirectInput7A; typedef struct IDirectInput7AVtbl IDirectInput7AVtbl; struct IDirectInput7AVtbl
{

    HRESULT (__stdcall * QueryInterface)(IDirectInput7A * This, const IID * const riid, LPVOID * ppvObj) ;
    ULONG (__stdcall * AddRef)(IDirectInput7A * This) ;
    ULONG (__stdcall * Release)(IDirectInput7A * This) ;


    HRESULT (__stdcall * CreateDevice)(IDirectInput7A * This, const GUID * const,LPDIRECTINPUTDEVICEA *,LPUNKNOWN) ;
    HRESULT (__stdcall * EnumDevices)(IDirectInput7A * This, DWORD,LPDIENUMDEVICESCALLBACKA,LPVOID,DWORD) ;
    HRESULT (__stdcall * GetDeviceStatus)(IDirectInput7A * This, const GUID * const) ;
    HRESULT (__stdcall * RunControlPanel)(IDirectInput7A * This, HWND,DWORD) ;
    HRESULT (__stdcall * Initialize)(IDirectInput7A * This, HINSTANCE,DWORD) ;
    HRESULT (__stdcall * FindDevice)(IDirectInput7A * This, const GUID * const,LPCSTR,LPGUID) ;


    HRESULT (__stdcall * CreateDeviceEx)(IDirectInput7A * This, const GUID * const,const IID * const,LPVOID *,LPUNKNOWN) ;
};

typedef struct IDirectInput7A *LPDIRECTINPUT7A;
#line 2579 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\dinput.h"
typedef struct IDirectInput7W *LPDIRECTINPUT7;
#line 2609 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\dinput.h"
typedef struct IDirectInput8W { struct IDirectInput8WVtbl * lpVtbl; } IDirectInput8W; typedef struct IDirectInput8WVtbl IDirectInput8WVtbl; struct IDirectInput8WVtbl
{

    HRESULT (__stdcall * QueryInterface)(IDirectInput8W * This, const IID * const riid, LPVOID * ppvObj) ;
    ULONG (__stdcall * AddRef)(IDirectInput8W * This) ;
    ULONG (__stdcall * Release)(IDirectInput8W * This) ;


    HRESULT (__stdcall * CreateDevice)(IDirectInput8W * This, const GUID * const,LPDIRECTINPUTDEVICE8W *,LPUNKNOWN) ;
    HRESULT (__stdcall * EnumDevices)(IDirectInput8W * This, DWORD,LPDIENUMDEVICESCALLBACKW,LPVOID,DWORD) ;
    HRESULT (__stdcall * GetDeviceStatus)(IDirectInput8W * This, const GUID * const) ;
    HRESULT (__stdcall * RunControlPanel)(IDirectInput8W * This, HWND,DWORD) ;
    HRESULT (__stdcall * Initialize)(IDirectInput8W * This, HINSTANCE,DWORD) ;
    HRESULT (__stdcall * FindDevice)(IDirectInput8W * This, const GUID * const,LPCWSTR,LPGUID) ;
    HRESULT (__stdcall * EnumDevicesBySemantics)(IDirectInput8W * This, LPCWSTR,LPDIACTIONFORMATW,LPDIENUMDEVICESBYSEMANTICSCBW,LPVOID,DWORD) ;
    HRESULT (__stdcall * ConfigureDevices)(IDirectInput8W * This, LPDICONFIGUREDEVICESCALLBACK,LPDICONFIGUREDEVICESPARAMSW,DWORD,LPVOID) ;
};

typedef struct IDirectInput8W *LPDIRECTINPUT8W;




typedef struct IDirectInput8A { struct IDirectInput8AVtbl * lpVtbl; } IDirectInput8A; typedef struct IDirectInput8AVtbl IDirectInput8AVtbl; struct IDirectInput8AVtbl
{

    HRESULT (__stdcall * QueryInterface)(IDirectInput8A * This, const IID * const riid, LPVOID * ppvObj) ;
    ULONG (__stdcall * AddRef)(IDirectInput8A * This) ;
    ULONG (__stdcall * Release)(IDirectInput8A * This) ;


    HRESULT (__stdcall * CreateDevice)(IDirectInput8A * This, const GUID * const,LPDIRECTINPUTDEVICE8A *,LPUNKNOWN) ;
    HRESULT (__stdcall * EnumDevices)(IDirectInput8A * This, DWORD,LPDIENUMDEVICESCALLBACKA,LPVOID,DWORD) ;
    HRESULT (__stdcall * GetDeviceStatus)(IDirectInput8A * This, const GUID * const) ;
    HRESULT (__stdcall * RunControlPanel)(IDirectInput8A * This, HWND,DWORD) ;
    HRESULT (__stdcall * Initialize)(IDirectInput8A * This, HINSTANCE,DWORD) ;
    HRESULT (__stdcall * FindDevice)(IDirectInput8A * This, const GUID * const,LPCSTR,LPGUID) ;
    HRESULT (__stdcall * EnumDevicesBySemantics)(IDirectInput8A * This, LPCSTR,LPDIACTIONFORMATA,LPDIENUMDEVICESBYSEMANTICSCBA,LPVOID,DWORD) ;
    HRESULT (__stdcall * ConfigureDevices)(IDirectInput8A * This, LPDICONFIGUREDEVICESCALLBACK,LPDICONFIGUREDEVICESPARAMSA,DWORD,LPVOID) ;
};

typedef struct IDirectInput8A *LPDIRECTINPUT8A;
#line 2661 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\dinput.h"
typedef struct IDirectInput8W *LPDIRECTINPUT8;
#line 2692 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\dinput.h"
extern HRESULT __stdcall DirectInput8Create(HINSTANCE hinst, DWORD dwVersion, const IID * const riidltf, LPVOID *ppvOut, LPUNKNOWN punkOuter);
#line 4305 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\dinput.h"
#pragma endregion
#line 4444 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\dinput.h"
#pragma option pop
#line 70 "./win32_platform.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\xinput.h"
#pragma option push -b -a8 -pc -A- -w-pun
#line 18 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\xinput.h"
#pragma region Application Family
#line 195 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\xinput.h"
typedef struct _XINPUT_GAMEPAD
{
    WORD wButtons;
    BYTE bLeftTrigger;
    BYTE bRightTrigger;
    SHORT sThumbLX;
    SHORT sThumbLY;
    SHORT sThumbRX;
    SHORT sThumbRY;
} XINPUT_GAMEPAD, *PXINPUT_GAMEPAD;

typedef struct _XINPUT_STATE
{
    DWORD dwPacketNumber;
    XINPUT_GAMEPAD Gamepad;
} XINPUT_STATE, *PXINPUT_STATE;

typedef struct _XINPUT_VIBRATION
{
    WORD wLeftMotorSpeed;
    WORD wRightMotorSpeed;
} XINPUT_VIBRATION, *PXINPUT_VIBRATION;

typedef struct _XINPUT_CAPABILITIES
{
    BYTE Type;
    BYTE SubType;
    WORD Flags;
    XINPUT_GAMEPAD Gamepad;
    XINPUT_VIBRATION Vibration;
} XINPUT_CAPABILITIES, *PXINPUT_CAPABILITIES;
#line 247 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\xinput.h"
#pragma endregion








#pragma region Application Family


DWORD __stdcall XInputGetState
(
          DWORD dwUserIndex,
          XINPUT_STATE* pState
);

DWORD __stdcall XInputSetState
(
         DWORD dwUserIndex,
         XINPUT_VIBRATION* pVibration
);

DWORD __stdcall XInputGetCapabilities
(
          DWORD dwUserIndex,
          DWORD dwFlags,
          XINPUT_CAPABILITIES* pCapabilities
);
#line 311 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\xinput.h"
#pragma endregion

#pragma region Desktop Family




DWORD __stdcall XInputGetDSoundAudioDeviceGuids
(
          DWORD dwUserIndex,
          GUID* pDSoundRenderGuid,
          GUID* pDSoundCaptureGuid
);




#pragma endregion




#pragma option pop
#line 71 "./win32_platform.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\dbt.h"
#line 21 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\dbt.h"
#pragma option push -b -a8 -pc -A- -w-pun








#pragma region Desktop Family
#line 213 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\dbt.h"
struct _DEV_BROADCAST_HDR {
    DWORD dbch_size;
    DWORD dbch_devicetype;
    DWORD dbch_reserved;
};

typedef struct _DEV_BROADCAST_HDR DEV_BROADCAST_HDR;
typedef DEV_BROADCAST_HDR *PDEV_BROADCAST_HDR;





typedef struct VolLockBroadcast VolLockBroadcast;
typedef VolLockBroadcast *pVolLockBroadcast;
struct VolLockBroadcast {
        struct _DEV_BROADCAST_HDR vlb_dbh;
        DWORD vlb_owner;
        BYTE vlb_perms;
        BYTE vlb_lockType;
        BYTE vlb_drive;
        BYTE vlb_flags;
};
#line 310 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\dbt.h"
struct _DEV_BROADCAST_HEADER {
    DWORD dbcd_size;
    DWORD dbcd_devicetype;
    DWORD dbcd_reserved;
};

struct _DEV_BROADCAST_OEM {
    DWORD dbco_size;
    DWORD dbco_devicetype;
    DWORD dbco_reserved;
    DWORD dbco_identifier;
    DWORD dbco_suppfunc;
};

typedef struct _DEV_BROADCAST_OEM DEV_BROADCAST_OEM;
typedef DEV_BROADCAST_OEM *PDEV_BROADCAST_OEM;

struct _DEV_BROADCAST_DEVNODE {
    DWORD dbcd_size;
    DWORD dbcd_devicetype;
    DWORD dbcd_reserved;
    DWORD dbcd_devnode;
};

typedef struct _DEV_BROADCAST_DEVNODE DEV_BROADCAST_DEVNODE;
typedef DEV_BROADCAST_DEVNODE *PDEV_BROADCAST_DEVNODE;

struct _DEV_BROADCAST_VOLUME {
    DWORD dbcv_size;
    DWORD dbcv_devicetype;
    DWORD dbcv_reserved;
    DWORD dbcv_unitmask;
    WORD dbcv_flags;
};

typedef struct _DEV_BROADCAST_VOLUME DEV_BROADCAST_VOLUME;
typedef DEV_BROADCAST_VOLUME *PDEV_BROADCAST_VOLUME;




typedef struct _DEV_BROADCAST_PORT_A {
    DWORD dbcp_size;
    DWORD dbcp_devicetype;
    DWORD dbcp_reserved;
    char dbcp_name[1];
} DEV_BROADCAST_PORT_A, *PDEV_BROADCAST_PORT_A;

typedef struct _DEV_BROADCAST_PORT_W {
    DWORD dbcp_size;
    DWORD dbcp_devicetype;
    DWORD dbcp_reserved;
    wchar_t dbcp_name[1];
} DEV_BROADCAST_PORT_W, *PDEV_BROADCAST_PORT_W;


typedef DEV_BROADCAST_PORT_W DEV_BROADCAST_PORT;
typedef PDEV_BROADCAST_PORT_W PDEV_BROADCAST_PORT;





struct _DEV_BROADCAST_NET {
    DWORD dbcn_size;
    DWORD dbcn_devicetype;
    DWORD dbcn_reserved;
    DWORD dbcn_resource;
    DWORD dbcn_flags;
};

typedef struct _DEV_BROADCAST_NET DEV_BROADCAST_NET;
typedef DEV_BROADCAST_NET *PDEV_BROADCAST_NET;



typedef struct _DEV_BROADCAST_DEVICEINTERFACE_A {
    DWORD dbcc_size;
    DWORD dbcc_devicetype;
    DWORD dbcc_reserved;
    GUID dbcc_classguid;
    char dbcc_name[1];
} DEV_BROADCAST_DEVICEINTERFACE_A, *PDEV_BROADCAST_DEVICEINTERFACE_A;

typedef struct _DEV_BROADCAST_DEVICEINTERFACE_W {
    DWORD dbcc_size;
    DWORD dbcc_devicetype;
    DWORD dbcc_reserved;
    GUID dbcc_classguid;
    wchar_t dbcc_name[1];
} DEV_BROADCAST_DEVICEINTERFACE_W, *PDEV_BROADCAST_DEVICEINTERFACE_W;


typedef DEV_BROADCAST_DEVICEINTERFACE_W DEV_BROADCAST_DEVICEINTERFACE;
typedef PDEV_BROADCAST_DEVICEINTERFACE_W PDEV_BROADCAST_DEVICEINTERFACE;





typedef struct _DEV_BROADCAST_HANDLE {
    DWORD dbch_size;
    DWORD dbch_devicetype;
    DWORD dbch_reserved;
    HANDLE dbch_handle;
    HDEVNOTIFY dbch_hdevnotify;



    GUID dbch_eventguid;
    LONG dbch_nameoffset;
    BYTE dbch_data[1];
} DEV_BROADCAST_HANDLE, *PDEV_BROADCAST_HANDLE;
#line 431 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\dbt.h"
typedef struct _DEV_BROADCAST_HANDLE32 {
    DWORD dbch_size;
    DWORD dbch_devicetype;
    DWORD dbch_reserved;
    ULONG32 dbch_handle;
    ULONG32 dbch_hdevnotify;
    GUID dbch_eventguid;
    LONG dbch_nameoffset;
    BYTE dbch_data[1];
} DEV_BROADCAST_HANDLE32, *PDEV_BROADCAST_HANDLE32;

typedef struct _DEV_BROADCAST_HANDLE64 {
    DWORD dbch_size;
    DWORD dbch_devicetype;
    DWORD dbch_reserved;
    ULONG64 dbch_handle;
    ULONG64 dbch_hdevnotify;
    GUID dbch_eventguid;
    LONG dbch_nameoffset;
    BYTE dbch_data[1];
} DEV_BROADCAST_HANDLE64, *PDEV_BROADCAST_HANDLE64;
#line 486 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\dbt.h"
struct _DEV_BROADCAST_USERDEFINED {
    struct _DEV_BROADCAST_HDR dbud_dbh;
    char dbud_szName[1];

};




#pragma endregion

#pragma option pop
#line 72 "./win32_platform.h"
#line 121 "./win32_platform.h"
typedef struct
{
    DWORD cbSize;
    DWORD ExtStatus;
} CHANGEFILTERSTRUCT;
#line 134 "./win32_platform.h"
typedef struct
{
    DWORD dwFlags;
    BOOL fEnable;
    HRGN hRgnBlur;
    BOOL fTransitionOnMaximized;
} DWM_BLURBEHIND;





typedef enum
{
    PROCESS_DPI_UNAWARE = 0,
    PROCESS_SYSTEM_DPI_AWARE = 1,
    PROCESS_PER_MONITOR_DPI_AWARE = 2
} PROCESS_DPI_AWARENESS;
typedef enum
{
    MDT_EFFECTIVE_DPI = 0,
    MDT_ANGULAR_DPI = 1,
    MDT_RAW_DPI = 2,
    MDT_DEFAULT = MDT_EFFECTIVE_DPI
} MONITOR_DPI_TYPE;
#line 274 "./win32_platform.h"
typedef DWORD (__stdcall * PFN_XInputGetCapabilities)(DWORD,DWORD,XINPUT_CAPABILITIES*);
typedef DWORD (__stdcall * PFN_XInputGetState)(DWORD,XINPUT_STATE*);




typedef HRESULT (__stdcall * PFN_DirectInput8Create)(HINSTANCE,DWORD,const IID * const,LPVOID*,LPUNKNOWN);



typedef BOOL (__stdcall * PFN_SetProcessDPIAware)(void);
typedef BOOL (__stdcall * PFN_ChangeWindowMessageFilterEx)(HWND,UINT,DWORD,CHANGEFILTERSTRUCT*);
typedef BOOL (__stdcall * PFN_EnableNonClientDpiScaling)(HWND);
typedef BOOL (__stdcall * PFN_SetProcessDpiAwarenessContext)(HANDLE);
typedef UINT (__stdcall * PFN_GetDpiForWindow)(HWND);
typedef BOOL (__stdcall * PFN_AdjustWindowRectExForDpi)(LPRECT,DWORD,BOOL,DWORD,UINT);
typedef int (__stdcall * PFN_GetSystemMetricsForDpi)(int,UINT);
#line 300 "./win32_platform.h"
typedef HRESULT (__stdcall * PFN_DwmIsCompositionEnabled)(BOOL*);
typedef HRESULT (__stdcall * PFN_DwmFlush)(void);
typedef HRESULT(__stdcall * PFN_DwmEnableBlurBehindWindow)(HWND,const DWM_BLURBEHIND*);
typedef HRESULT (__stdcall * PFN_DwmGetColorizationColor)(DWORD*,BOOL*);






typedef HRESULT (__stdcall * PFN_SetProcessDpiAwareness)(PROCESS_DPI_AWARENESS);
typedef HRESULT (__stdcall * PFN_GetDpiForMonitor)(HMONITOR,MONITOR_DPI_TYPE,UINT*,UINT*);




typedef LONG (__stdcall * PFN_RtlVerifyVersionInfo)(OSVERSIONINFOEXW*,ULONG,ULONGLONG);



typedef BOOL (__stdcall * PFNWGLSWAPINTERVALEXTPROC)(int);
typedef BOOL (__stdcall * PFNWGLGETPIXELFORMATATTRIBIVARBPROC)(HDC,int,int,UINT,const int*,int*);
typedef const char* (__stdcall * PFNWGLGETEXTENSIONSSTRINGEXTPROC)(void);
typedef const char* (__stdcall * PFNWGLGETEXTENSIONSSTRINGARBPROC)(HDC);
typedef HGLRC (__stdcall * PFNWGLCREATECONTEXTATTRIBSARBPROC)(HDC,HGLRC,const int*);







typedef HGLRC (__stdcall * PFN_wglCreateContext)(HDC);
typedef BOOL (__stdcall * PFN_wglDeleteContext)(HGLRC);
typedef PROC (__stdcall * PFN_wglGetProcAddress)(LPCSTR);
typedef HDC (__stdcall * PFN_wglGetCurrentDC)(void);
typedef HGLRC (__stdcall * PFN_wglGetCurrentContext)(void);
typedef BOOL (__stdcall * PFN_wglMakeCurrent)(HDC,HGLRC);
typedef BOOL (__stdcall * PFN_wglShareLists)(HGLRC,HGLRC);
#line 347 "./win32_platform.h"
typedef VkFlags VkWin32SurfaceCreateFlagsKHR;

typedef struct VkWin32SurfaceCreateInfoKHR
{
    VkStructureType sType;
    const void* pNext;
    VkWin32SurfaceCreateFlagsKHR flags;
    HINSTANCE hinstance;
    HWND hwnd;
} VkWin32SurfaceCreateInfoKHR;

typedef VkResult (__stdcall *PFN_vkCreateWin32SurfaceKHR)(VkInstance,const VkWin32SurfaceCreateInfoKHR*,const VkAllocationCallbacks*,VkSurfaceKHR*);
typedef VkBool32 (__stdcall *PFN_vkGetPhysicalDeviceWin32PresentationSupportKHR)(VkPhysicalDevice,uint32_t);
#line 372 "./win32_platform.h"
typedef struct _GLFWcontextWGL
{
    HDC dc;
    HGLRC handle;
    int interval;
} _GLFWcontextWGL;



typedef struct _GLFWlibraryWGL
{
    HINSTANCE instance;
    PFN_wglCreateContext CreateContext;
    PFN_wglDeleteContext DeleteContext;
    PFN_wglGetProcAddress GetProcAddress;
    PFN_wglGetCurrentDC GetCurrentDC;
    PFN_wglGetCurrentContext GetCurrentContext;
    PFN_wglMakeCurrent MakeCurrent;
    PFN_wglShareLists ShareLists;

    PFNWGLSWAPINTERVALEXTPROC SwapIntervalEXT;
    PFNWGLGETPIXELFORMATATTRIBIVARBPROC GetPixelFormatAttribivARB;
    PFNWGLGETEXTENSIONSSTRINGEXTPROC GetExtensionsStringEXT;
    PFNWGLGETEXTENSIONSSTRINGARBPROC GetExtensionsStringARB;
    PFNWGLCREATECONTEXTATTRIBSARBPROC CreateContextAttribsARB;
    GLFWbool EXT_swap_control;
    GLFWbool EXT_colorspace;
    GLFWbool ARB_multisample;
    GLFWbool ARB_framebuffer_sRGB;
    GLFWbool EXT_framebuffer_sRGB;
    GLFWbool ARB_pixel_format;
    GLFWbool ARB_create_context;
    GLFWbool ARB_create_context_profile;
    GLFWbool EXT_create_context_es2_profile;
    GLFWbool ARB_create_context_robustness;
    GLFWbool ARB_create_context_no_error;
    GLFWbool ARB_context_flush_control;
} _GLFWlibraryWGL;



typedef struct _GLFWwindowWin32
{
    HWND handle;
    HICON bigIcon;
    HICON smallIcon;

    GLFWbool cursorTracked;
    GLFWbool frameAction;
    GLFWbool iconified;
    GLFWbool maximized;

    GLFWbool transparent;
    GLFWbool scaleToMonitor;
    GLFWbool keymenu;
    GLFWbool showDefault;


    int width, height;


    int lastCursorPosX, lastCursorPosY;

    WCHAR highSurrogate;
} _GLFWwindowWin32;



typedef struct _GLFWlibraryWin32
{
    HINSTANCE instance;
    HWND helperWindowHandle;
    ATOM helperWindowClass;
    ATOM mainWindowClass;
    HDEVNOTIFY deviceNotificationHandle;
    int acquiredMonitorCount;
    char* clipboardString;
    short int keycodes[512];
    short int scancodes[348 + 1];
    char keynames[348 + 1][5];

    double restoreCursorPosX, restoreCursorPosY;

    _GLFWwindow* disabledCursorWindow;

    _GLFWwindow* capturedCursorWindow;
    RAWINPUT* rawInput;
    int rawInputSize;
    UINT mouseTrailSize;

    HCURSOR blankCursor;

    struct {
        HINSTANCE instance;
        PFN_DirectInput8Create Create;
        IDirectInput8W* api;
    } dinput8;

    struct {
        HINSTANCE instance;
        PFN_XInputGetCapabilities GetCapabilities;
        PFN_XInputGetState GetState;
    } xinput;

    struct {
        HINSTANCE instance;
        PFN_SetProcessDPIAware SetProcessDPIAware_;
        PFN_ChangeWindowMessageFilterEx ChangeWindowMessageFilterEx_;
        PFN_EnableNonClientDpiScaling EnableNonClientDpiScaling_;
        PFN_SetProcessDpiAwarenessContext SetProcessDpiAwarenessContext_;
        PFN_GetDpiForWindow GetDpiForWindow_;
        PFN_AdjustWindowRectExForDpi AdjustWindowRectExForDpi_;
        PFN_GetSystemMetricsForDpi GetSystemMetricsForDpi_;
    } user32;

    struct {
        HINSTANCE instance;
        PFN_DwmIsCompositionEnabled IsCompositionEnabled;
        PFN_DwmFlush Flush;
        PFN_DwmEnableBlurBehindWindow EnableBlurBehindWindow;
        PFN_DwmGetColorizationColor GetColorizationColor;
    } dwmapi;

    struct {
        HINSTANCE instance;
        PFN_SetProcessDpiAwareness SetProcessDpiAwareness_;
        PFN_GetDpiForMonitor GetDpiForMonitor_;
    } shcore;

    struct {
        HINSTANCE instance;
        PFN_RtlVerifyVersionInfo RtlVerifyVersionInfo_;
    } ntdll;
} _GLFWlibraryWin32;



typedef struct _GLFWmonitorWin32
{
    HMONITOR handle;

    WCHAR adapterName[32];
    WCHAR displayName[32];
    char publicAdapterName[32];
    char publicDisplayName[32];
    GLFWbool modesPruned;
    GLFWbool modeChanged;
} _GLFWmonitorWin32;



typedef struct _GLFWcursorWin32
{
    HCURSOR handle;
} _GLFWcursorWin32;


GLFWbool _glfwConnectWin32(int platformID, _GLFWplatform* platform);
int _glfwInitWin32(void);
void _glfwTerminateWin32(void);

WCHAR* _glfwCreateWideStringFromUTF8Win32(const char* source);
char* _glfwCreateUTF8FromWideStringWin32(const WCHAR* source);
BOOL _glfwIsWindowsVersionOrGreaterWin32(WORD major, WORD minor, WORD sp);
BOOL _glfwIsWindows10BuildOrGreaterWin32(WORD build);
void _glfwInputErrorWin32(int error, const char* description);
void _glfwUpdateKeyNamesWin32(void);

void _glfwPollMonitorsWin32(void);
void _glfwSetVideoModeWin32(_GLFWmonitor* monitor, const GLFWvidmode* desired);
void _glfwRestoreVideoModeWin32(_GLFWmonitor* monitor);
void _glfwGetHMONITORContentScaleWin32(HMONITOR handle, float* xscale, float* yscale);

GLFWbool _glfwCreateWindowWin32(_GLFWwindow* window, const _GLFWwndconfig* wndconfig, const _GLFWctxconfig* ctxconfig, const _GLFWfbconfig* fbconfig);
void _glfwDestroyWindowWin32(_GLFWwindow* window);
void _glfwSetWindowTitleWin32(_GLFWwindow* window, const char* title);
void _glfwSetWindowIconWin32(_GLFWwindow* window, int count, const GLFWimage* images);
void _glfwGetWindowPosWin32(_GLFWwindow* window, int* xpos, int* ypos);
void _glfwSetWindowPosWin32(_GLFWwindow* window, int xpos, int ypos);
void _glfwGetWindowSizeWin32(_GLFWwindow* window, int* width, int* height);
void _glfwSetWindowSizeWin32(_GLFWwindow* window, int width, int height);
void _glfwSetWindowSizeLimitsWin32(_GLFWwindow* window, int minwidth, int minheight, int maxwidth, int maxheight);
void _glfwSetWindowAspectRatioWin32(_GLFWwindow* window, int numer, int denom);
void _glfwGetFramebufferSizeWin32(_GLFWwindow* window, int* width, int* height);
void _glfwGetWindowFrameSizeWin32(_GLFWwindow* window, int* left, int* top, int* right, int* bottom);
void _glfwGetWindowContentScaleWin32(_GLFWwindow* window, float* xscale, float* yscale);
void _glfwIconifyWindowWin32(_GLFWwindow* window);
void _glfwRestoreWindowWin32(_GLFWwindow* window);
void _glfwMaximizeWindowWin32(_GLFWwindow* window);
void _glfwShowWindowWin32(_GLFWwindow* window);
void _glfwHideWindowWin32(_GLFWwindow* window);
void _glfwRequestWindowAttentionWin32(_GLFWwindow* window);
void _glfwFocusWindowWin32(_GLFWwindow* window);
void _glfwSetWindowMonitorWin32(_GLFWwindow* window, _GLFWmonitor* monitor, int xpos, int ypos, int width, int height, int refreshRate);
GLFWbool _glfwWindowFocusedWin32(_GLFWwindow* window);
GLFWbool _glfwWindowIconifiedWin32(_GLFWwindow* window);
GLFWbool _glfwWindowVisibleWin32(_GLFWwindow* window);
GLFWbool _glfwWindowMaximizedWin32(_GLFWwindow* window);
GLFWbool _glfwWindowHoveredWin32(_GLFWwindow* window);
GLFWbool _glfwFramebufferTransparentWin32(_GLFWwindow* window);
void _glfwSetWindowResizableWin32(_GLFWwindow* window, GLFWbool enabled);
void _glfwSetWindowDecoratedWin32(_GLFWwindow* window, GLFWbool enabled);
void _glfwSetWindowFloatingWin32(_GLFWwindow* window, GLFWbool enabled);
void _glfwSetWindowMousePassthroughWin32(_GLFWwindow* window, GLFWbool enabled);
float _glfwGetWindowOpacityWin32(_GLFWwindow* window);
void _glfwSetWindowOpacityWin32(_GLFWwindow* window, float opacity);

void _glfwSetRawMouseMotionWin32(_GLFWwindow *window, GLFWbool enabled);
GLFWbool _glfwRawMouseMotionSupportedWin32(void);

void _glfwPollEventsWin32(void);
void _glfwWaitEventsWin32(void);
void _glfwWaitEventsTimeoutWin32(double timeout);
void _glfwPostEmptyEventWin32(void);

void _glfwGetCursorPosWin32(_GLFWwindow* window, double* xpos, double* ypos);
void _glfwSetCursorPosWin32(_GLFWwindow* window, double xpos, double ypos);
void _glfwSetCursorModeWin32(_GLFWwindow* window, int mode);
const char* _glfwGetScancodeNameWin32(int scancode);
int _glfwGetKeyScancodeWin32(int key);
GLFWbool _glfwCreateCursorWin32(_GLFWcursor* cursor, const GLFWimage* image, int xhot, int yhot);
GLFWbool _glfwCreateStandardCursorWin32(_GLFWcursor* cursor, int shape);
void _glfwDestroyCursorWin32(_GLFWcursor* cursor);
void _glfwSetCursorWin32(_GLFWwindow* window, _GLFWcursor* cursor);
void _glfwSetClipboardStringWin32(const char* string);
const char* _glfwGetClipboardStringWin32(void);

EGLenum _glfwGetEGLPlatformWin32(EGLint** attribs);
EGLNativeDisplayType _glfwGetEGLNativeDisplayWin32(void);
EGLNativeWindowType _glfwGetEGLNativeWindowWin32(_GLFWwindow* window);

void _glfwGetRequiredInstanceExtensionsWin32(char** extensions);
GLFWbool _glfwGetPhysicalDevicePresentationSupportWin32(VkInstance instance, VkPhysicalDevice device, uint32_t queuefamily);
VkResult _glfwCreateWindowSurfaceWin32(VkInstance instance, _GLFWwindow* window, const VkAllocationCallbacks* allocator, VkSurfaceKHR* surface);

void _glfwFreeMonitorWin32(_GLFWmonitor* monitor);
void _glfwGetMonitorPosWin32(_GLFWmonitor* monitor, int* xpos, int* ypos);
void _glfwGetMonitorContentScaleWin32(_GLFWmonitor* monitor, float* xscale, float* yscale);
void _glfwGetMonitorWorkareaWin32(_GLFWmonitor* monitor, int* xpos, int* ypos, int* width, int* height);
GLFWvidmode* _glfwGetVideoModesWin32(_GLFWmonitor* monitor, int* count);
GLFWbool _glfwGetVideoModeWin32(_GLFWmonitor* monitor, GLFWvidmode* mode);
GLFWbool _glfwGetGammaRampWin32(_GLFWmonitor* monitor, GLFWgammaramp* ramp);
void _glfwSetGammaRampWin32(_GLFWmonitor* monitor, const GLFWgammaramp* ramp);

GLFWbool _glfwInitJoysticksWin32(void);
void _glfwTerminateJoysticksWin32(void);
GLFWbool _glfwPollJoystickWin32(_GLFWjoystick* js, int mode);
const char* _glfwGetMappingNameWin32(void);
void _glfwUpdateGamepadGUIDWin32(char* guid);

GLFWbool _glfwInitWGL(void);
void _glfwTerminateWGL(void);
GLFWbool _glfwCreateContextWGL(_GLFWwindow* window,
                               const _GLFWctxconfig* ctxconfig,
                               const _GLFWfbconfig* fbconfig);
#line 46 "./platform.h"
#line 93 "./platform.h"
#line 1 "./null_joystick.h"
#line 27 "./null_joystick.h"
GLFWbool _glfwInitJoysticksNull(void);
void _glfwTerminateJoysticksNull(void);
GLFWbool _glfwPollJoystickNull(_GLFWjoystick* js, int mode);
const char* _glfwGetMappingNameNull(void);
void _glfwUpdateGamepadGUIDNull(char* guid);
#line 94 "./platform.h"


#line 1 "./win32_joystick.h"
#line 32 "./win32_joystick.h"
typedef struct _GLFWjoyobjectWin32
{
    int offset;
    int type;
} _GLFWjoyobjectWin32;



typedef struct _GLFWjoystickWin32
{
    _GLFWjoyobjectWin32* objects;
    int objectCount;
    IDirectInputDevice8W* device;
    DWORD index;
    GUID guid;
} _GLFWjoystickWin32;

void _glfwDetectJoystickConnectionWin32(void);
void _glfwDetectJoystickDisconnectionWin32(void);
#line 97 "./platform.h"
#line 175 "./platform.h"
#line 1 "./win32_thread.h"
#line 33 "./win32_thread.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\windows.h"
#line 34 "./win32_thread.h"






typedef struct _GLFWtlsWin32
{
    GLFWbool allocated;
    DWORD index;
} _GLFWtlsWin32;



typedef struct _GLFWmutexWin32
{
    GLFWbool allocated;
    CRITICAL_SECTION section;
} _GLFWmutexWin32;
#line 176 "./platform.h"
#line 193 "./platform.h"
#line 1 "./win32_time.h"
#line 33 "./win32_time.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\sdk\\windows.h"
#line 34 "./win32_time.h"





typedef struct _GLFWtimerWin32
{
    uint64_t frequency;
} _GLFWtimerWin32;
#line 194 "./platform.h"
#line 326 "./internal.h"


#line 1 "./../include/GLFW/glfw3native.h"
#line 182 "./../include/GLFW/glfw3native.h"
        const char* glfwGetWin32Adapter(GLFWmonitor* monitor);
#line 200 "./../include/GLFW/glfw3native.h"
        const char* glfwGetWin32Monitor(GLFWmonitor* monitor);
#line 225 "./../include/GLFW/glfw3native.h"
        HWND glfwGetWin32Window(GLFWwindow* window);
#line 252 "./../include/GLFW/glfw3native.h"
        HGLRC glfwGetWGLContext(GLFWwindow* window);
#line 554 "./../include/GLFW/glfw3native.h"
        EGLDisplay glfwGetEGLDisplay(void);
#line 571 "./../include/GLFW/glfw3native.h"
        EGLContext glfwGetEGLContext(GLFWwindow* window);
#line 588 "./../include/GLFW/glfw3native.h"
        EGLSurface glfwGetEGLSurface(GLFWwindow* window);
#line 614 "./../include/GLFW/glfw3native.h"
        int glfwGetOSMesaColorBuffer(GLFWwindow* window, int* width, int* height, int* format, void** buffer);
#line 638 "./../include/GLFW/glfw3native.h"
        int glfwGetOSMesaDepthBuffer(GLFWwindow* window, int* width, int* height, int* bytesPerValue, void** buffer);
#line 655 "./../include/GLFW/glfw3native.h"
        OSMesaContext glfwGetOSMesaContext(GLFWwindow* window);
#line 329 "./internal.h"
#line 355 "./internal.h"
struct _GLFWerror
{
    _GLFWerror* next;
    int code;
    char description[1024];
};





struct _GLFWinitconfig
{
    GLFWbool hatButtons;
    int angleType;
    int platformID;
    PFN_vkGetInstanceProcAddr vulkanLoader;
    struct {
        GLFWbool menubar;
        GLFWbool chdir;
    } ns;
    struct {
        GLFWbool xcbVulkanSurface;
    } x11;
    struct {
        int libdecorMode;
    } wl;
};







struct _GLFWwndconfig
{
    int xpos;
    int ypos;
    int width;
    int height;
    const char* title;
    GLFWbool resizable;
    GLFWbool visible;
    GLFWbool decorated;
    GLFWbool focused;
    GLFWbool autoIconify;
    GLFWbool floating;
    GLFWbool maximized;
    GLFWbool centerCursor;
    GLFWbool focusOnShow;
    GLFWbool mousePassthrough;
    GLFWbool scaleToMonitor;
    GLFWbool scaleFramebuffer;
    struct {
        char frameName[256];
    } ns;
    struct {
        char className[256];
        char instanceName[256];
    } x11;
    struct {
        GLFWbool keymenu;
        GLFWbool showDefault;
    } win32;
    struct {
        char appId[256];
    } wl;
};







struct _GLFWctxconfig
{
    int client;
    int source;
    int major;
    int minor;
    GLFWbool forward;
    GLFWbool debug;
    GLFWbool noerror;
    int profile;
    int robustness;
    int release;
    _GLFWwindow* share;
    struct {
        GLFWbool offline;
    } nsgl;
};
#line 457 "./internal.h"
struct _GLFWfbconfig
{
    int redBits;
    int greenBits;
    int blueBits;
    int alphaBits;
    int depthBits;
    int stencilBits;
    int accumRedBits;
    int accumGreenBits;
    int accumBlueBits;
    int accumAlphaBits;
    int auxBuffers;
    GLFWbool stereo;
    int samples;
    GLFWbool sRGB;
    GLFWbool doublebuffer;
    GLFWbool transparent;
    uintptr_t handle;
};



struct _GLFWcontext
{
    int client;
    int source;
    int major, minor, revision;
    GLFWbool forward, debug, noerror;
    int profile;
    int robustness;
    int release;

    PFNGLGETSTRINGIPROC GetStringi;
    PFNGLGETINTEGERVPROC GetIntegerv;
    PFNGLGETSTRINGPROC GetString;

    void (*makeCurrent)(_GLFWwindow*);
    void (*swapBuffers)(_GLFWwindow*);
    void (*swapInterval)(int);
    int (*extensionSupported)(const char*);
    GLFWglproc (*getProcAddress)(const char*);
    void (*destroy)(_GLFWwindow*);

    struct {
        EGLConfig config;
        EGLContext handle;
        EGLSurface surface;
        void* client;
    } egl;

    struct {
        OSMesaContext handle;
        int width;
        int height;
        void* buffer;
    } osmesa;


    _GLFWcontextWGL wgl;
};



struct _GLFWwindow
{
    struct _GLFWwindow* next;


    GLFWbool resizable;
    GLFWbool decorated;
    GLFWbool autoIconify;
    GLFWbool floating;
    GLFWbool focusOnShow;
    GLFWbool mousePassthrough;
    GLFWbool shouldClose;
    void* userPointer;
    GLFWbool doublebuffer;
    GLFWvidmode videoMode;
    _GLFWmonitor* monitor;
    _GLFWcursor* cursor;
    char* title;

    int minwidth, minheight;
    int maxwidth, maxheight;
    int numer, denom;

    GLFWbool stickyKeys;
    GLFWbool stickyMouseButtons;
    GLFWbool lockKeyMods;
    int cursorMode;
    char mouseButtons[7 + 1];
    char keys[348 + 1];

    double virtualCursorPosX, virtualCursorPosY;
    GLFWbool rawMouseMotion;

    _GLFWcontext context;

    struct {
        GLFWwindowposfun pos;
        GLFWwindowsizefun size;
        GLFWwindowclosefun close;
        GLFWwindowrefreshfun refresh;
        GLFWwindowfocusfun focus;
        GLFWwindowiconifyfun iconify;
        GLFWwindowmaximizefun maximize;
        GLFWframebuffersizefun fbsize;
        GLFWwindowcontentscalefun scale;
        GLFWmousebuttonfun mouseButton;
        GLFWcursorposfun cursorPos;
        GLFWcursorenterfun cursorEnter;
        GLFWscrollfun scroll;
        GLFWkeyfun key;
        GLFWcharfun character;
        GLFWcharmodsfun charmods;
        GLFWdropfun drop;
    } callbacks;


    _GLFWwindowWin32 win32; _GLFWwindowNull null;
};



struct _GLFWmonitor
{
    char name[128];
    void* userPointer;


    int widthMM, heightMM;


    _GLFWwindow* window;

    GLFWvidmode* modes;
    int modeCount;
    GLFWvidmode currentMode;

    GLFWgammaramp originalRamp;
    GLFWgammaramp currentRamp;


    _GLFWmonitorWin32 win32; _GLFWmonitorNull null;
};



struct _GLFWcursor
{
    _GLFWcursor* next;

    _GLFWcursorWin32 win32;
};



struct _GLFWmapelement
{
    uint8_t type;
    uint8_t index;
    int8_t axisScale;
    int8_t axisOffset;
};



struct _GLFWmapping
{
    char name[128];
    char guid[33];
    _GLFWmapelement buttons[15];
    _GLFWmapelement axes[6];
};



struct _GLFWjoystick
{
    GLFWbool allocated;
    GLFWbool connected;
    float* axes;
    int axisCount;
    unsigned char* buttons;
    int buttonCount;
    unsigned char* hats;
    int hatCount;
    char name[128];
    void* userPointer;
    char guid[33];
    _GLFWmapping* mapping;


    _GLFWjoystickWin32 win32;
};



struct _GLFWtls
{

    _GLFWtlsWin32 win32;
};



struct _GLFWmutex
{

    _GLFWmutexWin32 win32;
};



struct _GLFWplatform
{
    int platformID;

    GLFWbool (*init)(void);
    void (*terminate)(void);

    void (*getCursorPos)(_GLFWwindow*,double*,double*);
    void (*setCursorPos)(_GLFWwindow*,double,double);
    void (*setCursorMode)(_GLFWwindow*,int);
    void (*setRawMouseMotion)(_GLFWwindow*,GLFWbool);
    GLFWbool (*rawMouseMotionSupported)(void);
    GLFWbool (*createCursor)(_GLFWcursor*,const GLFWimage*,int,int);
    GLFWbool (*createStandardCursor)(_GLFWcursor*,int);
    void (*destroyCursor)(_GLFWcursor*);
    void (*setCursor)(_GLFWwindow*,_GLFWcursor*);
    const char* (*getScancodeName)(int);
    int (*getKeyScancode)(int);
    void (*setClipboardString)(const char*);
    const char* (*getClipboardString)(void);
    GLFWbool (*initJoysticks)(void);
    void (*terminateJoysticks)(void);
    GLFWbool (*pollJoystick)(_GLFWjoystick*,int);
    const char* (*getMappingName)(void);
    void (*updateGamepadGUID)(char*);

    void (*freeMonitor)(_GLFWmonitor*);
    void (*getMonitorPos)(_GLFWmonitor*,int*,int*);
    void (*getMonitorContentScale)(_GLFWmonitor*,float*,float*);
    void (*getMonitorWorkarea)(_GLFWmonitor*,int*,int*,int*,int*);
    GLFWvidmode* (*getVideoModes)(_GLFWmonitor*,int*);
    GLFWbool (*getVideoMode)(_GLFWmonitor*,GLFWvidmode*);
    GLFWbool (*getGammaRamp)(_GLFWmonitor*,GLFWgammaramp*);
    void (*setGammaRamp)(_GLFWmonitor*,const GLFWgammaramp*);

    GLFWbool (*createWindow)(_GLFWwindow*,const _GLFWwndconfig*,const _GLFWctxconfig*,const _GLFWfbconfig*);
    void (*destroyWindow)(_GLFWwindow*);
    void (*setWindowTitle)(_GLFWwindow*,const char*);
    void (*setWindowIcon)(_GLFWwindow*,int,const GLFWimage*);
    void (*getWindowPos)(_GLFWwindow*,int*,int*);
    void (*setWindowPos)(_GLFWwindow*,int,int);
    void (*getWindowSize)(_GLFWwindow*,int*,int*);
    void (*setWindowSize)(_GLFWwindow*,int,int);
    void (*setWindowSizeLimits)(_GLFWwindow*,int,int,int,int);
    void (*setWindowAspectRatio)(_GLFWwindow*,int,int);
    void (*getFramebufferSize)(_GLFWwindow*,int*,int*);
    void (*getWindowFrameSize)(_GLFWwindow*,int*,int*,int*,int*);
    void (*getWindowContentScale)(_GLFWwindow*,float*,float*);
    void (*iconifyWindow)(_GLFWwindow*);
    void (*restoreWindow)(_GLFWwindow*);
    void (*maximizeWindow)(_GLFWwindow*);
    void (*showWindow)(_GLFWwindow*);
    void (*hideWindow)(_GLFWwindow*);
    void (*requestWindowAttention)(_GLFWwindow*);
    void (*focusWindow)(_GLFWwindow*);
    void (*setWindowMonitor)(_GLFWwindow*,_GLFWmonitor*,int,int,int,int,int);
    GLFWbool (*windowFocused)(_GLFWwindow*);
    GLFWbool (*windowIconified)(_GLFWwindow*);
    GLFWbool (*windowVisible)(_GLFWwindow*);
    GLFWbool (*windowMaximized)(_GLFWwindow*);
    GLFWbool (*windowHovered)(_GLFWwindow*);
    GLFWbool (*framebufferTransparent)(_GLFWwindow*);
    float (*getWindowOpacity)(_GLFWwindow*);
    void (*setWindowResizable)(_GLFWwindow*,GLFWbool);
    void (*setWindowDecorated)(_GLFWwindow*,GLFWbool);
    void (*setWindowFloating)(_GLFWwindow*,GLFWbool);
    void (*setWindowOpacity)(_GLFWwindow*,float);
    void (*setWindowMousePassthrough)(_GLFWwindow*,GLFWbool);
    void (*pollEvents)(void);
    void (*waitEvents)(void);
    void (*waitEventsTimeout)(double);
    void (*postEmptyEvent)(void);

    EGLenum (*getEGLPlatform)(EGLint**);
    EGLNativeDisplayType (*getEGLNativeDisplay)(void);
    EGLNativeWindowType (*getEGLNativeWindow)(_GLFWwindow*);

    void (*getRequiredInstanceExtensions)(char**);
    GLFWbool (*getPhysicalDevicePresentationSupport)(VkInstance,VkPhysicalDevice,uint32_t);
    VkResult (*createWindowSurface)(VkInstance,_GLFWwindow*,const VkAllocationCallbacks*,VkSurfaceKHR*);
};



struct _GLFWlibrary
{
    GLFWbool initialized;
    GLFWallocator allocator;

    _GLFWplatform platform;

    struct {
        _GLFWinitconfig init;
        _GLFWfbconfig framebuffer;
        _GLFWwndconfig window;
        _GLFWctxconfig context;
        int refreshRate;
    } hints;

    _GLFWerror* errorListHead;
    _GLFWcursor* cursorListHead;
    _GLFWwindow* windowListHead;

    _GLFWmonitor** monitors;
    int monitorCount;

    GLFWbool joysticksInitialized;
    _GLFWjoystick joysticks[15 + 1];
    _GLFWmapping* mappings;
    int mappingCount;

    _GLFWtls errorSlot;
    _GLFWtls contextSlot;
    _GLFWmutex errorLock;

    struct {
        uint64_t offset;

        _GLFWtimerWin32 win32;
    } timer;

    struct {
        EGLenum platform;
        EGLDisplay display;
        EGLint major, minor;
        GLFWbool prefix;

        GLFWbool KHR_create_context;
        GLFWbool KHR_create_context_no_error;
        GLFWbool KHR_gl_colorspace;
        GLFWbool KHR_get_all_proc_addresses;
        GLFWbool KHR_context_flush_control;
        GLFWbool EXT_client_extensions;
        GLFWbool EXT_platform_base;
        GLFWbool EXT_platform_x11;
        GLFWbool EXT_platform_wayland;
        GLFWbool EXT_present_opaque;
        GLFWbool ANGLE_platform_angle;
        GLFWbool ANGLE_platform_angle_opengl;
        GLFWbool ANGLE_platform_angle_d3d;
        GLFWbool ANGLE_platform_angle_vulkan;
        GLFWbool ANGLE_platform_angle_metal;

        void* handle;

        PFN_eglGetConfigAttrib GetConfigAttrib;
        PFN_eglGetConfigs GetConfigs;
        PFN_eglGetDisplay GetDisplay;
        PFN_eglGetError GetError;
        PFN_eglInitialize Initialize;
        PFN_eglTerminate Terminate;
        PFN_eglBindAPI BindAPI;
        PFN_eglCreateContext CreateContext;
        PFN_eglDestroySurface DestroySurface;
        PFN_eglDestroyContext DestroyContext;
        PFN_eglCreateWindowSurface CreateWindowSurface;
        PFN_eglMakeCurrent MakeCurrent;
        PFN_eglSwapBuffers SwapBuffers;
        PFN_eglSwapInterval SwapInterval;
        PFN_eglQueryString QueryString;
        PFN_eglGetProcAddress GetProcAddress;

        PFNEGLGETPLATFORMDISPLAYEXTPROC GetPlatformDisplayEXT;
        PFNEGLCREATEPLATFORMWINDOWSURFACEEXTPROC CreatePlatformWindowSurfaceEXT;
    } egl;

    struct {
        void* handle;

        PFN_OSMesaCreateContextExt CreateContextExt;
        PFN_OSMesaCreateContextAttribs CreateContextAttribs;
        PFN_OSMesaDestroyContext DestroyContext;
        PFN_OSMesaMakeCurrent MakeCurrent;
        PFN_OSMesaGetColorBuffer GetColorBuffer;
        PFN_OSMesaGetDepthBuffer GetDepthBuffer;
        PFN_OSMesaGetProcAddress GetProcAddress;

    } osmesa;

    struct {
        GLFWbool available;
        void* handle;
        char* extensions[2];
        PFN_vkGetInstanceProcAddr GetInstanceProcAddr;
        GLFWbool KHR_surface;
        GLFWbool KHR_win32_surface;
        GLFWbool MVK_macos_surface;
        GLFWbool EXT_metal_surface;
        GLFWbool KHR_xlib_surface;
        GLFWbool KHR_xcb_surface;
        GLFWbool KHR_wayland_surface;
    } vk;

    struct {
        GLFWmonitorfun monitor;
        GLFWjoystickfun joystick;
    } callbacks;


    _GLFWlibraryWin32 win32; _GLFWlibraryNull null;
    _GLFWlibraryWGL wgl;

};



extern _GLFWlibrary _glfw;






void _glfwPlatformInitTimer(void);
uint64_t _glfwPlatformGetTimerValue(void);
uint64_t _glfwPlatformGetTimerFrequency(void);

GLFWbool _glfwPlatformCreateTls(_GLFWtls* tls);
void _glfwPlatformDestroyTls(_GLFWtls* tls);
void* _glfwPlatformGetTls(_GLFWtls* tls);
void _glfwPlatformSetTls(_GLFWtls* tls, void* value);

GLFWbool _glfwPlatformCreateMutex(_GLFWmutex* mutex);
void _glfwPlatformDestroyMutex(_GLFWmutex* mutex);
void _glfwPlatformLockMutex(_GLFWmutex* mutex);
void _glfwPlatformUnlockMutex(_GLFWmutex* mutex);

void* _glfwPlatformLoadModule(const char* path);
void _glfwPlatformFreeModule(void* module);
GLFWproc _glfwPlatformGetModuleSymbol(void* module, const char* name);






void _glfwInputWindowFocus(_GLFWwindow* window, GLFWbool focused);
void _glfwInputWindowPos(_GLFWwindow* window, int xpos, int ypos);
void _glfwInputWindowSize(_GLFWwindow* window, int width, int height);
void _glfwInputFramebufferSize(_GLFWwindow* window, int width, int height);
void _glfwInputWindowContentScale(_GLFWwindow* window,
                                  float xscale, float yscale);
void _glfwInputWindowIconify(_GLFWwindow* window, GLFWbool iconified);
void _glfwInputWindowMaximize(_GLFWwindow* window, GLFWbool maximized);
void _glfwInputWindowDamage(_GLFWwindow* window);
void _glfwInputWindowCloseRequest(_GLFWwindow* window);
void _glfwInputWindowMonitor(_GLFWwindow* window, _GLFWmonitor* monitor);

void _glfwInputKey(_GLFWwindow* window,
                   int key, int scancode, int action, int mods);
void _glfwInputChar(_GLFWwindow* window,
                    uint32_t codepoint, int mods, GLFWbool plain);
void _glfwInputScroll(_GLFWwindow* window, double xoffset, double yoffset);
void _glfwInputMouseClick(_GLFWwindow* window, int button, int action, int mods);
void _glfwInputCursorPos(_GLFWwindow* window, double xpos, double ypos);
void _glfwInputCursorEnter(_GLFWwindow* window, GLFWbool entered);
void _glfwInputDrop(_GLFWwindow* window, int count, const char** names);
void _glfwInputJoystick(_GLFWjoystick* js, int event);
void _glfwInputJoystickAxis(_GLFWjoystick* js, int axis, float value);
void _glfwInputJoystickButton(_GLFWjoystick* js, int button, char value);
void _glfwInputJoystickHat(_GLFWjoystick* js, int hat, char value);

void _glfwInputMonitor(_GLFWmonitor* monitor, int action, int placement);
void _glfwInputMonitorWindow(_GLFWmonitor* monitor, _GLFWwindow* window);





void _glfwInputError(int code, const char* format, ...);







GLFWbool _glfwSelectPlatform(int platformID, _GLFWplatform* platform);

GLFWbool _glfwStringInExtensionString(const char* string, const char* extensions);
const _GLFWfbconfig* _glfwChooseFBConfig(const _GLFWfbconfig* desired,
                                         const _GLFWfbconfig* alternatives,
                                         unsigned int count);
GLFWbool _glfwRefreshContextAttribs(_GLFWwindow* window,
                                    const _GLFWctxconfig* ctxconfig);
GLFWbool _glfwIsValidContextConfig(const _GLFWctxconfig* ctxconfig);

const GLFWvidmode* _glfwChooseVideoMode(_GLFWmonitor* monitor,
                                        const GLFWvidmode* desired);
int _glfwCompareVideoModes(const GLFWvidmode* first, const GLFWvidmode* second);
_GLFWmonitor* _glfwAllocMonitor(const char* name, int widthMM, int heightMM);
void _glfwFreeMonitor(_GLFWmonitor* monitor);
void _glfwAllocGammaArrays(GLFWgammaramp* ramp, unsigned int size);
void _glfwFreeGammaArrays(GLFWgammaramp* ramp);
void _glfwSplitBPP(int bpp, int* red, int* green, int* blue);

void _glfwInitGamepadMappings(void);
_GLFWjoystick* _glfwAllocJoystick(const char* name,
                                  const char* guid,
                                  int axisCount,
                                  int buttonCount,
                                  int hatCount);
void _glfwFreeJoystick(_GLFWjoystick* js);
void _glfwCenterCursorInContentArea(_GLFWwindow* window);

GLFWbool _glfwInitEGL(void);
void _glfwTerminateEGL(void);
GLFWbool _glfwCreateContextEGL(_GLFWwindow* window,
                               const _GLFWctxconfig* ctxconfig,
                               const _GLFWfbconfig* fbconfig);







GLFWbool _glfwInitOSMesa(void);
void _glfwTerminateOSMesa(void);
GLFWbool _glfwCreateContextOSMesa(_GLFWwindow* window,
                                  const _GLFWctxconfig* ctxconfig,
                                  const _GLFWfbconfig* fbconfig);

GLFWbool _glfwInitVulkan(int mode);
void _glfwTerminateVulkan(void);
const char* _glfwGetVulkanResultString(VkResult result);

size_t _glfwEncodeUTF8(char* s, uint32_t codepoint);
char** _glfwParseUriList(char* text, int* count);

char* _glfw_strdup(const char* source);
int _glfw_min(int a, int b);
int _glfw_max(int a, int b);

void* _glfw_calloc(size_t count, size_t size);
void* _glfw_realloc(void* pointer, size_t size);
void _glfw_free(void* pointer);
#line 29 "win32_monitor.c"



#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\stdlib.h"
#line 528 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\stdlib.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\search.h"
#line 528 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\stdlib.h"

#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\errno.h"
#line 529 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\stdlib.h"
#line 33 "win32_monitor.c"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\string.h"
#line 13 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\string.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\_str.h"
#line 454 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\_str.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\mem.h"
#line 454 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\_str.h"
#line 13 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\string.h"
#line 34 "win32_monitor.c"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\limits.h"
#line 13 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\limits.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\_lim.h"
#line 20 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\_lim.h"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\_stddef.h"
#line 20 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\_lim.h"
#line 13 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\limits.h"
#line 35 "win32_monitor.c"
#line 1 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\wchar.h"
#line 33 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\wchar.h"
typedef int mbstate_t;
#line 43 "C:\\jitrajongma\\BCC102\\bin\\..\\include\\windows\\crtl\\wchar.h"
typedef struct
{
        unsigned char *curp;
        unsigned char *buffer;
        int level;
        int bsize;
        unsigned short istemp;
        unsigned short flags;
        wchar_t hold;
        char fd;
        unsigned char token;
} FILE;







#pragma argsused
__inline int fwide(FILE *__fp, int __mode) { return __mode; }
#line 36 "win32_monitor.c"




static BOOL __stdcall monitorCallback(HMONITOR handle,
                                     HDC dc,
                                     RECT* rect,
                                     LPARAM data)
{
    MONITORINFOEXW mi;
    memset((&mi),0,(sizeof(mi)));
    mi.cbSize = sizeof(mi);

    if (GetMonitorInfoW(handle, (MONITORINFO*) &mi))
    {
        _GLFWmonitor* monitor = (_GLFWmonitor*) data;
        if (wcscmp(mi.szDevice, monitor->win32.adapterName) == 0)
            monitor->win32.handle = handle;
    }

    return 1;
}



static _GLFWmonitor* createMonitor(DISPLAY_DEVICEW* adapter,
                                   DISPLAY_DEVICEW* display)
{
    _GLFWmonitor* monitor;
    int widthMM, heightMM;
    char* name;
    HDC dc;
    DEVMODEW dm;
    RECT rect;

    if (display)
        name = _glfwCreateUTF8FromWideStringWin32(display->DeviceString);
    else
        name = _glfwCreateUTF8FromWideStringWin32(adapter->DeviceString);
    if (!name)
        return 0;

    memset((&dm),0,(sizeof(dm)));
    dm.dmSize = sizeof(dm);
    EnumDisplaySettingsW(adapter->DeviceName, ((DWORD)-1), &dm);

    dc = CreateDCW(L"DISPLAY", adapter->DeviceName, 0, 0);

    if (_glfwIsWindowsVersionOrGreaterWin32(((BYTE)((((DWORD_PTR)(0x0603)) >> 8) & 0xff)), ((BYTE)(((DWORD_PTR)(0x0603)) & 0xff)), 0))
    {
        widthMM = GetDeviceCaps(dc, 4);
        heightMM = GetDeviceCaps(dc, 6);
    }
    else
    {
        widthMM = (int) (dm.dmPelsWidth * 25.4f / GetDeviceCaps(dc, 88));
        heightMM = (int) (dm.dmPelsHeight * 25.4f / GetDeviceCaps(dc, 90));
    }

    DeleteDC(dc);

    monitor = _glfwAllocMonitor(name, widthMM, heightMM);
    _glfw_free(name);

    if (adapter->StateFlags & 0x08000000)
        monitor->win32.modesPruned = 1;

    wcscpy(monitor->win32.adapterName, adapter->DeviceName);
    WideCharToMultiByte(65001, 0,
                        adapter->DeviceName, -1,
                        monitor->win32.publicAdapterName,
                        sizeof(monitor->win32.publicAdapterName),
                        0, 0);

    if (display)
    {
        wcscpy(monitor->win32.displayName, display->DeviceName);
        WideCharToMultiByte(65001, 0,
                            display->DeviceName, -1,
                            monitor->win32.publicDisplayName,
                            sizeof(monitor->win32.publicDisplayName),
                            0, 0);
    }

    rect.left = dm.dmPosition.x;
    rect.top = dm.dmPosition.y;
    rect.right = dm.dmPosition.x + dm.dmPelsWidth;
    rect.bottom = dm.dmPosition.y + dm.dmPelsHeight;

    EnumDisplayMonitors(0, &rect, monitorCallback, (LPARAM) monitor);
    return monitor;
}
#line 136 "win32_monitor.c"
void _glfwPollMonitorsWin32(void)
{
    int i, disconnectedCount;
    _GLFWmonitor** disconnected = 0;
    DWORD adapterIndex, displayIndex;
    DISPLAY_DEVICEW adapter, display;
    _GLFWmonitor* monitor;

    disconnectedCount = _glfw.monitorCount;
    if (disconnectedCount)
    {
        disconnected = _glfw_calloc(_glfw.monitorCount, sizeof(_GLFWmonitor*));
        memcpy(disconnected,
               _glfw.monitors,
               _glfw.monitorCount * sizeof(_GLFWmonitor*));
    }

    for (adapterIndex = 0; ; adapterIndex++)
    {
        int type = 1;

        memset((&adapter),0,(sizeof(adapter)));
        adapter.cb = sizeof(adapter);

        if (!EnumDisplayDevicesW(0, adapterIndex, &adapter, 0))
            break;

        if (!(adapter.StateFlags & 0x00000001))
            continue;

        if (adapter.StateFlags & 0x00000004)
            type = 0;

        for (displayIndex = 0; ; displayIndex++)
        {
            memset((&display),0,(sizeof(display)));
            display.cb = sizeof(display);

            if (!EnumDisplayDevicesW(adapter.DeviceName, displayIndex, &display, 0))
                break;

            if (!(display.StateFlags & 0x00000001))
                continue;

            for (i = 0; i < disconnectedCount; i++)
            {
                if (disconnected[i] &&
                    wcscmp(disconnected[i]->win32.displayName,
                           display.DeviceName) == 0)
                {
                    disconnected[i] = 0;

                    EnumDisplayMonitors(0, 0, monitorCallback, (LPARAM) _glfw.monitors[i]);
                    break;
                }
            }

            if (i < disconnectedCount)
                continue;

            monitor = createMonitor(&adapter, &display);
            if (!monitor)
            {
                _glfw_free(disconnected);
                return;
            }

            _glfwInputMonitor(monitor, 0x00040001, type);

            type = 1;
        }



        if (displayIndex == 0)
        {
            for (i = 0; i < disconnectedCount; i++)
            {
                if (disconnected[i] &&
                    wcscmp(disconnected[i]->win32.adapterName,
                           adapter.DeviceName) == 0)
                {
                    disconnected[i] = 0;
                    break;
                }
            }

            if (i < disconnectedCount)
                continue;

            monitor = createMonitor(&adapter, 0);
            if (!monitor)
            {
                _glfw_free(disconnected);
                return;
            }

            _glfwInputMonitor(monitor, 0x00040001, type);
        }
    }

    for (i = 0; i < disconnectedCount; i++)
    {
        if (disconnected[i])
            _glfwInputMonitor(disconnected[i], 0x00040002, 0);
    }

    _glfw_free(disconnected);
}



void _glfwSetVideoModeWin32(_GLFWmonitor* monitor, const GLFWvidmode* desired)
{
    GLFWvidmode current;
    const GLFWvidmode* best;
    DEVMODEW dm;
    LONG result;

    best = _glfwChooseVideoMode(monitor, desired);
    _glfwGetVideoModeWin32(monitor, &current);
    if (_glfwCompareVideoModes(&current, best) == 0)
        return;

    memset((&dm),0,(sizeof(dm)));
    dm.dmSize = sizeof(dm);
    dm.dmFields = 0x00080000L | 0x00100000L | 0x00040000L |
                            0x00400000L;
    dm.dmPelsWidth = best->width;
    dm.dmPelsHeight = best->height;
    dm.dmBitsPerPel = best->redBits + best->greenBits + best->blueBits;
    dm.dmDisplayFrequency = best->refreshRate;

    if (dm.dmBitsPerPel < 15 || dm.dmBitsPerPel >= 24)
        dm.dmBitsPerPel = 32;

    result = ChangeDisplaySettingsExW(monitor->win32.adapterName,
                                      &dm,
                                      0,
                                      0x00000004,
                                      0);
    if (result == 0)
        monitor->win32.modeChanged = 1;
    else
    {
        const char* description = "Unknown error";

        if (result == -6)
            description = "The system uses DualView";
        else if (result == -4)
            description = "Invalid flags";
        else if (result == -2)
            description = "Graphics mode not supported";
        else if (result == -5)
            description = "Invalid parameter";
        else if (result == -1)
            description = "Graphics mode failed";
        else if (result == -3)
            description = "Failed to write to registry";
        else if (result == 1)
            description = "Computer restart required";

        _glfwInputError(0x00010008,
                        "Win32: Failed to set video mode: %s",
                        description);
    }
}



void _glfwRestoreVideoModeWin32(_GLFWmonitor* monitor)
{
    if (monitor->win32.modeChanged)
    {
        ChangeDisplaySettingsExW(monitor->win32.adapterName,
                                 0, 0, 0x00000004, 0);
        monitor->win32.modeChanged = 0;
    }
}

void _glfwGetHMONITORContentScaleWin32(HMONITOR handle, float* xscale, float* yscale)
{
    UINT xdpi, ydpi;

    if (xscale)
        *xscale = 0.f;
    if (yscale)
        *yscale = 0.f;

    if (_glfwIsWindowsVersionOrGreaterWin32(((BYTE)((((DWORD_PTR)(0x0603)) >> 8) & 0xff)), ((BYTE)(((DWORD_PTR)(0x0603)) & 0xff)), 0))
    {
        if (_glfw.win32.shcore.GetDpiForMonitor_(handle, MDT_EFFECTIVE_DPI, &xdpi, &ydpi) != ((HRESULT)0L))
        {
            _glfwInputError(0x00010008, "Win32: Failed to query monitor DPI");
            return;
        }
    }
    else
    {
        const HDC dc = GetDC(0);
        xdpi = GetDeviceCaps(dc, 88);
        ydpi = GetDeviceCaps(dc, 90);
        ReleaseDC(0, dc);
    }

    if (xscale)
        *xscale = xdpi / (float) 96;
    if (yscale)
        *yscale = ydpi / (float) 96;
}






void _glfwFreeMonitorWin32(_GLFWmonitor* monitor)
{
}

void _glfwGetMonitorPosWin32(_GLFWmonitor* monitor, int* xpos, int* ypos)
{
    DEVMODEW dm;
    memset((&dm),0,(sizeof(dm)));
    dm.dmSize = sizeof(dm);

    EnumDisplaySettingsExW(monitor->win32.adapterName,
                           ((DWORD)-1),
                           &dm,
                           0x00000004);

    if (xpos)
        *xpos = dm.dmPosition.x;
    if (ypos)
        *ypos = dm.dmPosition.y;
}

void _glfwGetMonitorContentScaleWin32(_GLFWmonitor* monitor,
                                      float* xscale, float* yscale)
{
    _glfwGetHMONITORContentScaleWin32(monitor->win32.handle, xscale, yscale);
}

void _glfwGetMonitorWorkareaWin32(_GLFWmonitor* monitor,
                                  int* xpos, int* ypos,
                                  int* width, int* height)
{
    MONITORINFO mi = { sizeof(mi) };
    GetMonitorInfoW(monitor->win32.handle, &mi);

    if (xpos)
        *xpos = mi.rcWork.left;
    if (ypos)
        *ypos = mi.rcWork.top;
    if (width)
        *width = mi.rcWork.right - mi.rcWork.left;
    if (height)
        *height = mi.rcWork.bottom - mi.rcWork.top;
}

GLFWvidmode* _glfwGetVideoModesWin32(_GLFWmonitor* monitor, int* count)
{
    int modeIndex = 0, size = 0;
    GLFWvidmode* result = 0;

    *count = 0;

    for (;;)
    {
        int i;
        GLFWvidmode mode;
        DEVMODEW dm;

        memset((&dm),0,(sizeof(dm)));
        dm.dmSize = sizeof(dm);

        if (!EnumDisplaySettingsW(monitor->win32.adapterName, modeIndex, &dm))
            break;

        modeIndex++;


        if (dm.dmBitsPerPel < 15)
            continue;

        mode.width = dm.dmPelsWidth;
        mode.height = dm.dmPelsHeight;
        mode.refreshRate = dm.dmDisplayFrequency;
        _glfwSplitBPP(dm.dmBitsPerPel,
                      &mode.redBits,
                      &mode.greenBits,
                      &mode.blueBits);

        for (i = 0; i < *count; i++)
        {
            if (_glfwCompareVideoModes(result + i, &mode) == 0)
                break;
        }


        if (i < *count)
            continue;

        if (monitor->win32.modesPruned)
        {

            if (ChangeDisplaySettingsExW(monitor->win32.adapterName,
                                         &dm,
                                         0,
                                         0x00000002,
                                         0) != 0)
            {
                continue;
            }
        }

        if (*count == size)
        {
            size += 128;
            result = (GLFWvidmode*) _glfw_realloc(result, size * sizeof(GLFWvidmode));
        }

        (*count)++;
        result[*count - 1] = mode;
    }

    if (!*count)
    {

        result = _glfw_calloc(1, sizeof(GLFWvidmode));
        _glfwGetVideoModeWin32(monitor, result);
        *count = 1;
    }

    return result;
}

GLFWbool _glfwGetVideoModeWin32(_GLFWmonitor* monitor, GLFWvidmode* mode)
{
    DEVMODEW dm;
    memset((&dm),0,(sizeof(dm)));
    dm.dmSize = sizeof(dm);

    if (!EnumDisplaySettingsW(monitor->win32.adapterName, ((DWORD)-1), &dm))
    {
        _glfwInputError(0x00010008, "Win32: Failed to query display settings");
        return 0;
    }

    mode->width = dm.dmPelsWidth;
    mode->height = dm.dmPelsHeight;
    mode->refreshRate = dm.dmDisplayFrequency;
    _glfwSplitBPP(dm.dmBitsPerPel,
                  &mode->redBits,
                  &mode->greenBits,
                  &mode->blueBits);

    return 1;
}

GLFWbool _glfwGetGammaRampWin32(_GLFWmonitor* monitor, GLFWgammaramp* ramp)
{
    HDC dc;
    WORD values[3][256];

    dc = CreateDCW(L"DISPLAY", monitor->win32.adapterName, 0, 0);
    GetDeviceGammaRamp(dc, values);
    DeleteDC(dc);

    _glfwAllocGammaArrays(ramp, 256);

    memcpy(ramp->red, values[0], sizeof(values[0]));
    memcpy(ramp->green, values[1], sizeof(values[1]));
    memcpy(ramp->blue, values[2], sizeof(values[2]));

    return 1;
}

void _glfwSetGammaRampWin32(_GLFWmonitor* monitor, const GLFWgammaramp* ramp)
{
    HDC dc;
    WORD values[3][256];

    if (ramp->size != 256)
    {
        _glfwInputError(0x00010008,
                        "Win32: Gamma ramp size must be 256");
        return;
    }

    memcpy(values[0], ramp->red, sizeof(values[0]));
    memcpy(values[1], ramp->green, sizeof(values[1]));
    memcpy(values[2], ramp->blue, sizeof(values[2]));

    dc = CreateDCW(L"DISPLAY", monitor->win32.adapterName, 0, 0);
    SetDeviceGammaRamp(dc, values);
    DeleteDC(dc);
}






        const char* glfwGetWin32Adapter(GLFWmonitor* handle)
{
    _GLFWmonitor* monitor = (_GLFWmonitor*) handle;
    if (!_glfw.initialized) { _glfwInputError(0x00010001, 0); return 0; };

    if (_glfw.platform.platformID != 0x00060001)
    {
        _glfwInputError(0x0001000E, "Win32: Platform not initialized");
        return 0;
    }

    return monitor->win32.publicAdapterName;
}

        const char* glfwGetWin32Monitor(GLFWmonitor* handle)
{
    _GLFWmonitor* monitor = (_GLFWmonitor*) handle;
    if (!_glfw.initialized) { _glfwInputError(0x00010001, 0); return 0; };

    if (_glfw.platform.platformID != 0x00060001)
    {
        _glfwInputError(0x0001000E, "Win32: Platform not initialized");
        return 0;
    }

    return monitor->win32.publicDisplayName;
}
